
SoundSource.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000780c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006bbc  08007918  08007918  00017918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e4d4  0800e4d4  0002033c  2**0
                  CONTENTS
  4 .ARM          00000000  0800e4d4  0800e4d4  0002033c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e4d4  0800e4d4  0002033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e4d4  0800e4d4  0001e4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e4dc  0800e4dc  0001e4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  0800e4e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004500  2000033c  0800e81c  0002033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000483c  0800e81c  0002483c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026441  00000000  00000000  00020365  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004c1b  00000000  00000000  000467a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000108a8  00000000  00000000  0004b3c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000bd0  00000000  00000000  0005bc70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000038c0  00000000  00000000  0005c840  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00018788  00000000  00000000  00060100  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000ea0f  00000000  00000000  00078888  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00078fec  00000000  00000000  00087297  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00100283  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ac4  00000000  00000000  00100300  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000033c 	.word	0x2000033c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007900 	.word	0x08007900

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000340 	.word	0x20000340
 8000148:	08007900 	.word	0x08007900

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <_ZN6braids16AnalogOscillator14RenderTriangleEPKhPsPhj>:

void AnalogOscillator::RenderTriangle(
    const uint8_t* sync_in,
    int16_t* buffer,
    uint8_t* sync_out,
    size_t size) {
 8000160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 8000164:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
    size_t size) {
 8000168:	9f07      	ldr	r7, [sp, #28]
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 800016a:	42b3      	cmp	r3, r6
 800016c:	bf99      	ittee	ls
 800016e:	1af3      	subls	r3, r6, r3
 8000170:	fbb3 f3f7 	udivls	r3, r3, r7
 8000174:	1b9b      	subhi	r3, r3, r6
 8000176:	fbb3 f3f7 	udivhi	r3, r3, r7
 800017a:	bf98      	it	ls
 800017c:	43db      	mvnls	r3, r3
 800017e:	46b4      	mov	ip, r6
  uint32_t phase = phase_;
 8000180:	6804      	ldr	r4, [r0, #0]
 8000182:	eb01 0e07 	add.w	lr, r1, r7
  while (size--) {
 8000186:	4571      	cmp	r1, lr
 8000188:	d020      	beq.n	80001cc <_ZN6braids16AnalogOscillator14RenderTriangleEPKhPsPhj+0x6c>
    INTERPOLATE_PHASE_INCREMENT
    
    int16_t triangle;
    uint16_t phase_16;
    
    if (*sync_in++) {
 800018a:	f811 5b01 	ldrb.w	r5, [r1], #1
    INTERPOLATE_PHASE_INCREMENT
 800018e:	449c      	add	ip, r3
      phase = 0;
 8000190:	2d00      	cmp	r5, #0
 8000192:	bf18      	it	ne
 8000194:	2400      	movne	r4, #0
    }
    
    phase += phase_increment >> 1;
 8000196:	ea4f 095c 	mov.w	r9, ip, lsr #1
 800019a:	444c      	add	r4, r9
    phase_16 = phase >> 16;
 800019c:	0c25      	lsrs	r5, r4, #16
    triangle = (phase_16 << 1) ^ (phase_16 & 0x8000 ? 0xffff : 0x0000);
    triangle += 32768;
    *buffer = triangle >> 1;
    
    phase += phase_increment >> 1;
 800019e:	444c      	add	r4, r9
    triangle = (phase_16 << 1) ^ (phase_16 & 0x8000 ? 0xffff : 0x0000);
 80001a0:	f345 38c0 	sbfx	r8, r5, #15, #1
    phase_16 = phase >> 16;
 80001a4:	ea4f 4914 	mov.w	r9, r4, lsr #16
    triangle = (phase_16 << 1) ^ (phase_16 & 0x8000 ? 0xffff : 0x0000);
 80001a8:	ea88 0845 	eor.w	r8, r8, r5, lsl #1
    triangle = (phase_16 << 1) ^ (phase_16 & 0x8000 ? 0xffff : 0x0000);
 80001ac:	f349 35c0 	sbfx	r5, r9, #15, #1
 80001b0:	ea85 0549 	eor.w	r5, r5, r9, lsl #1
    triangle += 32768;
 80001b4:	f5a8 4800 	sub.w	r8, r8, #32768	; 0x8000
    triangle += 32768;
 80001b8:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
    *buffer = triangle >> 1;
 80001bc:	f348 084e 	sbfx	r8, r8, #1, #15
    *buffer++ += triangle >> 1;
 80001c0:	f345 054e 	sbfx	r5, r5, #1, #15
 80001c4:	4445      	add	r5, r8
 80001c6:	f822 5b02 	strh.w	r5, [r2], #2
  while (size--) {
 80001ca:	e7dc      	b.n	8000186 <_ZN6braids16AnalogOscillator14RenderTriangleEPKhPsPhj+0x26>
  }
  phase_ = phase;
  END_INTERPOLATE_PHASE_INCREMENT
 80001cc:	fb07 6303 	mla	r3, r7, r3, r6
  phase_ = phase;
 80001d0:	6004      	str	r4, [r0, #0]
  END_INTERPOLATE_PHASE_INCREMENT
 80001d2:	6083      	str	r3, [r0, #8]
}
 80001d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080001d8 <_ZN6braids16AnalogOscillator10RenderSineEPKhPsPhj>:

void AnalogOscillator::RenderSine(
    const uint8_t* sync_in,
    int16_t* buffer,
    uint8_t* sync_out,
    size_t size) {
 80001d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t phase = phase_;
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 80001dc:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
    size_t size) {
 80001e0:	9e09      	ldr	r6, [sp, #36]	; 0x24
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 80001e2:	42ab      	cmp	r3, r5
 80001e4:	bf99      	ittee	ls
 80001e6:	1aeb      	subls	r3, r5, r3
 80001e8:	fbb3 f3f6 	udivls	r3, r3, r6
 80001ec:	1b5b      	subhi	r3, r3, r5
 80001ee:	fbb3 f3f6 	udivhi	r3, r3, r6
 80001f2:	bf98      	it	ls
 80001f4:	43db      	mvnls	r3, r3
 80001f6:	46ae      	mov	lr, r5
inline uint16_t Mix(uint16_t a, uint16_t b, uint16_t balance) {
  return (a * (65535 - balance) + b * balance) >> 16;
}

inline int16_t Interpolate824(const int16_t* table, uint32_t phase) {
  int32_t a = table[phase >> 24];
 80001f8:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8000248 <_ZN6braids16AnalogOscillator10RenderSineEPKhPsPhj+0x70>
  uint32_t phase = phase_;
 80001fc:	6804      	ldr	r4, [r0, #0]
 80001fe:	eb01 0a06 	add.w	sl, r1, r6
  int32_t b = table[(phase >> 24) + 1];
 8000202:	f108 0902 	add.w	r9, r8, #2
  while (size--) {
 8000206:	4551      	cmp	r1, sl
 8000208:	d017      	beq.n	800023a <_ZN6braids16AnalogOscillator10RenderSineEPKhPsPhj+0x62>
    INTERPOLATE_PHASE_INCREMENT
    phase += phase_increment;
    if (*sync_in++) {
 800020a:	f811 7b01 	ldrb.w	r7, [r1], #1
    INTERPOLATE_PHASE_INCREMENT
 800020e:	449e      	add	lr, r3
    if (*sync_in++) {
 8000210:	b98f      	cbnz	r7, 8000236 <_ZN6braids16AnalogOscillator10RenderSineEPKhPsPhj+0x5e>
    phase += phase_increment;
 8000212:	4474      	add	r4, lr
  int32_t a = table[phase >> 24];
 8000214:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8000218:	f938 701c 	ldrsh.w	r7, [r8, ip, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 800021c:	f939 c01c 	ldrsh.w	ip, [r9, ip, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 8000220:	ebac 0b07 	sub.w	fp, ip, r7
 8000224:	f3c4 2c0f 	ubfx	ip, r4, #8, #16
 8000228:	fb0c fc0b 	mul.w	ip, ip, fp
 800022c:	eb07 472c 	add.w	r7, r7, ip, asr #16
      phase = 0;
    }
    *buffer++ = Interpolate824(wav_sine, phase);
 8000230:	f822 7b02 	strh.w	r7, [r2], #2
  while (size--) {
 8000234:	e7e7      	b.n	8000206 <_ZN6braids16AnalogOscillator10RenderSineEPKhPsPhj+0x2e>
      phase = 0;
 8000236:	2400      	movs	r4, #0
 8000238:	e7ec      	b.n	8000214 <_ZN6braids16AnalogOscillator10RenderSineEPKhPsPhj+0x3c>
  }
  END_INTERPOLATE_PHASE_INCREMENT
 800023a:	fb06 5303 	mla	r3, r6, r3, r5
  phase_ = phase;
 800023e:	6004      	str	r4, [r0, #0]
  END_INTERPOLATE_PHASE_INCREMENT
 8000240:	6083      	str	r3, [r0, #8]
}
 8000242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000246:	bf00      	nop
 8000248:	0800d336 	.word	0x0800d336

0800024c <_ZN6braids16AnalogOscillator18RenderTriangleFoldEPKhPsPhj>:

void AnalogOscillator::RenderTriangleFold(
    const uint8_t* sync_in,
    int16_t* buffer,
    uint8_t* sync_out,
    size_t size) {
 800024c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t phase = phase_;
  
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 8000250:	e9d0 4701 	ldrd	r4, r7, [r0, #4]
    size_t size) {
 8000254:	468b      	mov	fp, r1
  BEGIN_INTERPOLATE_PARAMETER
 8000256:	f647 71ff 	movw	r1, #32767	; 0x7fff
    size_t size) {
 800025a:	b087      	sub	sp, #28
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 800025c:	42bc      	cmp	r4, r7
    size_t size) {
 800025e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 8000262:	bf9c      	itt	ls
 8000264:	1b3c      	subls	r4, r7, r4
 8000266:	fbb4 f4fc 	udivls	r4, r4, ip
  BEGIN_INTERPOLATE_PARAMETER
 800026a:	fbb1 f1fc 	udiv	r1, r1, ip
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 800026e:	bf86      	itte	hi
 8000270:	1be4      	subhi	r4, r4, r7
 8000272:	fbb4 f4fc 	udivhi	r4, r4, ip
 8000276:	43e4      	mvnls	r4, r4
 8000278:	46ba      	mov	sl, r7
  BEGIN_INTERPOLATE_PARAMETER
 800027a:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
    size_t size) {
 800027e:	9201      	str	r2, [sp, #4]
  BEGIN_INTERPOLATE_PARAMETER
 8000280:	9303      	str	r3, [sp, #12]
 8000282:	9a03      	ldr	r2, [sp, #12]
 8000284:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
  uint32_t phase = phase_;
 8000288:	6805      	ldr	r5, [r0, #0]
  BEGIN_INTERPOLATE_PARAMETER
 800028a:	1a9b      	subs	r3, r3, r2
 800028c:	434b      	muls	r3, r1
 800028e:	9304      	str	r3, [sp, #16]
 8000290:	f8dd e010 	ldr.w	lr, [sp, #16]
 8000294:	eb0b 030c 	add.w	r3, fp, ip
  int32_t b = table[(index >> 8) + 1];
  return a + ((b - a) * static_cast<int32_t>(index & 0xff) >> 8);
}

inline int16_t Interpolate88(const int16_t* table, uint16_t index) {
  int32_t a = table[index >> 8];
 8000298:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8000370 <_ZN6braids16AnalogOscillator18RenderTriangleFoldEPKhPsPhj+0x124>
 800029c:	9305      	str	r3, [sp, #20]
  
  while (size--) {
 800029e:	9b05      	ldr	r3, [sp, #20]
 80002a0:	459b      	cmp	fp, r3
 80002a2:	d059      	beq.n	8000358 <_ZN6braids16AnalogOscillator18RenderTriangleFoldEPKhPsPhj+0x10c>
    
    uint16_t phase_16;
    int16_t triangle;
    int16_t gain = 2048 + (parameter * 30720 >> 15);
    
    if (*sync_in++) {
 80002a4:	f81b 1b01 	ldrb.w	r1, [fp], #1
    int16_t gain = 2048 + (parameter * 30720 >> 15);
 80002a8:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
      phase = 0;
 80002ac:	2900      	cmp	r1, #0
 80002ae:	bf18      	it	ne
 80002b0:	2500      	movne	r5, #0
    INTERPOLATE_PARAMETER
 80002b2:	9b03      	ldr	r3, [sp, #12]
    INTERPOLATE_PHASE_INCREMENT
 80002b4:	44a2      	add	sl, r4
    INTERPOLATE_PARAMETER
 80002b6:	eb03 33ee 	add.w	r3, r3, lr, asr #15
    int16_t gain = 2048 + (parameter * 30720 >> 15);
 80002ba:	4353      	muls	r3, r2
    }
    
    // 2x oversampled WF.
    phase += phase_increment >> 1;
 80002bc:	ea4f 025a 	mov.w	r2, sl, lsr #1
 80002c0:	4415      	add	r5, r2
    phase_16 = phase >> 16;
 80002c2:	0c2e      	lsrs	r6, r5, #16
    triangle = (phase_16 << 1) ^ (phase_16 & 0x8000 ? 0xffff : 0x0000);
 80002c4:	f346 31c0 	sbfx	r1, r6, #15, #1
 80002c8:	ea81 0146 	eor.w	r1, r1, r6, lsl #1
    int16_t gain = 2048 + (parameter * 30720 >> 15);
 80002cc:	13db      	asrs	r3, r3, #15
 80002ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
    triangle += 32768;
 80002d2:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
    int16_t gain = 2048 + (parameter * 30720 >> 15);
 80002d6:	b21b      	sxth	r3, r3
    triangle = triangle * gain >> 15;
 80002d8:	b209      	sxth	r1, r1
 80002da:	4359      	muls	r1, r3
    triangle = Interpolate88(ws_tri_fold, triangle + 32768);
 80002dc:	f3c1 31cf 	ubfx	r1, r1, #15, #16
    phase += phase_increment >> 1;
 80002e0:	9202      	str	r2, [sp, #8]
    triangle = Interpolate88(ws_tri_fold, triangle + 32768);
 80002e2:	f481 4100 	eor.w	r1, r1, #32768	; 0x8000
  int32_t b = table[(index >> 8) + 1];
 80002e6:	4a21      	ldr	r2, [pc, #132]	; (800036c <_ZN6braids16AnalogOscillator18RenderTriangleFoldEPKhPsPhj+0x120>)
  int32_t a = table[index >> 8];
 80002e8:	ea4f 2921 	mov.w	r9, r1, asr #8
 80002ec:	f938 6019 	ldrsh.w	r6, [r8, r9, lsl #1]
  int32_t b = table[(index >> 8) + 1];
 80002f0:	f932 9019 	ldrsh.w	r9, [r2, r9, lsl #1]
  return a + ((b - a) * static_cast<int32_t>(index & 0xff) >> 8);
 80002f4:	b2c9      	uxtb	r1, r1
 80002f6:	eba9 0906 	sub.w	r9, r9, r6
 80002fa:	fb01 f109 	mul.w	r1, r1, r9
 80002fe:	eb06 2621 	add.w	r6, r6, r1, asr #8
    *buffer = triangle >> 1;
 8000302:	9901      	ldr	r1, [sp, #4]
 8000304:	f346 064e 	sbfx	r6, r6, #1, #15
 8000308:	800e      	strh	r6, [r1, #0]
    
    phase += phase_increment >> 1;
 800030a:	9902      	ldr	r1, [sp, #8]
 800030c:	440d      	add	r5, r1
    phase_16 = phase >> 16;
 800030e:	ea4f 4915 	mov.w	r9, r5, lsr #16
    triangle = (phase_16 << 1) ^ (phase_16 & 0x8000 ? 0xffff : 0x0000);
 8000312:	f349 31c0 	sbfx	r1, r9, #15, #1
 8000316:	ea81 0149 	eor.w	r1, r1, r9, lsl #1
    triangle += 32768;
 800031a:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
    triangle = triangle * gain >> 15;
 800031e:	b209      	sxth	r1, r1
 8000320:	434b      	muls	r3, r1
    triangle = Interpolate88(ws_tri_fold, triangle + 32768);
 8000322:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8000326:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
  int32_t a = table[index >> 8];
 800032a:	ea4f 2923 	mov.w	r9, r3, asr #8
 800032e:	f938 1019 	ldrsh.w	r1, [r8, r9, lsl #1]
  int32_t b = table[(index >> 8) + 1];
 8000332:	f932 9019 	ldrsh.w	r9, [r2, r9, lsl #1]
  return a + ((b - a) * static_cast<int32_t>(index & 0xff) >> 8);
 8000336:	b2db      	uxtb	r3, r3
 8000338:	eba9 0901 	sub.w	r9, r9, r1
 800033c:	fb03 f309 	mul.w	r3, r3, r9
 8000340:	eb01 2323 	add.w	r3, r1, r3, asr #8
    *buffer++ += triangle >> 1;
 8000344:	f343 034e 	sbfx	r3, r3, #1, #15
 8000348:	441e      	add	r6, r3
 800034a:	9b01      	ldr	r3, [sp, #4]
 800034c:	f823 6b02 	strh.w	r6, [r3], #2
 8000350:	9301      	str	r3, [sp, #4]
 8000352:	9b04      	ldr	r3, [sp, #16]
 8000354:	449e      	add	lr, r3
  while (size--) {
 8000356:	e7a2      	b.n	800029e <_ZN6braids16AnalogOscillator18RenderTriangleFoldEPKhPsPhj+0x52>
  }
  
  END_INTERPOLATE_PARAMETER
  END_INTERPOLATE_PHASE_INCREMENT
 8000358:	fb0c 7404 	mla	r4, ip, r4, r7
  END_INTERPOLATE_PARAMETER
 800035c:	89c3      	ldrh	r3, [r0, #14]
  END_INTERPOLATE_PHASE_INCREMENT
 800035e:	6084      	str	r4, [r0, #8]
  END_INTERPOLATE_PARAMETER
 8000360:	8203      	strh	r3, [r0, #16]
    
  phase_ = phase;
 8000362:	6005      	str	r5, [r0, #0]
}
 8000364:	b007      	add	sp, #28
 8000366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800036a:	bf00      	nop
 800036c:	08007cd6 	.word	0x08007cd6
 8000370:	08007cd4 	.word	0x08007cd4

08000374 <_ZN6braids16AnalogOscillator14RenderSineFoldEPKhPsPhj>:

void AnalogOscillator::RenderSineFold(
    const uint8_t* sync_in,
    int16_t* buffer,
    uint8_t* sync_out,
    size_t size) {
 8000374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t phase = phase_;
  
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 8000378:	e9d0 4c01 	ldrd	r4, ip, [r0, #4]
    size_t size) {
 800037c:	4689      	mov	r9, r1
  BEGIN_INTERPOLATE_PARAMETER
 800037e:	f647 71ff 	movw	r1, #32767	; 0x7fff
    size_t size) {
 8000382:	b085      	sub	sp, #20
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 8000384:	4564      	cmp	r4, ip
 8000386:	bf9d      	ittte	ls
 8000388:	9b0e      	ldrls	r3, [sp, #56]	; 0x38
 800038a:	ebac 0404 	subls.w	r4, ip, r4
 800038e:	fbb4 f4f3 	udivls	r4, r4, r3
 8000392:	9b0e      	ldrhi	r3, [sp, #56]	; 0x38
 8000394:	bf84      	itt	hi
 8000396:	eba4 040c 	subhi.w	r4, r4, ip
 800039a:	fbb4 f4f3 	udivhi	r4, r4, r3
  BEGIN_INTERPOLATE_PARAMETER
 800039e:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
    size_t size) {
 80003a2:	9200      	str	r2, [sp, #0]
  BEGIN_INTERPOLATE_PARAMETER
 80003a4:	9301      	str	r3, [sp, #4]
 80003a6:	9a01      	ldr	r2, [sp, #4]
 80003a8:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 80003ac:	bf98      	it	ls
 80003ae:	43e4      	mvnls	r4, r4
  BEGIN_INTERPOLATE_PARAMETER
 80003b0:	1a9b      	subs	r3, r3, r2
 80003b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 80003b4:	46e6      	mov	lr, ip
  BEGIN_INTERPOLATE_PARAMETER
 80003b6:	fbb1 f1f2 	udiv	r1, r1, r2
 80003ba:	434b      	muls	r3, r1
 80003bc:	9302      	str	r3, [sp, #8]
  uint32_t phase = phase_;
 80003be:	6805      	ldr	r5, [r0, #0]
 80003c0:	eb09 0302 	add.w	r3, r9, r2
  BEGIN_INTERPOLATE_PARAMETER
 80003c4:	f8dd 8008 	ldr.w	r8, [sp, #8]
  int32_t a = table[phase >> 24];
 80003c8:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 80004c0 <_ZN6braids16AnalogOscillator14RenderSineFoldEPKhPsPhj+0x14c>
 80003cc:	9303      	str	r3, [sp, #12]
  
  while (size--) {
 80003ce:	9b03      	ldr	r3, [sp, #12]
 80003d0:	4599      	cmp	r9, r3
 80003d2:	d064      	beq.n	800049e <_ZN6braids16AnalogOscillator14RenderSineFoldEPKhPsPhj+0x12a>
    INTERPOLATE_PHASE_INCREMENT
    
    int16_t sine;
    int16_t gain = 2048 + (parameter * 30720 >> 15);
    
    if (*sync_in++) {
 80003d4:	f819 1b01 	ldrb.w	r1, [r9], #1
    int16_t gain = 2048 + (parameter * 30720 >> 15);
 80003d8:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
      phase = 0;
 80003dc:	2900      	cmp	r1, #0
 80003de:	bf18      	it	ne
 80003e0:	2500      	movne	r5, #0
    INTERPOLATE_PARAMETER
 80003e2:	9b01      	ldr	r3, [sp, #4]
    INTERPOLATE_PHASE_INCREMENT
 80003e4:	44a6      	add	lr, r4
    }
    
    // 2x oversampled WF.
    phase += phase_increment >> 1;
 80003e6:	ea4f 075e 	mov.w	r7, lr, lsr #1
    INTERPOLATE_PARAMETER
 80003ea:	eb03 33e8 	add.w	r3, r3, r8, asr #15
    phase += phase_increment >> 1;
 80003ee:	443d      	add	r5, r7
    int16_t gain = 2048 + (parameter * 30720 >> 15);
 80003f0:	4353      	muls	r3, r2
  int32_t b = table[(phase >> 24) + 1];
 80003f2:	4a30      	ldr	r2, [pc, #192]	; (80004b4 <_ZN6braids16AnalogOscillator14RenderSineFoldEPKhPsPhj+0x140>)
  int32_t a = table[phase >> 24];
 80003f4:	0e2e      	lsrs	r6, r5, #24
 80003f6:	f93a 1016 	ldrsh.w	r1, [sl, r6, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 80003fa:	f932 b016 	ldrsh.w	fp, [r2, r6, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 80003fe:	f3c5 260f 	ubfx	r6, r5, #8, #16
 8000402:	ebab 0b01 	sub.w	fp, fp, r1
 8000406:	fb06 f60b 	mul.w	r6, r6, fp
 800040a:	13db      	asrs	r3, r3, #15
 800040c:	eb01 4126 	add.w	r1, r1, r6, asr #16
 8000410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000414:	b21b      	sxth	r3, r3
    sine = Interpolate824(wav_sine, phase);
    sine = sine * gain >> 15;
 8000416:	b209      	sxth	r1, r1
 8000418:	4359      	muls	r1, r3
    sine = Interpolate88(ws_sine_fold, sine + 32768);
 800041a:	f3c1 31cf 	ubfx	r1, r1, #15, #16
 800041e:	f481 4100 	eor.w	r1, r1, #32768	; 0x8000
  int32_t b = table[(index >> 8) + 1];
 8000422:	4a25      	ldr	r2, [pc, #148]	; (80004b8 <_ZN6braids16AnalogOscillator14RenderSineFoldEPKhPsPhj+0x144>)
  int32_t a = table[index >> 8];
 8000424:	4e25      	ldr	r6, [pc, #148]	; (80004bc <_ZN6braids16AnalogOscillator14RenderSineFoldEPKhPsPhj+0x148>)
 8000426:	ea4f 2b21 	mov.w	fp, r1, asr #8
 800042a:	f936 601b 	ldrsh.w	r6, [r6, fp, lsl #1]
  int32_t b = table[(index >> 8) + 1];
 800042e:	f932 b01b 	ldrsh.w	fp, [r2, fp, lsl #1]
  return a + ((b - a) * static_cast<int32_t>(index & 0xff) >> 8);
 8000432:	b2c9      	uxtb	r1, r1
 8000434:	ebab 0b06 	sub.w	fp, fp, r6
 8000438:	fb01 f10b 	mul.w	r1, r1, fp
    *buffer = sine >> 1;
 800043c:	9a00      	ldr	r2, [sp, #0]
 800043e:	eb06 2621 	add.w	r6, r6, r1, asr #8
 8000442:	f346 064e 	sbfx	r6, r6, #1, #15
 8000446:	8016      	strh	r6, [r2, #0]
    
    phase += phase_increment >> 1;
 8000448:	443d      	add	r5, r7
  int32_t b = table[(phase >> 24) + 1];
 800044a:	4a1a      	ldr	r2, [pc, #104]	; (80004b4 <_ZN6braids16AnalogOscillator14RenderSineFoldEPKhPsPhj+0x140>)
  int32_t a = table[phase >> 24];
 800044c:	0e29      	lsrs	r1, r5, #24
 800044e:	f93a 7011 	ldrsh.w	r7, [sl, r1, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 8000452:	f932 b011 	ldrsh.w	fp, [r2, r1, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 8000456:	f3c5 210f 	ubfx	r1, r5, #8, #16
 800045a:	ebab 0b07 	sub.w	fp, fp, r7
 800045e:	fb01 f10b 	mul.w	r1, r1, fp
 8000462:	eb07 4121 	add.w	r1, r7, r1, asr #16
    sine = Interpolate824(wav_sine, phase);
    sine = sine * gain >> 15;
 8000466:	b209      	sxth	r1, r1
 8000468:	434b      	muls	r3, r1
    sine = Interpolate88(ws_sine_fold, sine + 32768);
 800046a:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 800046e:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
  int32_t a = table[index >> 8];
 8000472:	4a12      	ldr	r2, [pc, #72]	; (80004bc <_ZN6braids16AnalogOscillator14RenderSineFoldEPKhPsPhj+0x148>)
 8000474:	121f      	asrs	r7, r3, #8
 8000476:	f932 1017 	ldrsh.w	r1, [r2, r7, lsl #1]
  int32_t b = table[(index >> 8) + 1];
 800047a:	3202      	adds	r2, #2
 800047c:	f932 7017 	ldrsh.w	r7, [r2, r7, lsl #1]
  return a + ((b - a) * static_cast<int32_t>(index & 0xff) >> 8);
 8000480:	b2db      	uxtb	r3, r3
 8000482:	1a7f      	subs	r7, r7, r1
 8000484:	437b      	muls	r3, r7
 8000486:	eb01 2323 	add.w	r3, r1, r3, asr #8
    *buffer++ += sine >> 1;
 800048a:	f343 034e 	sbfx	r3, r3, #1, #15
 800048e:	441e      	add	r6, r3
 8000490:	9b00      	ldr	r3, [sp, #0]
 8000492:	f823 6b02 	strh.w	r6, [r3], #2
 8000496:	9300      	str	r3, [sp, #0]
 8000498:	9b02      	ldr	r3, [sp, #8]
 800049a:	4498      	add	r8, r3
  while (size--) {
 800049c:	e797      	b.n	80003ce <_ZN6braids16AnalogOscillator14RenderSineFoldEPKhPsPhj+0x5a>
  }
  
  END_INTERPOLATE_PARAMETER
 800049e:	89c3      	ldrh	r3, [r0, #14]
  END_INTERPOLATE_PHASE_INCREMENT
  
  phase_ = phase;
 80004a0:	6005      	str	r5, [r0, #0]
  END_INTERPOLATE_PARAMETER
 80004a2:	8203      	strh	r3, [r0, #16]
  END_INTERPOLATE_PHASE_INCREMENT
 80004a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80004a6:	fb03 c404 	mla	r4, r3, r4, ip
 80004aa:	6084      	str	r4, [r0, #8]
}
 80004ac:	b005      	add	sp, #20
 80004ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80004b2:	bf00      	nop
 80004b4:	0800d338 	.word	0x0800d338
 80004b8:	080082dc 	.word	0x080082dc
 80004bc:	080082da 	.word	0x080082da
 80004c0:	0800d336 	.word	0x0800d336

080004c4 <_ZN6braids16AnalogOscillator10RenderBuzzEPKhPsPhj>:
void AnalogOscillator::RenderBuzz(
    const uint8_t* sync_in,
    int16_t* buffer,
    uint8_t* sync_out,
    size_t size) {
  int32_t shifted_pitch = pitch_ + ((32767 - parameter_) >> 1);
 80004c4:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    size_t size) {
 80004c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int32_t shifted_pitch = pitch_ + ((32767 - parameter_) >> 1);
 80004cc:	f5c3 44ff 	rsb	r4, r3, #32640	; 0x7f80
 80004d0:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 80004d4:	347f      	adds	r4, #127	; 0x7f
 80004d6:	eb03 0364 	add.w	r3, r3, r4, asr #1
  uint16_t crossfade = shifted_pitch << 6;
 80004da:	019c      	lsls	r4, r3, #6
  size_t index = (shifted_pitch >> 10);
 80004dc:	129b      	asrs	r3, r3, #10
 80004de:	2b0e      	cmp	r3, #14
 80004e0:	bf28      	it	cs
 80004e2:	230e      	movcs	r3, #14
  if (index >= kNumZones) {
    index = kNumZones - 1;
  }
  const int16_t* wave_1 = waveform_table[WAV_BANDLIMITED_COMB_0 + index];
 80004e4:	1cde      	adds	r6, r3, #3
  index += 1;
 80004e6:	3301      	adds	r3, #1
  if (index >= kNumZones) {
    index = kNumZones - 1;
 80004e8:	2b0f      	cmp	r3, #15
 80004ea:	bf08      	it	eq
 80004ec:	230e      	moveq	r3, #14
  }
  const int16_t* wave_2 = waveform_table[WAV_BANDLIMITED_COMB_0 + index];
  while (size--) {
    phase_ += phase_increment_;
    if (*sync_in++) {
      phase_ = 0;
 80004ee:	f04f 0e00 	mov.w	lr, #0
  const int16_t* wave_1 = waveform_table[WAV_BANDLIMITED_COMB_0 + index];
 80004f2:	4d1f      	ldr	r5, [pc, #124]	; (8000570 <_ZN6braids16AnalogOscillator10RenderBuzzEPKhPsPhj+0xac>)
  const int16_t* wave_2 = waveform_table[WAV_BANDLIMITED_COMB_0 + index];
 80004f4:	3303      	adds	r3, #3
  const int16_t* wave_1 = waveform_table[WAV_BANDLIMITED_COMB_0 + index];
 80004f6:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
  const int16_t* wave_2 = waveform_table[WAV_BANDLIMITED_COMB_0 + index];
 80004fa:	f855 c023 	ldr.w	ip, [r5, r3, lsl #2]
 80004fe:	9d08      	ldr	r5, [sp, #32]
  uint16_t crossfade = shifted_pitch << 6;
 8000500:	b2a4      	uxth	r4, r4
 8000502:	440d      	add	r5, r1
  while (size--) {
 8000504:	42a9      	cmp	r1, r5
 8000506:	d030      	beq.n	800056a <_ZN6braids16AnalogOscillator10RenderBuzzEPKhPsPhj+0xa6>
    phase_ += phase_increment_;
 8000508:	e9d0 3700 	ldrd	r3, r7, [r0]
 800050c:	443b      	add	r3, r7
 800050e:	6003      	str	r3, [r0, #0]
    if (*sync_in++) {
 8000510:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000514:	b10b      	cbz	r3, 800051a <_ZN6braids16AnalogOscillator10RenderBuzzEPKhPsPhj+0x56>
      phase_ = 0;
 8000516:	f8c0 e000 	str.w	lr, [r0]
    }
    *buffer++ = Crossfade(wave_1, wave_2, phase_, crossfade);
 800051a:	6803      	ldr	r3, [r0, #0]
  int32_t a = table[phase >> 24];
 800051c:	ea4f 6a13 	mov.w	sl, r3, lsr #24
 8000520:	ea4f 094a 	mov.w	r9, sl, lsl #1
  int32_t b = table[(phase >> 24) + 1];
 8000524:	f109 0902 	add.w	r9, r9, #2
  int32_t a = table[phase >> 24];
 8000528:	f936 701a 	ldrsh.w	r7, [r6, sl, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 800052c:	f3c3 280f 	ubfx	r8, r3, #8, #16
  int32_t b = table[(phase >> 24) + 1];
 8000530:	f936 3009 	ldrsh.w	r3, [r6, r9]
 8000534:	f93c 9009 	ldrsh.w	r9, [ip, r9]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	fb08 f303 	mul.w	r3, r8, r3
 800053e:	eb07 4723 	add.w	r7, r7, r3, asr #16
  int32_t a = table[phase >> 24];
 8000542:	f93c 301a 	ldrsh.w	r3, [ip, sl, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 8000546:	b2bf      	uxth	r7, r7
 8000548:	eba9 0903 	sub.w	r9, r9, r3
 800054c:	fb08 f809 	mul.w	r8, r8, r9
 8000550:	eb03 4328 	add.w	r3, r3, r8, asr #16
    const int16_t* table_a,
    const int16_t* table_b,
    uint32_t phase,
    uint16_t balance) {
  int32_t a = Interpolate824(table_a, phase);
  int32_t b = Interpolate824(table_b, phase);
 8000554:	b21b      	sxth	r3, r3
  int32_t a = Interpolate824(table_a, phase);
 8000556:	fa0f f887 	sxth.w	r8, r7
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 800055a:	eba3 0308 	sub.w	r3, r3, r8
 800055e:	4363      	muls	r3, r4
 8000560:	eb07 4323 	add.w	r3, r7, r3, asr #16
 8000564:	f822 3b02 	strh.w	r3, [r2], #2
  while (size--) {
 8000568:	e7cc      	b.n	8000504 <_ZN6braids16AnalogOscillator10RenderBuzzEPKhPsPhj+0x40>
  }
}
 800056a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056e:	bf00      	nop
 8000570:	200002e0 	.word	0x200002e0

08000574 <_ZN6braids16AnalogOscillator14ThisBlepSampleEm.isra.0>:
  void RenderSineFold(const uint8_t*, int16_t*, uint8_t*, size_t);
  void RenderBuzz(const uint8_t*, int16_t*, uint8_t*, size_t);
  
  uint32_t ComputePhaseIncrement(int16_t midi_pitch);
  
  inline int32_t ThisBlepSample(uint32_t t) {
 8000574:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000578:	4298      	cmp	r0, r3
 800057a:	bf28      	it	cs
 800057c:	4618      	movcs	r0, r3
    if (t > 65535) {
      t = 65535;
    }
    return t * t >> 18;
 800057e:	4340      	muls	r0, r0
  }
 8000580:	0c80      	lsrs	r0, r0, #18
 8000582:	4770      	bx	lr

08000584 <_ZN6braids16AnalogOscillator14NextBlepSampleEm.isra.1>:
  
  inline int32_t NextBlepSample(uint32_t t) {
 8000584:	f64f 73ff 	movw	r3, #65535	; 0xffff
    if (t > 65535) {
      t = 65535;
    }
    t = 65535 - t;
 8000588:	4298      	cmp	r0, r3
 800058a:	bf94      	ite	ls
 800058c:	1a1b      	subls	r3, r3, r0
 800058e:	1adb      	subhi	r3, r3, r3
    return -static_cast<int32_t>(t * t >> 18);
 8000590:	435b      	muls	r3, r3
 8000592:	0c98      	lsrs	r0, r3, #18
  }
 8000594:	4240      	negs	r0, r0
 8000596:	4770      	bx	lr

08000598 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj>:
    size_t size) {
 8000598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800059c:	461e      	mov	r6, r3
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 800059e:	e9d0 3a01 	ldrd	r3, sl, [r0, #4]
    size_t size) {
 80005a2:	b089      	sub	sp, #36	; 0x24
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 80005a4:	4553      	cmp	r3, sl
    size_t size) {
 80005a6:	9205      	str	r2, [sp, #20]
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 80005a8:	bf9d      	ittte	ls
 80005aa:	9a12      	ldrls	r2, [sp, #72]	; 0x48
 80005ac:	ebaa 0303 	subls.w	r3, sl, r3
 80005b0:	fbb3 f3f2 	udivls	r3, r3, r2
 80005b4:	9a12      	ldrhi	r2, [sp, #72]	; 0x48
 80005b6:	bf86      	itte	hi
 80005b8:	eba3 030a 	subhi.w	r3, r3, sl
 80005bc:	fbb3 f3f2 	udivhi	r3, r3, r2
 80005c0:	43db      	mvnls	r3, r3
 80005c2:	9304      	str	r3, [sp, #16]
 80005c4:	460b      	mov	r3, r1
    size_t size) {
 80005c6:	4604      	mov	r4, r0
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 80005c8:	46d0      	mov	r8, sl
 80005ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
  int32_t next_sample = next_sample_;
 80005cc:	6985      	ldr	r5, [r0, #24]
 80005ce:	4413      	add	r3, r2
 80005d0:	9103      	str	r1, [sp, #12]
 80005d2:	9306      	str	r3, [sp, #24]
  while (size--) {
 80005d4:	9b06      	ldr	r3, [sp, #24]
 80005d6:	9a03      	ldr	r2, [sp, #12]
 80005d8:	4293      	cmp	r3, r2
 80005da:	f000 80bb 	beq.w	8000754 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x1bc>
    uint32_t pw = static_cast<uint32_t>(parameter_) * 49152;
 80005de:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    INTERPOLATE_PHASE_INCREMENT
 80005e2:	9b04      	ldr	r3, [sp, #16]
 80005e4:	6827      	ldr	r7, [r4, #0]
 80005e6:	4498      	add	r8, r3
    uint32_t pw = static_cast<uint32_t>(parameter_) * 49152;
 80005e8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80005ec:	4353      	muls	r3, r2
 80005ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80005f2:	429a      	cmp	r2, r3
 80005f4:	bf38      	it	cc
 80005f6:	461a      	movcc	r2, r3
    if (*sync_in) {
 80005f8:	9b03      	ldr	r3, [sp, #12]
 80005fa:	4693      	mov	fp, r2
 80005fc:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000600:	9303      	str	r3, [sp, #12]
 8000602:	ea4f 4318 	mov.w	r3, r8, lsr #16
 8000606:	9302      	str	r3, [sp, #8]
 8000608:	2900      	cmp	r1, #0
 800060a:	f000 8084 	beq.w	8000716 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x17e>
      reset_time = static_cast<uint32_t>(*sync_in - 1) << 9;
 800060e:	3901      	subs	r1, #1
 8000610:	0249      	lsls	r1, r1, #9
          (65535 - reset_time) * (phase_increment >> 16);
 8000612:	f5c1 427f 	rsb	r2, r1, #65280	; 0xff00
 8000616:	32ff      	adds	r2, #255	; 0xff
 8000618:	435a      	muls	r2, r3
 800061a:	19d0      	adds	r0, r2, r7
 800061c:	d207      	bcs.n	800062e <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x96>
      if (phase_at_reset < phase_ || (!high_ && phase_at_reset >= pw)) {
 800061e:	7b23      	ldrb	r3, [r4, #12]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d176      	bne.n	8000712 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x17a>
 8000624:	4583      	cmp	fp, r0
 8000626:	bf8c      	ite	hi
 8000628:	2300      	movhi	r3, #0
 800062a:	2301      	movls	r3, #1
 800062c:	e000      	b.n	8000630 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x98>
        transition_during_reset = true;
 800062e:	2301      	movs	r3, #1
      if (phase_ >= pw) {
 8000630:	45bb      	cmp	fp, r7
      transition_during_reset = false;
 8000632:	9301      	str	r3, [sp, #4]
      if (phase_ >= pw) {
 8000634:	d873      	bhi.n	800071e <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x186>
        discontinuity_depth_ = -2048 + (aux_parameter_ >> 2);
 8000636:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 800063a:	1092      	asrs	r2, r2, #2
 800063c:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8000640:	b212      	sxth	r2, r2
 8000642:	82a2      	strh	r2, [r4, #20]
        int32_t discontinuity = after - before;
 8000644:	eba2 4290 	sub.w	r2, r2, r0, lsr #18
        this_sample += discontinuity * ThisBlepSample(reset_time) >> 15;
 8000648:	4608      	mov	r0, r1
 800064a:	f7ff ff93 	bl	8000574 <_ZN6braids16AnalogOscillator14ThisBlepSampleEm.isra.0>
 800064e:	4350      	muls	r0, r2
 8000650:	eb05 35e0 	add.w	r5, r5, r0, asr #15
        next_sample += discontinuity * NextBlepSample(reset_time) >> 15;
 8000654:	4608      	mov	r0, r1
 8000656:	f7ff ff95 	bl	8000584 <_ZN6braids16AnalogOscillator14NextBlepSampleEm.isra.1>
      sync_reset = true;
 800065a:	2301      	movs	r3, #1
        next_sample += discontinuity * NextBlepSample(reset_time) >> 15;
 800065c:	4342      	muls	r2, r0
      sync_reset = true;
 800065e:	9300      	str	r3, [sp, #0]
        next_sample += discontinuity * NextBlepSample(reset_time) >> 15;
 8000660:	13d2      	asrs	r2, r2, #15
 8000662:	eb18 0307 	adds.w	r3, r8, r7
 8000666:	bf2c      	ite	cs
 8000668:	2701      	movcs	r7, #1
 800066a:	2700      	movcc	r7, #0
    phase_ += phase_increment;
 800066c:	6023      	str	r3, [r4, #0]
    if (phase_ < phase_increment) {
 800066e:	2f00      	cmp	r7, #0
 8000670:	d179      	bne.n	8000766 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x1ce>
    if (sync_out) {
 8000672:	2e00      	cmp	r6, #0
 8000674:	d04b      	beq.n	800070e <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x176>
        *sync_out++ = 0;
 8000676:	7037      	strb	r7, [r6, #0]
 8000678:	3601      	adds	r6, #1
    while (transition_during_reset || !sync_reset) {
 800067a:	9b01      	ldr	r3, [sp, #4]
 800067c:	b913      	cbnz	r3, 8000684 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0xec>
 800067e:	9b00      	ldr	r3, [sp, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d151      	bne.n	8000728 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x190>
      if (!high_) {
 8000684:	7b23      	ldrb	r3, [r4, #12]
 8000686:	bb03      	cbnz	r3, 80006ca <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x132>
        if (phase_ < pw) {
 8000688:	6820      	ldr	r0, [r4, #0]
 800068a:	4583      	cmp	fp, r0
 800068c:	d875      	bhi.n	800077a <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x1e2>
        uint32_t t = (phase_ - pw) / (phase_increment >> 16);
 800068e:	9b02      	ldr	r3, [sp, #8]
 8000690:	eba0 0c0b 	sub.w	ip, r0, fp
 8000694:	fbbc f3f3 	udiv	r3, ip, r3
        int16_t discontinuity = after - before;
 8000698:	f8b4 9014 	ldrh.w	r9, [r4, #20]
        this_sample += discontinuity * ThisBlepSample(t) >> 15;
 800069c:	9307      	str	r3, [sp, #28]
        int16_t discontinuity = after - before;
 800069e:	ebc9 4990 	rsb	r9, r9, r0, lsr #18
        this_sample += discontinuity * ThisBlepSample(t) >> 15;
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff66 	bl	8000574 <_ZN6braids16AnalogOscillator14ThisBlepSampleEm.isra.0>
 80006a8:	fa0f f989 	sxth.w	r9, r9
 80006ac:	fb00 f009 	mul.w	r0, r0, r9
        next_sample += discontinuity * NextBlepSample(t) >> 15;
 80006b0:	9b07      	ldr	r3, [sp, #28]
        this_sample += discontinuity * ThisBlepSample(t) >> 15;
 80006b2:	eb05 35e0 	add.w	r5, r5, r0, asr #15
        next_sample += discontinuity * NextBlepSample(t) >> 15;
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ff64 	bl	8000584 <_ZN6braids16AnalogOscillator14NextBlepSampleEm.isra.1>
        high_ = true;
 80006bc:	f04f 0301 	mov.w	r3, #1
        next_sample += discontinuity * NextBlepSample(t) >> 15;
 80006c0:	fb00 f009 	mul.w	r0, r0, r9
        high_ = true;
 80006c4:	7323      	strb	r3, [r4, #12]
        next_sample += discontinuity * NextBlepSample(t) >> 15;
 80006c6:	eb02 32e0 	add.w	r2, r2, r0, asr #15
      if (high_) {
 80006ca:	7b23      	ldrb	r3, [r4, #12]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d0d4      	beq.n	800067a <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0xe2>
        if (!self_reset) {
 80006d0:	b347      	cbz	r7, 8000724 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x18c>
        discontinuity_depth_ = -2048 + (aux_parameter_ >> 2);
 80006d2:	f9b4 7012 	ldrsh.w	r7, [r4, #18]
        uint32_t t = phase_ / (phase_increment >> 16);
 80006d6:	9802      	ldr	r0, [sp, #8]
        discontinuity_depth_ = -2048 + (aux_parameter_ >> 2);
 80006d8:	f3c7 078f 	ubfx	r7, r7, #2, #16
 80006dc:	f5a7 6300 	sub.w	r3, r7, #2048	; 0x800
 80006e0:	82a3      	strh	r3, [r4, #20]
        uint32_t t = phase_ / (phase_increment >> 16);
 80006e2:	6823      	ldr	r3, [r4, #0]
        int16_t discontinuity = after - before;
 80006e4:	f5a7 478f 	sub.w	r7, r7, #18304	; 0x4780
        uint32_t t = phase_ / (phase_increment >> 16);
 80006e8:	fbb3 f9f0 	udiv	r9, r3, r0
        this_sample += discontinuity * ThisBlepSample(t) >> 15;
 80006ec:	4648      	mov	r0, r9
 80006ee:	f7ff ff41 	bl	8000574 <_ZN6braids16AnalogOscillator14ThisBlepSampleEm.isra.0>
        int16_t discontinuity = after - before;
 80006f2:	3f7f      	subs	r7, #127	; 0x7f
        this_sample += discontinuity * ThisBlepSample(t) >> 15;
 80006f4:	b23f      	sxth	r7, r7
 80006f6:	4378      	muls	r0, r7
 80006f8:	eb05 35e0 	add.w	r5, r5, r0, asr #15
        next_sample += discontinuity * NextBlepSample(t) >> 15;
 80006fc:	4648      	mov	r0, r9
 80006fe:	f7ff ff41 	bl	8000584 <_ZN6braids16AnalogOscillator14NextBlepSampleEm.isra.1>
        high_ = false;
 8000702:	f04f 0300 	mov.w	r3, #0
        next_sample += discontinuity * NextBlepSample(t) >> 15;
 8000706:	4378      	muls	r0, r7
        high_ = false;
 8000708:	7323      	strb	r3, [r4, #12]
        next_sample += discontinuity * NextBlepSample(t) >> 15;
 800070a:	eb02 32e0 	add.w	r2, r2, r0, asr #15
        self_reset = false;
 800070e:	2700      	movs	r7, #0
 8000710:	e7b3      	b.n	800067a <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0xe2>
      transition_during_reset = false;
 8000712:	2300      	movs	r3, #0
 8000714:	e78c      	b.n	8000630 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x98>
    bool sync_reset = false;
 8000716:	e9cd 1100 	strd	r1, r1, [sp]
    next_sample = 0;
 800071a:	2200      	movs	r2, #0
 800071c:	e7a1      	b.n	8000662 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0xca>
      sync_reset = true;
 800071e:	2301      	movs	r3, #1
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	e7fa      	b.n	800071a <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x182>
    if (sync_reset) {
 8000724:	9b00      	ldr	r3, [sp, #0]
 8000726:	b12b      	cbz	r3, 8000734 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x19c>
      phase_ = reset_time * (phase_increment >> 16);
 8000728:	9b02      	ldr	r3, [sp, #8]
 800072a:	434b      	muls	r3, r1
 800072c:	6023      	str	r3, [r4, #0]
      high_ = false;
 800072e:	f04f 0300 	mov.w	r3, #0
 8000732:	7323      	strb	r3, [r4, #12]
    next_sample += phase_ < pw
 8000734:	6823      	ldr	r3, [r4, #0]
        ? discontinuity_depth_
 8000736:	459b      	cmp	fp, r3
 8000738:	d90a      	bls.n	8000750 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x1b8>
 800073a:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
    *buffer++ = (this_sample - 8192) << 1;
 800073e:	9905      	ldr	r1, [sp, #20]
 8000740:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
 8000744:	006d      	lsls	r5, r5, #1
 8000746:	f821 5b02 	strh.w	r5, [r1], #2
 800074a:	9105      	str	r1, [sp, #20]
    next_sample += phase_ < pw
 800074c:	18d5      	adds	r5, r2, r3
  while (size--) {
 800074e:	e741      	b.n	80005d4 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x3c>
        ? discontinuity_depth_
 8000750:	0c9b      	lsrs	r3, r3, #18
 8000752:	e7f4      	b.n	800073e <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x1a6>
  END_INTERPOLATE_PHASE_INCREMENT
 8000754:	9b04      	ldr	r3, [sp, #16]
 8000756:	9a12      	ldr	r2, [sp, #72]	; 0x48
  next_sample_ = next_sample;
 8000758:	61a5      	str	r5, [r4, #24]
  END_INTERPOLATE_PHASE_INCREMENT
 800075a:	fb02 a303 	mla	r3, r2, r3, sl
 800075e:	60a3      	str	r3, [r4, #8]
}
 8000760:	b009      	add	sp, #36	; 0x24
 8000762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (sync_out) {
 8000766:	b136      	cbz	r6, 8000776 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x1de>
        *sync_out++ = phase_ / (phase_increment >> 7) + 1;
 8000768:	ea4f 17d8 	mov.w	r7, r8, lsr #7
 800076c:	fbb3 f7f7 	udiv	r7, r3, r7
 8000770:	3701      	adds	r7, #1
 8000772:	7037      	strb	r7, [r6, #0]
 8000774:	3601      	adds	r6, #1
      self_reset = true;
 8000776:	2701      	movs	r7, #1
 8000778:	e77f      	b.n	800067a <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0xe2>
    if (sync_reset) {
 800077a:	9b00      	ldr	r3, [sp, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d0dc      	beq.n	800073a <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x1a2>
 8000780:	e7d2      	b.n	8000728 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x190>

08000782 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj>:
    size_t size) {
 8000782:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000786:	461e      	mov	r6, r3
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 8000788:	e9d0 3a01 	ldrd	r3, sl, [r0, #4]
    size_t size) {
 800078c:	b089      	sub	sp, #36	; 0x24
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 800078e:	4553      	cmp	r3, sl
    size_t size) {
 8000790:	9205      	str	r2, [sp, #20]
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 8000792:	bf9d      	ittte	ls
 8000794:	9a12      	ldrls	r2, [sp, #72]	; 0x48
 8000796:	ebaa 0303 	subls.w	r3, sl, r3
 800079a:	fbb3 f3f2 	udivls	r3, r3, r2
 800079e:	9a12      	ldrhi	r2, [sp, #72]	; 0x48
 80007a0:	bf86      	itte	hi
 80007a2:	eba3 030a 	subhi.w	r3, r3, sl
 80007a6:	fbb3 f3f2 	udivhi	r3, r3, r2
 80007aa:	43db      	mvnls	r3, r3
 80007ac:	9304      	str	r3, [sp, #16]
  if (parameter_ > 32000) {
 80007ae:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    size_t size) {
 80007b2:	4604      	mov	r4, r0
  if (parameter_ > 32000) {
 80007b4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
    parameter_ = 32000;
 80007b8:	bfc4      	itt	gt
 80007ba:	f44f 43fa 	movgt.w	r3, #32000	; 0x7d00
 80007be:	81c3      	strhgt	r3, [r0, #14]
 80007c0:	460b      	mov	r3, r1
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 80007c2:	46d3      	mov	fp, sl
 80007c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  int32_t next_sample = next_sample_;
 80007c6:	6985      	ldr	r5, [r0, #24]
 80007c8:	4413      	add	r3, r2
 80007ca:	9101      	str	r1, [sp, #4]
 80007cc:	9306      	str	r3, [sp, #24]
  while (size--) {
 80007ce:	9b01      	ldr	r3, [sp, #4]
 80007d0:	9a06      	ldr	r2, [sp, #24]
 80007d2:	4293      	cmp	r3, r2
 80007d4:	f000 8093 	beq.w	80008fe <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x17c>
    INTERPOLATE_PHASE_INCREMENT
 80007d8:	9b04      	ldr	r3, [sp, #16]
    uint32_t pw = static_cast<uint32_t>(32768 - parameter_) << 16;
 80007da:	f9b4 700e 	ldrsh.w	r7, [r4, #14]
    INTERPOLATE_PHASE_INCREMENT
 80007de:	449b      	add	fp, r3
    if (*sync_in) {
 80007e0:	9b01      	ldr	r3, [sp, #4]
    uint32_t pw = static_cast<uint32_t>(32768 - parameter_) << 16;
 80007e2:	f5c7 4700 	rsb	r7, r7, #32768	; 0x8000
    if (*sync_in) {
 80007e6:	f813 2b01 	ldrb.w	r2, [r3], #1
    uint32_t pw = static_cast<uint32_t>(32768 - parameter_) << 16;
 80007ea:	043f      	lsls	r7, r7, #16
    if (*sync_in) {
 80007ec:	9301      	str	r3, [sp, #4]
 80007ee:	ea4f 431b 	mov.w	r3, fp, lsr #16
 80007f2:	f8d4 8000 	ldr.w	r8, [r4]
 80007f6:	9303      	str	r3, [sp, #12]
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	d061      	beq.n	80008c0 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x13e>
      reset_time = static_cast<uint32_t>(*sync_in - 1) << 9;
 80007fc:	3a01      	subs	r2, #1
 80007fe:	0252      	lsls	r2, r2, #9
          (65535 - reset_time) * (phase_increment >> 16);
 8000800:	f5c2 437f 	rsb	r3, r2, #65280	; 0xff00
 8000804:	9903      	ldr	r1, [sp, #12]
 8000806:	33ff      	adds	r3, #255	; 0xff
 8000808:	434b      	muls	r3, r1
 800080a:	eb13 0308 	adds.w	r3, r3, r8
 800080e:	d207      	bcs.n	8000820 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x9e>
      if (phase_at_reset < phase_ || (!high_ && phase_at_reset >= pw)) {
 8000810:	7b21      	ldrb	r1, [r4, #12]
 8000812:	2900      	cmp	r1, #0
 8000814:	d152      	bne.n	80008bc <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x13a>
 8000816:	429f      	cmp	r7, r3
 8000818:	bf8c      	ite	hi
 800081a:	2100      	movhi	r1, #0
 800081c:	2101      	movls	r1, #1
 800081e:	e000      	b.n	8000822 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0xa0>
        transition_during_reset = true;
 8000820:	2101      	movs	r1, #1
      if (phase_at_reset >= pw) {
 8000822:	429f      	cmp	r7, r3
    bool transition_during_reset = false;
 8000824:	9102      	str	r1, [sp, #8]
      if (phase_at_reset >= pw) {
 8000826:	d850      	bhi.n	80008ca <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x148>
        this_sample -= ThisBlepSample(reset_time);
 8000828:	4610      	mov	r0, r2
 800082a:	f7ff fea3 	bl	8000574 <_ZN6braids16AnalogOscillator14ThisBlepSampleEm.isra.0>
 800082e:	1a2d      	subs	r5, r5, r0
        next_sample -= NextBlepSample(reset_time);
 8000830:	4610      	mov	r0, r2
 8000832:	f7ff fea7 	bl	8000584 <_ZN6braids16AnalogOscillator14NextBlepSampleEm.isra.1>
      sync_reset = true;
 8000836:	2101      	movs	r1, #1
        next_sample -= NextBlepSample(reset_time);
 8000838:	f1c0 0900 	rsb	r9, r0, #0
 800083c:	eb1b 0308 	adds.w	r3, fp, r8
 8000840:	bf2c      	ite	cs
 8000842:	2001      	movcs	r0, #1
 8000844:	2000      	movcc	r0, #0
    phase_ += phase_increment;
 8000846:	6023      	str	r3, [r4, #0]
    if (phase_ < phase_increment) {
 8000848:	2800      	cmp	r0, #0
 800084a:	d161      	bne.n	8000910 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x18e>
    if (sync_out) {
 800084c:	2e00      	cmp	r6, #0
 800084e:	d032      	beq.n	80008b6 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x134>
    bool self_reset = false;
 8000850:	4680      	mov	r8, r0
        *sync_out++ = 0;
 8000852:	7030      	strb	r0, [r6, #0]
 8000854:	3601      	adds	r6, #1
    while (transition_during_reset || !sync_reset) {
 8000856:	9b02      	ldr	r3, [sp, #8]
 8000858:	b90b      	cbnz	r3, 800085e <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0xdc>
 800085a:	2900      	cmp	r1, #0
 800085c:	d138      	bne.n	80008d0 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x14e>
      if (!high_) {
 800085e:	7b23      	ldrb	r3, [r4, #12]
 8000860:	b99b      	cbnz	r3, 800088a <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x108>
        if (phase_ < pw) {
 8000862:	6823      	ldr	r3, [r4, #0]
 8000864:	42bb      	cmp	r3, r7
 8000866:	d360      	bcc.n	800092a <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x1a8>
        uint32_t t = (phase_ - pw) / (phase_increment >> 16);
 8000868:	9803      	ldr	r0, [sp, #12]
 800086a:	1bdb      	subs	r3, r3, r7
 800086c:	fbb3 f3f0 	udiv	r3, r3, r0
        this_sample += ThisBlepSample(t);
 8000870:	4618      	mov	r0, r3
 8000872:	9307      	str	r3, [sp, #28]
 8000874:	f7ff fe7e 	bl	8000574 <_ZN6braids16AnalogOscillator14ThisBlepSampleEm.isra.0>
        next_sample += NextBlepSample(t);
 8000878:	9b07      	ldr	r3, [sp, #28]
        this_sample += ThisBlepSample(t);
 800087a:	4405      	add	r5, r0
        next_sample += NextBlepSample(t);
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fe81 	bl	8000584 <_ZN6braids16AnalogOscillator14NextBlepSampleEm.isra.1>
        high_ = true;
 8000882:	f04f 0301 	mov.w	r3, #1
        next_sample += NextBlepSample(t);
 8000886:	4481      	add	r9, r0
        high_ = true;
 8000888:	7323      	strb	r3, [r4, #12]
      if (high_) {
 800088a:	7b23      	ldrb	r3, [r4, #12]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d0e2      	beq.n	8000856 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0xd4>
        if (!self_reset) {
 8000890:	f1b8 0f00 	cmp.w	r8, #0
 8000894:	d01b      	beq.n	80008ce <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x14c>
        uint32_t t = phase_ / (phase_increment >> 16);
 8000896:	6823      	ldr	r3, [r4, #0]
 8000898:	9803      	ldr	r0, [sp, #12]
 800089a:	fbb3 f8f0 	udiv	r8, r3, r0
        this_sample -= ThisBlepSample(t);
 800089e:	4640      	mov	r0, r8
 80008a0:	f7ff fe68 	bl	8000574 <_ZN6braids16AnalogOscillator14ThisBlepSampleEm.isra.0>
 80008a4:	1a2d      	subs	r5, r5, r0
        next_sample -= NextBlepSample(t);
 80008a6:	4640      	mov	r0, r8
 80008a8:	f7ff fe6c 	bl	8000584 <_ZN6braids16AnalogOscillator14NextBlepSampleEm.isra.1>
        high_ = false;
 80008ac:	f04f 0300 	mov.w	r3, #0
        next_sample -= NextBlepSample(t);
 80008b0:	eba9 0900 	sub.w	r9, r9, r0
        high_ = false;
 80008b4:	7323      	strb	r3, [r4, #12]
        self_reset = false;
 80008b6:	f04f 0800 	mov.w	r8, #0
 80008ba:	e7cc      	b.n	8000856 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0xd4>
    bool transition_during_reset = false;
 80008bc:	2100      	movs	r1, #0
 80008be:	e7b0      	b.n	8000822 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0xa0>
    bool sync_reset = false;
 80008c0:	4611      	mov	r1, r2
    bool transition_during_reset = false;
 80008c2:	9202      	str	r2, [sp, #8]
    next_sample = 0;
 80008c4:	f04f 0900 	mov.w	r9, #0
 80008c8:	e7b8      	b.n	800083c <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0xba>
      sync_reset = true;
 80008ca:	2101      	movs	r1, #1
 80008cc:	e7fa      	b.n	80008c4 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x142>
    if (sync_reset) {
 80008ce:	b129      	cbz	r1, 80008dc <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x15a>
      phase_ = reset_time * (phase_increment >> 16);
 80008d0:	9b03      	ldr	r3, [sp, #12]
 80008d2:	4353      	muls	r3, r2
 80008d4:	6023      	str	r3, [r4, #0]
      high_ = false;
 80008d6:	f04f 0300 	mov.w	r3, #0
 80008da:	7323      	strb	r3, [r4, #12]
    next_sample += phase_ < pw ? 0 : 32767;
 80008dc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80008e0:	6821      	ldr	r1, [r4, #0]
 80008e2:	42b9      	cmp	r1, r7
 80008e4:	bf38      	it	cc
 80008e6:	2300      	movcc	r3, #0
 80008e8:	4619      	mov	r1, r3
    *buffer++ = (this_sample - 16384) << 1;
 80008ea:	9b05      	ldr	r3, [sp, #20]
 80008ec:	f5a5 4580 	sub.w	r5, r5, #16384	; 0x4000
 80008f0:	006d      	lsls	r5, r5, #1
 80008f2:	f823 5b02 	strh.w	r5, [r3], #2
 80008f6:	9305      	str	r3, [sp, #20]
    next_sample += phase_ < pw ? 0 : 32767;
 80008f8:	eb09 0501 	add.w	r5, r9, r1
  while (size--) {
 80008fc:	e767      	b.n	80007ce <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x4c>
  END_INTERPOLATE_PHASE_INCREMENT
 80008fe:	9b04      	ldr	r3, [sp, #16]
 8000900:	9a12      	ldr	r2, [sp, #72]	; 0x48
  next_sample_ = next_sample;
 8000902:	61a5      	str	r5, [r4, #24]
  END_INTERPOLATE_PHASE_INCREMENT
 8000904:	fb02 a303 	mla	r3, r2, r3, sl
 8000908:	60a3      	str	r3, [r4, #8]
}
 800090a:	b009      	add	sp, #36	; 0x24
 800090c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (sync_out) {
 8000910:	b146      	cbz	r6, 8000924 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x1a2>
        *sync_out++ = phase_ / (phase_increment >> 7) + 1;
 8000912:	ea4f 18db 	mov.w	r8, fp, lsr #7
 8000916:	fbb3 f8f8 	udiv	r8, r3, r8
 800091a:	f108 0801 	add.w	r8, r8, #1
 800091e:	f886 8000 	strb.w	r8, [r6]
 8000922:	3601      	adds	r6, #1
      self_reset = true;
 8000924:	f04f 0801 	mov.w	r8, #1
 8000928:	e795      	b.n	8000856 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0xd4>
    if (sync_reset) {
 800092a:	2900      	cmp	r1, #0
 800092c:	d0dd      	beq.n	80008ea <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x168>
 800092e:	e7cf      	b.n	80008d0 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x14e>

08000930 <_ZN6braids16AnalogOscillator9RenderSawEPKhPsPhj>:
    size_t size) {
 8000930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000934:	4699      	mov	r9, r3
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 8000936:	e9d0 3a01 	ldrd	r3, sl, [r0, #4]
    size_t size) {
 800093a:	b085      	sub	sp, #20
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 800093c:	4553      	cmp	r3, sl
    size_t size) {
 800093e:	9202      	str	r2, [sp, #8]
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 8000940:	bf9e      	ittt	ls
 8000942:	9a0e      	ldrls	r2, [sp, #56]	; 0x38
 8000944:	ebaa 0303 	subls.w	r3, sl, r3
 8000948:	fbb3 f3f2 	udivls	r3, r3, r2
    size_t size) {
 800094c:	4607      	mov	r7, r0
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 800094e:	46d0      	mov	r8, sl
 8000950:	bf83      	ittte	hi
 8000952:	9a0e      	ldrhi	r2, [sp, #56]	; 0x38
 8000954:	eba3 030a 	subhi.w	r3, r3, sl
 8000958:	fbb3 fbf2 	udivhi	fp, r3, r2
 800095c:	ea6f 0b03 	mvnls.w	fp, r3
 8000960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  int32_t next_sample = next_sample_;
 8000962:	6986      	ldr	r6, [r0, #24]
 8000964:	18cb      	adds	r3, r1, r3
 8000966:	9303      	str	r3, [sp, #12]
  while (size--) {
 8000968:	9b03      	ldr	r3, [sp, #12]
 800096a:	428b      	cmp	r3, r1
 800096c:	d045      	beq.n	80009fa <_ZN6braids16AnalogOscillator9RenderSawEPKhPsPhj+0xca>
    if (*sync_in) {
 800096e:	f811 4b01 	ldrb.w	r4, [r1], #1
    INTERPOLATE_PHASE_INCREMENT
 8000972:	44d8      	add	r8, fp
 8000974:	683d      	ldr	r5, [r7, #0]
    if (*sync_in) {
 8000976:	2c00      	cmp	r4, #0
 8000978:	d03b      	beq.n	80009f2 <_ZN6braids16AnalogOscillator9RenderSawEPKhPsPhj+0xc2>
      reset_time = static_cast<uint32_t>(*sync_in - 1) << 9;
 800097a:	3c01      	subs	r4, #1
 800097c:	0264      	lsls	r4, r4, #9
          (65535 - reset_time) * (phase_increment >> 16);
 800097e:	f5c4 407f 	rsb	r0, r4, #65280	; 0xff00
 8000982:	30ff      	adds	r0, #255	; 0xff
 8000984:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8000988:	4342      	muls	r2, r0
      if (phase_at_reset < phase_) {
 800098a:	1952      	adds	r2, r2, r5
 800098c:	bf2c      	ite	cs
 800098e:	2301      	movcs	r3, #1
 8000990:	2300      	movcc	r3, #0
      this_sample -= discontinuity * ThisBlepSample(reset_time) >> 15;
 8000992:	4620      	mov	r0, r4
      int32_t discontinuity = phase_at_reset >> 17;
 8000994:	0c52      	lsrs	r2, r2, #17
      if (phase_at_reset < phase_) {
 8000996:	9301      	str	r3, [sp, #4]
      this_sample -= discontinuity * ThisBlepSample(reset_time) >> 15;
 8000998:	f7ff fdec 	bl	8000574 <_ZN6braids16AnalogOscillator14ThisBlepSampleEm.isra.0>
 800099c:	4350      	muls	r0, r2
 800099e:	eba6 36e0 	sub.w	r6, r6, r0, asr #15
      next_sample -= discontinuity * NextBlepSample(reset_time) >> 15;
 80009a2:	4620      	mov	r0, r4
 80009a4:	f7ff fdee 	bl	8000584 <_ZN6braids16AnalogOscillator14NextBlepSampleEm.isra.1>
      sync_reset = true;
 80009a8:	2301      	movs	r3, #1
      next_sample -= discontinuity * NextBlepSample(reset_time) >> 15;
 80009aa:	4342      	muls	r2, r0
 80009ac:	13d2      	asrs	r2, r2, #15
 80009ae:	4252      	negs	r2, r2
 80009b0:	eb18 0505 	adds.w	r5, r8, r5
 80009b4:	bf2c      	ite	cs
 80009b6:	2001      	movcs	r0, #1
 80009b8:	2000      	movcc	r0, #0
    phase_ += phase_increment;
 80009ba:	603d      	str	r5, [r7, #0]
    if (phase_ < phase_increment) {
 80009bc:	bb28      	cbnz	r0, 8000a0a <_ZN6braids16AnalogOscillator9RenderSawEPKhPsPhj+0xda>
    if (sync_out) {
 80009be:	f1b9 0f00 	cmp.w	r9, #0
 80009c2:	d003      	beq.n	80009cc <_ZN6braids16AnalogOscillator9RenderSawEPKhPsPhj+0x9c>
        *sync_out++ = 0;
 80009c4:	f889 0000 	strb.w	r0, [r9]
 80009c8:	f109 0901 	add.w	r9, r9, #1
    if (sync_reset) {
 80009cc:	b133      	cbz	r3, 80009dc <_ZN6braids16AnalogOscillator9RenderSawEPKhPsPhj+0xac>
      phase_ = reset_time * (phase_increment >> 16);
 80009ce:	ea4f 4318 	mov.w	r3, r8, lsr #16
 80009d2:	435c      	muls	r4, r3
      high_ = false;
 80009d4:	f04f 0300 	mov.w	r3, #0
      phase_ = reset_time * (phase_increment >> 16);
 80009d8:	603c      	str	r4, [r7, #0]
      high_ = false;
 80009da:	733b      	strb	r3, [r7, #12]
    *buffer++ = (this_sample - 16384) << 1;
 80009dc:	9802      	ldr	r0, [sp, #8]
 80009de:	f5a6 4680 	sub.w	r6, r6, #16384	; 0x4000
    next_sample += phase_ >> 17;
 80009e2:	683b      	ldr	r3, [r7, #0]
    *buffer++ = (this_sample - 16384) << 1;
 80009e4:	0076      	lsls	r6, r6, #1
 80009e6:	f820 6b02 	strh.w	r6, [r0], #2
 80009ea:	9002      	str	r0, [sp, #8]
    next_sample += phase_ >> 17;
 80009ec:	eb02 4653 	add.w	r6, r2, r3, lsr #17
  while (size--) {
 80009f0:	e7ba      	b.n	8000968 <_ZN6braids16AnalogOscillator9RenderSawEPKhPsPhj+0x38>
    bool transition_during_reset = false;
 80009f2:	9401      	str	r4, [sp, #4]
    bool sync_reset = false;
 80009f4:	4623      	mov	r3, r4
    next_sample = 0;
 80009f6:	4622      	mov	r2, r4
 80009f8:	e7da      	b.n	80009b0 <_ZN6braids16AnalogOscillator9RenderSawEPKhPsPhj+0x80>
  END_INTERPOLATE_PHASE_INCREMENT
 80009fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  next_sample_ = next_sample;
 80009fc:	61be      	str	r6, [r7, #24]
  END_INTERPOLATE_PHASE_INCREMENT
 80009fe:	fb03 a30b 	mla	r3, r3, fp, sl
 8000a02:	60bb      	str	r3, [r7, #8]
}
 8000a04:	b005      	add	sp, #20
 8000a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (sync_out) {
 8000a0a:	f1b9 0f00 	cmp.w	r9, #0
 8000a0e:	d008      	beq.n	8000a22 <_ZN6braids16AnalogOscillator9RenderSawEPKhPsPhj+0xf2>
        *sync_out++ = phase_ / (phase_increment >> 7) + 1;
 8000a10:	ea4f 10d8 	mov.w	r0, r8, lsr #7
 8000a14:	fbb5 f5f0 	udiv	r5, r5, r0
 8000a18:	3501      	adds	r5, #1
 8000a1a:	f889 5000 	strb.w	r5, [r9]
 8000a1e:	f109 0901 	add.w	r9, r9, #1
    if ((transition_during_reset || !sync_reset) && self_reset) {
 8000a22:	9801      	ldr	r0, [sp, #4]
 8000a24:	b908      	cbnz	r0, 8000a2a <_ZN6braids16AnalogOscillator9RenderSawEPKhPsPhj+0xfa>
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d1d1      	bne.n	80009ce <_ZN6braids16AnalogOscillator9RenderSawEPKhPsPhj+0x9e>
      uint32_t t = phase_ / (phase_increment >> 16);
 8000a2a:	6838      	ldr	r0, [r7, #0]
 8000a2c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000a30:	fbb0 f5f5 	udiv	r5, r0, r5
      this_sample -= ThisBlepSample(t);
 8000a34:	4628      	mov	r0, r5
 8000a36:	9301      	str	r3, [sp, #4]
 8000a38:	f7ff fd9c 	bl	8000574 <_ZN6braids16AnalogOscillator14ThisBlepSampleEm.isra.0>
 8000a3c:	1a36      	subs	r6, r6, r0
      next_sample -= NextBlepSample(t);
 8000a3e:	4628      	mov	r0, r5
 8000a40:	f7ff fda0 	bl	8000584 <_ZN6braids16AnalogOscillator14NextBlepSampleEm.isra.1>
 8000a44:	9b01      	ldr	r3, [sp, #4]
 8000a46:	1a12      	subs	r2, r2, r0
 8000a48:	e7c0      	b.n	80009cc <_ZN6braids16AnalogOscillator9RenderSawEPKhPsPhj+0x9c>

08000a4a <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj>:
    size_t size) {
 8000a4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a4e:	4698      	mov	r8, r3
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 8000a50:	e9d0 3901 	ldrd	r3, r9, [r0, #4]
    size_t size) {
 8000a54:	b089      	sub	sp, #36	; 0x24
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 8000a56:	454b      	cmp	r3, r9
    size_t size) {
 8000a58:	9205      	str	r2, [sp, #20]
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 8000a5a:	bf9d      	ittte	ls
 8000a5c:	9a12      	ldrls	r2, [sp, #72]	; 0x48
 8000a5e:	eba9 0303 	subls.w	r3, r9, r3
 8000a62:	fbb3 f3f2 	udivls	r3, r3, r2
 8000a66:	9a12      	ldrhi	r2, [sp, #72]	; 0x48
 8000a68:	bf86      	itte	hi
 8000a6a:	eba3 0309 	subhi.w	r3, r3, r9
 8000a6e:	fbb3 f3f2 	udivhi	r3, r3, r2
 8000a72:	43db      	mvnls	r3, r3
 8000a74:	9304      	str	r3, [sp, #16]
  if (parameter_ < 1024) {
 8000a76:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    size_t size) {
 8000a7a:	4604      	mov	r4, r0
  if (parameter_ < 1024) {
 8000a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    parameter_ = 1024;
 8000a80:	bfbc      	itt	lt
 8000a82:	f44f 6380 	movlt.w	r3, #1024	; 0x400
 8000a86:	81c3      	strhlt	r3, [r0, #14]
 8000a88:	460b      	mov	r3, r1
  BEGIN_INTERPOLATE_PHASE_INCREMENT
 8000a8a:	46cb      	mov	fp, r9
 8000a8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  int32_t next_sample = next_sample_;
 8000a8e:	6985      	ldr	r5, [r0, #24]
 8000a90:	4413      	add	r3, r2
 8000a92:	9102      	str	r1, [sp, #8]
 8000a94:	9306      	str	r3, [sp, #24]
  while (size--) {
 8000a96:	9b06      	ldr	r3, [sp, #24]
 8000a98:	9a02      	ldr	r2, [sp, #8]
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	f000 8095 	beq.w	8000bca <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0x180>
    INTERPOLATE_PHASE_INCREMENT
 8000aa0:	9b04      	ldr	r3, [sp, #16]
    uint32_t pw = static_cast<uint32_t>(parameter_) << 16;
 8000aa2:	f9b4 600e 	ldrsh.w	r6, [r4, #14]
    INTERPOLATE_PHASE_INCREMENT
 8000aa6:	449b      	add	fp, r3
    if (*sync_in) {
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	f813 1b01 	ldrb.w	r1, [r3], #1
    uint32_t pw = static_cast<uint32_t>(parameter_) << 16;
 8000aae:	0436      	lsls	r6, r6, #16
    if (*sync_in) {
 8000ab0:	9302      	str	r3, [sp, #8]
 8000ab2:	ea4f 431b 	mov.w	r3, fp, lsr #16
 8000ab6:	6827      	ldr	r7, [r4, #0]
 8000ab8:	9303      	str	r3, [sp, #12]
 8000aba:	2900      	cmp	r1, #0
 8000abc:	d033      	beq.n	8000b26 <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0xdc>
      reset_time = static_cast<uint32_t>(*sync_in - 1) << 9;
 8000abe:	3901      	subs	r1, #1
 8000ac0:	0249      	lsls	r1, r1, #9
          (65535 - reset_time) * (phase_increment >> 16);
 8000ac2:	f5c1 437f 	rsb	r3, r1, #65280	; 0xff00
 8000ac6:	9a03      	ldr	r2, [sp, #12]
 8000ac8:	33ff      	adds	r3, #255	; 0xff
 8000aca:	4353      	muls	r3, r2
 8000acc:	19db      	adds	r3, r3, r7
 8000ace:	d203      	bcs.n	8000ad8 <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0x8e>
      if (phase_at_reset < phase_ || (!high_ && phase_at_reset >= pw)) {
 8000ad0:	7b22      	ldrb	r2, [r4, #12]
 8000ad2:	b31a      	cbz	r2, 8000b1c <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0xd2>
    bool transition_during_reset = false;
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e000      	b.n	8000ada <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0x90>
        transition_during_reset = true;
 8000ad8:	2201      	movs	r2, #1
      int32_t before = (phase_at_reset >> 18) + ((phase_at_reset - pw) >> 18);
 8000ada:	1b98      	subs	r0, r3, r6
 8000adc:	0c9b      	lsrs	r3, r3, #18
 8000ade:	eb03 4390 	add.w	r3, r3, r0, lsr #18
    bool transition_during_reset = false;
 8000ae2:	9201      	str	r2, [sp, #4]
      this_sample += discontinuity * ThisBlepSample(reset_time) >> 15;
 8000ae4:	4608      	mov	r0, r1
      int32_t after = (0 >> 18) + ((0 - pw) >> 18);
 8000ae6:	4272      	negs	r2, r6
      int32_t discontinuity = after - before;
 8000ae8:	ebc3 4292 	rsb	r2, r3, r2, lsr #18
      this_sample += discontinuity * ThisBlepSample(reset_time) >> 15;
 8000aec:	f7ff fd42 	bl	8000574 <_ZN6braids16AnalogOscillator14ThisBlepSampleEm.isra.0>
 8000af0:	4350      	muls	r0, r2
 8000af2:	eb05 35e0 	add.w	r5, r5, r0, asr #15
      next_sample += discontinuity * NextBlepSample(reset_time) >> 15;
 8000af6:	4608      	mov	r0, r1
 8000af8:	f7ff fd44 	bl	8000584 <_ZN6braids16AnalogOscillator14NextBlepSampleEm.isra.1>
      sync_reset = true;
 8000afc:	2301      	movs	r3, #1
      next_sample += discontinuity * NextBlepSample(reset_time) >> 15;
 8000afe:	4342      	muls	r2, r0
 8000b00:	13d2      	asrs	r2, r2, #15
 8000b02:	eb1b 0007 	adds.w	r0, fp, r7
 8000b06:	bf2c      	ite	cs
 8000b08:	2701      	movcs	r7, #1
 8000b0a:	2700      	movcc	r7, #0
    phase_ += phase_increment;
 8000b0c:	6020      	str	r0, [r4, #0]
    if (phase_ < phase_increment) {
 8000b0e:	2f00      	cmp	r7, #0
 8000b10:	d164      	bne.n	8000bdc <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0x192>
    if (sync_out) {
 8000b12:	f1b8 0f00 	cmp.w	r8, #0
 8000b16:	d10a      	bne.n	8000b2e <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0xe4>
    bool self_reset = false;
 8000b18:	4647      	mov	r7, r8
 8000b1a:	e00c      	b.n	8000b36 <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0xec>
      if (phase_at_reset < phase_ || (!high_ && phase_at_reset >= pw)) {
 8000b1c:	429e      	cmp	r6, r3
 8000b1e:	bf8c      	ite	hi
 8000b20:	2200      	movhi	r2, #0
 8000b22:	2201      	movls	r2, #1
 8000b24:	e7d9      	b.n	8000ada <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0x90>
    bool transition_during_reset = false;
 8000b26:	9101      	str	r1, [sp, #4]
    bool sync_reset = false;
 8000b28:	460b      	mov	r3, r1
    next_sample = 0;
 8000b2a:	460a      	mov	r2, r1
 8000b2c:	e7e9      	b.n	8000b02 <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0xb8>
        *sync_out++ = 0;
 8000b2e:	f888 7000 	strb.w	r7, [r8]
 8000b32:	f108 0801 	add.w	r8, r8, #1
    while (transition_during_reset || !sync_reset) {
 8000b36:	9801      	ldr	r0, [sp, #4]
 8000b38:	b900      	cbnz	r0, 8000b3c <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0xf2>
 8000b3a:	bb93      	cbnz	r3, 8000ba2 <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0x158>
      if (!high_) {
 8000b3c:	7b20      	ldrb	r0, [r4, #12]
 8000b3e:	b9b0      	cbnz	r0, 8000b6e <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0x124>
        if (phase_ < pw) {
 8000b40:	6820      	ldr	r0, [r4, #0]
 8000b42:	42b0      	cmp	r0, r6
 8000b44:	d32c      	bcc.n	8000ba0 <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0x156>
 8000b46:	9307      	str	r3, [sp, #28]
        uint32_t t = (phase_ - pw) / (phase_increment >> 16);
 8000b48:	9b03      	ldr	r3, [sp, #12]
 8000b4a:	eba0 0a06 	sub.w	sl, r0, r6
 8000b4e:	fbba faf3 	udiv	sl, sl, r3
        this_sample -= ThisBlepSample(t) >> 1;
 8000b52:	4650      	mov	r0, sl
 8000b54:	f7ff fd0e 	bl	8000574 <_ZN6braids16AnalogOscillator14ThisBlepSampleEm.isra.0>
 8000b58:	eba5 0560 	sub.w	r5, r5, r0, asr #1
        next_sample -= NextBlepSample(t) >> 1;
 8000b5c:	4650      	mov	r0, sl
 8000b5e:	f7ff fd11 	bl	8000584 <_ZN6braids16AnalogOscillator14NextBlepSampleEm.isra.1>
        high_ = true;
 8000b62:	f04f 0301 	mov.w	r3, #1
 8000b66:	7323      	strb	r3, [r4, #12]
 8000b68:	9b07      	ldr	r3, [sp, #28]
        next_sample -= NextBlepSample(t) >> 1;
 8000b6a:	eba2 0260 	sub.w	r2, r2, r0, asr #1
      if (high_) {
 8000b6e:	7b20      	ldrb	r0, [r4, #12]
 8000b70:	2800      	cmp	r0, #0
 8000b72:	d0e0      	beq.n	8000b36 <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0xec>
        if (!self_reset) {
 8000b74:	b1a7      	cbz	r7, 8000ba0 <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0x156>
 8000b76:	9307      	str	r3, [sp, #28]
        uint32_t t = phase_ / (phase_increment >> 16);
 8000b78:	6827      	ldr	r7, [r4, #0]
 8000b7a:	9b03      	ldr	r3, [sp, #12]
 8000b7c:	fbb7 f7f3 	udiv	r7, r7, r3
        this_sample -= ThisBlepSample(t) >> 1;
 8000b80:	4638      	mov	r0, r7
 8000b82:	f7ff fcf7 	bl	8000574 <_ZN6braids16AnalogOscillator14ThisBlepSampleEm.isra.0>
 8000b86:	eba5 0560 	sub.w	r5, r5, r0, asr #1
        next_sample -= NextBlepSample(t) >> 1;
 8000b8a:	4638      	mov	r0, r7
 8000b8c:	f7ff fcfa 	bl	8000584 <_ZN6braids16AnalogOscillator14NextBlepSampleEm.isra.1>
        high_ = false;
 8000b90:	f04f 0300 	mov.w	r3, #0
        next_sample -= NextBlepSample(t) >> 1;
 8000b94:	eba2 0260 	sub.w	r2, r2, r0, asr #1
        high_ = false;
 8000b98:	7323      	strb	r3, [r4, #12]
        self_reset = false;
 8000b9a:	2700      	movs	r7, #0
 8000b9c:	9b07      	ldr	r3, [sp, #28]
 8000b9e:	e7ca      	b.n	8000b36 <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0xec>
    if (sync_reset) {
 8000ba0:	b12b      	cbz	r3, 8000bae <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0x164>
      phase_ = reset_time * (phase_increment >> 16);
 8000ba2:	9b03      	ldr	r3, [sp, #12]
 8000ba4:	434b      	muls	r3, r1
 8000ba6:	6023      	str	r3, [r4, #0]
      high_ = false;
 8000ba8:	f04f 0300 	mov.w	r3, #0
 8000bac:	7323      	strb	r3, [r4, #12]
    next_sample += phase_ >> 18;
 8000bae:	6823      	ldr	r3, [r4, #0]
    *buffer++ = (this_sample - 16384) << 1;
 8000bb0:	9905      	ldr	r1, [sp, #20]
 8000bb2:	f5a5 4580 	sub.w	r5, r5, #16384	; 0x4000
    next_sample += (phase_ - pw) >> 18;
 8000bb6:	1b9e      	subs	r6, r3, r6
    *buffer++ = (this_sample - 16384) << 1;
 8000bb8:	006d      	lsls	r5, r5, #1
    next_sample += phase_ >> 18;
 8000bba:	0c9b      	lsrs	r3, r3, #18
    *buffer++ = (this_sample - 16384) << 1;
 8000bbc:	f821 5b02 	strh.w	r5, [r1], #2
    next_sample += (phase_ - pw) >> 18;
 8000bc0:	eb03 4396 	add.w	r3, r3, r6, lsr #18
    *buffer++ = (this_sample - 16384) << 1;
 8000bc4:	9105      	str	r1, [sp, #20]
    next_sample += (phase_ - pw) >> 18;
 8000bc6:	189d      	adds	r5, r3, r2
  while (size--) {
 8000bc8:	e765      	b.n	8000a96 <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0x4c>
  END_INTERPOLATE_PHASE_INCREMENT
 8000bca:	9b04      	ldr	r3, [sp, #16]
 8000bcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
  next_sample_ = next_sample;
 8000bce:	61a5      	str	r5, [r4, #24]
  END_INTERPOLATE_PHASE_INCREMENT
 8000bd0:	fb02 9303 	mla	r3, r2, r3, r9
 8000bd4:	60a3      	str	r3, [r4, #8]
}
 8000bd6:	b009      	add	sp, #36	; 0x24
 8000bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (sync_out) {
 8000bdc:	f1b8 0f00 	cmp.w	r8, #0
 8000be0:	d008      	beq.n	8000bf4 <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0x1aa>
        *sync_out++ = phase_ / (phase_increment >> 7) + 1;
 8000be2:	ea4f 17db 	mov.w	r7, fp, lsr #7
 8000be6:	fbb0 f7f7 	udiv	r7, r0, r7
 8000bea:	3701      	adds	r7, #1
 8000bec:	f888 7000 	strb.w	r7, [r8]
 8000bf0:	f108 0801 	add.w	r8, r8, #1
      self_reset = true;
 8000bf4:	2701      	movs	r7, #1
 8000bf6:	e79e      	b.n	8000b36 <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0xec>

08000bf8 <_ZN6braids16AnalogOscillator21ComputePhaseIncrementEs>:
  int32_t ref_pitch = midi_pitch;
 8000bf8:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000bfc:	4299      	cmp	r1, r3
 8000bfe:	bfa8      	it	ge
 8000c00:	4619      	movge	r1, r3
  size_t num_shifts = 0;
 8000c02:	2000      	movs	r0, #0
uint32_t AnalogOscillator::ComputePhaseIncrement(int16_t midi_pitch) {
 8000c04:	b510      	push	{r4, lr}
  ref_pitch -= kPitchTableStart;
 8000c06:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
  while (ref_pitch < 0) {
 8000c0a:	f511 61c0 	adds.w	r1, r1, #1536	; 0x600
    ++num_shifts;
 8000c0e:	f100 0001 	add.w	r0, r0, #1
  while (ref_pitch < 0) {
 8000c12:	d4fa      	bmi.n	8000c0a <_ZN6braids16AnalogOscillator21ComputePhaseIncrementEs+0x12>
  uint32_t a = lut_oscillator_increments[ref_pitch >> 4];
 8000c14:	4c07      	ldr	r4, [pc, #28]	; (8000c34 <_ZN6braids16AnalogOscillator21ComputePhaseIncrementEs+0x3c>)
 8000c16:	110a      	asrs	r2, r1, #4
 8000c18:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
  uint32_t b = lut_oscillator_increments[(ref_pitch >> 4) + 1];
 8000c1c:	3201      	adds	r2, #1
      (static_cast<int32_t>(b - a) * (ref_pitch & 0xf) >> 4);
 8000c1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8000c22:	f001 010f 	and.w	r1, r1, #15
 8000c26:	1ad2      	subs	r2, r2, r3
 8000c28:	4351      	muls	r1, r2
  uint32_t phase_increment = a + \
 8000c2a:	eb03 1121 	add.w	r1, r3, r1, asr #4
}
 8000c2e:	fa21 f000 	lsr.w	r0, r1, r0
 8000c32:	bd10      	pop	{r4, pc}
 8000c34:	0800c580 	.word	0x0800c580

08000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>:
    size_t size) {
 8000c38:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c3c:	4604      	mov	r4, r0
 8000c3e:	469a      	mov	sl, r3
  RenderFn fn = fn_table_[shape_];
 8000c40:	7f00      	ldrb	r0, [r0, #28]
 8000c42:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x8c>)
    size_t size) {
 8000c44:	4691      	mov	r9, r2
  RenderFn fn = fn_table_[shape_];
 8000c46:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]
 8000c4a:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
  if (shape_ != previous_shape_) {
 8000c4e:	7f63      	ldrb	r3, [r4, #29]
    size_t size) {
 8000c50:	4688      	mov	r8, r1
  if (shape_ != previous_shape_) {
 8000c52:	4283      	cmp	r3, r0
    size_t size) {
 8000c54:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  RenderFn fn = fn_table_[shape_];
 8000c58:	6857      	ldr	r7, [r2, #4]
  if (shape_ != previous_shape_) {
 8000c5a:	d00f      	beq.n	8000c7c <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x44>
    phase_increment_ = 1;
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e9c4 1300 	strd	r1, r3, [r4]
    discontinuity_depth_ = -16383;
 8000c64:	f24c 0301 	movw	r3, #49153	; 0xc001
 8000c68:	82a3      	strh	r3, [r4, #20]
    pitch_ = 60 << 7;
 8000c6a:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
    high_ = false;
 8000c6e:	7321      	strb	r1, [r4, #12]
    parameter_ = previous_parameter_ = 0;
 8000c70:	8221      	strh	r1, [r4, #16]
 8000c72:	81e1      	strh	r1, [r4, #14]
    aux_parameter_ = 0;
 8000c74:	8261      	strh	r1, [r4, #18]
    pitch_ = 60 << 7;
 8000c76:	82e3      	strh	r3, [r4, #22]
    next_sample_ = 0;
 8000c78:	61a1      	str	r1, [r4, #24]
    previous_shape_ = shape_;
 8000c7a:	7760      	strb	r0, [r4, #29]
  phase_increment_ = ComputePhaseIncrement(pitch_);
 8000c7c:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 8000c80:	4620      	mov	r0, r4
 8000c82:	4631      	mov	r1, r6
 8000c84:	f7ff ffb8 	bl	8000bf8 <_ZN6braids16AnalogOscillator21ComputePhaseIncrementEs>
  if (pitch_ > kHighestNote) {
 8000c88:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
  phase_increment_ = ComputePhaseIncrement(pitch_);
 8000c8c:	6060      	str	r0, [r4, #4]
  if (pitch_ > kHighestNote) {
 8000c8e:	dd14      	ble.n	8000cba <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x82>
    pitch_ = kHighestNote;
 8000c90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    pitch_ = 0;
 8000c94:	82e3      	strh	r3, [r4, #22]
  (this->*fn)(sync_in, buffer, sync_out, size);
 8000c96:	107b      	asrs	r3, r7, #1
 8000c98:	07fa      	lsls	r2, r7, #31
 8000c9a:	eb04 0003 	add.w	r0, r4, r3
 8000c9e:	bf48      	it	mi
 8000ca0:	58e3      	ldrmi	r3, [r4, r3]
 8000ca2:	464a      	mov	r2, r9
 8000ca4:	bf48      	it	mi
 8000ca6:	595d      	ldrmi	r5, [r3, r5]
 8000ca8:	4641      	mov	r1, r8
 8000caa:	4653      	mov	r3, sl
 8000cac:	46ac      	mov	ip, r5
 8000cae:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
}
 8000cb2:	b001      	add	sp, #4
 8000cb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  (this->*fn)(sync_in, buffer, sync_out, size);
 8000cb8:	4760      	bx	ip
  } else if (pitch_ < 0) {
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	daeb      	bge.n	8000c96 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x5e>
    pitch_ = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e7e8      	b.n	8000c94 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x5c>
 8000cc2:	bf00      	nop
 8000cc4:	20000000 	.word	0x20000000

08000cc8 <_ZN6braids17DigitalOscillator9RenderToyEPKhPsj>:
}

void DigitalOscillator::RenderToy(
    const uint8_t* sync,
    int16_t* buffer,
    size_t size) {
 8000cc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ccc:	4691      	mov	r9, r2
  
  uint32_t phase_increment = phase_increment_;
  uint32_t phase = phase_;
  
  uint16_t decimation_counter = state_.toy.decimation_counter;
  uint16_t decimation_count = 512 - (parameter_[0] >> 6);
 8000cce:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
  phase_increment_ >>= 2;
 8000cd2:	6842      	ldr	r2, [r0, #4]
  uint16_t decimation_count = 512 - (parameter_[0] >> 6);
 8000cd4:	11bf      	asrs	r7, r7, #6
  phase_increment_ >>= 2;
 8000cd6:	ea4f 0c92 	mov.w	ip, r2, lsr #2
  uint16_t decimation_count = 512 - (parameter_[0] >> 6);
 8000cda:	f5c7 7700 	rsb	r7, r7, #512	; 0x200
 8000cde:	440b      	add	r3, r1
 8000ce0:	ea4f 058c 	mov.w	r5, ip, lsl #2
  uint32_t phase = phase_;
 8000ce4:	6802      	ldr	r2, [r0, #0]
  uint16_t decimation_counter = state_.toy.decimation_counter;
 8000ce6:	8c46      	ldrh	r6, [r0, #34]	; 0x22

  uint8_t held_sample = state_.toy.held_sample;
 8000ce8:	f890 4020 	ldrb.w	r4, [r0, #32]
      if (decimation_counter >= decimation_count) {
        uint8_t x = parameter_[1] >> 8;
        held_sample = (((phase >> 24) ^ (x << 1)) & (~x)) + (x >> 1);
        decimation_counter = 0;
      }
      filtered_sample += kFIR4Coefficients[tap] * held_sample;
 8000cec:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8000d6c <_ZN6braids17DigitalOscillator9RenderToyEPKhPsj+0xa4>
  phase_increment_ >>= 2;
 8000cf0:	f8c0 c004 	str.w	ip, [r0, #4]
  uint16_t decimation_count = 512 - (parameter_[0] >> 6);
 8000cf4:	b2bf      	uxth	r7, r7
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	9501      	str	r5, [sp, #4]
  while (size--) {
 8000cfa:	9b00      	ldr	r3, [sp, #0]
 8000cfc:	428b      	cmp	r3, r1
 8000cfe:	d02d      	beq.n	8000d5c <_ZN6braids17DigitalOscillator9RenderToyEPKhPsj+0x94>
    if (*sync++) {
 8000d00:	f811 5b01 	ldrb.w	r5, [r1], #1
      phase = 0;
 8000d04:	f04f 0e00 	mov.w	lr, #0
 8000d08:	2d00      	cmp	r5, #0
 8000d0a:	bf18      	it	ne
 8000d0c:	2200      	movne	r2, #0
 8000d0e:	4675      	mov	r5, lr
 8000d10:	4690      	mov	r8, r2
      if (decimation_counter >= decimation_count) {
 8000d12:	42b7      	cmp	r7, r6
      phase += phase_increment;
 8000d14:	44e0      	add	r8, ip
      if (decimation_counter >= decimation_count) {
 8000d16:	d80d      	bhi.n	8000d34 <_ZN6braids17DigitalOscillator9RenderToyEPKhPsj+0x6c>
        uint8_t x = parameter_[1] >> 8;
 8000d18:	f9b0 b00e 	ldrsh.w	fp, [r0, #14]
 8000d1c:	f3cb 2407 	ubfx	r4, fp, #8, #8
        held_sample = (((phase >> 24) ^ (x << 1)) & (~x)) + (x >> 1);
 8000d20:	0066      	lsls	r6, r4, #1
 8000d22:	ea86 6618 	eor.w	r6, r6, r8, lsr #24
 8000d26:	ea26 0404 	bic.w	r4, r6, r4
        decimation_counter = 0;
 8000d2a:	2600      	movs	r6, #0
        held_sample = (((phase >> 24) ^ (x << 1)) & (~x)) + (x >> 1);
 8000d2c:	f3cb 2b46 	ubfx	fp, fp, #9, #7
 8000d30:	445c      	add	r4, fp
 8000d32:	b2e4      	uxtb	r4, r4
      filtered_sample += kFIR4Coefficients[tap] * held_sample;
 8000d34:	f85a 302e 	ldr.w	r3, [sl, lr, lsl #2]
    for (size_t tap = 0; tap < 4; ++tap) {
 8000d38:	f10e 0e01 	add.w	lr, lr, #1
      ++decimation_counter;
 8000d3c:	3601      	adds	r6, #1
    for (size_t tap = 0; tap < 4; ++tap) {
 8000d3e:	f1be 0f04 	cmp.w	lr, #4
      filtered_sample += kFIR4Coefficients[tap] * held_sample;
 8000d42:	fb03 5504 	mla	r5, r3, r4, r5
      ++decimation_counter;
 8000d46:	b2b6      	uxth	r6, r6
    for (size_t tap = 0; tap < 4; ++tap) {
 8000d48:	d1e3      	bne.n	8000d12 <_ZN6braids17DigitalOscillator9RenderToyEPKhPsj+0x4a>
    }
    *buffer++ = (filtered_sample >> 8) - kFIR4DcOffset;
 8000d4a:	122d      	asrs	r5, r5, #8
 8000d4c:	9b01      	ldr	r3, [sp, #4]
 8000d4e:	f5a5 45dc 	sub.w	r5, r5, #28160	; 0x6e00
 8000d52:	3d30      	subs	r5, #48	; 0x30
 8000d54:	441a      	add	r2, r3
 8000d56:	f829 5b02 	strh.w	r5, [r9], #2
  while (size--) {
 8000d5a:	e7ce      	b.n	8000cfa <_ZN6braids17DigitalOscillator9RenderToyEPKhPsj+0x32>
  }
  state_.toy.held_sample = held_sample;
 8000d5c:	f880 4020 	strb.w	r4, [r0, #32]
  state_.toy.decimation_counter = decimation_counter;
 8000d60:	8446      	strh	r6, [r0, #34]	; 0x22
  phase_ = phase;
 8000d62:	6002      	str	r2, [r0, #0]
}
 8000d64:	b003      	add	sp, #12
 8000d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d6a:	bf00      	nop
 8000d6c:	08007bd8 	.word	0x08007bd8

08000d70 <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj>:
  int32_t sqrtsqrt_width = parameter_[1] < 16384
      ? parameter_[1] >> 6 : 511 - (parameter_[1] >> 6);
  int32_t sqrt_width = sqrtsqrt_width * sqrtsqrt_width >> 10;
  int32_t width = sqrt_width * sqrt_width + 4;
  int32_t total = 0;
  for (size_t i = 0; i < kNumAdditiveHarmonics; ++i) {
 8000d70:	f04f 0c00 	mov.w	ip, #0
    size_t size) {
 8000d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t peak = (kNumAdditiveHarmonics * parameter_[0]) >> 7;
 8000d78:	260c      	movs	r6, #12
  int32_t total = 0;
 8000d7a:	46e1      	mov	r9, ip
    int32_t x = i << 8;
    int32_t d, g;

    d = (x - peak);
    g = 32768 * 128 / (128 + d * d / width);
 8000d7c:	f44f 0a80 	mov.w	sl, #4194304	; 0x400000
    size_t size) {
 8000d80:	4693      	mov	fp, r2
  int16_t previous_sample = state_.add.previous_sample;
 8000d82:	f9b0 20d0 	ldrsh.w	r2, [r0, #208]	; 0xd0
    size_t size) {
 8000d86:	b09d      	sub	sp, #116	; 0x74
  int16_t previous_sample = state_.add.previous_sample;
 8000d88:	9200      	str	r2, [sp, #0]
  uint32_t phase_increment = phase_increment_ << 1;
 8000d8a:	6842      	ldr	r2, [r0, #4]
  int32_t second_peak_amount = parameter_[1] * parameter_[1] >> 15;
 8000d8c:	f9b0 700e 	ldrsh.w	r7, [r0, #14]
  uint32_t phase_increment = phase_increment_ << 1;
 8000d90:	0052      	lsls	r2, r2, #1
 8000d92:	9203      	str	r2, [sp, #12]
  int32_t peak = (kNumAdditiveHarmonics * parameter_[0]) >> 7;
 8000d94:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
      ? parameter_[1] >> 6 : 511 - (parameter_[1] >> 6);
 8000d98:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
  int32_t peak = (kNumAdditiveHarmonics * parameter_[0]) >> 7;
 8000d9c:	fb06 f602 	mul.w	r6, r6, r2
 8000da0:	ea4f 12a7 	mov.w	r2, r7, asr #6
      ? parameter_[1] >> 6 : 511 - (parameter_[1] >> 6);
 8000da4:	bfa4      	itt	ge
 8000da6:	f5c2 72ff 	rsbge	r2, r2, #510	; 0x1fe
 8000daa:	3201      	addge	r2, #1
  int32_t sqrt_width = sqrtsqrt_width * sqrtsqrt_width >> 10;
 8000dac:	4352      	muls	r2, r2
  int32_t second_peak_amount = parameter_[1] * parameter_[1] >> 15;
 8000dae:	fb07 f807 	mul.w	r8, r7, r7
  int32_t sqrt_width = sqrtsqrt_width * sqrtsqrt_width >> 10;
 8000db2:	1292      	asrs	r2, r2, #10
  int32_t width = sqrt_width * sqrt_width + 4;
 8000db4:	4352      	muls	r2, r2
  int32_t peak = (kNumAdditiveHarmonics * parameter_[0]) >> 7;
 8000db6:	09f6      	lsrs	r6, r6, #7
  int32_t second_peak = (peak >> 1) + kNumAdditiveHarmonics * 128;
 8000db8:	1074      	asrs	r4, r6, #1
  int32_t second_peak_amount = parameter_[1] * parameter_[1] >> 15;
 8000dba:	ea4f 38e8 	mov.w	r8, r8, asr #15
 8000dbe:	f1c6 0e00 	rsb	lr, r6, #0
  uint32_t phase = phase_;
 8000dc2:	6805      	ldr	r5, [r0, #0]
 8000dc4:	f5a6 66c0 	sub.w	r6, r6, #1536	; 0x600
  int32_t width = sqrt_width * sqrt_width + 4;
 8000dc8:	3204      	adds	r2, #4
    
    d = (x - second_peak);
    g += second_peak_amount * 128 / (128 + d * d / width);
 8000dca:	ea4f 18c8 	mov.w	r8, r8, lsl #7
 8000dce:	1b36      	subs	r6, r6, r4
 8000dd0:	eb06 040e 	add.w	r4, r6, lr
    g = 32768 * 128 / (128 + d * d / width);
 8000dd4:	fb0e f70e 	mul.w	r7, lr, lr
    g += second_peak_amount * 128 / (128 + d * d / width);
 8000dd8:	4364      	muls	r4, r4
    g = 32768 * 128 / (128 + d * d / width);
 8000dda:	fb97 f7f2 	sdiv	r7, r7, r2
    g += second_peak_amount * 128 / (128 + d * d / width);
 8000dde:	fb94 f4f2 	sdiv	r4, r4, r2
    g = 32768 * 128 / (128 + d * d / width);
 8000de2:	3780      	adds	r7, #128	; 0x80
    g += second_peak_amount * 128 / (128 + d * d / width);
 8000de4:	3480      	adds	r4, #128	; 0x80
 8000de6:	fb98 f4f4 	sdiv	r4, r8, r4
    g = 32768 * 128 / (128 + d * d / width);
 8000dea:	fb9a f7f7 	sdiv	r7, sl, r7
    g += second_peak_amount * 128 / (128 + d * d / width);
 8000dee:	4427      	add	r7, r4
    total += g;
    target_amplitude[i] = g;
 8000df0:	ac04      	add	r4, sp, #16
 8000df2:	f844 702c 	str.w	r7, [r4, ip, lsl #2]
  for (size_t i = 0; i < kNumAdditiveHarmonics; ++i) {
 8000df6:	f10c 0c01 	add.w	ip, ip, #1
 8000dfa:	f1bc 0f0c 	cmp.w	ip, #12
    total += g;
 8000dfe:	44b9      	add	r9, r7
 8000e00:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
  for (size_t i = 0; i < kNumAdditiveHarmonics; ++i) {
 8000e04:	d1e4      	bne.n	8000dd0 <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj+0x60>
  }
  
  int32_t attenuation = 2147483647 / total;
 8000e06:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000e0a:	fb92 f9f9 	sdiv	r9, r2, r9
  for (size_t i = 0; i < kNumAdditiveHarmonics; ++i) {
    if ((phase_increment >> 16) * (i + 1) > 0x4000) {
 8000e0e:	9a03      	ldr	r2, [sp, #12]
      target_amplitude[i] = 0;
    } else {
      target_amplitude[i] = target_amplitude[i] * attenuation >> 16;
    }
    amplitude[i] = state_.hrm.amplitude[i];
 8000e10:	f10d 0e40 	add.w	lr, sp, #64	; 0x40
    if ((phase_increment >> 16) * (i + 1) > 0x4000) {
 8000e14:	0c17      	lsrs	r7, r2, #16
 8000e16:	f100 0220 	add.w	r2, r0, #32
 8000e1a:	9202      	str	r2, [sp, #8]
 8000e1c:	4694      	mov	ip, r2
 8000e1e:	2200      	movs	r2, #0
 8000e20:	463e      	mov	r6, r7
      target_amplitude[i] = 0;
 8000e22:	4690      	mov	r8, r2
    if ((phase_increment >> 16) * (i + 1) > 0x4000) {
 8000e24:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
      target_amplitude[i] = 0;
 8000e28:	ac04      	add	r4, sp, #16
      target_amplitude[i] = target_amplitude[i] * attenuation >> 16;
 8000e2a:	bf9f      	itttt	ls
 8000e2c:	f854 4022 	ldrls.w	r4, [r4, r2, lsl #2]
 8000e30:	f10d 0a10 	addls.w	sl, sp, #16
 8000e34:	fb04 f409 	mulls.w	r4, r4, r9
 8000e38:	1424      	asrls	r4, r4, #16
      target_amplitude[i] = 0;
 8000e3a:	bf8c      	ite	hi
 8000e3c:	f844 8022 	strhi.w	r8, [r4, r2, lsl #2]
      target_amplitude[i] = target_amplitude[i] * attenuation >> 16;
 8000e40:	f84a 4022 	strls.w	r4, [sl, r2, lsl #2]
    amplitude[i] = state_.hrm.amplitude[i];
 8000e44:	f85c 4b04 	ldr.w	r4, [ip], #4
 8000e48:	443e      	add	r6, r7
 8000e4a:	f84e 4022 	str.w	r4, [lr, r2, lsl #2]
 8000e4e:	3201      	adds	r2, #1
  for (size_t i = 0; i < kNumAdditiveHarmonics; ++i) {
 8000e50:	2a0c      	cmp	r2, #12
 8000e52:	d1e7      	bne.n	8000e24 <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj+0xb4>
  int32_t a = table[phase >> 24];
 8000e54:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8000f2c <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj+0x1bc>
 8000e58:	f10b 0204 	add.w	r2, fp, #4
    if (*sync++ || *sync++) {
      phase = 0;
    }
    out = 0;
    for (size_t i = 0; i < kNumAdditiveHarmonics; ++i) {
      out += Interpolate824(wav_sine, phase * (i + 1)) * amplitude[i] >> 15;
 8000e5c:	f10d 0a40 	add.w	sl, sp, #64	; 0x40
  while (size) {
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d04e      	beq.n	8000f02 <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj+0x192>
    if (*sync++ || *sync++) {
 8000e64:	780c      	ldrb	r4, [r1, #0]
 8000e66:	2c00      	cmp	r4, #0
 8000e68:	d042      	beq.n	8000ef0 <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj+0x180>
      phase = 0;
 8000e6a:	2500      	movs	r5, #0
    if (*sync++ || *sync++) {
 8000e6c:	f101 0801 	add.w	r8, r1, #1
      phase = 0;
 8000e70:	2600      	movs	r6, #0
 8000e72:	46ac      	mov	ip, r5
    out = 0;
 8000e74:	9601      	str	r6, [sp, #4]
  int32_t b = table[(phase >> 24) + 1];
 8000e76:	492b      	ldr	r1, [pc, #172]	; (8000f24 <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj+0x1b4>)
  int32_t a = table[phase >> 24];
 8000e78:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
 8000e7c:	f939 401e 	ldrsh.w	r4, [r9, lr, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 8000e80:	f931 b01e 	ldrsh.w	fp, [r1, lr, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 8000e84:	f3cc 2e0f 	ubfx	lr, ip, #8, #16
 8000e88:	ebab 0b04 	sub.w	fp, fp, r4
 8000e8c:	fb0e fe0b 	mul.w	lr, lr, fp
      out += Interpolate824(wav_sine, phase * (i + 1)) * amplitude[i] >> 15;
 8000e90:	f85a 7026 	ldr.w	r7, [sl, r6, lsl #2]
 8000e94:	eb04 4e2e 	add.w	lr, r4, lr, asr #16
 8000e98:	fa0f fe8e 	sxth.w	lr, lr
 8000e9c:	fb07 fe0e 	mul.w	lr, r7, lr
 8000ea0:	9901      	ldr	r1, [sp, #4]
 8000ea2:	44ac      	add	ip, r5
 8000ea4:	eb01 31ee 	add.w	r1, r1, lr, asr #15
 8000ea8:	9101      	str	r1, [sp, #4]
      amplitude[i] += (target_amplitude[i] - amplitude[i]) >> 8;
 8000eaa:	a904      	add	r1, sp, #16
 8000eac:	f851 4026 	ldr.w	r4, [r1, r6, lsl #2]
 8000eb0:	1be4      	subs	r4, r4, r7
 8000eb2:	eb07 2424 	add.w	r4, r7, r4, asr #8
 8000eb6:	f84a 4026 	str.w	r4, [sl, r6, lsl #2]
 8000eba:	3601      	adds	r6, #1
    for (size_t i = 0; i < kNumAdditiveHarmonics; ++i) {
 8000ebc:	2e0c      	cmp	r6, #12
 8000ebe:	d1da      	bne.n	8000e76 <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj+0x106>
 8000ec0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000ec4:	9c01      	ldr	r4, [sp, #4]
    }
    CLIP(out)
    *buffer++ = (out + previous_sample) >> 1;
    *buffer++ = out;
    previous_sample = out;
    size -= 2;
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	428c      	cmp	r4, r1
 8000eca:	bfa8      	it	ge
 8000ecc:	460c      	movge	r4, r1
 8000ece:	4621      	mov	r1, r4
 8000ed0:	4c15      	ldr	r4, [pc, #84]	; (8000f28 <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj+0x1b8>)
 8000ed2:	3204      	adds	r2, #4
 8000ed4:	42a1      	cmp	r1, r4
 8000ed6:	bfb8      	it	lt
 8000ed8:	4621      	movlt	r1, r4
    *buffer++ = (out + previous_sample) >> 1;
 8000eda:	9c00      	ldr	r4, [sp, #0]
 8000edc:	440c      	add	r4, r1
 8000ede:	1064      	asrs	r4, r4, #1
    *buffer++ = out;
 8000ee0:	b209      	sxth	r1, r1
 8000ee2:	f822 1c06 	strh.w	r1, [r2, #-6]
    *buffer++ = (out + previous_sample) >> 1;
 8000ee6:	f822 4c08 	strh.w	r4, [r2, #-8]
    *buffer++ = out;
 8000eea:	9100      	str	r1, [sp, #0]
  while (size) {
 8000eec:	4641      	mov	r1, r8
 8000eee:	e7b7      	b.n	8000e60 <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj+0xf0>
    if (*sync++ || *sync++) {
 8000ef0:	f101 0802 	add.w	r8, r1, #2
 8000ef4:	7849      	ldrb	r1, [r1, #1]
 8000ef6:	b911      	cbnz	r1, 8000efe <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj+0x18e>
    phase += phase_increment;
 8000ef8:	9903      	ldr	r1, [sp, #12]
 8000efa:	440d      	add	r5, r1
 8000efc:	e7b8      	b.n	8000e70 <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj+0x100>
      phase = 0;
 8000efe:	4625      	mov	r5, r4
 8000f00:	e7b6      	b.n	8000e70 <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj+0x100>
  }
  state_.add.previous_sample = previous_sample;
 8000f02:	9a00      	ldr	r2, [sp, #0]
  phase_ = phase;
 8000f04:	6005      	str	r5, [r0, #0]
  state_.add.previous_sample = previous_sample;
 8000f06:	f8a0 20d0 	strh.w	r2, [r0, #208]	; 0xd0
  for (size_t i = 0; i < kNumAdditiveHarmonics; ++i) {
    state_.hrm.amplitude[i] = amplitude[i];
 8000f0a:	a910      	add	r1, sp, #64	; 0x40
 8000f0c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000f10:	9802      	ldr	r0, [sp, #8]
  for (size_t i = 0; i < kNumAdditiveHarmonics; ++i) {
 8000f12:	3301      	adds	r3, #1
    state_.hrm.amplitude[i] = amplitude[i];
 8000f14:	f840 2b04 	str.w	r2, [r0], #4
  for (size_t i = 0; i < kNumAdditiveHarmonics; ++i) {
 8000f18:	2b0c      	cmp	r3, #12
    state_.hrm.amplitude[i] = amplitude[i];
 8000f1a:	9002      	str	r0, [sp, #8]
  for (size_t i = 0; i < kNumAdditiveHarmonics; ++i) {
 8000f1c:	d1f6      	bne.n	8000f0c <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj+0x19c>
  }
}
 8000f1e:	b01d      	add	sp, #116	; 0x74
 8000f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f24:	0800d338 	.word	0x0800d338
 8000f28:	ffff8001 	.word	0xffff8001
 8000f2c:	0800d336 	.word	0x0800d336

08000f30 <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj>:
static const int32_t kBiquadPole2 = -2959;

void DigitalOscillator::RenderBowed(
    const uint8_t* sync,
    int16_t* buffer,
    size_t size) {
 8000f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f34:	b08f      	sub	sp, #60	; 0x3c
 8000f36:	9303      	str	r3, [sp, #12]
  int8_t* dl_b = delay_lines_.bowed.bridge;
  int8_t* dl_n = delay_lines_.bowed.neck;
  
  if (strike_) {
 8000f38:	7f03      	ldrb	r3, [r0, #28]
    size_t size) {
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	9205      	str	r2, [sp, #20]
  int8_t* dl_b = delay_lines_.bowed.bridge;
 8000f3e:	f500 7aca 	add.w	sl, r0, #404	; 0x194
  int8_t* dl_n = delay_lines_.bowed.neck;
 8000f42:	f200 5594 	addw	r5, r0, #1428	; 0x594
  if (strike_) {
 8000f46:	b19b      	cbz	r3, 8000f70 <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj+0x40>
    memset(dl_b, 0, sizeof(delay_lines_.bowed.bridge));
 8000f48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4650      	mov	r0, sl
 8000f50:	f006 fccd 	bl	80078ee <memset>
    memset(dl_n, 0, sizeof(delay_lines_.bowed.neck));
 8000f54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4628      	mov	r0, r5
 8000f5c:	f006 fcc7 	bl	80078ee <memset>
    memset(&state_, 0, sizeof(state_));
 8000f60:	22c4      	movs	r2, #196	; 0xc4
 8000f62:	2100      	movs	r1, #0
 8000f64:	f104 0020 	add.w	r0, r4, #32
 8000f68:	f006 fcc1 	bl	80078ee <memset>
    strike_ = false;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	7723      	strb	r3, [r4, #28]
  }
  int16_t parameter_0 = 172 - (parameter_[0]  >> 8);
 8000f70:	f994 300d 	ldrsb.w	r3, [r4, #13]
  int16_t parameter_1 = 6 + (parameter_[1]  >> 9);
 8000f74:	f9b4 600e 	ldrsh.w	r6, [r4, #14]
  int16_t parameter_0 = 172 - (parameter_[0]  >> 8);
 8000f78:	f1c3 03ac 	rsb	r3, r3, #172	; 0xac
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	9308      	str	r3, [sp, #32]

  uint16_t delay_ptr = state_.phy.delay_ptr;
 8000f80:	8c23      	ldrh	r3, [r4, #32]
  int16_t parameter_1 = 6 + (parameter_[1]  >> 9);
 8000f82:	1276      	asrs	r6, r6, #9
  uint16_t delay_ptr = state_.phy.delay_ptr;
 8000f84:	9302      	str	r3, [sp, #8]
  uint16_t excitation_ptr = state_.phy.excitation_ptr;
 8000f86:	8c63      	ldrh	r3, [r4, #34]	; 0x22
  int16_t parameter_1 = 6 + (parameter_[1]  >> 9);
 8000f88:	1db2      	adds	r2, r6, #6
  uint16_t excitation_ptr = state_.phy.excitation_ptr;
 8000f8a:	9309      	str	r3, [sp, #36]	; 0x24
  int32_t lp_state = state_.phy.lp_state;

  int32_t biquad_y0 = state_.phy.filter_state[0];
  int32_t biquad_y1 = state_.phy.filter_state[1];
  // Setup delay times and interpolation coefficients.
  uint32_t delay = (delay_ >> 1) - (2 << 16);  // Compensation for 1-pole delay
 8000f8c:	68a3      	ldr	r3, [r4, #8]
  int32_t biquad_y1 = state_.phy.filter_state[1];
 8000f8e:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
  uint32_t delay = (delay_ >> 1) - (2 << 16);  // Compensation for 1-pole delay
 8000f92:	085b      	lsrs	r3, r3, #1
 8000f94:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
  uint32_t bridge_delay = (delay >> 8) * parameter_1;
 8000f98:	0a1e      	lsrs	r6, r3, #8
 8000f9a:	4356      	muls	r6, r2
  int32_t biquad_y0 = state_.phy.filter_state[0];
 8000f9c:	e9d4 1909 	ldrd	r1, r9, [r4, #36]	; 0x24
  // Transpose one octave up when the note is too low to fit in the delays.
  while ((delay - bridge_delay) > ((kWGNeckLength - 1) << 16)
         || bridge_delay > ((kWGBridgeLength - 1) << 16)) {
 8000fa0:	4867      	ldr	r0, [pc, #412]	; (8001140 <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj+0x210>)
 8000fa2:	4f68      	ldr	r7, [pc, #416]	; (8001144 <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj+0x214>)
  while ((delay - bridge_delay) > ((kWGNeckLength - 1) << 16)
 8000fa4:	1b9a      	subs	r2, r3, r6
         || bridge_delay > ((kWGBridgeLength - 1) << 16)) {
 8000fa6:	4282      	cmp	r2, r0
 8000fa8:	d801      	bhi.n	8000fae <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj+0x7e>
 8000faa:	42be      	cmp	r6, r7
 8000fac:	d902      	bls.n	8000fb4 <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj+0x84>
    delay >>= 1;
 8000fae:	085b      	lsrs	r3, r3, #1
    bridge_delay >>= 1;
 8000fb0:	0876      	lsrs	r6, r6, #1
  while ((delay - bridge_delay) > ((kWGNeckLength - 1) << 16)
 8000fb2:	e7f7      	b.n	8000fa4 <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj+0x74>
  uint16_t bridge_delay_integral = bridge_delay >> 16;
  uint16_t bridge_delay_fractional = bridge_delay & 0xffff;
  uint32_t neck_delay = delay - bridge_delay;
  uint32_t neck_delay_integral = neck_delay >> 16;
  uint16_t neck_delay_fractional = neck_delay & 0xffff;
  int16_t previous_sample = state_.phy.previous_sample;
 8000fb4:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8000fb8:	f04f 0800 	mov.w	r8, #0
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	9b02      	ldr	r3, [sp, #8]
 8000fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000fc4:	eba3 4316 	sub.w	r3, r3, r6, lsr #16
 8000fc8:	930a      	str	r3, [sp, #40]	; 0x28
 8000fca:	9b02      	ldr	r3, [sp, #8]
  return (a * (65535 - balance) + b * balance) >> 16;
 8000fcc:	b2b6      	uxth	r6, r6
 8000fce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000fd2:	eba3 4312 	sub.w	r3, r3, r2, lsr #16
 8000fd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8000fd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fdc:	b292      	uxth	r2, r2
 8000fde:	9606      	str	r6, [sp, #24]
 8000fe0:	1b9e      	subs	r6, r3, r6
 8000fe2:	1a9b      	subs	r3, r3, r2
 8000fe4:	960c      	str	r6, [sp, #48]	; 0x30
 8000fe6:	9207      	str	r2, [sp, #28]
 8000fe8:	930d      	str	r3, [sp, #52]	; 0x34
 8000fea:	9a02      	ldr	r2, [sp, #8]
 8000fec:	fa1f f388 	uxth.w	r3, r8
 8000ff0:	eb03 0e02 	add.w	lr, r3, r2
 8000ff4:	fa1f fe8e 	uxth.w	lr, lr
 8000ff8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ffa:	f3ce 060b 	ubfx	r6, lr, #0, #12
 8000ffe:	189a      	adds	r2, r3, r2
 8001000:	9604      	str	r6, [sp, #16]
  // Rendered at half the sample rate (for avoiding big rounding error in
  // coefficients of body IIR filter).
  while (size) {
 8001002:	9e03      	ldr	r6, [sp, #12]
 8001004:	b292      	uxth	r2, r2
 8001006:	ea4f 0b62 	mov.w	fp, r2, asr #1
 800100a:	2e00      	cmp	r6, #0
 800100c:	f000 8087 	beq.w	800111e <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj+0x1ee>
    phase_ += phase_increment_;
 8001010:	e9d4 6700 	ldrd	r6, r7, [r4]
 8001014:	443e      	add	r6, r7
 8001016:	6026      	str	r6, [r4, #0]
 8001018:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800101a:	9806      	ldr	r0, [sp, #24]
 800101c:	199f      	adds	r7, r3, r6
 800101e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8001020:	b2bf      	uxth	r7, r7
 8001022:	4433      	add	r3, r6
    int32_t new_velocity, friction;
    uint16_t bridge_delay_ptr = delay_ptr + 2 * kWGBridgeLength \
        - bridge_delay_integral;
    uint16_t neck_delay_ptr = delay_ptr + 2 * kWGNeckLength \
        - neck_delay_integral;
    int16_t bridge_dl_a = dl_b[bridge_delay_ptr % kWGBridgeLength];
 8001024:	f3c7 0609 	ubfx	r6, r7, #0, #10
    int16_t bridge_dl_b = dl_b[(bridge_delay_ptr - 1) % kWGBridgeLength];
 8001028:	3f01      	subs	r7, #1
 800102a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800102e:	f91a 7007 	ldrsb.w	r7, [sl, r7]
 8001032:	f91a 6006 	ldrsb.w	r6, [sl, r6]
 8001036:	4347      	muls	r7, r0
 8001038:	980c      	ldr	r0, [sp, #48]	; 0x30
 800103a:	b29b      	uxth	r3, r3
 800103c:	fb00 7606 	mla	r6, r0, r6, r7
    int16_t nut_dl_a = dl_n[neck_delay_ptr % kWGNeckLength];
 8001040:	f3c3 070b 	ubfx	r7, r3, #0, #12
    int16_t nut_dl_b = dl_n[(neck_delay_ptr - 1) % kWGNeckLength];
 8001044:	3b01      	subs	r3, #1
 8001046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800104a:	56eb      	ldrsb	r3, [r5, r3]
 800104c:	9807      	ldr	r0, [sp, #28]
 800104e:	57ef      	ldrsb	r7, [r5, r7]
 8001050:	4343      	muls	r3, r0
 8001052:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001054:	1436      	asrs	r6, r6, #16
 8001056:	fb00 3707 	mla	r7, r0, r7, r3
    int32_t bridge_value = Mix(
        bridge_dl_a, bridge_dl_b, bridge_delay_fractional) << 8;
    int32_t nut_value = Mix(nut_dl_a, nut_dl_b, neck_delay_fractional) << 8;
    lp_state = (bridge_value * kBridgeLPGain + lp_state * kBridgeLPPole1) >> 15;
 800105a:	f244 6366 	movw	r3, #18022	; 0x4666
 800105e:	4359      	muls	r1, r3
 8001060:	f243 63b8 	movw	r3, #14008	; 0x36b8
        bridge_dl_a, bridge_dl_b, bridge_delay_fractional) << 8;
 8001064:	0236      	lsls	r6, r6, #8
    lp_state = (bridge_value * kBridgeLPGain + lp_state * kBridgeLPPole1) >> 15;
 8001066:	fb03 1106 	mla	r1, r3, r6, r1
    int32_t bridge_reflection = -lp_state;
    int32_t nut_reflection = -nut_value;
    int32_t string_velocity = bridge_reflection + nut_reflection;
    int32_t bow_velocity = lut_bowing_envelope[excitation_ptr >> 1];
    bow_velocity += lut_bowing_envelope[(excitation_ptr + 1) >> 1];
 800106a:	3201      	adds	r2, #1
    int32_t bow_velocity = lut_bowing_envelope[excitation_ptr >> 1];
 800106c:	4b36      	ldr	r3, [pc, #216]	; (8001148 <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj+0x218>)
    bow_velocity += lut_bowing_envelope[(excitation_ptr + 1) >> 1];
 800106e:	1052      	asrs	r2, r2, #1
    int32_t bow_velocity = lut_bowing_envelope[excitation_ptr >> 1];
 8001070:	f833 b01b 	ldrh.w	fp, [r3, fp, lsl #1]
    bow_velocity += lut_bowing_envelope[(excitation_ptr + 1) >> 1];
 8001074:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    lp_state = (bridge_value * kBridgeLPGain + lp_state * kBridgeLPPole1) >> 15;
 8001078:	13c9      	asrs	r1, r1, #15
    bow_velocity += lut_bowing_envelope[(excitation_ptr + 1) >> 1];
 800107a:	445b      	add	r3, fp
 800107c:	143f      	asrs	r7, r7, #16
    int32_t nut_value = Mix(nut_dl_a, nut_dl_b, neck_delay_fractional) << 8;
 800107e:	023f      	lsls	r7, r7, #8
    bow_velocity >>= 1;
    int32_t velocity_delta = bow_velocity - string_velocity;
 8001080:	eb01 0353 	add.w	r3, r1, r3, lsr #1
    
    friction = velocity_delta * parameter_0 >> 5;
 8001084:	9a08      	ldr	r2, [sp, #32]
    int32_t velocity_delta = bow_velocity - string_velocity;
 8001086:	443b      	add	r3, r7
    friction = velocity_delta * parameter_0 >> 5;
 8001088:	435a      	muls	r2, r3
 800108a:	1152      	asrs	r2, r2, #5
 800108c:	2a00      	cmp	r2, #0
    }
    if (friction >= (1 << 17)) {
      friction = (1 << 17) - 1;
    }
    //friction = Interpolate824(lut_bowing_friction, friction << 15);
    friction = lut_bowing_friction[friction >> 9];
 800108e:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8001154 <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj+0x224>
 8001092:	bfb8      	it	lt
 8001094:	4252      	neglt	r2, r2
 8001096:	455a      	cmp	r2, fp
 8001098:	bfa8      	it	ge
 800109a:	465a      	movge	r2, fp
 800109c:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8001158 <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj+0x228>
 80010a0:	1252      	asrs	r2, r2, #9
 80010a2:	f83b 2012 	ldrh.w	r2, [fp, r2, lsl #1]
    new_velocity = friction * velocity_delta >> 15;
    dl_n[delay_ptr % kWGNeckLength] = (bridge_reflection + new_velocity) >> 8;
 80010a6:	9804      	ldr	r0, [sp, #16]
    new_velocity = friction * velocity_delta >> 15;
 80010a8:	4353      	muls	r3, r2
 80010aa:	13db      	asrs	r3, r3, #15
    dl_n[delay_ptr % kWGNeckLength] = (bridge_reflection + new_velocity) >> 8;
 80010ac:	1a5a      	subs	r2, r3, r1
    dl_b[delay_ptr % kWGBridgeLength] = (nut_reflection + new_velocity) >> 8;
 80010ae:	1bdf      	subs	r7, r3, r7
    ++delay_ptr;
    
    int32_t temp = bridge_value * kBiquadGain >> 15;
 80010b0:	f641 1399 	movw	r3, #6553	; 0x1999
 80010b4:	4373      	muls	r3, r6
    temp += biquad_y0 * kBiquadPole1 >> 12;
 80010b6:	f641 3624 	movw	r6, #6948	; 0x1b24
 80010ba:	fb06 f609 	mul.w	r6, r6, r9
 80010be:	1336      	asrs	r6, r6, #12
 80010c0:	eb06 36e3 	add.w	r6, r6, r3, asr #15
    temp += biquad_y1 * kBiquadPole2 >> 12;
 80010c4:	4b21      	ldr	r3, [pc, #132]	; (800114c <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj+0x21c>)
    dl_n[delay_ptr % kWGNeckLength] = (bridge_reflection + new_velocity) >> 8;
 80010c6:	1212      	asrs	r2, r2, #8
    temp += biquad_y1 * kBiquadPole2 >> 12;
 80010c8:	fb03 f30c 	mul.w	r3, r3, ip
 80010cc:	eb06 3623 	add.w	r6, r6, r3, asr #12
 80010d0:	f647 73ff 	movw	r3, #32767	; 0x7fff
    int32_t out = temp - biquad_y1;
 80010d4:	eba6 0c0c 	sub.w	ip, r6, ip
 80010d8:	459c      	cmp	ip, r3
 80010da:	bfa8      	it	ge
 80010dc:	469c      	movge	ip, r3
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj+0x220>)
    dl_n[delay_ptr % kWGNeckLength] = (bridge_reflection + new_velocity) >> 8;
 80010e0:	542a      	strb	r2, [r5, r0]
 80010e2:	459c      	cmp	ip, r3
 80010e4:	bfb8      	it	lt
 80010e6:	469c      	movlt	ip, r3
    biquad_y1 = biquad_y0;
    biquad_y0 = temp;

    CLIP(out)
    *buffer++ = (out + previous_sample) >> 1;
 80010e8:	9b01      	ldr	r3, [sp, #4]
    dl_b[delay_ptr % kWGBridgeLength] = (nut_reflection + new_velocity) >> 8;
 80010ea:	f3ce 0e09 	ubfx	lr, lr, #0, #10
    *buffer++ = (out + previous_sample) >> 1;
 80010ee:	4463      	add	r3, ip
 80010f0:	1058      	asrs	r0, r3, #1
 80010f2:	9b05      	ldr	r3, [sp, #20]
    dl_b[delay_ptr % kWGBridgeLength] = (nut_reflection + new_velocity) >> 8;
 80010f4:	123f      	asrs	r7, r7, #8
 80010f6:	f80a 700e 	strb.w	r7, [sl, lr]
    *buffer++ = (out + previous_sample) >> 1;
 80010fa:	f823 0028 	strh.w	r0, [r3, r8, lsl #2]
    *buffer++ = out;
 80010fe:	fa0f f38c 	sxth.w	r3, ip
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	9b05      	ldr	r3, [sp, #20]
 8001106:	9a01      	ldr	r2, [sp, #4]
 8001108:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800110c:	805a      	strh	r2, [r3, #2]
    previous_sample = out;
    ++excitation_ptr;
    size -= 2;
 800110e:	9b03      	ldr	r3, [sp, #12]
  while (size) {
 8001110:	46cc      	mov	ip, r9
    size -= 2;
 8001112:	3b02      	subs	r3, #2
 8001114:	9303      	str	r3, [sp, #12]
 8001116:	f108 0801 	add.w	r8, r8, #1
    biquad_y0 = temp;
 800111a:	46b1      	mov	r9, r6
  while (size) {
 800111c:	e765      	b.n	8000fea <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj+0xba>
  }
  if ((excitation_ptr >> 1) >= LUT_BOWING_ENVELOPE_SIZE - 32) {
    excitation_ptr = (LUT_BOWING_ENVELOPE_SIZE - 32) << 1;
 800111e:	f5bb 7f34 	cmp.w	fp, #720	; 0x2d0
 8001122:	bfa8      	it	ge
 8001124:	f44f 62b4 	movge.w	r2, #1440	; 0x5a0
  }
  state_.phy.delay_ptr = delay_ptr % kWGNeckLength;
 8001128:	9b04      	ldr	r3, [sp, #16]
  state_.phy.excitation_ptr = excitation_ptr;
 800112a:	8462      	strh	r2, [r4, #34]	; 0x22
  state_.phy.delay_ptr = delay_ptr % kWGNeckLength;
 800112c:	8423      	strh	r3, [r4, #32]
  state_.phy.lp_state = lp_state;
  state_.phy.filter_state[0] = biquad_y0;
  state_.phy.filter_state[1] = biquad_y1;
  state_.phy.previous_sample = previous_sample;
 800112e:	9b01      	ldr	r3, [sp, #4]
  state_.phy.filter_state[0] = biquad_y0;
 8001130:	e9c4 1909 	strd	r1, r9, [r4, #36]	; 0x24
  state_.phy.filter_state[1] = biquad_y1;
 8001134:	f8c4 c02c 	str.w	ip, [r4, #44]	; 0x2c
  state_.phy.previous_sample = previous_sample;
 8001138:	8623      	strh	r3, [r4, #48]	; 0x30
}
 800113a:	b00f      	add	sp, #60	; 0x3c
 800113c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001140:	0fff0000 	.word	0x0fff0000
 8001144:	03ff0000 	.word	0x03ff0000
 8001148:	080090e4 	.word	0x080090e4
 800114c:	fffff471 	.word	0xfffff471
 8001150:	ffff8001 	.word	0xffff8001
 8001154:	0001ffff 	.word	0x0001ffff
 8001158:	080096c4 	.word	0x080096c4

0800115c <_ZN6braids10Excitation7ProcessEv>:
  bool done() {
    return counter_ == 0;
  }
  
  inline int32_t Process() {
    state_ = (state_ * decay_ >> 12);
 800115c:	68c2      	ldr	r2, [r0, #12]
 800115e:	6843      	ldr	r3, [r0, #4]
 8001160:	6901      	ldr	r1, [r0, #16]
 8001162:	4353      	muls	r3, r2
    if (counter_ > 0) {
 8001164:	6882      	ldr	r2, [r0, #8]
    state_ = (state_ * decay_ >> 12);
 8001166:	0b1b      	lsrs	r3, r3, #12
    if (counter_ > 0) {
 8001168:	2a00      	cmp	r2, #0
    state_ = (state_ * decay_ >> 12);
 800116a:	60c3      	str	r3, [r0, #12]
    if (counter_ > 0) {
 800116c:	dd08      	ble.n	8001180 <_ZN6braids10Excitation7ProcessEv+0x24>
      --counter_;
 800116e:	3a01      	subs	r2, #1
 8001170:	6082      	str	r2, [r0, #8]
      if (counter_ == 0) {
 8001172:	b92a      	cbnz	r2, 8001180 <_ZN6braids10Excitation7ProcessEv+0x24>
        state_ += level_ < 0 ? -level_ : level_;
 8001174:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 8001178:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 800117c:	4413      	add	r3, r2
 800117e:	60c3      	str	r3, [r0, #12]
 8001180:	68c0      	ldr	r0, [r0, #12]
      }
    }
    return level_ < 0 ? -state_ : state_;
 8001182:	2900      	cmp	r1, #0
 8001184:	bfb8      	it	lt
 8001186:	4240      	neglt	r0, r0
  }
 8001188:	4770      	bx	lr

0800118a <_ZN6braids3Svf4InitEv>:
  ~Svf() { }
  
  void Init() {
    lp_ = 0;
    bp_ = 0;
    frequency_ = 33 << 7;
 800118a:	f44f 5284 	mov.w	r2, #4224	; 0x1080
 800118e:	8042      	strh	r2, [r0, #2]
    resonance_ = 16384;
 8001190:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    lp_ = 0;
 8001194:	2300      	movs	r3, #0
    resonance_ = 16384;
 8001196:	8082      	strh	r2, [r0, #4]
    dirty_ = true;
 8001198:	2201      	movs	r2, #1
    bp_ = 0;
 800119a:	e9c0 3305 	strd	r3, r3, [r0, #20]
    dirty_ = true;
 800119e:	7002      	strb	r2, [r0, #0]
    punch_ = 0;
 80011a0:	6083      	str	r3, [r0, #8]
    mode_ = SVF_MODE_BP;
 80011a2:	7702      	strb	r2, [r0, #28]
  }
 80011a4:	4770      	bx	lr

080011a6 <_ZN6braids3Svf13set_frequencyEs>:
  
  void set_frequency(int16_t frequency) {
    dirty_ = dirty_ || (frequency_ != frequency);
 80011a6:	7803      	ldrb	r3, [r0, #0]
 80011a8:	b923      	cbnz	r3, 80011b4 <_ZN6braids3Svf13set_frequencyEs+0xe>
 80011aa:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80011ae:	1a5b      	subs	r3, r3, r1
 80011b0:	bf18      	it	ne
 80011b2:	2301      	movne	r3, #1
 80011b4:	7003      	strb	r3, [r0, #0]
    frequency_ = frequency;
 80011b6:	8041      	strh	r1, [r0, #2]
  }
 80011b8:	4770      	bx	lr
	...

080011bc <_ZN6braids3Svf7ProcessEl>:
  void set_mode(SvfMode mode) {
    mode_ = mode;
  }

  inline int32_t Process(int32_t in) {
    if (dirty_) {
 80011bc:	7802      	ldrb	r2, [r0, #0]
  inline int32_t Process(int32_t in) {
 80011be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c0:	4603      	mov	r3, r0
    if (dirty_) {
 80011c2:	b32a      	cbz	r2, 8001210 <_ZN6braids3Svf7ProcessEl+0x54>
      f_ = stmlib::Interpolate824(lut_svf_cutoff, frequency_ << 17);
 80011c4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
  uint32_t a = table[phase >> 24];
 80011c8:	4c31      	ldr	r4, [pc, #196]	; (8001290 <_ZN6braids3Svf7ProcessEl+0xd4>)
 80011ca:	0452      	lsls	r2, r2, #17
 80011cc:	0e15      	lsrs	r5, r2, #24
 80011ce:	f834 0015 	ldrh.w	r0, [r4, r5, lsl #1]
  uint32_t b = table[(phase >> 24) + 1];
 80011d2:	3402      	adds	r4, #2
 80011d4:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 80011d8:	0a12      	lsrs	r2, r2, #8
 80011da:	1a24      	subs	r4, r4, r0
 80011dc:	b292      	uxth	r2, r2
 80011de:	4362      	muls	r2, r4
 80011e0:	eb00 4212 	add.w	r2, r0, r2, lsr #16
 80011e4:	b292      	uxth	r2, r2
 80011e6:	60da      	str	r2, [r3, #12]
      damp_ = stmlib::Interpolate824(lut_svf_damp, resonance_ << 17);
 80011e8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
  uint32_t a = table[phase >> 24];
 80011ec:	4c29      	ldr	r4, [pc, #164]	; (8001294 <_ZN6braids3Svf7ProcessEl+0xd8>)
 80011ee:	0452      	lsls	r2, r2, #17
 80011f0:	0e15      	lsrs	r5, r2, #24
 80011f2:	f834 0015 	ldrh.w	r0, [r4, r5, lsl #1]
  uint32_t b = table[(phase >> 24) + 1];
 80011f6:	3402      	adds	r4, #2
 80011f8:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 80011fc:	0a12      	lsrs	r2, r2, #8
 80011fe:	1a24      	subs	r4, r4, r0
 8001200:	b292      	uxth	r2, r2
 8001202:	4362      	muls	r2, r4
 8001204:	eb00 4212 	add.w	r2, r0, r2, lsr #16
 8001208:	b292      	uxth	r2, r2
 800120a:	611a      	str	r2, [r3, #16]
      dirty_ = false;
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
    }
    int32_t f = f_;
    int32_t damp = damp_;
    if (punch_) {
 8001210:	689e      	ldr	r6, [r3, #8]
    int32_t damp = damp_;
 8001212:	e9d3 4503 	ldrd	r4, r5, [r3, #12]
 8001216:	6958      	ldr	r0, [r3, #20]
    if (punch_) {
 8001218:	b16e      	cbz	r6, 8001236 <_ZN6braids3Svf7ProcessEl+0x7a>
      int32_t punch_signal = lp_ > 4096 ? lp_ : 2048;
 800121a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800121e:	bfcc      	ite	gt
 8001220:	4602      	movgt	r2, r0
 8001222:	f44f 6200 	movle.w	r2, #2048	; 0x800
      f += ((punch_signal >> 4) * punch_) >> 9;
 8001226:	1117      	asrs	r7, r2, #4
 8001228:	437e      	muls	r6, r7
      damp += ((punch_signal - 2048) >> 3);
 800122a:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
      f += ((punch_signal >> 4) * punch_) >> 9;
 800122e:	eb04 2466 	add.w	r4, r4, r6, asr #9
      damp += ((punch_signal - 2048) >> 3);
 8001232:	eb05 05e2 	add.w	r5, r5, r2, asr #3
    }
    int32_t notch = in - (bp_ * damp >> 15);
 8001236:	699a      	ldr	r2, [r3, #24]
 8001238:	4355      	muls	r5, r2
 800123a:	eba1 31e5 	sub.w	r1, r1, r5, asr #15
    lp_ += f * bp_ >> 15;
 800123e:	fb04 f502 	mul.w	r5, r4, r2
 8001242:	eb00 30e5 	add.w	r0, r0, r5, asr #15
    CLIP(lp_)
 8001246:	4d14      	ldr	r5, [pc, #80]	; (8001298 <_ZN6braids3Svf7ProcessEl+0xdc>)
    lp_ += f * bp_ >> 15;
 8001248:	42a8      	cmp	r0, r5
 800124a:	bfb8      	it	lt
 800124c:	4628      	movlt	r0, r5
    CLIP(lp_)
 800124e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    lp_ += f * bp_ >> 15;
 8001252:	6158      	str	r0, [r3, #20]
    CLIP(lp_)
 8001254:	bfa4      	itt	ge
 8001256:	f647 70ff 	movwge	r0, #32767	; 0x7fff
 800125a:	6158      	strge	r0, [r3, #20]
    int32_t hp = notch - lp_;
 800125c:	6958      	ldr	r0, [r3, #20]
 800125e:	1a09      	subs	r1, r1, r0
    bp_ += f * hp >> 15;
 8001260:	434c      	muls	r4, r1
 8001262:	eb02 32e4 	add.w	r2, r2, r4, asr #15
    CLIP(bp_)
 8001266:	4c0c      	ldr	r4, [pc, #48]	; (8001298 <_ZN6braids3Svf7ProcessEl+0xdc>)
    bp_ += f * hp >> 15;
 8001268:	42a2      	cmp	r2, r4
 800126a:	bfb8      	it	lt
 800126c:	4622      	movlt	r2, r4
    CLIP(bp_)
 800126e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    bp_ += f * hp >> 15;
 8001272:	619a      	str	r2, [r3, #24]
    CLIP(bp_)
 8001274:	bfa4      	itt	ge
 8001276:	f647 72ff 	movwge	r2, #32767	; 0x7fff
 800127a:	619a      	strge	r2, [r3, #24]
    return mode_ == SVF_MODE_BP ? bp_ : (mode_ == SVF_MODE_HP ? hp : lp_);
 800127c:	7f1a      	ldrb	r2, [r3, #28]
 800127e:	2a01      	cmp	r2, #1
 8001280:	d101      	bne.n	8001286 <_ZN6braids3Svf7ProcessEl+0xca>
 8001282:	6998      	ldr	r0, [r3, #24]
  }
 8001284:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return mode_ == SVF_MODE_BP ? bp_ : (mode_ == SVF_MODE_HP ? hp : lp_);
 8001286:	2a02      	cmp	r2, #2
 8001288:	bf08      	it	eq
 800128a:	4608      	moveq	r0, r1
 800128c:	e7fa      	b.n	8001284 <_ZN6braids3Svf7ProcessEl+0xc8>
 800128e:	bf00      	nop
 8001290:	080086de 	.word	0x080086de
 8001294:	080080d8 	.word	0x080080d8
 8001298:	ffff8001 	.word	0xffff8001

0800129c <_ZN6braids17DigitalOscillator10RenderKickEPKhPsj>:
}

void DigitalOscillator::RenderKick(
    const uint8_t* sync,
    int16_t* buffer,
    size_t size) {
 800129c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012a0:	4691      	mov	r9, r2
  if (init_) {
 80012a2:	7ec2      	ldrb	r2, [r0, #27]
    size_t size) {
 80012a4:	b085      	sub	sp, #20
 80012a6:	4604      	mov	r4, r0
 80012a8:	461f      	mov	r7, r3
 80012aa:	f500 7a9a 	add.w	sl, r0, #308	; 0x134
  if (init_) {
 80012ae:	b332      	cbz	r2, 80012fe <_ZN6braids17DigitalOscillator10RenderKickEPKhPsj+0x62>
    decay_ = decay;
 80012b0:	f640 520c 	movw	r2, #3340	; 0xd0c
 80012b4:	2330      	movs	r3, #48	; 0x30
 80012b6:	f8c0 20e8 	str.w	r2, [r0, #232]	; 0xe8
 80012ba:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80012be:	e9c0 323e 	strd	r3, r2, [r0, #248]	; 0xf8
    decay_ = 4093;
 80012c2:	f640 72fd 	movw	r2, #4093	; 0xffd
    delay_ = 0;
 80012c6:	2500      	movs	r5, #0
    decay_ = 4093;
 80012c8:	f8c0 2110 	str.w	r2, [r0, #272]	; 0x110
    delay_ = delay;
 80012cc:	22c0      	movs	r2, #192	; 0xc0
    delay_ = 0;
 80012ce:	f8c0 50e4 	str.w	r5, [r0, #228]	; 0xe4
    delay_ = delay;
 80012d2:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
    state_ = 0;
 80012d6:	e9c0 553b 	strd	r5, r5, [r0, #236]	; 0xec
    counter_ = 0;
 80012da:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
    state_ = 0;
 80012de:	f8c0 5104 	str.w	r5, [r0, #260]	; 0x104
    counter_ = 0;
 80012e2:	f8c0 5114 	str.w	r5, [r0, #276]	; 0x114
    state_ = 0;
 80012e6:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118

    pulse_[2].Init();
    pulse_[2].set_delay(4.0e-3 * 48000);
    pulse_[2].set_decay(4093);

    svf_[0].Init();
 80012ea:	4650      	mov	r0, sl
 80012ec:	f7ff ff4d 	bl	800118a <_ZN6braids3Svf4InitEv>
    punch_ = (static_cast<uint32_t>(punch) * punch) >> 24;
 80012f0:	2240      	movs	r2, #64	; 0x40
 80012f2:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
    mode_ = mode;
 80012f6:	2201      	movs	r2, #1
    svf_[0].set_punch(32768);
    svf_[0].set_mode(SVF_MODE_BP);
    init_ = false;
 80012f8:	76e5      	strb	r5, [r4, #27]
 80012fa:	f884 2150 	strb.w	r2, [r4, #336]	; 0x150
  }
  
  if (strike_) {
 80012fe:	7f22      	ldrb	r2, [r4, #28]
 8001300:	b1ea      	cbz	r2, 800133e <_ZN6braids17DigitalOscillator10RenderKickEPKhPsj+0xa2>
    strike_ = false;
 8001302:	2200      	movs	r2, #0
 8001304:	7722      	strb	r2, [r4, #28]
    level_ = level;
 8001306:	4a4a      	ldr	r2, [pc, #296]	; (8001430 <_ZN6braids17DigitalOscillator10RenderKickEPKhPsj+0x194>)
 8001308:	f8c4 20f4 	str.w	r2, [r4, #244]	; 0xf4
    counter_ = delay_ + 1;
 800130c:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 8001310:	3201      	adds	r2, #1
 8001312:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
    level_ = level;
 8001316:	4a47      	ldr	r2, [pc, #284]	; (8001434 <_ZN6braids17DigitalOscillator10RenderKickEPKhPsj+0x198>)
 8001318:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
    counter_ = delay_ + 1;
 800131c:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 8001320:	3201      	adds	r2, #1
 8001322:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    level_ = level;
 8001326:	f244 6250 	movw	r2, #18000	; 0x4650
 800132a:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    counter_ = delay_ + 1;
 800132e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001332:	3201      	adds	r2, #1
 8001334:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
    punch_ = (static_cast<uint32_t>(punch) * punch) >> 24;
 8001338:	2222      	movs	r2, #34	; 0x22
 800133a:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
    pulse_[2].Trigger(18000);
    svf_[0].set_punch(24000);
  }
  
  uint32_t decay = parameter_[0];
  uint32_t scaled = 65535 - (decay << 1);
 800133e:	f64f 72ff 	movw	r2, #65535	; 0xffff
  uint32_t decay = parameter_[0];
 8001342:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
  uint32_t squared = scaled * scaled >> 16;
  scaled = squared * scaled >> 18;
  svf_[0].set_resonance(32768 - 128 - scaled);
  
  uint32_t coefficient = parameter_[1];
 8001346:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
  uint32_t scaled = 65535 - (decay << 1);
 800134a:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
  uint32_t squared = scaled * scaled >> 16;
 800134e:	fb02 f102 	mul.w	r1, r2, r2
 8001352:	0c09      	lsrs	r1, r1, #16
  scaled = squared * scaled >> 18;
 8001354:	434a      	muls	r2, r1
 8001356:	0c92      	lsrs	r2, r2, #18
  svf_[0].set_resonance(32768 - 128 - scaled);
 8001358:	f5c2 42ff 	rsb	r2, r2, #32640	; 0x7f80
    resonance_ = resonance;
 800135c:	f8a4 2138 	strh.w	r2, [r4, #312]	; 0x138
    dirty_ = true;
 8001360:	2201      	movs	r2, #1
  coefficient = coefficient * coefficient >> 15;
 8001362:	436d      	muls	r5, r5
 8001364:	0bed      	lsrs	r5, r5, #15
  coefficient = coefficient * coefficient >> 15;
 8001366:	436d      	muls	r5, r5
  int32_t lp_coefficient = 128 + (coefficient >> 1) * 3;
  int32_t lp_state = state_.svf.lp;
  
  while (size) {
    int32_t excitation = 0;
    excitation += pulse_[0].Process();
 8001368:	f104 03e4 	add.w	r3, r4, #228	; 0xe4
  int32_t lp_coefficient = 128 + (coefficient >> 1) * 3;
 800136c:	0c2d      	lsrs	r5, r5, #16
 800136e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    excitation += pulse_[0].Process();
 8001372:	9301      	str	r3, [sp, #4]
  int32_t lp_state = state_.svf.lp;
 8001374:	6a66      	ldr	r6, [r4, #36]	; 0x24
    excitation += !pulse_[1].done() ? 16384 : 0;
    excitation += pulse_[1].Process();
 8001376:	f104 03f8 	add.w	r3, r4, #248	; 0xf8
 800137a:	f884 2134 	strb.w	r2, [r4, #308]	; 0x134
  int32_t lp_coefficient = 128 + (coefficient >> 1) * 3;
 800137e:	3580      	adds	r5, #128	; 0x80
 8001380:	f109 0904 	add.w	r9, r9, #4
    excitation += pulse_[1].Process();
 8001384:	9302      	str	r3, [sp, #8]
  while (size) {
 8001386:	2f00      	cmp	r7, #0
 8001388:	d04e      	beq.n	8001428 <_ZN6braids17DigitalOscillator10RenderKickEPKhPsj+0x18c>
    excitation += pulse_[0].Process();
 800138a:	9801      	ldr	r0, [sp, #4]
 800138c:	f7ff fee6 	bl	800115c <_ZN6braids10Excitation7ProcessEv>
    excitation += !pulse_[1].done() ? 16384 : 0;
 8001390:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
      lp_state += (resonator_output - lp_state) * lp_coefficient >> 15;
      CLIP(lp_state);
      output = lp_state;
      *buffer++ = output;
    }
    size -= 2;
 8001394:	3f02      	subs	r7, #2
    excitation += !pulse_[1].done() ? 16384 : 0;
 8001396:	2a00      	cmp	r2, #0
 8001398:	bf0c      	ite	eq
 800139a:	f04f 0800 	moveq.w	r8, #0
 800139e:	f44f 4880 	movne.w	r8, #16384	; 0x4000
 80013a2:	4480      	add	r8, r0
    excitation += pulse_[1].Process();
 80013a4:	9802      	ldr	r0, [sp, #8]
 80013a6:	f7ff fed9 	bl	800115c <_ZN6braids10Excitation7ProcessEv>
 80013aa:	4480      	add	r8, r0
    pulse_[2].Process();
 80013ac:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 80013b0:	f7ff fed4 	bl	800115c <_ZN6braids10Excitation7ProcessEv>
    svf_[0].set_frequency(pitch_ + (pulse_[2].done() ? 0 : 17 << 7));
 80013b4:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
 80013b8:	8b21      	ldrh	r1, [r4, #24]
 80013ba:	2a00      	cmp	r2, #0
 80013bc:	bf14      	ite	ne
 80013be:	f44f 6208 	movne.w	r2, #2176	; 0x880
 80013c2:	2200      	moveq	r2, #0
 80013c4:	4411      	add	r1, r2
 80013c6:	b209      	sxth	r1, r1
 80013c8:	4650      	mov	r0, sl
 80013ca:	f7ff feec 	bl	80011a6 <_ZN6braids3Svf13set_frequencyEs>
      resonator_output = (excitation >> 4) + svf_[0].Process(excitation);
 80013ce:	4641      	mov	r1, r8
 80013d0:	4650      	mov	r0, sl
 80013d2:	f7ff fef3 	bl	80011bc <_ZN6braids3Svf7ProcessEl>
 80013d6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80013da:	ea4f 1b28 	mov.w	fp, r8, asr #4
 80013de:	4458      	add	r0, fp
      lp_state += (resonator_output - lp_state) * lp_coefficient >> 15;
 80013e0:	1b80      	subs	r0, r0, r6
 80013e2:	4368      	muls	r0, r5
 80013e4:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 80013e8:	4296      	cmp	r6, r2
 80013ea:	bfa8      	it	ge
 80013ec:	4616      	movge	r6, r2
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <_ZN6braids17DigitalOscillator10RenderKickEPKhPsj+0x19c>)
      resonator_output = (excitation >> 4) + svf_[0].Process(excitation);
 80013f0:	4641      	mov	r1, r8
 80013f2:	429e      	cmp	r6, r3
 80013f4:	bfb8      	it	lt
 80013f6:	461e      	movlt	r6, r3
 80013f8:	4650      	mov	r0, sl
      *buffer++ = output;
 80013fa:	f829 6c04 	strh.w	r6, [r9, #-4]
 80013fe:	9203      	str	r2, [sp, #12]
      resonator_output = (excitation >> 4) + svf_[0].Process(excitation);
 8001400:	f7ff fedc 	bl	80011bc <_ZN6braids3Svf7ProcessEl>
 8001404:	4458      	add	r0, fp
      lp_state += (resonator_output - lp_state) * lp_coefficient >> 15;
 8001406:	1b80      	subs	r0, r0, r6
 8001408:	4368      	muls	r0, r5
 800140a:	9a03      	ldr	r2, [sp, #12]
 800140c:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 8001410:	4296      	cmp	r6, r2
 8001412:	bfa8      	it	ge
 8001414:	4616      	movge	r6, r2
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <_ZN6braids17DigitalOscillator10RenderKickEPKhPsj+0x19c>)
 8001418:	f109 0904 	add.w	r9, r9, #4
 800141c:	429e      	cmp	r6, r3
 800141e:	bfb8      	it	lt
 8001420:	461e      	movlt	r6, r3
      *buffer++ = output;
 8001422:	f829 6c06 	strh.w	r6, [r9, #-6]
  while (size) {
 8001426:	e7ae      	b.n	8001386 <_ZN6braids17DigitalOscillator10RenderKickEPKhPsj+0xea>
  }
  
  state_.svf.lp = lp_state;
 8001428:	6266      	str	r6, [r4, #36]	; 0x24
}
 800142a:	b005      	add	sp, #20
 800142c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001430:	00043333 	.word	0x00043333
 8001434:	ffffca3d 	.word	0xffffca3d
 8001438:	ffff8001 	.word	0xffff8001

0800143c <_ZN6stmlib6Random7GetWordEv>:
  static inline void Seed(uint32_t seed) {
    rng_state_ = seed;
  }

  static inline uint32_t GetWord() {
    rng_state_ = rng_state_ * 1664525L + 1013904223L;
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <_ZN6stmlib6Random7GetWordEv+0x10>)
 800143e:	4904      	ldr	r1, [pc, #16]	; (8001450 <_ZN6stmlib6Random7GetWordEv+0x14>)
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	4a04      	ldr	r2, [pc, #16]	; (8001454 <_ZN6stmlib6Random7GetWordEv+0x18>)
 8001444:	fb01 2000 	mla	r0, r1, r0, r2
 8001448:	6018      	str	r0, [r3, #0]
    return state();
  }
 800144a:	4770      	bx	lr
 800144c:	20000330 	.word	0x20000330
 8001450:	0019660d 	.word	0x0019660d
 8001454:	3c6ef35f 	.word	0x3c6ef35f

08001458 <_ZN6braids17DigitalOscillator19RenderParticleNoiseEPKhPsj>:
    size_t size) {
 8001458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800145c:	4604      	mov	r4, r0
 800145e:	b08d      	sub	sp, #52	; 0x34
 8001460:	930a      	str	r3, [sp, #40]	; 0x28
  uint32_t density = 1024 + parameter_[0];
 8001462:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  uint16_t amplitude = state_.pno.amplitude;
 8001466:	f8b0 a020 	ldrh.w	sl, [r0, #32]
  uint32_t density = 1024 + parameter_[0];
 800146a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800146e:	930b      	str	r3, [sp, #44]	; 0x2c
  int32_t y11 = state_.pno.filter_state[0][0];
 8001470:	6a43      	ldr	r3, [r0, #36]	; 0x24
  int32_t c1 = state_.pno.filter_coefficient[0];
 8001472:	6c87      	ldr	r7, [r0, #72]	; 0x48
  int32_t y11 = state_.pno.filter_state[0][0];
 8001474:	9300      	str	r3, [sp, #0]
  int32_t y12 = state_.pno.filter_state[0][1];
 8001476:	6a83      	ldr	r3, [r0, #40]	; 0x28
  int32_t c2 = state_.pno.filter_coefficient[1];
 8001478:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
  int32_t y12 = state_.pno.filter_state[0][1];
 800147a:	9307      	str	r3, [sp, #28]
  int32_t s1 = state_.pno.filter_scale[0];
 800147c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  int32_t s3 = state_.pno.filter_scale[2];
 800147e:	6c46      	ldr	r6, [r0, #68]	; 0x44
  int32_t s1 = state_.pno.filter_scale[0];
 8001480:	9301      	str	r3, [sp, #4]
  int32_t y21 = state_.pno.filter_state[1][0];
 8001482:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  int32_t c3 = state_.pno.filter_coefficient[2];
 8001484:	f8d0 9050 	ldr.w	r9, [r0, #80]	; 0x50
  int32_t y21 = state_.pno.filter_state[1][0];
 8001488:	9302      	str	r3, [sp, #8]
  int32_t y22 = state_.pno.filter_state[1][1];
 800148a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  uint32_t a = table[phase >> 24];
 800148c:	f8df 8290 	ldr.w	r8, [pc, #656]	; 8001720 <_ZN6braids17DigitalOscillator19RenderParticleNoiseEPKhPsj+0x2c8>
 8001490:	9308      	str	r3, [sp, #32]
  int32_t s2 = state_.pno.filter_scale[1];
 8001492:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001494:	9303      	str	r3, [sp, #12]
  int32_t y31 = state_.pno.filter_state[2][0];
 8001496:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001498:	9304      	str	r3, [sp, #16]
  int32_t y32 = state_.pno.filter_state[2][1];
 800149a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800149c:	9309      	str	r3, [sp, #36]	; 0x24
 800149e:	1d13      	adds	r3, r2, #4
 80014a0:	9306      	str	r3, [sp, #24]
  while (size) {
 80014a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 811d 	beq.w	80016e4 <_ZN6braids17DigitalOscillator19RenderParticleNoiseEPKhPsj+0x28c>
    uint32_t noise = Random::GetWord();
 80014aa:	f7ff ffc7 	bl	800143c <_ZN6stmlib6Random7GetWordEv>
    if ((noise & 0x7fffff) < density) {
 80014ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80014b0:	f3c0 0316 	ubfx	r3, r0, #0, #23
 80014b4:	4293      	cmp	r3, r2
    uint32_t noise = Random::GetWord();
 80014b6:	9005      	str	r0, [sp, #20]
    if ((noise & 0x7fffff) < density) {
 80014b8:	f080 809b 	bcs.w	80015f2 <_ZN6braids17DigitalOscillator19RenderParticleNoiseEPKhPsj+0x19a>
 80014bc:	f643 7aff 	movw	sl, #16383	; 0x3fff
      int16_t noise_a = (noise & 0x0fff) - 0x800;
 80014c0:	f3c0 020b 	ubfx	r2, r0, #0, #12
 80014c4:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
      int16_t p1 = pitch_ + (3 * noise_a * parameter_[1] >> 17) + 0x600;
 80014c8:	b212      	sxth	r2, r2
 80014ca:	f9b4 b00e 	ldrsh.w	fp, [r4, #14]
 80014ce:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 80014d2:	fb0b f505 	mul.w	r5, fp, r5
 80014d6:	8b23      	ldrh	r3, [r4, #24]
 80014d8:	4e8f      	ldr	r6, [pc, #572]	; (8001718 <_ZN6braids17DigitalOscillator19RenderParticleNoiseEPKhPsj+0x2c0>)
 80014da:	f503 61c0 	add.w	r1, r3, #1536	; 0x600
 80014de:	eb01 4165 	add.w	r1, r1, r5, asr #17
 80014e2:	b209      	sxth	r1, r1
 80014e4:	4551      	cmp	r1, sl
 80014e6:	bfa8      	it	ge
 80014e8:	4651      	movge	r1, sl
      c1 = Interpolate824(lut_resonator_coefficient, p1 << 17);
 80014ea:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80014ee:	0449      	lsls	r1, r1, #17
 80014f0:	0e0d      	lsrs	r5, r1, #24
 80014f2:	ea4f 0945 	mov.w	r9, r5, lsl #1
  uint32_t b = table[(phase >> 24) + 1];
 80014f6:	f109 0902 	add.w	r9, r9, #2
  uint32_t a = table[phase >> 24];
 80014fa:	f836 7015 	ldrh.w	r7, [r6, r5, lsl #1]
 80014fe:	f838 6015 	ldrh.w	r6, [r8, r5, lsl #1]
  uint32_t b = table[(phase >> 24) + 1];
 8001502:	f839 5008 	ldrh.w	r5, [r9, r8]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 8001506:	0a09      	lsrs	r1, r1, #8
 8001508:	b289      	uxth	r1, r1
 800150a:	1bad      	subs	r5, r5, r6
 800150c:	434d      	muls	r5, r1
 800150e:	eb06 4515 	add.w	r5, r6, r5, lsr #16
      s1 = Interpolate824(lut_resonator_scale, p1 << 17);
 8001512:	b2a8      	uxth	r0, r5
      int16_t p2 = pitch_ + (noise_a * parameter_[1] >> 15) + 0x980;
 8001514:	fb0b f502 	mul.w	r5, fp, r2
 8001518:	f503 6218 	add.w	r2, r3, #2432	; 0x980
 800151c:	eb02 32e5 	add.w	r2, r2, r5, asr #15
 8001520:	b212      	sxth	r2, r2
 8001522:	4552      	cmp	r2, sl
 8001524:	bfa8      	it	ge
 8001526:	4652      	movge	r2, sl
      c2 = Interpolate824(lut_resonator_coefficient, p2 << 17);
 8001528:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800152c:	0452      	lsls	r2, r2, #17
  uint32_t a = table[phase >> 24];
 800152e:	0e16      	lsrs	r6, r2, #24
 8001530:	ea4f 0e46 	mov.w	lr, r6, lsl #1
 8001534:	4d78      	ldr	r5, [pc, #480]	; (8001718 <_ZN6braids17DigitalOscillator19RenderParticleNoiseEPKhPsj+0x2c0>)
  uint32_t b = table[(phase >> 24) + 1];
 8001536:	f10e 0e02 	add.w	lr, lr, #2
  uint32_t a = table[phase >> 24];
 800153a:	f838 c016 	ldrh.w	ip, [r8, r6, lsl #1]
      s1 = Interpolate824(lut_resonator_scale, p1 << 17);
 800153e:	9001      	str	r0, [sp, #4]
 8001540:	4628      	mov	r0, r5
 8001542:	f835 5016 	ldrh.w	r5, [r5, r6, lsl #1]
  uint32_t b = table[(phase >> 24) + 1];
 8001546:	f83e 6008 	ldrh.w	r6, [lr, r8]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 800154a:	0a12      	lsrs	r2, r2, #8
 800154c:	b292      	uxth	r2, r2
 800154e:	eba6 060c 	sub.w	r6, r6, ip
 8001552:	4356      	muls	r6, r2
 8001554:	eb0c 4616 	add.w	r6, ip, r6, lsr #16
      s2 = Interpolate824(lut_resonator_scale, p2 << 17);
 8001558:	b2b6      	uxth	r6, r6
 800155a:	9603      	str	r6, [sp, #12]
      int16_t noise_b = ((noise >> 15) & 0x1fff) - 0x1000;
 800155c:	9e05      	ldr	r6, [sp, #20]
      int16_t p3 = pitch_ + (noise_b * parameter_[1] >> 16) + 0x790;
 800155e:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
      int16_t noise_b = ((noise >> 15) & 0x1fff) - 0x1000;
 8001562:	f3c6 36cc 	ubfx	r6, r6, #15, #13
 8001566:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
      int16_t p3 = pitch_ + (noise_b * parameter_[1] >> 16) + 0x790;
 800156a:	fb0b fb06 	mul.w	fp, fp, r6
 800156e:	eb03 432b 	add.w	r3, r3, fp, asr #16
 8001572:	b21b      	sxth	r3, r3
 8001574:	4553      	cmp	r3, sl
 8001576:	bfa8      	it	ge
 8001578:	4653      	movge	r3, sl
  uint32_t b = table[(phase >> 24) + 1];
 800157a:	f839 9000 	ldrh.w	r9, [r9, r0]
      c3 = Interpolate824(lut_resonator_coefficient, p3 << 17);
 800157e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 8001582:	eba9 0907 	sub.w	r9, r9, r7
 8001586:	fb01 f109 	mul.w	r1, r1, r9
 800158a:	eb07 4711 	add.w	r7, r7, r1, lsr #16
  uint32_t b = table[(phase >> 24) + 1];
 800158e:	f83e 1000 	ldrh.w	r1, [lr, r0]
      c1 = c1 * kResonanceFactor >> 15;
 8001592:	f647 797c 	movw	r9, #32636	; 0x7f7c
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 8001596:	1b49      	subs	r1, r1, r5
      c3 = Interpolate824(lut_resonator_coefficient, p3 << 17);
 8001598:	045b      	lsls	r3, r3, #17
 800159a:	434a      	muls	r2, r1
  uint32_t a = table[phase >> 24];
 800159c:	0e1e      	lsrs	r6, r3, #24
 800159e:	ea4f 0a46 	mov.w	sl, r6, lsl #1
  uint32_t b = table[(phase >> 24) + 1];
 80015a2:	f10a 0a02 	add.w	sl, sl, #2
  uint32_t a = table[phase >> 24];
 80015a6:	f830 c016 	ldrh.w	ip, [r0, r6, lsl #1]
 80015aa:	f838 b016 	ldrh.w	fp, [r8, r6, lsl #1]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 80015ae:	eb05 4512 	add.w	r5, r5, r2, lsr #16
  uint32_t b = table[(phase >> 24) + 1];
 80015b2:	f83a 6008 	ldrh.w	r6, [sl, r8]
 80015b6:	f83a 2000 	ldrh.w	r2, [sl, r0]
      amplitude = 65535;
 80015ba:	f64f 7aff 	movw	sl, #65535	; 0xffff
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 80015be:	0a1b      	lsrs	r3, r3, #8
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	eba6 060b 	sub.w	r6, r6, fp
 80015c6:	eba2 020c 	sub.w	r2, r2, ip
 80015ca:	435e      	muls	r6, r3
 80015cc:	4353      	muls	r3, r2
 80015ce:	eb0c 4313 	add.w	r3, ip, r3, lsr #16
      c1 = Interpolate824(lut_resonator_coefficient, p1 << 17);
 80015d2:	b2bf      	uxth	r7, r7
      c2 = Interpolate824(lut_resonator_coefficient, p2 << 17);
 80015d4:	b2ad      	uxth	r5, r5
      c3 = Interpolate824(lut_resonator_coefficient, p3 << 17);
 80015d6:	b29b      	uxth	r3, r3
      c1 = c1 * kResonanceFactor >> 15;
 80015d8:	fb09 f707 	mul.w	r7, r9, r7
      c2 = c2 * kResonanceFactor >> 15;
 80015dc:	fb09 f505 	mul.w	r5, r9, r5
      c3 = c3 * kResonanceFactor >> 15;
 80015e0:	fb09 f903 	mul.w	r9, r9, r3
 80015e4:	eb0b 4616 	add.w	r6, fp, r6, lsr #16
      s3 = Interpolate824(lut_resonator_scale, p3 << 17);
 80015e8:	b2b6      	uxth	r6, r6
      c1 = c1 * kResonanceFactor >> 15;
 80015ea:	13ff      	asrs	r7, r7, #15
      c2 = c2 * kResonanceFactor >> 15;
 80015ec:	13ed      	asrs	r5, r5, #15
      c3 = c3 * kResonanceFactor >> 15;
 80015ee:	ea4f 39e9 	mov.w	r9, r9, asr #15
    amplitude = (amplitude * kParticleNoiseDecay) >> 16;
 80015f2:	f64f 42fb 	movw	r2, #64763	; 0xfcfb
    sample = (static_cast<int16_t>(noise) * amplitude) >> 16;
 80015f6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80015fa:	fb0a f303 	mul.w	r3, sl, r3
    amplitude = (amplitude * kParticleNoiseDecay) >> 16;
 80015fe:	fb02 fa0a 	mul.w	sl, r2, sl
    sample = (static_cast<int16_t>(noise) * amplitude) >> 16;
 8001602:	141b      	asrs	r3, r3, #16
    if (sample > 0) {
 8001604:	2b00      	cmp	r3, #0
    amplitude = (amplitude * kParticleNoiseDecay) >> 16;
 8001606:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
    if (sample > 0) {
 800160a:	dd5d      	ble.n	80016c8 <_ZN6braids17DigitalOscillator19RenderParticleNoiseEPKhPsj+0x270>
      y10 = sample * s1 >> 16;
 800160c:	9a01      	ldr	r2, [sp, #4]
 800160e:	435a      	muls	r2, r3
 8001610:	1411      	asrs	r1, r2, #16
      y20 = sample * s2 >> 16;
 8001612:	9a03      	ldr	r2, [sp, #12]
 8001614:	435a      	muls	r2, r3
      y30 = sample * s3 >> 16;
 8001616:	4373      	muls	r3, r6
      y20 = sample * s2 >> 16;
 8001618:	ea4f 4e22 	mov.w	lr, r2, asr #16
      y30 = sample * s3 >> 16;
 800161c:	141b      	asrs	r3, r3, #16
    y10 -= y12 * kResonanceSquared >> 15;
 800161e:	f647 6bfa 	movw	fp, #32506	; 0x7efa
 8001622:	f647 7cff 	movw	ip, #32767	; 0x7fff
    y10 += y11 * c1 >> 15;
 8001626:	9a00      	ldr	r2, [sp, #0]
    y20 -= y22 * kResonanceSquared >> 15;
 8001628:	9808      	ldr	r0, [sp, #32]
    y10 += y11 * c1 >> 15;
 800162a:	437a      	muls	r2, r7
 800162c:	eb01 32e2 	add.w	r2, r1, r2, asr #15
    y10 -= y12 * kResonanceSquared >> 15;
 8001630:	9907      	ldr	r1, [sp, #28]
 8001632:	fb0b f101 	mul.w	r1, fp, r1
 8001636:	eba2 31e1 	sub.w	r1, r2, r1, asr #15
 800163a:	4561      	cmp	r1, ip
 800163c:	bfa8      	it	ge
 800163e:	4661      	movge	r1, ip
 8001640:	4a36      	ldr	r2, [pc, #216]	; (800171c <_ZN6braids17DigitalOscillator19RenderParticleNoiseEPKhPsj+0x2c4>)
 8001642:	4291      	cmp	r1, r2
 8001644:	bfb8      	it	lt
 8001646:	4611      	movlt	r1, r2
    y20 += y21 * c2 >> 15;
 8001648:	9a02      	ldr	r2, [sp, #8]
 800164a:	436a      	muls	r2, r5
 800164c:	eb0e 32e2 	add.w	r2, lr, r2, asr #15
    y20 -= y22 * kResonanceSquared >> 15;
 8001650:	fb0b fe00 	mul.w	lr, fp, r0
 8001654:	eba2 32ee 	sub.w	r2, r2, lr, asr #15
 8001658:	4562      	cmp	r2, ip
 800165a:	bfa8      	it	ge
 800165c:	4662      	movge	r2, ip
 800165e:	482f      	ldr	r0, [pc, #188]	; (800171c <_ZN6braids17DigitalOscillator19RenderParticleNoiseEPKhPsj+0x2c4>)
 8001660:	4282      	cmp	r2, r0
 8001662:	bfb8      	it	lt
 8001664:	4602      	movlt	r2, r0
    y30 += y31 * c3 >> 15;
 8001666:	9804      	ldr	r0, [sp, #16]
 8001668:	fb09 fe00 	mul.w	lr, r9, r0
    y30 -= y32 * kResonanceSquared >> 15;
 800166c:	9809      	ldr	r0, [sp, #36]	; 0x24
    y30 += y31 * c3 >> 15;
 800166e:	eb03 33ee 	add.w	r3, r3, lr, asr #15
    y30 -= y32 * kResonanceSquared >> 15;
 8001672:	fb0b f000 	mul.w	r0, fp, r0
 8001676:	eba3 33e0 	sub.w	r3, r3, r0, asr #15
 800167a:	4563      	cmp	r3, ip
 800167c:	bfa8      	it	ge
 800167e:	4663      	movge	r3, ip
 8001680:	4826      	ldr	r0, [pc, #152]	; (800171c <_ZN6braids17DigitalOscillator19RenderParticleNoiseEPKhPsj+0x2c4>)
 8001682:	4283      	cmp	r3, r0
 8001684:	bfb8      	it	lt
 8001686:	4603      	movlt	r3, r0
    y10 += y20 + y30;
 8001688:	eb02 0b03 	add.w	fp, r2, r3
 800168c:	448b      	add	fp, r1
 800168e:	45e3      	cmp	fp, ip
 8001690:	bfa8      	it	ge
 8001692:	46e3      	movge	fp, ip
    *buffer++ = y10;
 8001694:	4583      	cmp	fp, r0
 8001696:	bfb8      	it	lt
 8001698:	4683      	movlt	fp, r0
 800169a:	9806      	ldr	r0, [sp, #24]
 800169c:	fa0f fb8b 	sxth.w	fp, fp
 80016a0:	f820 bc04 	strh.w	fp, [r0, #-4]
    *buffer++ = y10;
 80016a4:	f820 bc02 	strh.w	fp, [r0, #-2]
    size -= 2;
 80016a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80016aa:	3802      	subs	r0, #2
 80016ac:	900a      	str	r0, [sp, #40]	; 0x28
 80016ae:	9806      	ldr	r0, [sp, #24]
 80016b0:	3004      	adds	r0, #4
 80016b2:	9006      	str	r0, [sp, #24]
  while (size) {
 80016b4:	9804      	ldr	r0, [sp, #16]
    y31 = y30;
 80016b6:	9304      	str	r3, [sp, #16]
  while (size) {
 80016b8:	9b02      	ldr	r3, [sp, #8]
 80016ba:	9009      	str	r0, [sp, #36]	; 0x24
 80016bc:	9308      	str	r3, [sp, #32]
 80016be:	9b00      	ldr	r3, [sp, #0]
    y21 = y20;
 80016c0:	9202      	str	r2, [sp, #8]
  while (size) {
 80016c2:	9307      	str	r3, [sp, #28]
    y11 = y10;
 80016c4:	9100      	str	r1, [sp, #0]
  while (size) {
 80016c6:	e6ec      	b.n	80014a2 <_ZN6braids17DigitalOscillator19RenderParticleNoiseEPKhPsj+0x4a>
      y10 = -((-sample) * s1 >> 16);
 80016c8:	9a01      	ldr	r2, [sp, #4]
 80016ca:	425b      	negs	r3, r3
 80016cc:	435a      	muls	r2, r3
 80016ce:	1412      	asrs	r2, r2, #16
 80016d0:	4251      	negs	r1, r2
      y20 = -((-sample) * s2 >> 16);
 80016d2:	9a03      	ldr	r2, [sp, #12]
 80016d4:	435a      	muls	r2, r3
      y30 = -((-sample) * s3 >> 16);
 80016d6:	4373      	muls	r3, r6
      y20 = -((-sample) * s2 >> 16);
 80016d8:	1412      	asrs	r2, r2, #16
      y30 = -((-sample) * s3 >> 16);
 80016da:	141b      	asrs	r3, r3, #16
      y20 = -((-sample) * s2 >> 16);
 80016dc:	f1c2 0e00 	rsb	lr, r2, #0
      y30 = -((-sample) * s3 >> 16);
 80016e0:	425b      	negs	r3, r3
 80016e2:	e79c      	b.n	800161e <_ZN6braids17DigitalOscillator19RenderParticleNoiseEPKhPsj+0x1c6>
  state_.pno.filter_state[0][0] = y11;
 80016e4:	9b00      	ldr	r3, [sp, #0]
  state_.pno.amplitude = amplitude;
 80016e6:	f8a4 a020 	strh.w	sl, [r4, #32]
  state_.pno.filter_state[0][0] = y11;
 80016ea:	6263      	str	r3, [r4, #36]	; 0x24
  state_.pno.filter_state[0][1] = y12;
 80016ec:	9b07      	ldr	r3, [sp, #28]
  state_.pno.filter_coefficient[0] = c1;
 80016ee:	64a7      	str	r7, [r4, #72]	; 0x48
  state_.pno.filter_state[0][1] = y12;
 80016f0:	62a3      	str	r3, [r4, #40]	; 0x28
  state_.pno.filter_scale[0] = s1;
 80016f2:	9b01      	ldr	r3, [sp, #4]
  state_.pno.filter_coefficient[1] = c2;
 80016f4:	64e5      	str	r5, [r4, #76]	; 0x4c
  state_.pno.filter_scale[0] = s1;
 80016f6:	63e3      	str	r3, [r4, #60]	; 0x3c
  state_.pno.filter_state[1][0] = y21;
 80016f8:	9b02      	ldr	r3, [sp, #8]
  state_.pno.filter_scale[2] = s3;
 80016fa:	6466      	str	r6, [r4, #68]	; 0x44
  state_.pno.filter_state[1][0] = y21;
 80016fc:	62e3      	str	r3, [r4, #44]	; 0x2c
  state_.pno.filter_state[1][1] = y22;
 80016fe:	9b08      	ldr	r3, [sp, #32]
  state_.pno.filter_coefficient[2] = c3;
 8001700:	f8c4 9050 	str.w	r9, [r4, #80]	; 0x50
  state_.pno.filter_state[1][1] = y22;
 8001704:	6323      	str	r3, [r4, #48]	; 0x30
  state_.pno.filter_scale[1] = s2;
 8001706:	9b03      	ldr	r3, [sp, #12]
 8001708:	6423      	str	r3, [r4, #64]	; 0x40
  state_.pno.filter_state[2][0] = y31;
 800170a:	9b04      	ldr	r3, [sp, #16]
 800170c:	6363      	str	r3, [r4, #52]	; 0x34
  state_.pno.filter_state[2][1] = y32;
 800170e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001710:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001712:	b00d      	add	sp, #52	; 0x34
 8001714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001718:	0800c704 	.word	0x0800c704
 800171c:	ffff8001 	.word	0xffff8001
 8001720:	080098c6 	.word	0x080098c6

08001724 <_ZN6stmlib6Random9GetSampleEv>:
  
  static inline int16_t GetSample() {
 8001724:	b508      	push	{r3, lr}
    return static_cast<int16_t>(GetWord() >> 16);
 8001726:	f7ff fe89 	bl	800143c <_ZN6stmlib6Random7GetWordEv>
  }
 800172a:	1400      	asrs	r0, r0, #16
 800172c:	bd08      	pop	{r3, pc}
	...

08001730 <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj>:
    size_t size) {
 8001730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t formant_shift = (200 + (parameter_[1] >> 6));
 8001734:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
    size_t size) {
 8001738:	461e      	mov	r6, r3
  uint16_t formant_shift = (200 + (parameter_[1] >> 6));
 800173a:	11ad      	asrs	r5, r5, #6
  if (strike_) {
 800173c:	7f03      	ldrb	r3, [r0, #28]
  uint16_t formant_shift = (200 + (parameter_[1] >> 6));
 800173e:	35c8      	adds	r5, #200	; 0xc8
    size_t size) {
 8001740:	4604      	mov	r4, r0
 8001742:	4617      	mov	r7, r2
  size_t vowel_index = parameter_[0] >> 12;
 8001744:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
  uint16_t formant_shift = (200 + (parameter_[1] >> 6));
 8001748:	b2ad      	uxth	r5, r5
  if (strike_) {
 800174a:	b32b      	cbz	r3, 8001798 <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x68>
    strike_ = false;
 800174c:	2300      	movs	r3, #0
 800174e:	7703      	strb	r3, [r0, #28]
    state_.vow.consonant_frames = 160;
 8001750:	23a0      	movs	r3, #160	; 0xa0
 8001752:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    uint16_t index = (Random::GetSample() + 1) & 7;
 8001756:	f7ff ffe5 	bl	8001724 <_ZN6stmlib6Random9GetSampleEv>
 800175a:	2306      	movs	r3, #6
 800175c:	4a55      	ldr	r2, [pc, #340]	; (80018b4 <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x184>)
 800175e:	3001      	adds	r0, #1
 8001760:	f000 0007 	and.w	r0, r0, #7
 8001764:	fb03 2300 	mla	r3, r3, r0, r2
 8001768:	ea4f 3e05 	mov.w	lr, r5, lsl #12
 800176c:	3b01      	subs	r3, #1
 800176e:	f104 0220 	add.w	r2, r4, #32
 8001772:	f104 0c2c 	add.w	ip, r4, #44	; 0x2c
          0x1000 * formant_shift;
 8001776:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800177a:	fb0e f101 	mul.w	r1, lr, r1
      state_.vow.formant_increment[i] = \
 800177e:	f842 1b04 	str.w	r1, [r2], #4
      state_.vow.formant_amplitude[i] = consonant_data[index].formant_amplitude[i];
 8001782:	78d9      	ldrb	r1, [r3, #3]
    for (size_t i = 0; i < 3; ++i) {
 8001784:	4594      	cmp	ip, r2
      state_.vow.formant_amplitude[i] = consonant_data[index].formant_amplitude[i];
 8001786:	6151      	str	r1, [r2, #20]
    for (size_t i = 0; i < 3; ++i) {
 8001788:	d1f5      	bne.n	8001776 <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x46>
    state_.vow.noise = index >= 6 ? 4095 : 0;
 800178a:	2805      	cmp	r0, #5
 800178c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001790:	bf98      	it	ls
 8001792:	2300      	movls	r3, #0
 8001794:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (state_.vow.consonant_frames) {
 8001798:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 800179c:	2b00      	cmp	r3, #0
 800179e:	d055      	beq.n	800184c <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x11c>
    --state_.vow.consonant_frames;
 80017a0:	3b01      	subs	r3, #1
 80017a2:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  int32_t noise = state_.vow.noise;
 80017a6:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
    sample += wav_formant_sine[phaselet | state_.vow.formant_amplitude[0]];
 80017aa:	f8df 9118 	ldr.w	r9, [pc, #280]	; 80018c4 <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x194>
  int32_t a = table[index >> 8];
 80017ae:	f8df 8118 	ldr.w	r8, [pc, #280]	; 80018c8 <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x198>
  while (size--) {
 80017b2:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 80017b6:	9101      	str	r1, [sp, #4]
 80017b8:	d379      	bcc.n	80018ae <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x17e>
    phase_ += phase_increment_;
 80017ba:	e9d4 5300 	ldrd	r5, r3, [r4]
    state_.vow.formant_phase[0] += state_.vow.formant_increment[0];
 80017be:	6a22      	ldr	r2, [r4, #32]
    phase_ += phase_increment_;
 80017c0:	441d      	add	r5, r3
    state_.vow.formant_phase[0] += state_.vow.formant_increment[0];
 80017c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    sample += wav_formant_sine[phaselet | state_.vow.formant_amplitude[0]];
 80017c4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    state_.vow.formant_phase[0] += state_.vow.formant_increment[0];
 80017c6:	4413      	add	r3, r2
 80017c8:	62e3      	str	r3, [r4, #44]	; 0x2c
    phaselet = (state_.vow.formant_phase[0] >> 24) & 0xf0;
 80017ca:	0e1b      	lsrs	r3, r3, #24
 80017cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    phase_ += phase_increment_;
 80017d0:	6025      	str	r5, [r4, #0]
    sample += wav_formant_sine[phaselet | state_.vow.formant_amplitude[0]];
 80017d2:	4303      	orrs	r3, r0
 80017d4:	f939 a013 	ldrsh.w	sl, [r9, r3, lsl #1]
    state_.vow.formant_phase[1] += state_.vow.formant_increment[1];
 80017d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80017da:	6a63      	ldr	r3, [r4, #36]	; 0x24
    sample += wav_formant_sine[phaselet | state_.vow.formant_amplitude[1]];
 80017dc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    state_.vow.formant_phase[1] += state_.vow.formant_increment[1];
 80017de:	441a      	add	r2, r3
 80017e0:	6322      	str	r2, [r4, #48]	; 0x30
    phaselet = (state_.vow.formant_phase[1] >> 24) & 0xf0;
 80017e2:	0e12      	lsrs	r2, r2, #24
 80017e4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    sample += wav_formant_sine[phaselet | state_.vow.formant_amplitude[1]];
 80017e8:	4302      	orrs	r2, r0
 80017ea:	f939 b012 	ldrsh.w	fp, [r9, r2, lsl #1]
    state_.vow.formant_phase[2] += state_.vow.formant_increment[2];
 80017ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017f0:	6b62      	ldr	r2, [r4, #52]	; 0x34
    sample += wav_formant_square[phaselet | state_.vow.formant_amplitude[2]];
 80017f2:	6c20      	ldr	r0, [r4, #64]	; 0x40
    state_.vow.formant_phase[2] += state_.vow.formant_increment[2];
 80017f4:	441a      	add	r2, r3
 80017f6:	6362      	str	r2, [r4, #52]	; 0x34
    phaselet = (state_.vow.formant_phase[2] >> 24) & 0xf0;
 80017f8:	0e12      	lsrs	r2, r2, #24
    sample += wav_formant_square[phaselet | state_.vow.formant_amplitude[2]];
 80017fa:	4b2f      	ldr	r3, [pc, #188]	; (80018b8 <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x188>)
    phaselet = (state_.vow.formant_phase[2] >> 24) & 0xf0;
 80017fc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    sample += wav_formant_square[phaselet | state_.vow.formant_amplitude[2]];
 8001800:	4302      	orrs	r2, r0
 8001802:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8001806:	9200      	str	r2, [sp, #0]
    int32_t phase_noise = Random::GetSample() * noise;
 8001808:	f7ff ff8c 	bl	8001724 <_ZN6stmlib6Random9GetSampleEv>
    if ((phase_ + phase_noise) < phase_increment_) {
 800180c:	6823      	ldr	r3, [r4, #0]
 800180e:	9901      	ldr	r1, [sp, #4]
 8001810:	fb01 3000 	mla	r0, r1, r0, r3
 8001814:	6863      	ldr	r3, [r4, #4]
 8001816:	4298      	cmp	r0, r3
 8001818:	d344      	bcc.n	80018a4 <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x174>
    sample += wav_formant_square[phaselet | state_.vow.formant_amplitude[2]];
 800181a:	9a00      	ldr	r2, [sp, #0]
    sample *= 255 - (phase_ >> 24);
 800181c:	0e2d      	lsrs	r5, r5, #24
    sample += wav_formant_square[phaselet | state_.vow.formant_amplitude[2]];
 800181e:	445a      	add	r2, fp
 8001820:	4452      	add	r2, sl
    sample *= 255 - (phase_ >> 24);
 8001822:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
 8001826:	436a      	muls	r2, r5
 8001828:	b212      	sxth	r2, r2
    sample = Interpolate88(ws_moderate_overdrive, sample + 32768);
 800182a:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 800182e:	b292      	uxth	r2, r2
  int32_t b = table[(index >> 8) + 1];
 8001830:	4d22      	ldr	r5, [pc, #136]	; (80018bc <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x18c>)
  int32_t a = table[index >> 8];
 8001832:	1210      	asrs	r0, r2, #8
 8001834:	f938 3010 	ldrsh.w	r3, [r8, r0, lsl #1]
  int32_t b = table[(index >> 8) + 1];
 8001838:	f935 0010 	ldrsh.w	r0, [r5, r0, lsl #1]
  return a + ((b - a) * static_cast<int32_t>(index & 0xff) >> 8);
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	1ac0      	subs	r0, r0, r3
 8001840:	4342      	muls	r2, r0
 8001842:	eb03 2222 	add.w	r2, r3, r2, asr #8
    *buffer++ = sample;
 8001846:	f827 2b02 	strh.w	r2, [r7], #2
  while (size--) {
 800184a:	e7b2      	b.n	80017b2 <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x82>
 800184c:	2206      	movs	r2, #6
  size_t vowel_index = parameter_[0] >> 12;
 800184e:	ea4f 3328 	mov.w	r3, r8, asr #12
 8001852:	435a      	muls	r2, r3
 8001854:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x190>)
 8001856:	1e51      	subs	r1, r2, #1
          (vowels_data[vowel_index].formant_frequency[i] * (0x1000 - balance) + \
 8001858:	f3c8 080b 	ubfx	r8, r8, #0, #12
 800185c:	3205      	adds	r2, #5
 800185e:	4419      	add	r1, r3
 8001860:	f104 0020 	add.w	r0, r4, #32
 8001864:	4413      	add	r3, r2
 8001866:	f104 0c2c 	add.w	ip, r4, #44	; 0x2c
 800186a:	f5c8 5e80 	rsb	lr, r8, #4096	; 0x1000
           vowels_data[vowel_index + 1].formant_frequency[i] * balance) * \
 800186e:	f813 9f01 	ldrb.w	r9, [r3, #1]!
          (vowels_data[vowel_index].formant_frequency[i] * (0x1000 - balance) + \
 8001872:	f811 2f01 	ldrb.w	r2, [r1, #1]!
           vowels_data[vowel_index + 1].formant_frequency[i] * balance) * \
 8001876:	fb08 f909 	mul.w	r9, r8, r9
          (vowels_data[vowel_index].formant_frequency[i] * (0x1000 - balance) + \
 800187a:	fb0e 9202 	mla	r2, lr, r2, r9
           vowels_data[vowel_index + 1].formant_frequency[i] * balance) * \
 800187e:	436a      	muls	r2, r5
      state_.vow.formant_increment[i] = 
 8001880:	f840 2b04 	str.w	r2, [r0], #4
           vowels_data[vowel_index + 1].formant_amplitude[i] * balance) >> 12;
 8001884:	f893 9003 	ldrb.w	r9, [r3, #3]
          (vowels_data[vowel_index].formant_amplitude[i] * (0x1000 - balance) + \
 8001888:	78ca      	ldrb	r2, [r1, #3]
           vowels_data[vowel_index + 1].formant_amplitude[i] * balance) >> 12;
 800188a:	fb08 f909 	mul.w	r9, r8, r9
          (vowels_data[vowel_index].formant_amplitude[i] * (0x1000 - balance) + \
 800188e:	fb0e 9202 	mla	r2, lr, r2, r9
    for (size_t i = 0; i < 3; ++i) {
 8001892:	4584      	cmp	ip, r0
           vowels_data[vowel_index + 1].formant_amplitude[i] * balance) >> 12;
 8001894:	ea4f 3222 	mov.w	r2, r2, asr #12
      state_.vow.formant_amplitude[i] =
 8001898:	6142      	str	r2, [r0, #20]
    for (size_t i = 0; i < 3; ++i) {
 800189a:	d1e8      	bne.n	800186e <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x13e>
    state_.vow.noise = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80018a2:	e780      	b.n	80017a6 <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x76>
      state_.vow.formant_phase[0] = 0;
 80018a4:	2200      	movs	r2, #0
      state_.vow.formant_phase[1] = 0;
 80018a6:	e9c4 220b 	strd	r2, r2, [r4, #44]	; 0x2c
      state_.vow.formant_phase[2] = 0;
 80018aa:	6362      	str	r2, [r4, #52]	; 0x34
 80018ac:	e7bd      	b.n	800182a <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0xfa>
}
 80018ae:	b003      	add	sp, #12
 80018b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018b4:	08007994 	.word	0x08007994
 80018b8:	08008ee4 	.word	0x08008ee4
 80018bc:	0800a562 	.word	0x0800a562
 80018c0:	0800793c 	.word	0x0800793c
 80018c4:	08008ce4 	.word	0x08008ce4
 80018c8:	0800a560 	.word	0x0800a560

080018cc <_ZN6braids17DigitalOscillator11RenderBlownEPKhPsj>:
    size_t size) {
 80018cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018d0:	461e      	mov	r6, r3
  if (strike_) {
 80018d2:	7f03      	ldrb	r3, [r0, #28]
    size_t size) {
 80018d4:	b087      	sub	sp, #28
 80018d6:	4604      	mov	r4, r0
 80018d8:	4690      	mov	r8, r2
  uint16_t delay_ptr = state_.phy.delay_ptr;
 80018da:	f8b0 9020 	ldrh.w	r9, [r0, #32]
  int32_t lp_state = state_.phy.lp_state;
 80018de:	6a47      	ldr	r7, [r0, #36]	; 0x24
  int16_t* dl = delay_lines_.bore;
 80018e0:	f500 7aca 	add.w	sl, r0, #404	; 0x194
  if (strike_) {
 80018e4:	b13b      	cbz	r3, 80018f6 <_ZN6braids17DigitalOscillator11RenderBlownEPKhPsj+0x2a>
    memset(dl, 0, sizeof(delay_lines_.bore));
 80018e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018ea:	2100      	movs	r1, #0
 80018ec:	4650      	mov	r0, sl
 80018ee:	f005 fffe 	bl	80078ee <memset>
    strike_ = false;
 80018f2:	2300      	movs	r3, #0
 80018f4:	7723      	strb	r3, [r4, #28]
  uint32_t delay = (delay_ >> 1) - (1 << 16);
 80018f6:	68a5      	ldr	r5, [r4, #8]
  while (delay > ((kWGBoreLength - 1) << 16)) {
 80018f8:	4b49      	ldr	r3, [pc, #292]	; (8001a20 <_ZN6braids17DigitalOscillator11RenderBlownEPKhPsj+0x154>)
  uint32_t delay = (delay_ >> 1) - (1 << 16);
 80018fa:	086d      	lsrs	r5, r5, #1
 80018fc:	f5a5 3580 	sub.w	r5, r5, #65536	; 0x10000
  while (delay > ((kWGBoreLength - 1) << 16)) {
 8001900:	429d      	cmp	r5, r3
 8001902:	d901      	bls.n	8001908 <_ZN6braids17DigitalOscillator11RenderBlownEPKhPsj+0x3c>
    delay >>= 1;
 8001904:	086d      	lsrs	r5, r5, #1
  while (delay > ((kWGBoreLength - 1) << 16)) {
 8001906:	e7fb      	b.n	8001900 <_ZN6braids17DigitalOscillator11RenderBlownEPKhPsj+0x34>
  uint16_t bore_delay_integral = delay >> 16;
 8001908:	0c2b      	lsrs	r3, r5, #16
 800190a:	9302      	str	r3, [sp, #8]
  uint16_t parameter = 28000 - (parameter_[0] >> 1);
 800190c:	f646 5360 	movw	r3, #28000	; 0x6d60
 8001910:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  int16_t filter_state = state_.phy.filter_state[0];
 8001914:	f9b4 1028 	ldrsh.w	r1, [r4, #40]	; 0x28
  uint16_t parameter = 28000 - (parameter_[0] >> 1);
 8001918:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 800191c:	b29b      	uxth	r3, r3
 800191e:	9303      	str	r3, [sp, #12]
  int16_t normalized_pitch = (pitch_ - 8192 + (parameter_[1] >> 1)) >> 7;
 8001920:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 8001924:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 8001928:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800192c:	eb03 0362 	add.w	r3, r3, r2, asr #1
  if (normalized_pitch < 0) {
 8001930:	11db      	asrs	r3, r3, #7
 8001932:	d46c      	bmi.n	8001a0e <_ZN6braids17DigitalOscillator11RenderBlownEPKhPsj+0x142>
 8001934:	2b7f      	cmp	r3, #127	; 0x7f
 8001936:	bfa8      	it	ge
 8001938:	237f      	movge	r3, #127	; 0x7f
  uint16_t filter_coefficient = lut_flute_body_filter[normalized_pitch];
 800193a:	4a3a      	ldr	r2, [pc, #232]	; (8001a24 <_ZN6braids17DigitalOscillator11RenderBlownEPKhPsj+0x158>)
 800193c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001940:	9301      	str	r3, [sp, #4]
 8001942:	b2b3      	uxth	r3, r6
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800194a:	444b      	add	r3, r9
 800194c:	9304      	str	r3, [sp, #16]
 800194e:	9b00      	ldr	r3, [sp, #0]
 8001950:	eb03 0b09 	add.w	fp, r3, r9
 8001954:	ebab 0b06 	sub.w	fp, fp, r6
  while (size--) {
 8001958:	3e01      	subs	r6, #1
 800195a:	1c73      	adds	r3, r6, #1
 800195c:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 8001960:	d057      	beq.n	8001a12 <_ZN6braids17DigitalOscillator11RenderBlownEPKhPsj+0x146>
    phase_ += phase_increment_;
 8001962:	e9d4 3200 	ldrd	r3, r2, [r4]
 8001966:	4413      	add	r3, r2
 8001968:	6023      	str	r3, [r4, #0]
 800196a:	9105      	str	r1, [sp, #20]
    int32_t breath_pressure = Random::GetSample() * parameter >> 15;
 800196c:	f7ff feda 	bl	8001724 <_ZN6stmlib6Random9GetSampleEv>
 8001970:	9b03      	ldr	r3, [sp, #12]
 8001972:	9a02      	ldr	r2, [sp, #8]
 8001974:	4358      	muls	r0, r3
    breath_pressure = breath_pressure * kBreathPressure >> 15;
 8001976:	f246 6366 	movw	r3, #26214	; 0x6666
    int32_t breath_pressure = Random::GetSample() * parameter >> 15;
 800197a:	13c0      	asrs	r0, r0, #15
    breath_pressure = breath_pressure * kBreathPressure >> 15;
 800197c:	4358      	muls	r0, r3
    breath_pressure += kBreathPressure;
 800197e:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 8001982:	9b04      	ldr	r3, [sp, #16]
  return (a * (65535 - balance) + b * balance) >> 16;
 8001984:	fa1f fc85 	uxth.w	ip, r5
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	1b9b      	subs	r3, r3, r6
 800198c:	b29b      	uxth	r3, r3
    int16_t dl_a = dl[bore_delay_ptr % kWGBoreLength];
 800198e:	f3c3 020a 	ubfx	r2, r3, #0, #11
    int16_t dl_b = dl[(bore_delay_ptr - 1) % kWGBoreLength];
 8001992:	3b01      	subs	r3, #1
 8001994:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001998:	f93a 3013 	ldrsh.w	r3, [sl, r3, lsl #1]
 800199c:	f5cc 4e7f 	rsb	lr, ip, #65280	; 0xff00
 80019a0:	fb0c fc03 	mul.w	ip, ip, r3
 80019a4:	f93a 2012 	ldrsh.w	r2, [sl, r2, lsl #1]
 80019a8:	f10e 0eff 	add.w	lr, lr, #255	; 0xff
 80019ac:	fb0e c202 	mla	r2, lr, r2, ip
    int32_t reed = (pressure_delta * kReedSlope >> 12) + kReedOffset;
 80019b0:	f645 1c9a 	movw	ip, #22938	; 0x599a
 80019b4:	f647 7eff 	movw	lr, #32767	; 0x7fff
    int32_t pressure_delta = (dl_value >> 1) + lp_state;
 80019b8:	1452      	asrs	r2, r2, #17
    pressure_delta = kReflectionCoefficient * pressure_delta >> 12;
 80019ba:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <_ZN6braids17DigitalOscillator11RenderBlownEPKhPsj+0x15c>)
    int32_t pressure_delta = (dl_value >> 1) + lp_state;
 80019bc:	4417      	add	r7, r2
    pressure_delta = kReflectionCoefficient * pressure_delta >> 12;
 80019be:	435f      	muls	r7, r3
    int32_t reed = (pressure_delta * kReedSlope >> 12) + kReedOffset;
 80019c0:	f603 2366 	addw	r3, r3, #2662	; 0xa66
    pressure_delta -= breath_pressure;
 80019c4:	ebc0 3727 	rsb	r7, r0, r7, asr #12
    int32_t reed = (pressure_delta * kReedSlope >> 12) + kReedOffset;
 80019c8:	437b      	muls	r3, r7
 80019ca:	eb0c 3323 	add.w	r3, ip, r3, asr #12
 80019ce:	4573      	cmp	r3, lr
 80019d0:	bfa8      	it	ge
 80019d2:	4673      	movge	r3, lr
    int32_t out = pressure_delta * reed >> 15;
 80019d4:	f8df c054 	ldr.w	ip, [pc, #84]	; 8001a2c <_ZN6braids17DigitalOscillator11RenderBlownEPKhPsj+0x160>
        (4096 - filter_coefficient) * filter_state) >> 12;
 80019d8:	9901      	ldr	r1, [sp, #4]
    int32_t out = pressure_delta * reed >> 15;
 80019da:	4563      	cmp	r3, ip
 80019dc:	bfb8      	it	lt
 80019de:	4663      	movlt	r3, ip
 80019e0:	437b      	muls	r3, r7
    out += breath_pressure;
 80019e2:	eb00 33e3 	add.w	r3, r0, r3, asr #15
 80019e6:	4573      	cmp	r3, lr
 80019e8:	bfa8      	it	ge
 80019ea:	4673      	movge	r3, lr
 80019ec:	4563      	cmp	r3, ip
 80019ee:	bfb8      	it	lt
 80019f0:	4663      	movlt	r3, ip
    dl[delay_ptr++ % kWGBoreLength] = out;
 80019f2:	f82a 301b 	strh.w	r3, [sl, fp, lsl #1]
    filter_state = (filter_coefficient * out + \
 80019f6:	434b      	muls	r3, r1
        (4096 - filter_coefficient) * filter_state) >> 12;
 80019f8:	f5c1 5e80 	rsb	lr, r1, #4096	; 0x1000
    filter_state = (filter_coefficient * out + \
 80019fc:	9905      	ldr	r1, [sp, #20]
    lp_state = dl_value >> 1;
 80019fe:	4617      	mov	r7, r2
    filter_state = (filter_coefficient * out + \
 8001a00:	fb01 330e 	mla	r3, r1, lr, r3
 8001a04:	f343 310f 	sbfx	r1, r3, #12, #16
    *buffer++ = filter_state;
 8001a08:	f828 1b02 	strh.w	r1, [r8], #2
  while (size--) {
 8001a0c:	e79f      	b.n	800194e <_ZN6braids17DigitalOscillator11RenderBlownEPKhPsj+0x82>
    normalized_pitch = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e793      	b.n	800193a <_ZN6braids17DigitalOscillator11RenderBlownEPKhPsj+0x6e>
  state_.phy.filter_state[0] = filter_state;
 8001a12:	62a1      	str	r1, [r4, #40]	; 0x28
  state_.phy.delay_ptr = delay_ptr % kWGBoreLength;
 8001a14:	f8a4 b020 	strh.w	fp, [r4, #32]
  state_.phy.lp_state = lp_state;
 8001a18:	6267      	str	r7, [r4, #36]	; 0x24
}
 8001a1a:	b007      	add	sp, #28
 8001a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a20:	07ff0000 	.word	0x07ff0000
 8001a24:	08009eda 	.word	0x08009eda
 8001a28:	fffff0cd 	.word	0xfffff0cd
 8001a2c:	ffff8001 	.word	0xffff8001

08001a30 <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj>:
    size_t size) {
 8001a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a34:	b08f      	sub	sp, #60	; 0x3c
 8001a36:	e9cd 2304 	strd	r2, r3, [sp, #16]
  int32_t dc_blocking_y0 = state_.phy.filter_state[1];
 8001a3a:	e9d0 a90a 	ldrd	sl, r9, [r0, #40]	; 0x28
  uint16_t delay_ptr = state_.phy.delay_ptr;
 8001a3e:	8c03      	ldrh	r3, [r0, #32]
    size_t size) {
 8001a40:	4604      	mov	r4, r0
  uint16_t delay_ptr = state_.phy.delay_ptr;
 8001a42:	9302      	str	r3, [sp, #8]
  int8_t* dl_b = delay_lines_.fluted.bore;
 8001a44:	f200 5394 	addw	r3, r0, #1428	; 0x594
 8001a48:	9300      	str	r3, [sp, #0]
  int8_t* dl_j = delay_lines_.fluted.jet;
 8001a4a:	f500 73ca 	add.w	r3, r0, #404	; 0x194
 8001a4e:	9301      	str	r3, [sp, #4]
  if (strike_) {
 8001a50:	7f03      	ldrb	r3, [r0, #28]
 8001a52:	b9db      	cbnz	r3, 8001a8c <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0x5c>
  uint16_t excitation_ptr = state_.phy.excitation_ptr;
 8001a54:	8c47      	ldrh	r7, [r0, #34]	; 0x22
  int32_t lp_state = state_.phy.lp_state;
 8001a56:	6a46      	ldr	r6, [r0, #36]	; 0x24
  uint32_t bore_delay = (delay_ << 1) - (2 << 16);
 8001a58:	68a3      	ldr	r3, [r4, #8]
  uint32_t jet_delay = (bore_delay >> 8) * (48 + (parameter_[1]  >> 10));
 8001a5a:	f9b4 b00e 	ldrsh.w	fp, [r4, #14]
  uint32_t bore_delay = (delay_ << 1) - (2 << 16);
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
  uint32_t jet_delay = (bore_delay >> 8) * (48 + (parameter_[1]  >> 10));
 8001a64:	ea4f 2bab 	mov.w	fp, fp, asr #10
 8001a68:	f10b 0230 	add.w	r2, fp, #48	; 0x30
 8001a6c:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8001a70:	fb0b fb02 	mul.w	fp, fp, r2
         || jet_delay > ((kWGJetLength - 1) << 16)) {
 8001a74:	496a      	ldr	r1, [pc, #424]	; (8001c20 <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0x1f0>)
 8001a76:	4a6b      	ldr	r2, [pc, #428]	; (8001c24 <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0x1f4>)
  bore_delay -= jet_delay;
 8001a78:	eba3 030b 	sub.w	r3, r3, fp
         || jet_delay > ((kWGJetLength - 1) << 16)) {
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d801      	bhi.n	8001a84 <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0x54>
 8001a80:	458b      	cmp	fp, r1
 8001a82:	d913      	bls.n	8001aac <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0x7c>
    bore_delay >>= 1;
 8001a84:	085b      	lsrs	r3, r3, #1
    jet_delay >>= 1;
 8001a86:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
  while (bore_delay > ((kWGFBoreLength - 1) << 16)
 8001a8a:	e7f7      	b.n	8001a7c <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0x4c>
    strike_ = false;
 8001a8c:	2600      	movs	r6, #0
    memset(dl_b, 0, sizeof(delay_lines_.fluted.bore));
 8001a8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a92:	2100      	movs	r1, #0
 8001a94:	9800      	ldr	r0, [sp, #0]
 8001a96:	f005 ff2a 	bl	80078ee <memset>
    memset(dl_j, 0, sizeof(delay_lines_.fluted.jet));
 8001a9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	9801      	ldr	r0, [sp, #4]
 8001aa2:	f005 ff24 	bl	80078ee <memset>
    excitation_ptr = 0;
 8001aa6:	4637      	mov	r7, r6
    strike_ = false;
 8001aa8:	7726      	strb	r6, [r4, #28]
 8001aaa:	e7d5      	b.n	8001a58 <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0x28>
  uint16_t bore_delay_integral = bore_delay >> 16;
 8001aac:	0c1a      	lsrs	r2, r3, #16
 8001aae:	9207      	str	r2, [sp, #28]
  uint32_t jet_delay_integral = jet_delay >> 16;
 8001ab0:	ea4f 421b 	mov.w	r2, fp, lsr #16
 8001ab4:	9208      	str	r2, [sp, #32]
  uint16_t breath_intensity = 2100 - (parameter_[0] >> 4);
 8001ab6:	f640 0234 	movw	r2, #2100	; 0x834
 8001aba:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	eba2 1221 	sub.w	r2, r2, r1, asr #4
 8001ac4:	b292      	uxth	r2, r2
 8001ac6:	9209      	str	r2, [sp, #36]	; 0x24
  uint16_t filter_coefficient = lut_flute_body_filter[pitch_ >> 7];
 8001ac8:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8001acc:	4956      	ldr	r1, [pc, #344]	; (8001c28 <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0x1f8>)
 8001ace:	11d2      	asrs	r2, r2, #7
 8001ad0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001ad4:	9306      	str	r3, [sp, #24]
 8001ad6:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001ada:	33ff      	adds	r3, #255	; 0xff
  uint16_t delay_ptr = state_.phy.delay_ptr;
 8001adc:	f8dd 8008 	ldr.w	r8, [sp, #8]
  uint16_t filter_coefficient = lut_flute_body_filter[pitch_ >> 7];
 8001ae0:	9905      	ldr	r1, [sp, #20]
 8001ae2:	9203      	str	r2, [sp, #12]
 8001ae4:	930a      	str	r3, [sp, #40]	; 0x28
  while (size--) {
 8001ae6:	3901      	subs	r1, #1
 8001ae8:	1c4a      	adds	r2, r1, #1
 8001aea:	910d      	str	r1, [sp, #52]	; 0x34
 8001aec:	f000 8086 	beq.w	8001bfc <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0x1cc>
    phase_ += phase_increment_;
 8001af0:	e9d4 3200 	ldrd	r3, r2, [r4]
 8001af4:	4413      	add	r3, r2
 8001af6:	6023      	str	r3, [r4, #0]
 8001af8:	9b07      	ldr	r3, [sp, #28]
 8001afa:	9900      	ldr	r1, [sp, #0]
 8001afc:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 8001b00:	4443      	add	r3, r8
 8001b02:	b29b      	uxth	r3, r3
    int16_t bore_dl_a = dl_b[bore_delay_ptr % kWGFBoreLength];
 8001b04:	f3c3 000b 	ubfx	r0, r3, #0, #12
    int16_t bore_dl_b = dl_b[(bore_delay_ptr - 1) % kWGFBoreLength];
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b0e:	560d      	ldrsb	r5, [r1, r0]
 8001b10:	56cb      	ldrsb	r3, [r1, r3]
 8001b12:	9906      	ldr	r1, [sp, #24]
 8001b14:	9a08      	ldr	r2, [sp, #32]
 8001b16:	434b      	muls	r3, r1
 8001b18:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
 8001b1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001b1e:	4442      	add	r2, r8
 8001b20:	b292      	uxth	r2, r2
 8001b22:	fb01 3505 	mla	r5, r1, r5, r3
 8001b26:	9901      	ldr	r1, [sp, #4]
    int16_t jet_dl_a = dl_j[jet_delay_ptr % kWGJetLength];
 8001b28:	f3c2 0309 	ubfx	r3, r2, #0, #10
    int16_t jet_dl_b = dl_j[(jet_delay_ptr - 1) % kWGJetLength];
 8001b2c:	3a01      	subs	r2, #1
 8001b2e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001b32:	568a      	ldrsb	r2, [r1, r2]
 8001b34:	fa1f f08b 	uxth.w	r0, fp
 8001b38:	f5c0 4c7f 	rsb	ip, r0, #65280	; 0xff00
 8001b3c:	4350      	muls	r0, r2
 8001b3e:	56cb      	ldrsb	r3, [r1, r3]
 8001b40:	f10c 0cff 	add.w	ip, ip, #255	; 0xff
 8001b44:	fb0c 0303 	mla	r3, ip, r3, r0
    int32_t breath_pressure = lut_blowing_envelope[excitation_ptr];
 8001b48:	4a38      	ldr	r2, [pc, #224]	; (8001c2c <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0x1fc>)
 8001b4a:	141b      	asrs	r3, r3, #16
 8001b4c:	f832 2017 	ldrh.w	r2, [r2, r7, lsl #1]
    int32_t jet_value = Mix(jet_dl_a, jet_dl_b, jet_delay_fractional) << 9;
 8001b50:	025b      	lsls	r3, r3, #9
    breath_pressure <<= 1;
 8001b52:	0052      	lsls	r2, r2, #1
    int32_t jet_value = Mix(jet_dl_a, jet_dl_b, jet_delay_fractional) << 9;
 8001b54:	930c      	str	r3, [sp, #48]	; 0x30
    breath_pressure <<= 1;
 8001b56:	920b      	str	r2, [sp, #44]	; 0x2c
    int32_t random_pressure = Random::GetSample() * breath_intensity >> 12;
 8001b58:	f7ff fde4 	bl	8001724 <_ZN6stmlib6Random9GetSampleEv>
 8001b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
        lut_blowing_jet[jet_table_index >> 8]) + (reflection >> 1);
 8001b5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    int32_t random_pressure = Random::GetSample() * breath_intensity >> 12;
 8001b62:	4358      	muls	r0, r3
        (4096 - filter_coefficient) * lp_state) >> 12;
 8001b64:	9b03      	ldr	r3, [sp, #12]
 8001b66:	142d      	asrs	r5, r5, #16
 8001b68:	f5c3 5c80 	rsb	ip, r3, #4096	; 0x1000
 8001b6c:	fb06 f60c 	mul.w	r6, r6, ip
    dc_blocking_y0 = (kDCBlockingPole * dc_blocking_y0 >> 12);
 8001b70:	f640 7cd7 	movw	ip, #4055	; 0xfd7
    int32_t bore_value = Mix(bore_dl_a, bore_dl_b, bore_delay_fractional) << 9;
 8001b74:	026d      	lsls	r5, r5, #9
    lp_state = (-filter_coefficient * bore_value + \
 8001b76:	fb03 6615 	mls	r6, r3, r5, r6
    random_pressure = random_pressure * breath_pressure >> 15;
 8001b7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    dc_blocking_y0 = (kDCBlockingPole * dc_blocking_y0 >> 12);
 8001b7c:	fb0c f909 	mul.w	r9, ip, r9
    int32_t random_pressure = Random::GetSample() * breath_intensity >> 12;
 8001b80:	1300      	asrs	r0, r0, #12
    random_pressure = random_pressure * breath_pressure >> 15;
 8001b82:	4350      	muls	r0, r2
    lp_state = (-filter_coefficient * bore_value + \
 8001b84:	1336      	asrs	r6, r6, #12
    dc_blocking_y0 += reflection - dc_blocking_x0;
 8001b86:	eba6 0a0a 	sub.w	sl, r6, sl
 8001b8a:	eb0a 3929 	add.w	r9, sl, r9, asr #12
    int32_t pressure_delta = breath_pressure - (reflection >> 1);
 8001b8e:	ea4f 0c69 	mov.w	ip, r9, asr #1
    breath_pressure += random_pressure;
 8001b92:	eb02 32e0 	add.w	r2, r2, r0, asr #15
    int32_t pressure_delta = breath_pressure - (reflection >> 1);
 8001b96:	eba2 020c 	sub.w	r2, r2, ip
    dl_j[delay_ptr % kWGJetLength] = pressure_delta >> 9;
 8001b9a:	9b01      	ldr	r3, [sp, #4]
 8001b9c:	f3c8 0e09 	ubfx	lr, r8, #0, #10
 8001ba0:	1252      	asrs	r2, r2, #9
 8001ba2:	f803 200e 	strb.w	r2, [r3, lr]
        lut_blowing_jet[jet_table_index >> 8]) + (reflection >> 1);
 8001ba6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    pressure_delta = static_cast<int16_t>(
 8001ba8:	4821      	ldr	r0, [pc, #132]	; (8001c30 <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0x200>)
        lut_blowing_jet[jet_table_index >> 8]) + (reflection >> 1);
 8001baa:	428b      	cmp	r3, r1
 8001bac:	bfa8      	it	ge
 8001bae:	460b      	movge	r3, r1
 8001bb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001bb4:	121b      	asrs	r3, r3, #8
    pressure_delta = static_cast<int16_t>(
 8001bb6:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
    dl_b[delay_ptr % kWGFBoreLength] = pressure_delta >> 9;
 8001bba:	f3c8 020b 	ubfx	r2, r8, #0, #12
    pressure_delta = static_cast<int16_t>(
 8001bbe:	449c      	add	ip, r3
    dl_b[delay_ptr % kWGFBoreLength] = pressure_delta >> 9;
 8001bc0:	9b00      	ldr	r3, [sp, #0]
 8001bc2:	ea4f 2c6c 	mov.w	ip, ip, asr #9
 8001bc6:	f803 c002 	strb.w	ip, [r3, r2]
 8001bca:	f647 73ff 	movw	r3, #32767	; 0x7fff
    int32_t out = bore_value >> 1;
 8001bce:	106d      	asrs	r5, r5, #1
 8001bd0:	429d      	cmp	r5, r3
 8001bd2:	bfa8      	it	ge
 8001bd4:	461d      	movge	r5, r3
    *buffer++ = out;
 8001bd6:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0x204>)
    if (size & 3) {
 8001bd8:	990d      	ldr	r1, [sp, #52]	; 0x34
    *buffer++ = out;
 8001bda:	429d      	cmp	r5, r3
 8001bdc:	bfb8      	it	lt
 8001bde:	461d      	movlt	r5, r3
 8001be0:	9b04      	ldr	r3, [sp, #16]
    ++delay_ptr;
 8001be2:	f108 0801 	add.w	r8, r8, #1
    *buffer++ = out;
 8001be6:	f823 5b02 	strh.w	r5, [r3], #2
 8001bea:	9304      	str	r3, [sp, #16]
    if (size & 3) {
 8001bec:	078b      	lsls	r3, r1, #30
    ++delay_ptr;
 8001bee:	fa1f f888 	uxth.w	r8, r8
    if (size & 3) {
 8001bf2:	d001      	beq.n	8001bf8 <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0x1c8>
      ++excitation_ptr;
 8001bf4:	3701      	adds	r7, #1
 8001bf6:	b2bf      	uxth	r7, r7
    excitation_ptr = 0;
 8001bf8:	46b2      	mov	sl, r6
 8001bfa:	e774      	b.n	8001ae6 <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0xb6>
  state_.phy.excitation_ptr = excitation_ptr;
 8001bfc:	f5b7 7fb4 	cmp.w	r7, #360	; 0x168
 8001c00:	bf28      	it	cs
 8001c02:	f44f 77b4 	movcs.w	r7, #360	; 0x168
  state_.phy.delay_ptr = delay_ptr;
 8001c06:	9b02      	ldr	r3, [sp, #8]
 8001c08:	9a05      	ldr	r2, [sp, #20]
  state_.phy.excitation_ptr = excitation_ptr;
 8001c0a:	8467      	strh	r7, [r4, #34]	; 0x22
  state_.phy.delay_ptr = delay_ptr;
 8001c0c:	4413      	add	r3, r2
 8001c0e:	8423      	strh	r3, [r4, #32]
  state_.phy.filter_state[0] = dc_blocking_x0;
 8001c10:	e9c4 6a09 	strd	r6, sl, [r4, #36]	; 0x24
  state_.phy.filter_state[1] = dc_blocking_y0;
 8001c14:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
}
 8001c18:	b00f      	add	sp, #60	; 0x3c
 8001c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c1e:	bf00      	nop
 8001c20:	03ff0000 	.word	0x03ff0000
 8001c24:	0fff0000 	.word	0x0fff0000
 8001c28:	08009eda 	.word	0x08009eda
 8001c2c:	080099c8 	.word	0x080099c8
 8001c30:	08008ae2 	.word	0x08008ae2
 8001c34:	ffff8001 	.word	0xffff8001

08001c38 <_ZN6braids17DigitalOscillator19RenderFilteredNoiseEPKhPsj>:
    size_t size) {
 8001c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c3c:	469a      	mov	sl, r3
  int32_t f = Interpolate824(lut_svf_cutoff, pitch_ << 17);
 8001c3e:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
    size_t size) {
 8001c42:	4607      	mov	r7, r0
  int32_t f = Interpolate824(lut_svf_cutoff, pitch_ << 17);
 8001c44:	045b      	lsls	r3, r3, #17
    size_t size) {
 8001c46:	4693      	mov	fp, r2
  int32_t lp = state_.svf.lp;
 8001c48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
  uint32_t a = table[phase >> 24];
 8001c4c:	4a4a      	ldr	r2, [pc, #296]	; (8001d78 <_ZN6braids17DigitalOscillator19RenderFilteredNoiseEPKhPsj+0x140>)
 8001c4e:	0e19      	lsrs	r1, r3, #24
 8001c50:	f832 5011 	ldrh.w	r5, [r2, r1, lsl #1]
  uint32_t b = table[(phase >> 24) + 1];
 8001c54:	3202      	adds	r2, #2
 8001c56:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 8001c5a:	0a1b      	lsrs	r3, r3, #8
 8001c5c:	1b52      	subs	r2, r2, r5
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	4353      	muls	r3, r2
 8001c62:	eb05 4513 	add.w	r5, r5, r3, lsr #16
  int32_t damp = Interpolate824(lut_svf_damp, parameter_[0] << 17);
 8001c66:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  uint32_t a = table[phase >> 24];
 8001c6a:	4a44      	ldr	r2, [pc, #272]	; (8001d7c <_ZN6braids17DigitalOscillator19RenderFilteredNoiseEPKhPsj+0x144>)
 8001c6c:	045b      	lsls	r3, r3, #17
 8001c6e:	0e1c      	lsrs	r4, r3, #24
 8001c70:	0061      	lsls	r1, r4, #1
  uint32_t b = table[(phase >> 24) + 1];
 8001c72:	3102      	adds	r1, #2
  uint32_t a = table[phase >> 24];
 8001c74:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
  uint32_t b = table[(phase >> 24) + 1];
 8001c78:	5a8a      	ldrh	r2, [r1, r2]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 8001c7a:	0a1b      	lsrs	r3, r3, #8
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	1a12      	subs	r2, r2, r0
 8001c80:	435a      	muls	r2, r3
 8001c82:	eb00 4212 	add.w	r2, r0, r2, lsr #16
    size_t size) {
 8001c86:	b085      	sub	sp, #20
  int32_t damp = Interpolate824(lut_svf_damp, parameter_[0] << 17);
 8001c88:	b292      	uxth	r2, r2
 8001c8a:	9201      	str	r2, [sp, #4]
  uint32_t a = table[phase >> 24];
 8001c8c:	4a3c      	ldr	r2, [pc, #240]	; (8001d80 <_ZN6braids17DigitalOscillator19RenderFilteredNoiseEPKhPsj+0x148>)
  if (parameter_[1] < 16384) {
 8001c8e:	f9b7 600e 	ldrsh.w	r6, [r7, #14]
 8001c92:	f832 4014 	ldrh.w	r4, [r2, r4, lsl #1]
  uint32_t b = table[(phase >> 24) + 1];
 8001c96:	5a8a      	ldrh	r2, [r1, r2]
 8001c98:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 8001c9c:	eba2 0204 	sub.w	r2, r2, r4
 8001ca0:	fb03 f302 	mul.w	r3, r3, r2
 8001ca4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  int32_t scale = Interpolate824(lut_svf_scale, parameter_[0] << 17);
 8001ca8:	b2a4      	uxth	r4, r4
    hp_gain = parameter_[1] - 16384;
 8001caa:	bfa8      	it	ge
 8001cac:	f5a6 4380 	subge.w	r3, r6, #16384	; 0x4000
  int32_t f = Interpolate824(lut_svf_cutoff, pitch_ << 17);
 8001cb0:	b2ad      	uxth	r5, r5
    bp_gain = 32767 - parameter_[1];
 8001cb2:	bfad      	iteet	ge
 8001cb4:	f5c6 46ff 	rsbge	r6, r6, #32640	; 0x7f80
    lp_gain = 16384 - bp_gain;
 8001cb8:	f5c6 4180 	rsblt	r1, r6, #16384	; 0x4000
    hp_gain = 0;
 8001cbc:	2300      	movlt	r3, #0
    bp_gain = 32767 - parameter_[1];
 8001cbe:	367f      	addge	r6, #127	; 0x7f
    lp_gain = 0;
 8001cc0:	bfa8      	it	ge
 8001cc2:	2100      	movge	r1, #0
  int32_t gain_correction = f > scale ? scale * 32767 / f : 32767;
 8001cc4:	42a5      	cmp	r5, r4
 8001cc6:	bfc6      	itte	gt
 8001cc8:	ebc4 34c4 	rsbgt	r4, r4, r4, lsl #15
 8001ccc:	fb94 f2f5 	sdivgt	r2, r4, r5
 8001cd0:	f647 72ff 	movwle	r2, #32767	; 0x7fff
 8001cd4:	9200      	str	r2, [sp, #0]
  while (size--) {
 8001cd6:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
 8001cda:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8001cde:	d345      	bcc.n	8001d6c <_ZN6braids17DigitalOscillator19RenderFilteredNoiseEPKhPsj+0x134>
    in = Random::GetSample() >> 1;
 8001ce0:	f7ff fd20 	bl	8001724 <_ZN6stmlib6Random9GetSampleEv>
 8001ce4:	f647 7cff 	movw	ip, #32767	; 0x7fff
    lp += f * bp >> 15;
 8001ce8:	fb05 f208 	mul.w	r2, r5, r8
 8001cec:	eb09 39e2 	add.w	r9, r9, r2, asr #15
 8001cf0:	45e1      	cmp	r9, ip
 8001cf2:	bfa8      	it	ge
 8001cf4:	46e1      	movge	r9, ip
 8001cf6:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <_ZN6braids17DigitalOscillator19RenderFilteredNoiseEPKhPsj+0x14c>)
    notch = in - (bp * damp >> 15);
 8001cf8:	9901      	ldr	r1, [sp, #4]
 8001cfa:	4599      	cmp	r9, r3
 8001cfc:	bfb8      	it	lt
 8001cfe:	4699      	movlt	r9, r3
 8001d00:	fb01 f208 	mul.w	r2, r1, r8
 8001d04:	13d2      	asrs	r2, r2, #15
 8001d06:	ebc2 0060 	rsb	r0, r2, r0, asr #1
    hp = notch - lp;
 8001d0a:	eba0 0009 	sub.w	r0, r0, r9
    bp += f * hp >> 15;
 8001d0e:	fb00 f205 	mul.w	r2, r0, r5
    result += (lp_gain * lp) >> 14;
 8001d12:	9902      	ldr	r1, [sp, #8]
    bp += f * hp >> 15;
 8001d14:	eb08 38e2 	add.w	r8, r8, r2, asr #15
 8001d18:	461c      	mov	r4, r3
    result += (bp_gain * bp) >> 14;
 8001d1a:	fb08 f206 	mul.w	r2, r8, r6
    result += (hp_gain * hp) >> 14;
 8001d1e:	9b03      	ldr	r3, [sp, #12]
    result += (lp_gain * lp) >> 14;
 8001d20:	fb09 fe01 	mul.w	lr, r9, r1
    result += (hp_gain * hp) >> 14;
 8001d24:	4358      	muls	r0, r3
    result += (bp_gain * bp) >> 14;
 8001d26:	1392      	asrs	r2, r2, #14
 8001d28:	eb02 32ae 	add.w	r2, r2, lr, asr #14
    result += (hp_gain * hp) >> 14;
 8001d2c:	eb02 30a0 	add.w	r0, r2, r0, asr #14
 8001d30:	4560      	cmp	r0, ip
 8001d32:	bfa8      	it	ge
 8001d34:	4660      	movge	r0, ip
    result = result * gain_correction >> 15;
 8001d36:	42a0      	cmp	r0, r4
 8001d38:	bfb8      	it	lt
 8001d3a:	4620      	movlt	r0, r4
 8001d3c:	9a00      	ldr	r2, [sp, #0]
  int32_t b = table[(index >> 8) + 1];
 8001d3e:	4c12      	ldr	r4, [pc, #72]	; (8001d88 <_ZN6braids17DigitalOscillator19RenderFilteredNoiseEPKhPsj+0x150>)
 8001d40:	4350      	muls	r0, r2
    *buffer++ = Interpolate88(ws_moderate_overdrive, result + 32768);
 8001d42:	f3c0 30cf 	ubfx	r0, r0, #15, #16
 8001d46:	f480 4000 	eor.w	r0, r0, #32768	; 0x8000
  int32_t a = table[index >> 8];
 8001d4a:	4a10      	ldr	r2, [pc, #64]	; (8001d8c <_ZN6braids17DigitalOscillator19RenderFilteredNoiseEPKhPsj+0x154>)
 8001d4c:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8001d50:	f932 201c 	ldrsh.w	r2, [r2, ip, lsl #1]
  int32_t b = table[(index >> 8) + 1];
 8001d54:	f934 c01c 	ldrsh.w	ip, [r4, ip, lsl #1]
  return a + ((b - a) * static_cast<int32_t>(index & 0xff) >> 8);
 8001d58:	b2c0      	uxtb	r0, r0
 8001d5a:	ebac 0c02 	sub.w	ip, ip, r2
 8001d5e:	fb00 f00c 	mul.w	r0, r0, ip
 8001d62:	eb02 2020 	add.w	r0, r2, r0, asr #8
 8001d66:	f82b 0b02 	strh.w	r0, [fp], #2
  while (size--) {
 8001d6a:	e7b4      	b.n	8001cd6 <_ZN6braids17DigitalOscillator19RenderFilteredNoiseEPKhPsj+0x9e>
  state_.svf.bp = bp;
 8001d6c:	e9c7 8908 	strd	r8, r9, [r7, #32]
}
 8001d70:	b005      	add	sp, #20
 8001d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d76:	bf00      	nop
 8001d78:	080086de 	.word	0x080086de
 8001d7c:	080080d8 	.word	0x080080d8
 8001d80:	080084dc 	.word	0x080084dc
 8001d84:	ffff8001 	.word	0xffff8001
 8001d88:	0800a562 	.word	0x0800a562
 8001d8c:	0800a560 	.word	0x0800a560

08001d90 <_ZN6braids17DigitalOscillator20RenderTwinPeaksNoiseEPKhPsj>:
    size_t size) {
 8001d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d94:	b089      	sub	sp, #36	; 0x24
 8001d96:	9303      	str	r3, [sp, #12]
  int32_t y11 = state_.pno.filter_state[0][0];
 8001d98:	6a43      	ldr	r3, [r0, #36]	; 0x24
    size_t size) {
 8001d9a:	4604      	mov	r4, r0
  int32_t y11 = state_.pno.filter_state[0][0];
 8001d9c:	9300      	str	r3, [sp, #0]
  int32_t y12 = state_.pno.filter_state[0][1];
 8001d9e:	6a83      	ldr	r3, [r0, #40]	; 0x28
  uint32_t q = 65240 + (parameter_[0] >> 7);
 8001da0:	f9b0 b00c 	ldrsh.w	fp, [r0, #12]
  int32_t y12 = state_.pno.filter_state[0][1];
 8001da4:	9301      	str	r3, [sp, #4]
  int32_t y22 = state_.pno.filter_state[1][1];
 8001da6:	e9d0 830b 	ldrd	r8, r3, [r0, #44]	; 0x2c
  uint32_t q = 65240 + (parameter_[0] >> 7);
 8001daa:	f64f 60d8 	movw	r0, #65240	; 0xfed8
 8001dae:	eb00 10eb 	add.w	r0, r0, fp, asr #7
  int32_t y22 = state_.pno.filter_state[1][1];
 8001db2:	9302      	str	r3, [sp, #8]
  int32_t q_squared = q * q >> 17;
 8001db4:	fb00 f300 	mul.w	r3, r0, r0
 8001db8:	0c5b      	lsrs	r3, r3, #17
 8001dba:	9304      	str	r3, [sp, #16]
 8001dbc:	f643 73ff 	movw	r3, #16383	; 0x3fff
  int16_t p1 = pitch_;
 8001dc0:	f9b4 6018 	ldrsh.w	r6, [r4, #24]
  uint32_t a = table[phase >> 24];
 8001dc4:	4f69      	ldr	r7, [pc, #420]	; (8001f6c <_ZN6braids17DigitalOscillator20RenderTwinPeaksNoiseEPKhPsj+0x1dc>)
 8001dc6:	429e      	cmp	r6, r3
 8001dc8:	4631      	mov	r1, r6
 8001dca:	bfa8      	it	ge
 8001dcc:	4619      	movge	r1, r3
  int32_t c1 = Interpolate824(lut_resonator_coefficient, p1 << 17);
 8001dce:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8001dd2:	0449      	lsls	r1, r1, #17
 8001dd4:	ea4f 6c11 	mov.w	ip, r1, lsr #24
 8001dd8:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8001f78 <_ZN6braids17DigitalOscillator20RenderTwinPeaksNoiseEPKhPsj+0x1e8>
 8001ddc:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
  uint32_t b = table[(phase >> 24) + 1];
 8001de0:	f10e 0e02 	add.w	lr, lr, #2
  uint32_t a = table[phase >> 24];
 8001de4:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8001de8:	f839 a01c 	ldrh.w	sl, [r9, ip, lsl #1]
  uint32_t b = table[(phase >> 24) + 1];
 8001dec:	f83e c009 	ldrh.w	ip, [lr, r9]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 8001df0:	0a09      	lsrs	r1, r1, #8
 8001df2:	b289      	uxth	r1, r1
 8001df4:	ebac 0c0a 	sub.w	ip, ip, sl
 8001df8:	fb01 fc0c 	mul.w	ip, r1, ip
 8001dfc:	eb0a 4c1c 	add.w	ip, sl, ip, lsr #16
  int32_t s1 = Interpolate824(lut_resonator_scale, p1 << 17);
 8001e00:	fa1f f38c 	uxth.w	r3, ip
 8001e04:	9305      	str	r3, [sp, #20]
 8001e06:	f643 73ff 	movw	r3, #16383	; 0x3fff
  int16_t p2 = pitch_ + ((parameter_[1] - 16384) >> 1);
 8001e0a:	f9b4 c00e 	ldrsh.w	ip, [r4, #14]
  uint32_t b = table[(phase >> 24) + 1];
 8001e0e:	f83e e007 	ldrh.w	lr, [lr, r7]
 8001e12:	f5ac 4c80 	sub.w	ip, ip, #16384	; 0x4000
 8001e16:	eb06 066c 	add.w	r6, r6, ip, asr #1
 8001e1a:	b236      	sxth	r6, r6
 8001e1c:	42b3      	cmp	r3, r6
 8001e1e:	bfa8      	it	ge
 8001e20:	4633      	movge	r3, r6
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 8001e22:	ebae 0e05 	sub.w	lr, lr, r5
 8001e26:	fb01 f10e 	mul.w	r1, r1, lr
 8001e2a:	eb05 4111 	add.w	r1, r5, r1, lsr #16
  c1 = c1 * q >> 16;
 8001e2e:	b289      	uxth	r1, r1
 8001e30:	4341      	muls	r1, r0
  int32_t c2 = Interpolate824(lut_resonator_coefficient, p2 << 17);
 8001e32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001e36:	045b      	lsls	r3, r3, #17
  uint32_t a = table[phase >> 24];
 8001e38:	ea4f 6a13 	mov.w	sl, r3, lsr #24
 8001e3c:	ea4f 0c4a 	mov.w	ip, sl, lsl #1
  uint32_t b = table[(phase >> 24) + 1];
 8001e40:	f10c 0c02 	add.w	ip, ip, #2
  c1 = c1 * q >> 16;
 8001e44:	0c09      	lsrs	r1, r1, #16
  uint32_t a = table[phase >> 24];
 8001e46:	f837 601a 	ldrh.w	r6, [r7, sl, lsl #1]
 8001e4a:	9106      	str	r1, [sp, #24]
 8001e4c:	f839 a01a 	ldrh.w	sl, [r9, sl, lsl #1]
  uint32_t b = table[(phase >> 24) + 1];
 8001e50:	f83c 1007 	ldrh.w	r1, [ip, r7]
 8001e54:	f83c 9009 	ldrh.w	r9, [ip, r9]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	eba9 090a 	sub.w	r9, r9, sl
 8001e60:	1b89      	subs	r1, r1, r6
 8001e62:	fb03 f909 	mul.w	r9, r3, r9
 8001e66:	434b      	muls	r3, r1
 8001e68:	eb06 4313 	add.w	r3, r6, r3, lsr #16
  c2 = c2 * q >> 16;
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	4358      	muls	r0, r3
 8001e70:	0c03      	lsrs	r3, r0, #16
 8001e72:	9307      	str	r3, [sp, #28]
  int32_t makeup_gain = 8191 - (parameter_[0] >> 2);
 8001e74:	f641 73ff 	movw	r3, #8191	; 0x1fff
  int32_t a = table[index >> 8];
 8001e78:	4f3d      	ldr	r7, [pc, #244]	; (8001f70 <_ZN6braids17DigitalOscillator20RenderTwinPeaksNoiseEPKhPsj+0x1e0>)
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 8001e7a:	eb0a 4a19 	add.w	sl, sl, r9, lsr #16
 8001e7e:	4e3d      	ldr	r6, [pc, #244]	; (8001f74 <_ZN6braids17DigitalOscillator20RenderTwinPeaksNoiseEPKhPsj+0x1e4>)
  int32_t s2 = Interpolate824(lut_resonator_scale, p2 << 17);
 8001e80:	fa1f fa8a 	uxth.w	sl, sl
  int32_t makeup_gain = 8191 - (parameter_[0] >> 2);
 8001e84:	eba3 0bab 	sub.w	fp, r3, fp, asr #2
 8001e88:	1d15      	adds	r5, r2, #4
  int32_t b = table[(index >> 8) + 1];
 8001e8a:	f107 0902 	add.w	r9, r7, #2
  while (size) {    
 8001e8e:	9b03      	ldr	r3, [sp, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d061      	beq.n	8001f58 <_ZN6braids17DigitalOscillator20RenderTwinPeaksNoiseEPKhPsj+0x1c8>
    sample = Random::GetSample() >> 1;
 8001e94:	f7ff fc46 	bl	8001724 <_ZN6stmlib6Random9GetSampleEv>
 8001e98:	1040      	asrs	r0, r0, #1
    if (sample > 0) {
 8001e9a:	2800      	cmp	r0, #0
 8001e9c:	dd52      	ble.n	8001f44 <_ZN6braids17DigitalOscillator20RenderTwinPeaksNoiseEPKhPsj+0x1b4>
      y10 = sample * s1 >> 16;
 8001e9e:	9b05      	ldr	r3, [sp, #20]
 8001ea0:	4343      	muls	r3, r0
      y20 = sample * s2 >> 16;
 8001ea2:	fb00 f00a 	mul.w	r0, r0, sl
      y10 = sample * s1 >> 16;
 8001ea6:	141b      	asrs	r3, r3, #16
      y20 = sample * s2 >> 16;
 8001ea8:	1400      	asrs	r0, r0, #16
 8001eaa:	f647 7cff 	movw	ip, #32767	; 0x7fff
    y10 += y11 * c1 >> 15;
 8001eae:	9900      	ldr	r1, [sp, #0]
 8001eb0:	9a06      	ldr	r2, [sp, #24]
 8001eb2:	3504      	adds	r5, #4
 8001eb4:	434a      	muls	r2, r1
    y10 -= y12 * q_squared >> 15;
 8001eb6:	9904      	ldr	r1, [sp, #16]
    y10 += y11 * c1 >> 15;
 8001eb8:	eb03 33e2 	add.w	r3, r3, r2, asr #15
    y10 -= y12 * q_squared >> 15;
 8001ebc:	9a01      	ldr	r2, [sp, #4]
 8001ebe:	434a      	muls	r2, r1
 8001ec0:	eba3 32e2 	sub.w	r2, r3, r2, asr #15
 8001ec4:	4562      	cmp	r2, ip
 8001ec6:	bfa8      	it	ge
 8001ec8:	4662      	movge	r2, ip
    y20 += y21 * c2 >> 15;
 8001eca:	9b07      	ldr	r3, [sp, #28]
 8001ecc:	42b2      	cmp	r2, r6
 8001ece:	fb03 f108 	mul.w	r1, r3, r8
    y20 -= y22 * q_squared >> 15;
 8001ed2:	9b04      	ldr	r3, [sp, #16]
    y20 += y21 * c2 >> 15;
 8001ed4:	eb00 30e1 	add.w	r0, r0, r1, asr #15
    y20 -= y22 * q_squared >> 15;
 8001ed8:	9902      	ldr	r1, [sp, #8]
 8001eda:	bfb8      	it	lt
 8001edc:	4632      	movlt	r2, r6
 8001ede:	4359      	muls	r1, r3
 8001ee0:	eba0 31e1 	sub.w	r1, r0, r1, asr #15
 8001ee4:	4561      	cmp	r1, ip
 8001ee6:	bfa8      	it	ge
 8001ee8:	4661      	movge	r1, ip
 8001eea:	42b1      	cmp	r1, r6
 8001eec:	bfb8      	it	lt
 8001eee:	4631      	movlt	r1, r6
    y10 += y20;
 8001ef0:	188b      	adds	r3, r1, r2
    y10 += (y10 * makeup_gain >> 13);
 8001ef2:	fb03 f00b 	mul.w	r0, r3, fp
 8001ef6:	eb03 3360 	add.w	r3, r3, r0, asr #13
 8001efa:	4563      	cmp	r3, ip
 8001efc:	bfa8      	it	ge
 8001efe:	4663      	movge	r3, ip
    sample = Interpolate88(ws_moderate_overdrive, sample + 32768);
 8001f00:	42b3      	cmp	r3, r6
 8001f02:	bfb8      	it	lt
 8001f04:	4633      	movlt	r3, r6
 8001f06:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001f0a:	b29b      	uxth	r3, r3
  int32_t a = table[index >> 8];
 8001f0c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8001f10:	f937 001c 	ldrsh.w	r0, [r7, ip, lsl #1]
  int32_t b = table[(index >> 8) + 1];
 8001f14:	f939 c01c 	ldrsh.w	ip, [r9, ip, lsl #1]
  return a + ((b - a) * static_cast<int32_t>(index & 0xff) >> 8);
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	ebac 0c00 	sub.w	ip, ip, r0
 8001f1e:	fb03 f30c 	mul.w	r3, r3, ip
 8001f22:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8001f26:	b21b      	sxth	r3, r3
    *buffer++ = sample;
 8001f28:	f825 3c08 	strh.w	r3, [r5, #-8]
    *buffer++ = sample;
 8001f2c:	f825 3c06 	strh.w	r3, [r5, #-6]
    size -= 2;
 8001f30:	9b03      	ldr	r3, [sp, #12]
  while (size) {    
 8001f32:	f8cd 8008 	str.w	r8, [sp, #8]
    size -= 2;
 8001f36:	3b02      	subs	r3, #2
 8001f38:	9303      	str	r3, [sp, #12]
  while (size) {    
 8001f3a:	9b00      	ldr	r3, [sp, #0]
    y21 = y20;
 8001f3c:	4688      	mov	r8, r1
    y11 = y10;
 8001f3e:	e9cd 2300 	strd	r2, r3, [sp]
  while (size) {    
 8001f42:	e7a4      	b.n	8001e8e <_ZN6braids17DigitalOscillator20RenderTwinPeaksNoiseEPKhPsj+0xfe>
      y10 = -((-sample) * s1 >> 16);
 8001f44:	9b05      	ldr	r3, [sp, #20]
 8001f46:	4240      	negs	r0, r0
 8001f48:	4343      	muls	r3, r0
      y20 = -((-sample) * s2 >> 16);
 8001f4a:	fb0a f000 	mul.w	r0, sl, r0
      y10 = -((-sample) * s1 >> 16);
 8001f4e:	141b      	asrs	r3, r3, #16
      y20 = -((-sample) * s2 >> 16);
 8001f50:	1400      	asrs	r0, r0, #16
      y10 = -((-sample) * s1 >> 16);
 8001f52:	425b      	negs	r3, r3
      y20 = -((-sample) * s2 >> 16);
 8001f54:	4240      	negs	r0, r0
 8001f56:	e7a8      	b.n	8001eaa <_ZN6braids17DigitalOscillator20RenderTwinPeaksNoiseEPKhPsj+0x11a>
  state_.pno.filter_state[0][0] = y11;
 8001f58:	9b00      	ldr	r3, [sp, #0]
 8001f5a:	6263      	str	r3, [r4, #36]	; 0x24
  state_.pno.filter_state[0][1] = y12;
 8001f5c:	9b01      	ldr	r3, [sp, #4]
  state_.pno.filter_state[1][0] = y21;
 8001f5e:	e9c4 380a 	strd	r3, r8, [r4, #40]	; 0x28
  state_.pno.filter_state[1][1] = y22;
 8001f62:	9b02      	ldr	r3, [sp, #8]
 8001f64:	6323      	str	r3, [r4, #48]	; 0x30
}
 8001f66:	b009      	add	sp, #36	; 0x24
 8001f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f6c:	0800c704 	.word	0x0800c704
 8001f70:	0800a560 	.word	0x0800a560
 8001f74:	ffff8001 	.word	0xffff8001
 8001f78:	080098c6 	.word	0x080098c6

08001f7c <_ZN6braids17DigitalOscillator19RenderGranularCloudEPKhPsj>:
    size_t size) {
 8001f7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f80:	4604      	mov	r4, r0
 8001f82:	4693      	mov	fp, r2
 8001f84:	461e      	mov	r6, r3
 8001f86:	4682      	mov	sl, r0
      g->envelope_phase_increment = 0;
 8001f88:	2700      	movs	r7, #0
            lut_granular_envelope_rate[parameter_[0] >> 7] << 3;
 8001f8a:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8002118 <_ZN6braids17DigitalOscillator19RenderGranularCloudEPKhPsj+0x19c>
 8001f8e:	f100 0840 	add.w	r8, r0, #64	; 0x40
    if (g->envelope_phase > (1 << 24) ||
 8001f92:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 8001f96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f9a:	d802      	bhi.n	8001fa2 <_ZN6braids17DigitalOscillator19RenderGranularCloudEPKhPsj+0x26>
 8001f9c:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 8001fa0:	bb1b      	cbnz	r3, 8001fea <_ZN6braids17DigitalOscillator19RenderGranularCloudEPKhPsj+0x6e>
      g->envelope_phase_increment = 0;
 8001fa2:	f8ca 702c 	str.w	r7, [sl, #44]	; 0x2c
      if ((Random::GetWord() & 0xffff) < 0x4000) {
 8001fa6:	f7ff fa49 	bl	800143c <_ZN6stmlib6Random7GetWordEv>
 8001faa:	b280      	uxth	r0, r0
 8001fac:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8001fb0:	d21b      	bcs.n	8001fea <_ZN6braids17DigitalOscillator19RenderGranularCloudEPKhPsj+0x6e>
            lut_granular_envelope_rate[parameter_[0] >> 7] << 3;
 8001fb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fb6:	11db      	asrs	r3, r3, #7
 8001fb8:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 8001fbc:	00db      	lsls	r3, r3, #3
        g->envelope_phase = 0;
 8001fbe:	e9ca 730a 	strd	r7, r3, [sl, #40]	; 0x28
        g->phase_increment = phase_increment_;
 8001fc2:	6863      	ldr	r3, [r4, #4]
 8001fc4:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
        int32_t pitch_mod = Random::GetSample() * parameter_[1] >> 16;
 8001fc8:	f7ff fbac 	bl	8001724 <_ZN6stmlib6Random9GetSampleEv>
 8001fcc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
        int32_t phi = phase_increment_ >> 8;
 8001fd0:	6862      	ldr	r2, [r4, #4]
        if (pitch_mod < 0) {
 8001fd2:	4358      	muls	r0, r3
 8001fd4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
        int32_t phi = phase_increment_ >> 8;
 8001fd8:	ea4f 2212 	mov.w	r2, r2, lsr #8
          g->phase_increment += phi * (pitch_mod >> 8);
 8001fdc:	bf4c      	ite	mi
 8001fde:	1600      	asrmi	r0, r0, #24
          g->phase_increment += phi * (pitch_mod >> 7);
 8001fe0:	15c0      	asrpl	r0, r0, #23
 8001fe2:	fb02 3000 	mla	r0, r2, r0, r3
 8001fe6:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8001fea:	f10a 0a10 	add.w	sl, sl, #16
  for (size_t i = 0; i < 4; ++i) {
 8001fee:	45c2      	cmp	sl, r8
 8001ff0:	d1cf      	bne.n	8001f92 <_ZN6braids17DigitalOscillator19RenderGranularCloudEPKhPsj+0x16>
 8001ff2:	f647 7cff 	movw	ip, #32767	; 0x7fff
  int32_t a = table[phase >> 24];
 8001ff6:	4b46      	ldr	r3, [pc, #280]	; (8002110 <_ZN6braids17DigitalOscillator19RenderGranularCloudEPKhPsj+0x194>)
        lut_granular_envelope[state_.grain[0].envelope_phase >> 16] >> 17;
 8001ff8:	4846      	ldr	r0, [pc, #280]	; (8002114 <_ZN6braids17DigitalOscillator19RenderGranularCloudEPKhPsj+0x198>)
    *buffer++ = sample;
 8001ffa:	f8df e120 	ldr.w	lr, [pc, #288]	; 800211c <_ZN6braids17DigitalOscillator19RenderGranularCloudEPKhPsj+0x1a0>
  int32_t b = table[(phase >> 24) + 1];
 8001ffe:	1c9f      	adds	r7, r3, #2
  while (size--) {
 8002000:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 8002004:	f0c0 8081 	bcc.w	800210a <_ZN6braids17DigitalOscillator19RenderGranularCloudEPKhPsj+0x18e>
    state_.grain[0].phase += state_.grain[0].phase_increment;
 8002008:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 800200c:	440a      	add	r2, r1
    state_.grain[0].envelope_phase += state_.grain[0].envelope_phase_increment;
 800200e:	e9d4 510a 	ldrd	r5, r1, [r4, #40]	; 0x28
 8002012:	4429      	add	r1, r5
    state_.grain[0].phase += state_.grain[0].phase_increment;
 8002014:	6222      	str	r2, [r4, #32]
    state_.grain[0].envelope_phase += state_.grain[0].envelope_phase_increment;
 8002016:	62a1      	str	r1, [r4, #40]	; 0x28
  int32_t a = table[phase >> 24];
 8002018:	ea4f 6912 	mov.w	r9, r2, lsr #24
 800201c:	f933 8019 	ldrsh.w	r8, [r3, r9, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 8002020:	f937 9019 	ldrsh.w	r9, [r7, r9, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 8002024:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8002028:	eba9 0908 	sub.w	r9, r9, r8
 800202c:	fb02 f209 	mul.w	r2, r2, r9
        lut_granular_envelope[state_.grain[0].envelope_phase >> 16] >> 17;
 8002030:	0c09      	lsrs	r1, r1, #16
 8002032:	eb08 4222 	add.w	r2, r8, r2, asr #16
 8002036:	f830 8011 	ldrh.w	r8, [r0, r1, lsl #1]
    sample += Interpolate824(wav_sine, state_.grain[0].phase) * \
 800203a:	b212      	sxth	r2, r2
 800203c:	fb08 f902 	mul.w	r9, r8, r2
    state_.grain[1].phase += state_.grain[1].phase_increment;
 8002040:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8002044:	440a      	add	r2, r1
    state_.grain[1].envelope_phase += state_.grain[1].envelope_phase_increment;
 8002046:	e9d4 510e 	ldrd	r5, r1, [r4, #56]	; 0x38
 800204a:	4429      	add	r1, r5
    state_.grain[1].phase += state_.grain[1].phase_increment;
 800204c:	6322      	str	r2, [r4, #48]	; 0x30
    state_.grain[1].envelope_phase += state_.grain[1].envelope_phase_increment;
 800204e:	63a1      	str	r1, [r4, #56]	; 0x38
  int32_t a = table[phase >> 24];
 8002050:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8002054:	f933 801a 	ldrsh.w	r8, [r3, sl, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 8002058:	f937 a01a 	ldrsh.w	sl, [r7, sl, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 800205c:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8002060:	ebaa 0a08 	sub.w	sl, sl, r8
 8002064:	fb02 f20a 	mul.w	r2, r2, sl
        lut_granular_envelope[state_.grain[1].envelope_phase >> 16] >> 17;
 8002068:	0c09      	lsrs	r1, r1, #16
 800206a:	eb08 4222 	add.w	r2, r8, r2, asr #16
 800206e:	f830 8011 	ldrh.w	r8, [r0, r1, lsl #1]
    sample += Interpolate824(wav_sine, state_.grain[1].phase) * \
 8002072:	b212      	sxth	r2, r2
 8002074:	fb08 f802 	mul.w	r8, r8, r2
    state_.grain[2].phase += state_.grain[2].phase_increment;
 8002078:	e9d4 1210 	ldrd	r1, r2, [r4, #64]	; 0x40
 800207c:	440a      	add	r2, r1
    state_.grain[2].envelope_phase += state_.grain[2].envelope_phase_increment;
 800207e:	e9d4 5112 	ldrd	r5, r1, [r4, #72]	; 0x48
 8002082:	4429      	add	r1, r5
    state_.grain[2].phase += state_.grain[2].phase_increment;
 8002084:	6422      	str	r2, [r4, #64]	; 0x40
    state_.grain[2].envelope_phase += state_.grain[2].envelope_phase_increment;
 8002086:	64a1      	str	r1, [r4, #72]	; 0x48
  int32_t a = table[phase >> 24];
 8002088:	ea4f 6a12 	mov.w	sl, r2, lsr #24
        lut_granular_envelope[state_.grain[1].envelope_phase >> 16] >> 17;
 800208c:	ea4f 4868 	mov.w	r8, r8, asr #17
    sample += Interpolate824(wav_sine, state_.grain[1].phase) * \
 8002090:	eb08 4869 	add.w	r8, r8, r9, asr #17
 8002094:	f933 901a 	ldrsh.w	r9, [r3, sl, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 8002098:	f937 a01a 	ldrsh.w	sl, [r7, sl, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 800209c:	f3c2 220f 	ubfx	r2, r2, #8, #16
 80020a0:	ebaa 0a09 	sub.w	sl, sl, r9
 80020a4:	fb02 f20a 	mul.w	r2, r2, sl
        lut_granular_envelope[state_.grain[2].envelope_phase >> 16] >> 17;
 80020a8:	0c09      	lsrs	r1, r1, #16
 80020aa:	eb09 4222 	add.w	r2, r9, r2, asr #16
 80020ae:	f830 9011 	ldrh.w	r9, [r0, r1, lsl #1]
    sample += Interpolate824(wav_sine, state_.grain[2].phase) * \
 80020b2:	b212      	sxth	r2, r2
 80020b4:	fb09 f202 	mul.w	r2, r9, r2
 80020b8:	eb08 4862 	add.w	r8, r8, r2, asr #17
    state_.grain[3].phase += state_.grain[3].phase_increment;
 80020bc:	e9d4 1214 	ldrd	r1, r2, [r4, #80]	; 0x50
 80020c0:	440a      	add	r2, r1
  int32_t a = table[phase >> 24];
 80020c2:	ea4f 6a12 	mov.w	sl, r2, lsr #24
    state_.grain[3].envelope_phase += state_.grain[3].envelope_phase_increment;
 80020c6:	e9d4 5116 	ldrd	r5, r1, [r4, #88]	; 0x58
 80020ca:	4429      	add	r1, r5
    state_.grain[3].phase += state_.grain[3].phase_increment;
 80020cc:	6522      	str	r2, [r4, #80]	; 0x50
    state_.grain[3].envelope_phase += state_.grain[3].envelope_phase_increment;
 80020ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80020d0:	f933 901a 	ldrsh.w	r9, [r3, sl, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 80020d4:	f937 a01a 	ldrsh.w	sl, [r7, sl, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 80020d8:	f3c2 220f 	ubfx	r2, r2, #8, #16
 80020dc:	ebaa 0a09 	sub.w	sl, sl, r9
 80020e0:	fb02 f20a 	mul.w	r2, r2, sl
        lut_granular_envelope[state_.grain[3].envelope_phase >> 16] >> 17;
 80020e4:	0c09      	lsrs	r1, r1, #16
 80020e6:	eb09 4222 	add.w	r2, r9, r2, asr #16
 80020ea:	f830 9011 	ldrh.w	r9, [r0, r1, lsl #1]
    sample += Interpolate824(wav_sine, state_.grain[3].phase) * \
 80020ee:	b212      	sxth	r2, r2
 80020f0:	fb09 f202 	mul.w	r2, r9, r2
 80020f4:	eb08 4262 	add.w	r2, r8, r2, asr #17
 80020f8:	4562      	cmp	r2, ip
 80020fa:	bfa8      	it	ge
 80020fc:	4662      	movge	r2, ip
    *buffer++ = sample;
 80020fe:	4572      	cmp	r2, lr
 8002100:	bfb8      	it	lt
 8002102:	4672      	movlt	r2, lr
 8002104:	f82b 2b02 	strh.w	r2, [fp], #2
  while (size--) {
 8002108:	e77a      	b.n	8002000 <_ZN6braids17DigitalOscillator19RenderGranularCloudEPKhPsj+0x84>
}
 800210a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800210e:	bf00      	nop
 8002110:	0800d336 	.word	0x0800d336
 8002114:	08009fda 	.word	0x08009fda
 8002118:	0800c908 	.word	0x0800c908
 800211c:	ffff8000 	.word	0xffff8000

08002120 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj>:
    size_t size) {
 8002120:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002124:	4690      	mov	r8, r2
  if (strike_) {
 8002126:	7f02      	ldrb	r2, [r0, #28]
    size_t size) {
 8002128:	4604      	mov	r4, r0
 800212a:	4699      	mov	r9, r3
  if (strike_) {
 800212c:	b15a      	cbz	r2, 8002146 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x26>
    state->sample = 10;
 800212e:	210a      	movs	r1, #10
 8002130:	8601      	strh	r1, [r0, #48]	; 0x30
    state->cycle_phase_increment = -1;
 8002132:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    state->rng_state = 0;
 8002136:	2200      	movs	r2, #0
    state->cycle_phase_increment = -1;
 8002138:	6241      	str	r1, [r0, #36]	; 0x24
    state->seed = 32767;
 800213a:	f647 71ff 	movw	r1, #32767	; 0x7fff
    state->rng_state = 0;
 800213e:	6282      	str	r2, [r0, #40]	; 0x28
    state->cycle_phase = 0;
 8002140:	6202      	str	r2, [r0, #32]
    state->seed = 32767;
 8002142:	62c1      	str	r1, [r0, #44]	; 0x2c
    strike_ = false;
 8002144:	7702      	strb	r2, [r0, #28]
  uint32_t dit_duration = 3600 + ((32767 - parameter_[0]) >> 2);
 8002146:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
  int32_t noise_threshold = 1024 + (parameter_[1] >> 3);
 800214a:	f9b4 700e 	ldrsh.w	r7, [r4, #14]
  uint32_t dit_duration = 3600 + ((32767 - parameter_[0]) >> 2);
 800214e:	f5c6 46ff 	rsb	r6, r6, #32640	; 0x7f80
 8002152:	367f      	adds	r6, #127	; 0x7f
 8002154:	10b6      	asrs	r6, r6, #2
  int32_t noise_threshold = 1024 + (parameter_[1] >> 3);
 8002156:	10ff      	asrs	r7, r7, #3
 8002158:	f8df a138 	ldr.w	sl, [pc, #312]	; 8002294 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x174>
  uint32_t increment = phase_increment_;
 800215c:	e9d4 b300 	ldrd	fp, r3, [r4]
  uint32_t dit_duration = 3600 + ((32767 - parameter_[0]) >> 2);
 8002160:	f506 6661 	add.w	r6, r6, #3600	; 0xe10
  uint32_t increment = phase_increment_;
 8002164:	9300      	str	r3, [sp, #0]
  int32_t noise_threshold = 1024 + (parameter_[1] >> 3);
 8002166:	f507 6780 	add.w	r7, r7, #1024	; 0x400
  while (size--) {
 800216a:	f119 39ff 	adds.w	r9, r9, #4294967295	; 0xffffffff
 800216e:	f0c0 8085 	bcc.w	800227c <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x15c>
    phase += increment;
 8002172:	9b00      	ldr	r3, [sp, #0]
    if (state->rng_state) {
 8002174:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    phase += increment;
 8002176:	449b      	add	fp, r3
    if (state->rng_state) {
 8002178:	2800      	cmp	r0, #0
 800217a:	d07b      	beq.n	8002274 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x154>
  int32_t b = table[(phase >> 24) + 1];
 800217c:	4b42      	ldr	r3, [pc, #264]	; (8002288 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x168>)
  int32_t a = table[phase >> 24];
 800217e:	ea4f 621b 	mov.w	r2, fp, lsr #24
 8002182:	f93a 5012 	ldrsh.w	r5, [sl, r2, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 8002186:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 800218a:	eba2 0c05 	sub.w	ip, r2, r5
 800218e:	f3cb 220f 	ubfx	r2, fp, #8, #16
 8002192:	fb02 f20c 	mul.w	r2, r2, ip
 8002196:	eb05 4522 	add.w	r5, r5, r2, asr #16
      sample = (Interpolate824(wav_sine, phase) * 3) >> 2;
 800219a:	b22d      	sxth	r5, r5
 800219c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80021a0:	10ad      	asrs	r5, r5, #2
    if (++state->cycle_phase > dit_duration) {
 80021a2:	6a22      	ldr	r2, [r4, #32]
 80021a4:	3201      	adds	r2, #1
 80021a6:	42b2      	cmp	r2, r6
 80021a8:	6222      	str	r2, [r4, #32]
 80021aa:	d92a      	bls.n	8002202 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0xe2>
      --state->sample;
 80021ac:	f8b4 c030 	ldrh.w	ip, [r4, #48]	; 0x30
 80021b0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80021b4:	fa0f f38c 	sxth.w	r3, ip
 80021b8:	8623      	strh	r3, [r4, #48]	; 0x30
      if (state->sample == 0) {
 80021ba:	bb03      	cbnz	r3, 80021fe <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0xde>
        state->rng_state = !state->rng_state;
 80021bc:	fab0 f080 	clz	r0, r0
        ++state->cycle_phase_increment;
 80021c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
        state->rng_state = !state->rng_state;
 80021c2:	0940      	lsrs	r0, r0, #5
        ++state->cycle_phase_increment;
 80021c4:	3201      	adds	r2, #1
        state->sample = (2 << ((wt_code[address] >> shift) & 3)) - 1;
 80021c6:	4931      	ldr	r1, [pc, #196]	; (800228c <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x16c>)
        ++state->cycle_phase_increment;
 80021c8:	6262      	str	r2, [r4, #36]	; 0x24
        state->rng_state = !state->rng_state;
 80021ca:	62a0      	str	r0, [r4, #40]	; 0x28
        size_t address = state->cycle_phase_increment >> 2;
 80021cc:	0890      	lsrs	r0, r2, #2
        state->sample = (2 << ((wt_code[address] >> shift) & 3)) - 1;
 80021ce:	5c08      	ldrb	r0, [r1, r0]
        size_t shift = (state->cycle_phase_increment & 0x3) << 1;
 80021d0:	0052      	lsls	r2, r2, #1
 80021d2:	f002 0206 	and.w	r2, r2, #6
        state->sample = (2 << ((wt_code[address] >> shift) & 3)) - 1;
 80021d6:	fa40 f202 	asr.w	r2, r0, r2
 80021da:	f002 0003 	and.w	r0, r2, #3
 80021de:	2202      	movs	r2, #2
 80021e0:	4082      	lsls	r2, r0
 80021e2:	3a01      	subs	r2, #1
 80021e4:	b292      	uxth	r2, r2
        if (state->sample == 15) {
 80021e6:	2a0f      	cmp	r2, #15
          state->sample = 100;
 80021e8:	bf02      	ittt	eq
 80021ea:	2264      	moveq	r2, #100	; 0x64
 80021ec:	8622      	strheq	r2, [r4, #48]	; 0x30
          state->cycle_phase_increment = - 1;
 80021ee:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
        phase = 1L << 30;
 80021f2:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
        state->sample = (2 << ((wt_code[address] >> shift) & 3)) - 1;
 80021f6:	bf12      	itee	ne
 80021f8:	8622      	strhne	r2, [r4, #48]	; 0x30
          state->rng_state = 0;
 80021fa:	62a3      	streq	r3, [r4, #40]	; 0x28
          state->cycle_phase_increment = - 1;
 80021fc:	6262      	streq	r2, [r4, #36]	; 0x24
      state->cycle_phase = 0;
 80021fe:	2200      	movs	r2, #0
 8002200:	6222      	str	r2, [r4, #32]
    state->seed += Random::GetSample() >> 2;
 8002202:	f7ff fa8f 	bl	8001724 <_ZN6stmlib6Random9GetSampleEv>
 8002206:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002208:	eb02 02a0 	add.w	r2, r2, r0, asr #2
 800220c:	62e2      	str	r2, [r4, #44]	; 0x2c
    int32_t noise_intensity = state->seed >> 8;
 800220e:	1212      	asrs	r2, r2, #8
 8002210:	2a00      	cmp	r2, #0
 8002212:	bfb8      	it	lt
 8002214:	4252      	neglt	r2, r2
    if (noise_intensity < noise_threshold) {
 8002216:	4297      	cmp	r7, r2
 8002218:	dc2e      	bgt.n	8002278 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x158>
 800221a:	f5b2 5f7a 	cmp.w	r2, #16000	; 0x3e80
 800221e:	bfa8      	it	ge
 8002220:	f44f 527a 	movge.w	r2, #16000	; 0x3e80
 8002224:	9201      	str	r2, [sp, #4]
    int32_t noise = (Random::GetSample() * noise_intensity >> 15);
 8002226:	f7ff fa7d 	bl	8001724 <_ZN6stmlib6Random9GetSampleEv>
 800222a:	f647 7eff 	movw	lr, #32767	; 0x7fff
 800222e:	9a01      	ldr	r2, [sp, #4]
    noise = noise * wav_sine[(phase >> 22) & 0xff] >> 15;
 8002230:	f3cb 5c87 	ubfx	ip, fp, #22, #8
    int32_t noise = (Random::GetSample() * noise_intensity >> 15);
 8002234:	4342      	muls	r2, r0
    noise = noise * wav_sine[(phase >> 22) & 0xff] >> 15;
 8002236:	f93a c01c 	ldrsh.w	ip, [sl, ip, lsl #1]
    int32_t noise = (Random::GetSample() * noise_intensity >> 15);
 800223a:	13d2      	asrs	r2, r2, #15
    noise = noise * wav_sine[(phase >> 22) & 0xff] >> 15;
 800223c:	fb02 f20c 	mul.w	r2, r2, ip
    sample += noise;
 8002240:	eb05 35e2 	add.w	r5, r5, r2, asr #15
 8002244:	4575      	cmp	r5, lr
 8002246:	bfa8      	it	ge
 8002248:	4675      	movge	r5, lr
 800224a:	4911      	ldr	r1, [pc, #68]	; (8002290 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x170>)
    sample += distorted * parameter_[1] >> 15;
 800224c:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 8002250:	428d      	cmp	r5, r1
 8002252:	bfb8      	it	lt
 8002254:	460d      	movlt	r5, r1
    int32_t distorted = sample * sample >> 14;
 8002256:	fb05 f005 	mul.w	r0, r5, r5
 800225a:	1380      	asrs	r0, r0, #14
    sample += distorted * parameter_[1] >> 15;
 800225c:	4342      	muls	r2, r0
 800225e:	eb05 35e2 	add.w	r5, r5, r2, asr #15
 8002262:	4575      	cmp	r5, lr
 8002264:	bfa8      	it	ge
 8002266:	4675      	movge	r5, lr
    *buffer++ = sample;
 8002268:	428d      	cmp	r5, r1
 800226a:	bfb8      	it	lt
 800226c:	460d      	movlt	r5, r1
 800226e:	f828 5b02 	strh.w	r5, [r8], #2
  while (size--) {
 8002272:	e77a      	b.n	800216a <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x4a>
      sample = 0;
 8002274:	4605      	mov	r5, r0
 8002276:	e794      	b.n	80021a2 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x82>
 8002278:	463a      	mov	r2, r7
 800227a:	e7d3      	b.n	8002224 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x104>
  phase_ = phase;
 800227c:	f8c4 b000 	str.w	fp, [r4]
}
 8002280:	b003      	add	sp, #12
 8002282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002286:	bf00      	nop
 8002288:	0800d338 	.word	0x0800d338
 800228c:	0800cd0c 	.word	0x0800cd0c
 8002290:	ffff8001 	.word	0xffff8001
 8002294:	0800d336 	.word	0x0800d336

08002298 <_ZN6braids17DigitalOscillator11RenderSnareEPKhPsj>:

void DigitalOscillator::RenderSnare(
    const uint8_t* sync,
    int16_t* buffer,
    size_t size) {
 8002298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800229c:	4698      	mov	r8, r3
  if (init_) {
 800229e:	7ec3      	ldrb	r3, [r0, #27]
    size_t size) {
 80022a0:	b089      	sub	sp, #36	; 0x24
 80022a2:	4604      	mov	r4, r0
 80022a4:	4616      	mov	r6, r2
 80022a6:	f500 7b9a 	add.w	fp, r0, #308	; 0x134
 80022aa:	f500 7aaa 	add.w	sl, r0, #340	; 0x154
 80022ae:	f500 79ba 	add.w	r9, r0, #372	; 0x174
  if (init_) {
 80022b2:	b3c3      	cbz	r3, 8002326 <_ZN6braids17DigitalOscillator11RenderSnareEPKhPsj+0x8e>
    decay_ = decay;
 80022b4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022b8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80022bc:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
 80022c0:	2330      	movs	r3, #48	; 0x30
 80022c2:	e9c0 323e 	strd	r3, r2, [r0, #248]	; 0xf8
    delay_ = delay;
 80022c6:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    decay_ = decay;
 80022ca:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
    delay_ = 0;
 80022ce:	2500      	movs	r5, #0
    decay_ = decay;
 80022d0:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
    decay_ = 4093;
 80022d4:	f640 73fd 	movw	r3, #4093	; 0xffd
    delay_ = 0;
 80022d8:	f8c0 50e4 	str.w	r5, [r0, #228]	; 0xe4
    decay_ = 4093;
 80022dc:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    state_ = 0;
 80022e0:	e9c0 553b 	strd	r5, r5, [r0, #236]	; 0xec
    counter_ = 0;
 80022e4:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
    state_ = 0;
 80022e8:	f8c0 5104 	str.w	r5, [r0, #260]	; 0x104
    counter_ = 0;
 80022ec:	f8c0 5114 	str.w	r5, [r0, #276]	; 0x114
    state_ = 0;
 80022f0:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
    delay_ = 0;
 80022f4:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
    counter_ = 0;
 80022f8:	f8c0 5128 	str.w	r5, [r0, #296]	; 0x128
    state_ = 0;
 80022fc:	f8c0 512c 	str.w	r5, [r0, #300]	; 0x12c
    pulse_[2].set_decay(1200);
  
    pulse_[3].Init();
    pulse_[3].set_delay(0);
  
    svf_[0].Init();
 8002300:	4658      	mov	r0, fp
 8002302:	f7fe ff42 	bl	800118a <_ZN6braids3Svf4InitEv>

    svf_[1].Init();
 8002306:	4650      	mov	r0, sl
 8002308:	f7fe ff3f 	bl	800118a <_ZN6braids3Svf4InitEv>

    svf_[2].Init();
 800230c:	4648      	mov	r0, r9
 800230e:	f7fe ff3c 	bl	800118a <_ZN6braids3Svf4InitEv>
    resonance_ = resonance;
 8002312:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002316:	f8a4 3178 	strh.w	r3, [r4, #376]	; 0x178
    dirty_ = true;
 800231a:	2301      	movs	r3, #1
    svf_[2].set_resonance(2000);
    svf_[2].set_mode(SVF_MODE_BP);

    init_ = false;
 800231c:	76e5      	strb	r5, [r4, #27]
 800231e:	f884 3174 	strb.w	r3, [r4, #372]	; 0x174
    mode_ = mode;
 8002322:	f884 3190 	strb.w	r3, [r4, #400]	; 0x190
  }
  
  if (strike_) {
 8002326:	7f23      	ldrb	r3, [r4, #28]
 8002328:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d051      	beq.n	80023d4 <_ZN6braids17DigitalOscillator11RenderSnareEPKhPsj+0x13c>
    int32_t decay = 49152 - pitch_;
    decay += parameter_[1] < 16384 ? 0 : parameter_[1] - 16384;
 8002330:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
    int32_t decay = 49152 - pitch_;
 8002334:	f5c1 4040 	rsb	r0, r1, #49152	; 0xc000
    decay += parameter_[1] < 16384 ? 0 : parameter_[1] - 16384;
 8002338:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800233c:	bfb4      	ite	lt
 800233e:	2300      	movlt	r3, #0
 8002340:	f5a2 4380 	subge.w	r3, r2, #16384	; 0x4000
 8002344:	4403      	add	r3, r0
 8002346:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800234a:	4283      	cmp	r3, r0
 800234c:	bfa8      	it	ge
 800234e:	4603      	movge	r3, r0
    if (decay > 65535) {
      decay = 65535;
    }
    svf_[0].set_resonance(29000 + (decay >> 5));
 8002350:	f3c3 104f 	ubfx	r0, r3, #5, #16
    svf_[1].set_resonance(26500 + (decay >> 5));
    pulse_[3].set_decay(4092 + (decay >> 14));
 8002354:	139b      	asrs	r3, r3, #14
 8002356:	f603 73fc 	addw	r3, r3, #4092	; 0xffc
    decay_ = decay;
 800235a:	b29b      	uxth	r3, r3
    svf_[0].set_resonance(29000 + (decay >> 5));
 800235c:	f500 45e2 	add.w	r5, r0, #28928	; 0x7100
 8002360:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    level_ = level;
 8002364:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
 8002368:	3548      	adds	r5, #72	; 0x48
    resonance_ = resonance;
 800236a:	f8a4 5138 	strh.w	r5, [r4, #312]	; 0x138
    dirty_ = true;
 800236e:	2501      	movs	r5, #1
 8002370:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
    counter_ = delay_ + 1;
 8002374:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    pulse_[2].Trigger(13107);
    int32_t snappy = parameter_[1];
    if (snappy >= 14336) {
      snappy = 14336;
    }
    pulse_[3].Trigger(512 + (snappy << 1));
 8002378:	f5b2 5f60 	cmp.w	r2, #14336	; 0x3800
 800237c:	442b      	add	r3, r5
 800237e:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    level_ = level;
 8002382:	4b53      	ldr	r3, [pc, #332]	; (80024d0 <_ZN6braids17DigitalOscillator11RenderSnareEPKhPsj+0x238>)
 8002384:	bfa8      	it	ge
 8002386:	f44f 5260 	movge.w	r2, #14336	; 0x3800
 800238a:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    counter_ = delay_ + 1;
 800238e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    svf_[1].set_resonance(26500 + (decay >> 5));
 8002392:	f500 40cf 	add.w	r0, r0, #26496	; 0x6780
 8002396:	442b      	add	r3, r5
 8002398:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    level_ = level;
 800239c:	f243 3333 	movw	r3, #13107	; 0x3333
 80023a0:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    counter_ = delay_ + 1;
 80023a4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    pulse_[3].Trigger(512 + (snappy << 1));
 80023a8:	40aa      	lsls	r2, r5
 80023aa:	442b      	add	r3, r5
 80023ac:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80023b0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    svf_[1].set_resonance(26500 + (decay >> 5));
 80023b4:	3004      	adds	r0, #4
 80023b6:	442b      	add	r3, r5
 80023b8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    strike_ = false;
 80023bc:	2300      	movs	r3, #0
    pulse_[3].Trigger(512 + (snappy << 1));
 80023be:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80023c2:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    resonance_ = resonance;
 80023c6:	f8a4 0158 	strh.w	r0, [r4, #344]	; 0x158
    dirty_ = true;
 80023ca:	f884 5154 	strb.w	r5, [r4, #340]	; 0x154
    level_ = level;
 80023ce:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
    strike_ = false;
 80023d2:	7723      	strb	r3, [r4, #28]
  }
  
  svf_[0].set_frequency(pitch_ + (12 << 7));
 80023d4:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
 80023d8:	b209      	sxth	r1, r1
 80023da:	4658      	mov	r0, fp
 80023dc:	f7fe fee3 	bl	80011a6 <_ZN6braids3Svf13set_frequencyEs>
  svf_[1].set_frequency(pitch_ + (24 << 7));
 80023e0:	8b21      	ldrh	r1, [r4, #24]
 80023e2:	4650      	mov	r0, sl
 80023e4:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 80023e8:	b209      	sxth	r1, r1
 80023ea:	f7fe fedc 	bl	80011a6 <_ZN6braids3Svf13set_frequencyEs>
  svf_[2].set_frequency(pitch_ + (60 << 7));
 80023ee:	8b21      	ldrh	r1, [r4, #24]
 80023f0:	4648      	mov	r0, r9
 80023f2:	f501 51f0 	add.w	r1, r1, #7680	; 0x1e00
 80023f6:	b209      	sxth	r1, r1
 80023f8:	f7fe fed5 	bl	80011a6 <_ZN6braids3Svf13set_frequencyEs>
  
  int32_t g_1 = 22000 - (parameter_[0] >> 1);
 80023fc:	f245 52f0 	movw	r2, #22000	; 0x55f0
 8002400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002404:	3604      	adds	r6, #4
 8002406:	105b      	asrs	r3, r3, #1
 8002408:	1ad1      	subs	r1, r2, r3
  int32_t g_2 = 22000 + (parameter_[0] >> 1);
 800240a:	4413      	add	r3, r2
 800240c:	9302      	str	r3, [sp, #8]

  while (size) {
    int32_t excitation_1 = 0;
    excitation_1 += pulse_[0].Process();
 800240e:	f104 03e4 	add.w	r3, r4, #228	; 0xe4
 8002412:	9304      	str	r3, [sp, #16]
    excitation_1 += pulse_[1].Process();
 8002414:	f104 03f8 	add.w	r3, r4, #248	; 0xf8
  int32_t g_1 = 22000 - (parameter_[0] >> 1);
 8002418:	9101      	str	r1, [sp, #4]
    excitation_1 += pulse_[1].Process();
 800241a:	9305      	str	r3, [sp, #20]
  while (size) {
 800241c:	f1b8 0f00 	cmp.w	r8, #0
 8002420:	d052      	beq.n	80024c8 <_ZN6braids17DigitalOscillator11RenderSnareEPKhPsj+0x230>
    excitation_1 += pulse_[0].Process();
 8002422:	9804      	ldr	r0, [sp, #16]
 8002424:	f7fe fe9a 	bl	800115c <_ZN6braids10Excitation7ProcessEv>
 8002428:	4607      	mov	r7, r0
    excitation_1 += pulse_[1].Process();
 800242a:	9805      	ldr	r0, [sp, #20]
 800242c:	f7fe fe96 	bl	800115c <_ZN6braids10Excitation7ProcessEv>
    excitation_1 += !pulse_[1].done() ? 2621 : 0;
 8002430:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    excitation_1 += pulse_[1].Process();
 8002434:	4438      	add	r0, r7
    excitation_1 += !pulse_[1].done() ? 2621 : 0;
 8002436:	2b00      	cmp	r3, #0
 8002438:	f640 273d 	movw	r7, #2621	; 0xa3d
 800243c:	bf08      	it	eq
 800243e:	2700      	moveq	r7, #0
 8002440:	4407      	add	r7, r0
    
    int32_t excitation_2 = 0;
    excitation_2 += pulse_[2].Process();
 8002442:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 8002446:	f7fe fe89 	bl	800115c <_ZN6braids10Excitation7ProcessEv>
    excitation_2 += !pulse_[2].done() ? 13107 : 0;
 800244a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800244e:	f243 3533 	movw	r5, #13107	; 0x3333
 8002452:	2b00      	cmp	r3, #0
 8002454:	bf08      	it	eq
 8002456:	2500      	moveq	r5, #0
 8002458:	4405      	add	r5, r0
    
    int32_t noise_sample = Random::GetSample() * pulse_[3].Process() >> 15;
 800245a:	f7ff f963 	bl	8001724 <_ZN6stmlib6Random9GetSampleEv>
 800245e:	9003      	str	r0, [sp, #12]
 8002460:	f504 7090 	add.w	r0, r4, #288	; 0x120
 8002464:	f7fe fe7a 	bl	800115c <_ZN6braids10Excitation7ProcessEv>
    
    int32_t sd = 0;
    sd += (svf_[0].Process(excitation_1) + (excitation_1 >> 4)) * g_1 >> 15;
 8002468:	4639      	mov	r1, r7
    int32_t noise_sample = Random::GetSample() * pulse_[3].Process() >> 15;
 800246a:	9007      	str	r0, [sp, #28]
    sd += (svf_[0].Process(excitation_1) + (excitation_1 >> 4)) * g_1 >> 15;
 800246c:	4658      	mov	r0, fp
 800246e:	f7fe fea5 	bl	80011bc <_ZN6braids3Svf7ProcessEl>
    sd += (svf_[1].Process(excitation_2) + (excitation_2 >> 4)) * g_2 >> 15;
 8002472:	4629      	mov	r1, r5
    sd += (svf_[0].Process(excitation_1) + (excitation_1 >> 4)) * g_1 >> 15;
 8002474:	9006      	str	r0, [sp, #24]
    sd += (svf_[1].Process(excitation_2) + (excitation_2 >> 4)) * g_2 >> 15;
 8002476:	4650      	mov	r0, sl
 8002478:	f7fe fea0 	bl	80011bc <_ZN6braids3Svf7ProcessEl>
    sd += (svf_[0].Process(excitation_1) + (excitation_1 >> 4)) * g_1 >> 15;
 800247c:	9b06      	ldr	r3, [sp, #24]
    sd += (svf_[1].Process(excitation_2) + (excitation_2 >> 4)) * g_2 >> 15;
 800247e:	9a02      	ldr	r2, [sp, #8]
    sd += (svf_[0].Process(excitation_1) + (excitation_1 >> 4)) * g_1 >> 15;
 8002480:	eb03 1727 	add.w	r7, r3, r7, asr #4
 8002484:	9b01      	ldr	r3, [sp, #4]
    int32_t noise_sample = Random::GetSample() * pulse_[3].Process() >> 15;
 8002486:	9903      	ldr	r1, [sp, #12]
    sd += (svf_[0].Process(excitation_1) + (excitation_1 >> 4)) * g_1 >> 15;
 8002488:	437b      	muls	r3, r7
    sd += (svf_[1].Process(excitation_2) + (excitation_2 >> 4)) * g_2 >> 15;
 800248a:	eb00 1725 	add.w	r7, r0, r5, asr #4
 800248e:	4357      	muls	r7, r2
    int32_t noise_sample = Random::GetSample() * pulse_[3].Process() >> 15;
 8002490:	9a07      	ldr	r2, [sp, #28]
    sd += (svf_[1].Process(excitation_2) + (excitation_2 >> 4)) * g_2 >> 15;
 8002492:	13ff      	asrs	r7, r7, #15
    int32_t noise_sample = Random::GetSample() * pulse_[3].Process() >> 15;
 8002494:	4351      	muls	r1, r2
    sd += svf_[2].Process(noise_sample);
 8002496:	4648      	mov	r0, r9
 8002498:	13c9      	asrs	r1, r1, #15
    sd += (svf_[1].Process(excitation_2) + (excitation_2 >> 4)) * g_2 >> 15;
 800249a:	eb07 37e3 	add.w	r7, r7, r3, asr #15
    sd += svf_[2].Process(noise_sample);
 800249e:	f7fe fe8d 	bl	80011bc <_ZN6braids3Svf7ProcessEl>
 80024a2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80024a6:	4407      	add	r7, r0
 80024a8:	429f      	cmp	r7, r3
 80024aa:	bfa8      	it	ge
 80024ac:	461f      	movge	r7, r3
    CLIP(sd);
    
    *buffer++ = sd;
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <_ZN6braids17DigitalOscillator11RenderSnareEPKhPsj+0x23c>)
    *buffer++ = sd;
    size -= 2;
 80024b0:	f1a8 0802 	sub.w	r8, r8, #2
    *buffer++ = sd;
 80024b4:	429f      	cmp	r7, r3
 80024b6:	bfb8      	it	lt
 80024b8:	461f      	movlt	r7, r3
 80024ba:	b23f      	sxth	r7, r7
 80024bc:	f826 7c04 	strh.w	r7, [r6, #-4]
    *buffer++ = sd;
 80024c0:	f826 7c02 	strh.w	r7, [r6, #-2]
 80024c4:	3604      	adds	r6, #4
  while (size) {
 80024c6:	e7a9      	b.n	800241c <_ZN6braids17DigitalOscillator11RenderSnareEPKhPsj+0x184>
  }
}
 80024c8:	b009      	add	sp, #36	; 0x24
 80024ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024ce:	bf00      	nop
 80024d0:	ffff8000 	.word	0xffff8000
 80024d4:	ffff8001 	.word	0xffff8001

080024d8 <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj>:
    size_t size) {
 80024d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  phase_increment_ <<= 1;
 80024dc:	6846      	ldr	r6, [r0, #4]
  if (strike_) {
 80024de:	7f01      	ldrb	r1, [r0, #28]
    size_t size) {
 80024e0:	469b      	mov	fp, r3
  phase_increment_ <<= 1;
 80024e2:	0073      	lsls	r3, r6, #1
    size_t size) {
 80024e4:	b08b      	sub	sp, #44	; 0x2c
 80024e6:	4604      	mov	r4, r0
  phase_increment_ <<= 1;
 80024e8:	6043      	str	r3, [r0, #4]
  if (strike_) {
 80024ea:	b381      	cbz	r1, 800254e <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0x76>
    ++active_voice_;
 80024ec:	7e81      	ldrb	r1, [r0, #26]
    p->shift = 0;
 80024ee:	2500      	movs	r5, #0
    ++active_voice_;
 80024f0:	3101      	adds	r1, #1
 80024f2:	b2c9      	uxtb	r1, r1
    if (active_voice_ >= kNumPluckVoices) {
 80024f4:	2902      	cmp	r1, #2
      active_voice_ = 0;
 80024f6:	bf88      	it	hi
 80024f8:	2100      	movhi	r1, #0
 80024fa:	7681      	strb	r1, [r0, #26]
    PluckState* p = &state_.plk[active_voice_];
 80024fc:	7e81      	ldrb	r1, [r0, #26]
 80024fe:	2028      	movs	r0, #40	; 0x28
    int32_t increment = phase_increment_;
 8002500:	469c      	mov	ip, r3
 8002502:	fb00 4001 	mla	r0, r0, r1, r4
    p->shift = 0;
 8002506:	6285      	str	r5, [r0, #40]	; 0x28
    while (increment > (2 << 22)) {
 8002508:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
 800250c:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800250e:	dd04      	ble.n	800251a <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0x42>
      ++p->shift;
 8002510:	3701      	adds	r7, #1
      increment >>= 1;
 8002512:	ea4f 0c6c 	mov.w	ip, ip, asr #1
      ++p->shift;
 8002516:	6287      	str	r7, [r0, #40]	; 0x28
    while (increment > (2 << 22)) {
 8002518:	e7f6      	b.n	8002508 <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0x30>
    p->size = 1024 >> p->shift;
 800251a:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800251e:	413d      	asrs	r5, r7
 8002520:	2728      	movs	r7, #40	; 0x28
 8002522:	fb07 4101 	mla	r1, r7, r1, r4
    p->write_ptr = 0;
 8002526:	2700      	movs	r7, #0
    p->size = 1024 >> p->shift;
 8002528:	620d      	str	r5, [r1, #32]
    p->max_phase_increment = phase_increment_ << 1;
 800252a:	00b6      	lsls	r6, r6, #2
    p->mask = p->size - 1;
 800252c:	3d01      	subs	r5, #1
 800252e:	62c5      	str	r5, [r0, #44]	; 0x2c
    p->phase_increment = phase_increment_;
 8002530:	e9c1 360f 	strd	r3, r6, [r1, #60]	; 0x3c
    p->write_ptr = 0;
 8002534:	624f      	str	r7, [r1, #36]	; 0x24
    int32_t width = parameter_[1];
 8002536:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
    p->initialization_ptr = p->size * (8192 + width) >> 16;
 800253a:	6a0d      	ldr	r5, [r1, #32]
    width = (3 * width) >> 1;
 800253c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002540:	1040      	asrs	r0, r0, #1
    p->initialization_ptr = p->size * (8192 + width) >> 16;
 8002542:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
 8002546:	4368      	muls	r0, r5
 8002548:	0c00      	lsrs	r0, r0, #16
 800254a:	6348      	str	r0, [r1, #52]	; 0x34
    strike_ = false;
 800254c:	7727      	strb	r7, [r4, #28]
  current_string->phase_increment = std::min(
 800254e:	2028      	movs	r0, #40	; 0x28
  PluckState* current_string = &state_.plk[active_voice_];
 8002550:	7ea1      	ldrb	r1, [r4, #26]
  current_string->phase_increment = std::min(
 8002552:	fb00 4101 	mla	r1, r0, r1, r4
 8002556:	6c08      	ldr	r0, [r1, #64]	; 0x40
 8002558:	4298      	cmp	r0, r3
 800255a:	bf94      	ite	ls
 800255c:	63c8      	strls	r0, [r1, #60]	; 0x3c
 800255e:	63cb      	strhi	r3, [r1, #60]	; 0x3c
  uint32_t update_probability = parameter_[0] < 16384
 8002560:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
      ? 65535
 8002564:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8002568:	f2c0 80a1 	blt.w	80026ae <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0x1d6>
      : 131072 - (parameter_[0] >> 3) * 31;
 800256c:	10c9      	asrs	r1, r1, #3
 800256e:	eba1 1141 	sub.w	r1, r1, r1, lsl #5
 8002572:	f501 3300 	add.w	r3, r1, #131072	; 0x20000
 8002576:	9302      	str	r3, [sp, #8]
    loss = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	9301      	str	r3, [sp, #4]
              sum = sum * (32768 - loss) >> 15;
 800257c:	9b01      	ldr	r3, [sp, #4]
  int16_t previous_sample = state_.plk[0].previous_sample;
 800257e:	f9b4 8044 	ldrsh.w	r8, [r4, #68]	; 0x44
              sum = sum * (32768 - loss) >> 15;
 8002582:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
 8002586:	f102 0904 	add.w	r9, r2, #4
 800258a:	9306      	str	r3, [sp, #24]
  while (size) {
 800258c:	f1bb 0f00 	cmp.w	fp, #0
 8002590:	f000 8088 	beq.w	80026a4 <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0x1cc>
 8002594:	4625      	mov	r5, r4
 8002596:	f44f 7aca 	mov.w	sl, #404	; 0x194
    int32_t sample = 0;
 800259a:	2600      	movs	r6, #0
      if (p->initialization_ptr) {
 800259c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800259e:	eb04 070a 	add.w	r7, r4, sl
 80025a2:	b373      	cbz	r3, 8002602 <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0x12a>
        --p->initialization_ptr;
 80025a4:	3b01      	subs	r3, #1
 80025a6:	636b      	str	r3, [r5, #52]	; 0x34
        int32_t excitation_sample = (dl[p->initialization_ptr] + \
 80025a8:	f937 3013 	ldrsh.w	r3, [r7, r3, lsl #1]
 80025ac:	9303      	str	r3, [sp, #12]
            3 * Random::GetSample()) >> 2;
 80025ae:	f7ff f8b9 	bl	8001724 <_ZN6stmlib6Random9GetSampleEv>
        int32_t excitation_sample = (dl[p->initialization_ptr] + \
 80025b2:	9b03      	ldr	r3, [sp, #12]
            3 * Random::GetSample()) >> 2;
 80025b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
        int32_t excitation_sample = (dl[p->initialization_ptr] + \
 80025b8:	4403      	add	r3, r0
        dl[p->initialization_ptr] = excitation_sample;
 80025ba:	6b6a      	ldr	r2, [r5, #52]	; 0x34
            3 * Random::GetSample()) >> 2;
 80025bc:	109b      	asrs	r3, r3, #2
        dl[p->initialization_ptr] = excitation_sample;
 80025be:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
        sample += excitation_sample;
 80025c2:	441e      	add	r6, r3
    for (size_t i = 0; i < kNumPluckVoices; ++i) {
 80025c4:	f641 139a 	movw	r3, #6554	; 0x199a
 80025c8:	f60a 0a02 	addw	sl, sl, #2050	; 0x802
 80025cc:	459a      	cmp	sl, r3
 80025ce:	f105 0528 	add.w	r5, r5, #40	; 0x28
 80025d2:	d1e3      	bne.n	800259c <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0xc4>
 80025d4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80025d8:	429e      	cmp	r6, r3
 80025da:	bfa8      	it	ge
 80025dc:	461e      	movge	r6, r3
 80025de:	4b3d      	ldr	r3, [pc, #244]	; (80026d4 <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0x1fc>)
    size -= 2;
 80025e0:	f1ab 0b02 	sub.w	fp, fp, #2
 80025e4:	429e      	cmp	r6, r3
 80025e6:	bfb8      	it	lt
 80025e8:	461e      	movlt	r6, r3
    *buffer++ = (previous_sample + sample) >> 1;
 80025ea:	44b0      	add	r8, r6
 80025ec:	ea4f 0868 	mov.w	r8, r8, asr #1
 80025f0:	f829 8c04 	strh.w	r8, [r9, #-4]
    *buffer++ = sample;
 80025f4:	fa0f f886 	sxth.w	r8, r6
 80025f8:	f829 8c02 	strh.w	r8, [r9, #-2]
 80025fc:	f109 0904 	add.w	r9, r9, #4
  while (size) {
 8002600:	e7c4      	b.n	800258c <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0xb4>
        size_t read_ptr = ((p->phase >> (22 + p->shift)) + 2) & p->mask;
 8002602:	6aa9      	ldr	r1, [r5, #40]	; 0x28
        p->phase += p->phase_increment;
 8002604:	e9d5 320e 	ldrd	r3, r2, [r5, #56]	; 0x38
        size_t read_ptr = ((p->phase >> (22 + p->shift)) + 2) & p->mask;
 8002608:	3116      	adds	r1, #22
        p->phase += p->phase_increment;
 800260a:	4413      	add	r3, r2
 800260c:	63ab      	str	r3, [r5, #56]	; 0x38
        size_t read_ptr = ((p->phase >> (22 + p->shift)) + 2) & p->mask;
 800260e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002610:	40cb      	lsrs	r3, r1
 8002612:	3302      	adds	r3, #2
 8002614:	4003      	ands	r3, r0
        size_t write_ptr = p->write_ptr;
 8002616:	6a6a      	ldr	r2, [r5, #36]	; 0x24
        size_t read_ptr = ((p->phase >> (22 + p->shift)) + 2) & p->mask;
 8002618:	9304      	str	r3, [sp, #16]
        while (write_ptr != read_ptr) {
 800261a:	9b04      	ldr	r3, [sp, #16]
 800261c:	429a      	cmp	r2, r3
 800261e:	d02c      	beq.n	800267a <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0x1a2>
          size_t next = (write_ptr + 1) & p->mask;
 8002620:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002622:	1c51      	adds	r1, r2, #1
 8002624:	4019      	ands	r1, r3
          int32_t a = dl[write_ptr];
 8002626:	0053      	lsls	r3, r2, #1
 8002628:	9305      	str	r3, [sp, #20]
 800262a:	f937 3012 	ldrsh.w	r3, [r7, r2, lsl #1]
          int32_t b = dl[next];
 800262e:	9107      	str	r1, [sp, #28]
          int32_t a = dl[write_ptr];
 8002630:	e9cd 3208 	strd	r3, r2, [sp, #32]
          int32_t b = dl[next];
 8002634:	f937 3011 	ldrsh.w	r3, [r7, r1, lsl #1]
 8002638:	9303      	str	r3, [sp, #12]
          uint32_t probability = Random::GetWord();
 800263a:	f7fe feff 	bl	800143c <_ZN6stmlib6Random7GetWordEv>
          if ((probability & 0xffff) <= update_probability) {
 800263e:	9b02      	ldr	r3, [sp, #8]
 8002640:	b280      	uxth	r0, r0
 8002642:	4298      	cmp	r0, r3
 8002644:	9907      	ldr	r1, [sp, #28]
 8002646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002648:	d80f      	bhi.n	800266a <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0x192>
            sum = sum < 0 ? -(-sum >> 1) : (sum >> 1);
 800264a:	9803      	ldr	r0, [sp, #12]
 800264c:	9b08      	ldr	r3, [sp, #32]
 800264e:	181b      	adds	r3, r3, r0
 8002650:	bf48      	it	mi
 8002652:	425b      	negmi	r3, r3
            if (loss) {
 8002654:	9801      	ldr	r0, [sp, #4]
            sum = sum < 0 ? -(-sum >> 1) : (sum >> 1);
 8002656:	bf46      	itte	mi
 8002658:	105b      	asrmi	r3, r3, #1
 800265a:	425b      	negmi	r3, r3
 800265c:	105b      	asrpl	r3, r3, #1
            if (loss) {
 800265e:	b110      	cbz	r0, 8002666 <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0x18e>
              sum = sum * (32768 - loss) >> 15;
 8002660:	9806      	ldr	r0, [sp, #24]
 8002662:	4343      	muls	r3, r0
 8002664:	13db      	asrs	r3, r3, #15
            dl[write_ptr] = sum;
 8002666:	9805      	ldr	r0, [sp, #20]
 8002668:	523b      	strh	r3, [r7, r0]
          if (write_ptr == 0) {
 800266a:	b922      	cbnz	r2, 8002676 <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0x19e>
            dl[p->size] = dl[0];
 800266c:	f934 200a 	ldrsh.w	r2, [r4, sl]
 8002670:	6a2b      	ldr	r3, [r5, #32]
 8002672:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
    int32_t sample = 0;
 8002676:	460a      	mov	r2, r1
 8002678:	e7cf      	b.n	800261a <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0x142>
        p->write_ptr = write_ptr;
 800267a:	626a      	str	r2, [r5, #36]	; 0x24
        sample += Interpolate1022(dl, p->phase >> p->shift);
 800267c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800267e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002680:	fa22 f303 	lsr.w	r3, r2, r3
  int32_t a = table[phase >> 22];
 8002684:	0d9a      	lsrs	r2, r3, #22
 8002686:	f937 1012 	ldrsh.w	r1, [r7, r2, lsl #1]
  int32_t b = table[(phase >> 22) + 1];
 800268a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 800268e:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
  return a + ((b - a) * static_cast<int32_t>((phase >> 6) & 0xffff) >> 16);
 8002692:	f3c3 138f 	ubfx	r3, r3, #6, #16
 8002696:	1a40      	subs	r0, r0, r1
 8002698:	4343      	muls	r3, r0
 800269a:	eb01 4123 	add.w	r1, r1, r3, asr #16
 800269e:	b209      	sxth	r1, r1
 80026a0:	440e      	add	r6, r1
 80026a2:	e78f      	b.n	80025c4 <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0xec>
  state_.plk[0].previous_sample = previous_sample;
 80026a4:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
}
 80026a8:	b00b      	add	sp, #44	; 0x2c
 80026aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int16_t loss = 4096 - (phase_increment_ >> 14);
 80026ae:	0b9b      	lsrs	r3, r3, #14
 80026b0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80026b4:	b21b      	sxth	r3, r3
    loss = loss * (16384 - parameter_[0]) >> 14;
 80026b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ba:	bfb8      	it	lt
 80026bc:	f44f 7380 	movlt.w	r3, #256	; 0x100
 80026c0:	f5c1 4180 	rsb	r1, r1, #16384	; 0x4000
 80026c4:	434b      	muls	r3, r1
 80026c6:	f343 338f 	sbfx	r3, r3, #14, #16
 80026ca:	9301      	str	r3, [sp, #4]
      ? 65535
 80026cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026d0:	9302      	str	r3, [sp, #8]
 80026d2:	e753      	b.n	800257c <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0xa4>
 80026d4:	ffff8001 	.word	0xffff8001

080026d8 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>:
  int32_t ref_pitch = midi_pitch;
 80026d8:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80026dc:	4299      	cmp	r1, r3
 80026de:	bfa8      	it	ge
 80026e0:	4619      	movge	r1, r3
  size_t num_shifts = 0;
 80026e2:	2000      	movs	r0, #0
uint32_t DigitalOscillator::ComputePhaseIncrement(int16_t midi_pitch) {
 80026e4:	b510      	push	{r4, lr}
  ref_pitch -= kPitchTableStart;
 80026e6:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
  while (ref_pitch < 0) {
 80026ea:	f511 61c0 	adds.w	r1, r1, #1536	; 0x600
    ++num_shifts;
 80026ee:	f100 0001 	add.w	r0, r0, #1
  while (ref_pitch < 0) {
 80026f2:	d4fa      	bmi.n	80026ea <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs+0x12>
  uint32_t a = lut_oscillator_increments[ref_pitch >> 4];
 80026f4:	4c07      	ldr	r4, [pc, #28]	; (8002714 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs+0x3c>)
 80026f6:	110a      	asrs	r2, r1, #4
 80026f8:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
  uint32_t b = lut_oscillator_increments[(ref_pitch >> 4) + 1];
 80026fc:	3201      	adds	r2, #1
      (static_cast<int32_t>(b - a) * (ref_pitch & 0xf) >> 4);
 80026fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8002702:	f001 010f 	and.w	r1, r1, #15
 8002706:	1ad2      	subs	r2, r2, r3
 8002708:	4351      	muls	r1, r2
  uint32_t phase_increment = a + \
 800270a:	eb03 1121 	add.w	r1, r3, r1, asr #4
}
 800270e:	fa21 f000 	lsr.w	r0, r1, r0
 8002712:	bd10      	pop	{r4, pc}
 8002714:	0800c580 	.word	0x0800c580

08002718 <_ZN6braids17DigitalOscillator19RenderTripleRingModEPKhPsj>:
    size_t size) {
 8002718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800271c:	4688      	mov	r8, r1
  uint32_t modulator_phase_2 = state_.vow.formant_phase[1];
 800271e:	e9d0 760b 	ldrd	r7, r6, [r0, #44]	; 0x2c
    pitch_ + ((parameter_[0] - 16384) >> 2)
 8002722:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
    size_t size) {
 8002726:	4604      	mov	r4, r0
    pitch_ + ((parameter_[0] - 16384) >> 2)
 8002728:	f8b0 a018 	ldrh.w	sl, [r0, #24]
 800272c:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
    size_t size) {
 8002730:	4699      	mov	r9, r3
    pitch_ + ((parameter_[0] - 16384) >> 2)
 8002732:	eb0a 01a1 	add.w	r1, sl, r1, asr #2
  uint32_t increment = phase_increment_;
 8002736:	6843      	ldr	r3, [r0, #4]
    size_t size) {
 8002738:	b087      	sub	sp, #28
  );
 800273a:	b209      	sxth	r1, r1
  uint32_t increment = phase_increment_;
 800273c:	9302      	str	r3, [sp, #8]
    size_t size) {
 800273e:	9201      	str	r2, [sp, #4]
  uint32_t phase = phase_ + (1L << 30);
 8002740:	6805      	ldr	r5, [r0, #0]
  );
 8002742:	f7ff ffc9 	bl	80026d8 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
    pitch_ + ((parameter_[1] - 16384) >> 2)
 8002746:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  );
 800274a:	9003      	str	r0, [sp, #12]
    pitch_ + ((parameter_[1] - 16384) >> 2)
 800274c:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
 8002750:	eb0a 01a1 	add.w	r1, sl, r1, asr #2
  );
 8002754:	b209      	sxth	r1, r1
 8002756:	4620      	mov	r0, r4
 8002758:	f7ff ffbe 	bl	80026d8 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
 800275c:	9004      	str	r0, [sp, #16]
  int32_t a = table[phase >> 24];
 800275e:	4834      	ldr	r0, [pc, #208]	; (8002830 <_ZN6braids17DigitalOscillator19RenderTripleRingModEPKhPsj+0x118>)
 8002760:	eb08 0309 	add.w	r3, r8, r9
  uint32_t phase = phase_ + (1L << 30);
 8002764:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8002768:	9305      	str	r3, [sp, #20]
  int32_t b = table[(phase >> 24) + 1];
 800276a:	f100 0c02 	add.w	ip, r0, #2
  while (size--) {
 800276e:	9b05      	ldr	r3, [sp, #20]
 8002770:	4598      	cmp	r8, r3
 8002772:	d054      	beq.n	800281e <_ZN6braids17DigitalOscillator19RenderTripleRingModEPKhPsj+0x106>
    if (*sync++) {
 8002774:	f818 3b01 	ldrb.w	r3, [r8], #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d14c      	bne.n	8002816 <_ZN6braids17DigitalOscillator19RenderTripleRingModEPKhPsj+0xfe>
    phase += increment;
 800277c:	9b02      	ldr	r3, [sp, #8]
 800277e:	441d      	add	r5, r3
  int32_t a = table[phase >> 24];
 8002780:	ea4f 6e15 	mov.w	lr, r5, lsr #24
 8002784:	f930 101e 	ldrsh.w	r1, [r0, lr, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 8002788:	f93c 901e 	ldrsh.w	r9, [ip, lr, lsl #1]
    modulator_phase += modulator_phase_increment;
 800278c:	9b03      	ldr	r3, [sp, #12]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 800278e:	eba9 0901 	sub.w	r9, r9, r1
 8002792:	f3c5 2e0f 	ubfx	lr, r5, #8, #16
 8002796:	441f      	add	r7, r3
 8002798:	fb0e fe09 	mul.w	lr, lr, r9
  int32_t a = table[phase >> 24];
 800279c:	ea4f 6b17 	mov.w	fp, r7, lsr #24
 80027a0:	f930 201b 	ldrsh.w	r2, [r0, fp, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 80027a4:	f93c 901b 	ldrsh.w	r9, [ip, fp, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 80027a8:	eb01 412e 	add.w	r1, r1, lr, asr #16
 80027ac:	eba9 0902 	sub.w	r9, r9, r2
 80027b0:	f3c7 2e0f 	ubfx	lr, r7, #8, #16
 80027b4:	fb0e fe09 	mul.w	lr, lr, r9
    modulator_phase_2 += modulator_phase_increment_2;
 80027b8:	9b04      	ldr	r3, [sp, #16]
 80027ba:	eb02 4e2e 	add.w	lr, r2, lr, asr #16
 80027be:	441e      	add	r6, r3
  int32_t a = table[phase >> 24];
 80027c0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
    result = result * Interpolate824(wav_sine, modulator_phase) >> 16;
 80027c4:	fa0f fe8e 	sxth.w	lr, lr
 80027c8:	b209      	sxth	r1, r1
 80027ca:	f930 301a 	ldrsh.w	r3, [r0, sl, lsl #1]
 80027ce:	fb0e f101 	mul.w	r1, lr, r1
  int32_t b = table[(phase >> 24) + 1];
 80027d2:	f93c e01a 	ldrsh.w	lr, [ip, sl, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 80027d6:	f3c6 220f 	ubfx	r2, r6, #8, #16
 80027da:	ebae 0e03 	sub.w	lr, lr, r3
 80027de:	fb02 f20e 	mul.w	r2, r2, lr
 80027e2:	eb03 4222 	add.w	r2, r3, r2, asr #16
    result = result * Interpolate824(wav_sine, modulator_phase_2) >> 16;
 80027e6:	b212      	sxth	r2, r2
    result = result * Interpolate824(wav_sine, modulator_phase) >> 16;
 80027e8:	1409      	asrs	r1, r1, #16
    result = result * Interpolate824(wav_sine, modulator_phase_2) >> 16;
 80027ea:	4351      	muls	r1, r2
    result = Interpolate88(ws_moderate_overdrive, result + 32768);
 80027ec:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80027f0:	0c09      	lsrs	r1, r1, #16
  int32_t a = table[index >> 8];
 80027f2:	4b10      	ldr	r3, [pc, #64]	; (8002834 <_ZN6braids17DigitalOscillator19RenderTripleRingModEPKhPsj+0x11c>)
 80027f4:	120a      	asrs	r2, r1, #8
 80027f6:	f933 e012 	ldrsh.w	lr, [r3, r2, lsl #1]
  int32_t b = table[(index >> 8) + 1];
 80027fa:	3302      	adds	r3, #2
 80027fc:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
  return a + ((b - a) * static_cast<int32_t>(index & 0xff) >> 8);
 8002800:	b2c9      	uxtb	r1, r1
 8002802:	eba2 020e 	sub.w	r2, r2, lr
 8002806:	4351      	muls	r1, r2
    *buffer++ = result;
 8002808:	9b01      	ldr	r3, [sp, #4]
 800280a:	eb0e 2121 	add.w	r1, lr, r1, asr #8
 800280e:	f823 1b02 	strh.w	r1, [r3], #2
 8002812:	9301      	str	r3, [sp, #4]
  while (size--) {
 8002814:	e7ab      	b.n	800276e <_ZN6braids17DigitalOscillator19RenderTripleRingModEPKhPsj+0x56>
      modulator_phase_2 = 0;
 8002816:	2600      	movs	r6, #0
      modulator_phase = 0;
 8002818:	4637      	mov	r7, r6
      phase = 0;
 800281a:	4635      	mov	r5, r6
 800281c:	e7b0      	b.n	8002780 <_ZN6braids17DigitalOscillator19RenderTripleRingModEPKhPsj+0x68>
  phase_ = phase - (1L << 30);
 800281e:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8002822:	6025      	str	r5, [r4, #0]
  state_.vow.formant_phase[1] = modulator_phase_2;
 8002824:	e9c4 760b 	strd	r7, r6, [r4, #44]	; 0x2c
}
 8002828:	b007      	add	sp, #28
 800282a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800282e:	bf00      	nop
 8002830:	0800d336 	.word	0x0800d336
 8002834:	0800a560 	.word	0x0800a560

08002838 <_ZN6braids17DigitalOscillator14RenderSawSwarmEPKhPsj>:
    size_t size) {
 8002838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800283c:	4604      	mov	r4, r0
    int32_t increment_a = ComputePhaseIncrement(pitch_ + detune_integral);
 800283e:	f04f 0900 	mov.w	r9, #0
  int32_t detune = parameter_[0] + 1024;
 8002842:	f9b0 500c 	ldrsh.w	r5, [r0, #12]
    size_t size) {
 8002846:	b095      	sub	sp, #84	; 0x54
  int32_t detune = parameter_[0] + 1024;
 8002848:	f505 6580 	add.w	r5, r5, #1024	; 0x400
  detune = (detune * detune) >> 9;
 800284c:	436d      	muls	r5, r5
    size_t size) {
 800284e:	e9cd 1201 	strd	r1, r2, [sp, #4]
  detune = (detune * detune) >> 9;
 8002852:	126d      	asrs	r5, r5, #9
    int32_t increment_a = ComputePhaseIncrement(pitch_ + detune_integral);
 8002854:	8b02      	ldrh	r2, [r0, #24]
    size_t size) {
 8002856:	4698      	mov	r8, r3
 8002858:	eba5 0a85 	sub.w	sl, r5, r5, lsl #2
    increments[i] = increment_a + \
 800285c:	ab0d      	add	r3, sp, #52	; 0x34
    int32_t increment_a = ComputePhaseIncrement(pitch_ + detune_integral);
 800285e:	eb02 472a 	add.w	r7, r2, sl, asr #16
 8002862:	b2bf      	uxth	r7, r7
 8002864:	b239      	sxth	r1, r7
 8002866:	4620      	mov	r0, r4
 8002868:	9304      	str	r3, [sp, #16]
 800286a:	9203      	str	r2, [sp, #12]
 800286c:	f7ff ff34 	bl	80026d8 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
    int32_t increment_b = ComputePhaseIncrement(pitch_ + detune_integral + 1);
 8002870:	1c79      	adds	r1, r7, #1
    int32_t increment_a = ComputePhaseIncrement(pitch_ + detune_integral);
 8002872:	4683      	mov	fp, r0
    int32_t increment_b = ComputePhaseIncrement(pitch_ + detune_integral + 1);
 8002874:	b209      	sxth	r1, r1
 8002876:	4620      	mov	r0, r4
 8002878:	f7ff ff2e 	bl	80026d8 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
        (((increment_b - increment_a) * detune_fractional) >> 16);
 800287c:	eba0 010b 	sub.w	r1, r0, fp
    int32_t detune_fractional = saw_detune & 0xffff;
 8002880:	fa1f f08a 	uxth.w	r0, sl
        (((increment_b - increment_a) * detune_fractional) >> 16);
 8002884:	4348      	muls	r0, r1
    increments[i] = increment_a + \
 8002886:	9b04      	ldr	r3, [sp, #16]
 8002888:	eb0b 4020 	add.w	r0, fp, r0, asr #16
 800288c:	f843 0029 	str.w	r0, [r3, r9, lsl #2]
 8002890:	f109 0901 	add.w	r9, r9, #1
  for (int16_t i = 0; i < 7; ++i) {
 8002894:	f1b9 0f07 	cmp.w	r9, #7
 8002898:	44aa      	add	sl, r5
 800289a:	9a03      	ldr	r2, [sp, #12]
 800289c:	d1df      	bne.n	800285e <_ZN6braids17DigitalOscillator14RenderSawSwarmEPKhPsj+0x26>
  if (strike_) {
 800289e:	7f23      	ldrb	r3, [r4, #28]
 80028a0:	b15b      	cbz	r3, 80028ba <_ZN6braids17DigitalOscillator14RenderSawSwarmEPKhPsj+0x82>
 80028a2:	f104 0520 	add.w	r5, r4, #32
 80028a6:	f104 0738 	add.w	r7, r4, #56	; 0x38
      state_.saw.phase[i] = Random::GetWord();
 80028aa:	f7fe fdc7 	bl	800143c <_ZN6stmlib6Random7GetWordEv>
 80028ae:	f845 0b04 	str.w	r0, [r5], #4
    for (size_t i = 0; i < 6; ++i) {
 80028b2:	42af      	cmp	r7, r5
 80028b4:	d1f9      	bne.n	80028aa <_ZN6braids17DigitalOscillator14RenderSawSwarmEPKhPsj+0x72>
    strike_ = false;
 80028b6:	2300      	movs	r3, #0
 80028b8:	7723      	strb	r3, [r4, #28]
  if (parameter_[1] < 10922) {
 80028ba:	f642 20a9 	movw	r0, #10921	; 0x2aa9
 80028be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  int32_t hp_cutoff = pitch_;
 80028c2:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
  if (parameter_[1] < 10922) {
 80028c6:	4281      	cmp	r1, r0
 80028c8:	f5a1 522a 	sub.w	r2, r1, #10880	; 0x2a80
    hp_cutoff += ((parameter_[1] - 10922) * 24) >> 5;
 80028cc:	bfd4      	ite	le
 80028ce:	2118      	movle	r1, #24
    hp_cutoff += ((parameter_[1] - 10922) * 12) >> 5;
 80028d0:	210c      	movgt	r1, #12
 80028d2:	f1a2 022a 	sub.w	r2, r2, #42	; 0x2a
    hp_cutoff += ((parameter_[1] - 10922) * 24) >> 5;
 80028d6:	bfd5      	itete	le
 80028d8:	434a      	mulle	r2, r1
    hp_cutoff += ((parameter_[1] - 10922) * 12) >> 5;
 80028da:	434a      	mulgt	r2, r1
    hp_cutoff += ((parameter_[1] - 10922) * 24) >> 5;
 80028dc:	eb03 1362 	addle.w	r3, r3, r2, asr #5
    hp_cutoff += ((parameter_[1] - 10922) * 12) >> 5;
 80028e0:	eb03 1362 	addgt.w	r3, r3, r2, asr #5
 80028e4:	bfd4      	ite	le
 80028e6:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 80028ea:	f383 030f 	usatgt	r3, #15, r3
  int32_t f = Interpolate824(lut_svf_cutoff, hp_cutoff << 17);
 80028ee:	045b      	lsls	r3, r3, #17
  uint32_t a = table[phase >> 24];
 80028f0:	494f      	ldr	r1, [pc, #316]	; (8002a30 <_ZN6braids17DigitalOscillator14RenderSawSwarmEPKhPsj+0x1f8>)
 80028f2:	0e18      	lsrs	r0, r3, #24
 80028f4:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
  uint32_t b = table[(phase >> 24) + 1];
 80028f8:	3102      	adds	r1, #2
 80028fa:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 80028fe:	0a1b      	lsrs	r3, r3, #8
 8002900:	1a89      	subs	r1, r1, r2
 8002902:	b29b      	uxth	r3, r3
 8002904:	434b      	muls	r3, r1
  int32_t lp = state_.saw.lp;
 8002906:	e9d4 0113 	ldrd	r0, r1, [r4, #76]	; 0x4c
 800290a:	eb02 4313 	add.w	r3, r2, r3, lsr #16
 800290e:	f647 7eff 	movw	lr, #32767	; 0x7fff
        state_.saw.phase[i] = 0;
 8002912:	2200      	movs	r2, #0
  int32_t f = Interpolate824(lut_svf_cutoff, hp_cutoff << 17);
 8002914:	fa1f fc83 	uxth.w	ip, r3
  int32_t damp = lut_svf_damp[0];
 8002918:	4b46      	ldr	r3, [pc, #280]	; (8002a34 <_ZN6braids17DigitalOscillator14RenderSawSwarmEPKhPsj+0x1fc>)
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	930a      	str	r3, [sp, #40]	; 0x28
    phase_ += increments[0];
 800291e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002920:	9303      	str	r3, [sp, #12]
    state_.saw.phase[0] += increments[1];
 8002922:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002924:	9304      	str	r3, [sp, #16]
    state_.saw.phase[1] += increments[2];
 8002926:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002928:	9305      	str	r3, [sp, #20]
    state_.saw.phase[2] += increments[3];
 800292a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800292c:	9306      	str	r3, [sp, #24]
    state_.saw.phase[3] += increments[4];
 800292e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002930:	9307      	str	r3, [sp, #28]
    state_.saw.phase[4] += increments[5];
 8002932:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002934:	9308      	str	r3, [sp, #32]
    state_.saw.phase[5] += increments[6];
 8002936:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002938:	9309      	str	r3, [sp, #36]	; 0x24
 800293a:	9b01      	ldr	r3, [sp, #4]
 800293c:	4443      	add	r3, r8
 800293e:	930b      	str	r3, [sp, #44]	; 0x2c
  while (size--) {
 8002940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002942:	9d01      	ldr	r5, [sp, #4]
 8002944:	429d      	cmp	r5, r3
 8002946:	d06d      	beq.n	8002a24 <_ZN6braids17DigitalOscillator14RenderSawSwarmEPKhPsj+0x1ec>
    if (*sync++) {
 8002948:	f815 3b01 	ldrb.w	r3, [r5], #1
 800294c:	9501      	str	r5, [sp, #4]
 800294e:	b12b      	cbz	r3, 800295c <_ZN6braids17DigitalOscillator14RenderSawSwarmEPKhPsj+0x124>
        state_.saw.phase[i] = 0;
 8002950:	e9c4 2208 	strd	r2, r2, [r4, #32]
 8002954:	e9c4 220a 	strd	r2, r2, [r4, #40]	; 0x28
 8002958:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
    phase_ += increments[0];
 800295c:	6827      	ldr	r7, [r4, #0]
 800295e:	9b03      	ldr	r3, [sp, #12]
    state_.saw.phase[0] += increments[1];
 8002960:	9d04      	ldr	r5, [sp, #16]
    phase_ += increments[0];
 8002962:	441f      	add	r7, r3
    state_.saw.phase[0] += increments[1];
 8002964:	6a23      	ldr	r3, [r4, #32]
    phase_ += increments[0];
 8002966:	6027      	str	r7, [r4, #0]
    state_.saw.phase[0] += increments[1];
 8002968:	442b      	add	r3, r5
 800296a:	6223      	str	r3, [r4, #32]
    sample += state_.saw.phase[0] >> 19;
 800296c:	0cdb      	lsrs	r3, r3, #19
 800296e:	eb03 43d7 	add.w	r3, r3, r7, lsr #19
    lp += f * bp >> 15;
 8002972:	fb0c f701 	mul.w	r7, ip, r1
 8002976:	eb00 30e7 	add.w	r0, r0, r7, asr #15
 800297a:	4570      	cmp	r0, lr
 800297c:	bfa8      	it	ge
 800297e:	4670      	movge	r0, lr
 8002980:	4f2d      	ldr	r7, [pc, #180]	; (8002a38 <_ZN6braids17DigitalOscillator14RenderSawSwarmEPKhPsj+0x200>)
    state_.saw.phase[1] += increments[2];
 8002982:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002984:	42b8      	cmp	r0, r7
 8002986:	bfb8      	it	lt
 8002988:	4638      	movlt	r0, r7
 800298a:	9e05      	ldr	r6, [sp, #20]
    sample += state_.saw.phase[0] >> 19;
 800298c:	f5a3 43e0 	sub.w	r3, r3, #28672	; 0x7000
    state_.saw.phase[1] += increments[2];
 8002990:	eb06 0805 	add.w	r8, r6, r5
    state_.saw.phase[2] += increments[3];
 8002994:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8002996:	9e06      	ldr	r6, [sp, #24]
    sample += state_.saw.phase[1] >> 19;
 8002998:	eb03 43d8 	add.w	r3, r3, r8, lsr #19
    state_.saw.phase[2] += increments[3];
 800299c:	eb06 0905 	add.w	r9, r6, r5
    state_.saw.phase[3] += increments[4];
 80029a0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80029a2:	9e07      	ldr	r6, [sp, #28]
    sample += state_.saw.phase[2] >> 19;
 80029a4:	eb03 43d9 	add.w	r3, r3, r9, lsr #19
    state_.saw.phase[3] += increments[4];
 80029a8:	eb06 0a05 	add.w	sl, r6, r5
    state_.saw.phase[4] += increments[5];
 80029ac:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80029ae:	9e08      	ldr	r6, [sp, #32]
    sample += state_.saw.phase[3] >> 19;
 80029b0:	eb03 43da 	add.w	r3, r3, sl, lsr #19
    state_.saw.phase[4] += increments[5];
 80029b4:	eb06 0b05 	add.w	fp, r6, r5
    state_.saw.phase[5] += increments[6];
 80029b8:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80029ba:	9e09      	ldr	r6, [sp, #36]	; 0x24
    sample += state_.saw.phase[4] >> 19;
 80029bc:	eb03 43db 	add.w	r3, r3, fp, lsr #19
    state_.saw.phase[5] += increments[6];
 80029c0:	4435      	add	r5, r6
 80029c2:	6365      	str	r5, [r4, #52]	; 0x34
    sample += state_.saw.phase[5] >> 19;
 80029c4:	eb03 45d5 	add.w	r5, r3, r5, lsr #19
    sample = Interpolate88(ws_moderate_overdrive, sample + 32768);
 80029c8:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
 80029cc:	b2ad      	uxth	r5, r5
  int32_t a = table[index >> 8];
 80029ce:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <_ZN6braids17DigitalOscillator14RenderSawSwarmEPKhPsj+0x204>)
  int32_t b = table[(index >> 8) + 1];
 80029d0:	4e1b      	ldr	r6, [pc, #108]	; (8002a40 <_ZN6braids17DigitalOscillator14RenderSawSwarmEPKhPsj+0x208>)
    state_.saw.phase[1] += increments[2];
 80029d2:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    state_.saw.phase[2] += increments[3];
 80029d6:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    state_.saw.phase[3] += increments[4];
 80029da:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
    state_.saw.phase[4] += increments[5];
 80029de:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
  int32_t a = table[index >> 8];
 80029e2:	ea4f 2825 	mov.w	r8, r5, asr #8
 80029e6:	f933 3018 	ldrsh.w	r3, [r3, r8, lsl #1]
  int32_t b = table[(index >> 8) + 1];
 80029ea:	f936 7018 	ldrsh.w	r7, [r6, r8, lsl #1]
  return a + ((b - a) * static_cast<int32_t>(index & 0xff) >> 8);
 80029ee:	b2ed      	uxtb	r5, r5
 80029f0:	1aff      	subs	r7, r7, r3
 80029f2:	437d      	muls	r5, r7
 80029f4:	eb03 2325 	add.w	r3, r3, r5, asr #8
    notch = sample - (bp * damp >> 15);
 80029f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    sample = Interpolate88(ws_moderate_overdrive, sample + 32768);
 80029fa:	b21b      	sxth	r3, r3
    notch = sample - (bp * damp >> 15);
 80029fc:	434d      	muls	r5, r1
 80029fe:	eba3 33e5 	sub.w	r3, r3, r5, asr #15
    hp = notch - lp;
 8002a02:	1a1b      	subs	r3, r3, r0
    *buffer++ = result;
 8002a04:	4573      	cmp	r3, lr
    bp += f * hp >> 15;
 8002a06:	fb03 f50c 	mul.w	r5, r3, ip
    *buffer++ = result;
 8002a0a:	bfa8      	it	ge
 8002a0c:	4673      	movge	r3, lr
 8002a0e:	4f0a      	ldr	r7, [pc, #40]	; (8002a38 <_ZN6braids17DigitalOscillator14RenderSawSwarmEPKhPsj+0x200>)
    bp += f * hp >> 15;
 8002a10:	eb01 31e5 	add.w	r1, r1, r5, asr #15
    *buffer++ = result;
 8002a14:	42bb      	cmp	r3, r7
 8002a16:	bfb8      	it	lt
 8002a18:	463b      	movlt	r3, r7
 8002a1a:	9d02      	ldr	r5, [sp, #8]
 8002a1c:	f825 3b02 	strh.w	r3, [r5], #2
 8002a20:	9502      	str	r5, [sp, #8]
  while (size--) {
 8002a22:	e78d      	b.n	8002940 <_ZN6braids17DigitalOscillator14RenderSawSwarmEPKhPsj+0x108>
  state_.saw.bp = bp;
 8002a24:	e9c4 0113 	strd	r0, r1, [r4, #76]	; 0x4c
}
 8002a28:	b015      	add	sp, #84	; 0x54
 8002a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a2e:	bf00      	nop
 8002a30:	080086de 	.word	0x080086de
 8002a34:	080080d8 	.word	0x080080d8
 8002a38:	ffff8001 	.word	0xffff8001
 8002a3c:	0800a560 	.word	0x0800a560
 8002a40:	0800a562 	.word	0x0800a562

08002a44 <_ZN6braids17DigitalOscillator19RenderDigitalFilterEPKhPsj>:
    size_t size) {
 8002a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a48:	469b      	mov	fp, r3
  uint32_t square_modulator_phase = state_.res.square_modulator_phase;
 8002a4a:	e9d0 9709 	ldrd	r9, r7, [r0, #36]	; 0x24
  int16_t shifted_pitch = pitch_ + ((parameter_[0] - 2048) >> 1);
 8002a4e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    size_t size) {
 8002a52:	4688      	mov	r8, r1
  int16_t shifted_pitch = pitch_ + ((parameter_[0] - 2048) >> 1);
 8002a54:	f5a3 6100 	sub.w	r1, r3, #2048	; 0x800
 8002a58:	8b03      	ldrh	r3, [r0, #24]
    size_t size) {
 8002a5a:	b087      	sub	sp, #28
  int16_t shifted_pitch = pitch_ + ((parameter_[0] - 2048) >> 1);
 8002a5c:	eb03 0361 	add.w	r3, r3, r1, asr #1
  uint32_t target_increment = ComputePhaseIncrement(shifted_pitch);
 8002a60:	f643 71ff 	movw	r1, #16383	; 0x3fff
  int16_t shifted_pitch = pitch_ + ((parameter_[0] - 2048) >> 1);
 8002a64:	b21b      	sxth	r3, r3
  uint32_t target_increment = ComputePhaseIncrement(shifted_pitch);
 8002a66:	4299      	cmp	r1, r3
 8002a68:	bfa8      	it	ge
 8002a6a:	4619      	movge	r1, r3
  uint32_t modulator_phase_increment = state_.res.modulator_phase_increment;
 8002a6c:	f8d0 a020 	ldr.w	sl, [r0, #32]
    size_t size) {
 8002a70:	9202      	str	r2, [sp, #8]
  uint8_t filter_type = shape_ - OSC_SHAPE_DIGITAL_FILTER_LP;
 8002a72:	7f46      	ldrb	r6, [r0, #29]
    size_t size) {
 8002a74:	4604      	mov	r4, r0
  int32_t square_integrator = state_.res.integrator;
 8002a76:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  uint32_t target_increment = ComputePhaseIncrement(shifted_pitch);
 8002a78:	f7ff fe2e 	bl	80026d8 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
    ? (target_increment - modulator_phase_increment) / size
 8002a7c:	4582      	cmp	sl, r0
    : ~((modulator_phase_increment - target_increment) / size);
 8002a7e:	bf27      	ittee	cs
 8002a80:	ebaa 0000 	subcs.w	r0, sl, r0
 8002a84:	fbb0 f0fb 	udivcs	r0, r0, fp
    ? (target_increment - modulator_phase_increment) / size
 8002a88:	eba0 000a 	subcc.w	r0, r0, sl
 8002a8c:	fbb0 f3fb 	udivcc	r3, r0, fp
 8002a90:	bf28      	it	cs
 8002a92:	43c3      	mvncs	r3, r0
  uint8_t filter_type = shape_ - OSC_SHAPE_DIGITAL_FILTER_LP;
 8002a94:	3e04      	subs	r6, #4
 8002a96:	b2f6      	uxtb	r6, r6
    ? (target_increment - modulator_phase_increment) / size
 8002a98:	9301      	str	r3, [sp, #4]
      square_modulator_phase = kPhaseReset[(filter_type & 1) + 2];
 8002a9a:	f006 0201 	and.w	r2, r6, #1
 8002a9e:	eb08 030b 	add.w	r3, r8, fp
 8002aa2:	9304      	str	r3, [sp, #16]
 8002aa4:	1c93      	adds	r3, r2, #2
  uint32_t modulator_phase_increment = state_.res.modulator_phase_increment;
 8002aa6:	f8cd a000 	str.w	sl, [sp]
      square_modulator_phase = kPhaseReset[(filter_type & 1) + 2];
 8002aaa:	9305      	str	r3, [sp, #20]
  while (size--) {
 8002aac:	9b04      	ldr	r3, [sp, #16]
 8002aae:	4598      	cmp	r8, r3
 8002ab0:	f000 80b0 	beq.w	8002c14 <_ZN6braids17DigitalOscillator19RenderDigitalFilterEPKhPsj+0x1d0>
    phase_ += phase_increment_;
 8002ab4:	e9d4 2100 	ldrd	r2, r1, [r4]
 8002ab8:	440a      	add	r2, r1
 8002aba:	6022      	str	r2, [r4, #0]
    modulator_phase_increment += modulator_phase_increment_increment;
 8002abc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002ac0:	441a      	add	r2, r3
    uint16_t integrator_gain = (modulator_phase_increment >> 14);
 8002ac2:	0b93      	lsrs	r3, r2, #14
    modulator_phase_increment += modulator_phase_increment_increment;
 8002ac4:	9200      	str	r2, [sp, #0]
    if (*sync++) {
 8002ac6:	f818 2b01 	ldrb.w	r2, [r8], #1
    uint16_t integrator_gain = (modulator_phase_increment >> 14);
 8002aca:	9303      	str	r3, [sp, #12]
    if (*sync++) {
 8002acc:	2a00      	cmp	r2, #0
 8002ace:	f040 8086 	bne.w	8002bde <_ZN6braids17DigitalOscillator19RenderDigitalFilterEPKhPsj+0x19a>
    modulator_phase += modulator_phase_increment;
 8002ad2:	9b00      	ldr	r3, [sp, #0]
 8002ad4:	4499      	add	r9, r3
    if (phase_ < phase_increment_) {
 8002ad6:	f8d4 c000 	ldr.w	ip, [r4]
 8002ada:	4561      	cmp	r1, ip
      modulator_phase = kPhaseReset[filter_type];
 8002adc:	bf88      	it	hi
 8002ade:	4b52      	ldrhi	r3, [pc, #328]	; (8002c28 <_ZN6braids17DigitalOscillator19RenderDigitalFilterEPKhPsj+0x1e4>)
    if ((phase_ << 1) < (phase_increment_ << 1)) {
 8002ae0:	ea4f 0141 	mov.w	r1, r1, lsl #1
      modulator_phase = kPhaseReset[filter_type];
 8002ae4:	bf88      	it	hi
 8002ae6:	f853 9026 	ldrhi.w	r9, [r3, r6, lsl #2]
    if ((phase_ << 1) < (phase_increment_ << 1)) {
 8002aea:	ebb1 0f4c 	cmp.w	r1, ip, lsl #1
      state_.res.polarity = !state_.res.polarity;
 8002aee:	bf81      	itttt	hi
 8002af0:	f894 2030 	ldrbhi.w	r2, [r4, #48]	; 0x30
      square_modulator_phase = kPhaseReset[(filter_type & 1) + 2];
 8002af4:	4b4c      	ldrhi	r3, [pc, #304]	; (8002c28 <_ZN6braids17DigitalOscillator19RenderDigitalFilterEPKhPsj+0x1e4>)
      state_.res.polarity = !state_.res.polarity;
 8002af6:	f082 0201 	eorhi.w	r2, r2, #1
 8002afa:	f884 2030 	strbhi.w	r2, [r4, #48]	; 0x30
      square_modulator_phase = kPhaseReset[(filter_type & 1) + 2];
 8002afe:	bf88      	it	hi
 8002b00:	9a05      	ldrhi	r2, [sp, #20]
  int32_t a = table[phase >> 24];
 8002b02:	494a      	ldr	r1, [pc, #296]	; (8002c2c <_ZN6braids17DigitalOscillator19RenderDigitalFilterEPKhPsj+0x1e8>)
 8002b04:	bf8c      	ite	hi
 8002b06:	f853 7022 	ldrhi.w	r7, [r3, r2, lsl #2]
    square_modulator_phase += modulator_phase_increment;
 8002b0a:	9b00      	ldrls	r3, [sp, #0]
 8002b0c:	ea4f 6219 	mov.w	r2, r9, lsr #24
 8002b10:	f931 0012 	ldrsh.w	r0, [r1, r2, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 8002b14:	f101 0102 	add.w	r1, r1, #2
 8002b18:	bf98      	it	ls
 8002b1a:	18ff      	addls	r7, r7, r3
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 8002b22:	f3c9 220f 	ubfx	r2, r9, #8, #16
 8002b26:	1a09      	subs	r1, r1, r0
 8002b28:	434a      	muls	r2, r1
  int32_t a = table[phase >> 24];
 8002b2a:	1e99      	subs	r1, r3, #2
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 8002b2c:	eb00 4022 	add.w	r0, r0, r2, asr #16
  int32_t a = table[phase >> 24];
 8002b30:	0e3a      	lsrs	r2, r7, #24
 8002b32:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 8002b36:	f933 e012 	ldrsh.w	lr, [r3, r2, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 8002b3a:	f3c7 220f 	ubfx	r2, r7, #8, #16
 8002b3e:	ebae 0e01 	sub.w	lr, lr, r1
 8002b42:	fb02 f20e 	mul.w	r2, r2, lr
 8002b46:	eb01 4122 	add.w	r1, r1, r2, asr #16
    uint16_t double_saw = ~(phase_ >> 15);
 8002b4a:	f3cc 32cf 	ubfx	r2, ip, #15, #16
 8002b4e:	ea6f 0e02 	mvn.w	lr, r2
 8002b52:	fa1f f38e 	uxth.w	r3, lr
    uint16_t window = parameter_[1] < 16384 ? saw : triangle;
 8002b56:	f9b4 e00e 	ldrsh.w	lr, [r4, #14]
    int32_t square_carrier = Interpolate824(wav_sine, square_modulator_phase);
 8002b5a:	b209      	sxth	r1, r1
    uint16_t window = parameter_[1] < 16384 ? saw : triangle;
 8002b5c:	f5be 4f80 	cmp.w	lr, #16384	; 0x4000
    uint16_t saw = ~(phase_ >> 16);
 8002b60:	bfb8      	it	lt
 8002b62:	ea6f 4c1c 	mvnlt.w	ip, ip, lsr #16
    int32_t pulse = (square_carrier * double_saw) >> 16;
 8002b66:	fb01 f103 	mul.w	r1, r1, r3
    uint16_t triangle = (phase_ >> 15) ^ (phase_ & 0x80000000 ? 0xffff : 0x0000);
 8002b6a:	bfa8      	it	ge
 8002b6c:	ea82 7cec 	eorge.w	ip, r2, ip, asr #31
    if (state_.res.polarity) {
 8002b70:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    int32_t carrier = Interpolate824(wav_sine, modulator_phase);
 8002b74:	b200      	sxth	r0, r0
    uint16_t triangle = (phase_ >> 15) ^ (phase_ & 0x80000000 ? 0xffff : 0x0000);
 8002b76:	fa1f fc8c 	uxth.w	ip, ip
    int32_t pulse = (square_carrier * double_saw) >> 16;
 8002b7a:	1409      	asrs	r1, r1, #16
    if (state_.res.polarity) {
 8002b7c:	b102      	cbz	r2, 8002b80 <_ZN6braids17DigitalOscillator19RenderDigitalFilterEPKhPsj+0x13c>
      pulse = -pulse;
 8002b7e:	4249      	negs	r1, r1
    square_integrator += (pulse * integrator_gain) >> 16;
 8002b80:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8002b84:	4b2a      	ldr	r3, [pc, #168]	; (8002c30 <_ZN6braids17DigitalOscillator19RenderDigitalFilterEPKhPsj+0x1ec>)
 8002b86:	434a      	muls	r2, r1
 8002b88:	eb05 4522 	add.w	r5, r5, r2, asr #16
 8002b8c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002b90:	4295      	cmp	r5, r2
 8002b92:	bfa8      	it	ge
 8002b94:	4615      	movge	r5, r2
 8002b96:	429d      	cmp	r5, r3
 8002b98:	bfb8      	it	lt
 8002b9a:	461d      	movlt	r5, r3
    if (filter_type & 2) {
 8002b9c:	07b3      	lsls	r3, r6, #30
 8002b9e:	d527      	bpl.n	8002bf0 <_ZN6braids17DigitalOscillator19RenderDigitalFilterEPKhPsj+0x1ac>
      saw_tri_signal = (carrier * window) >> 16;
 8002ba0:	fb0c fc00 	mul.w	ip, ip, r0
      square_signal = pulse;
 8002ba4:	b209      	sxth	r1, r1
      saw_tri_signal = (carrier * window) >> 16;
 8002ba6:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8002baa:	fa1f f28e 	uxth.w	r2, lr
    uint16_t balance = (parameter_[1] < 16384 ? 
 8002bae:	f5be 4f80 	cmp.w	lr, #16384	; 0x4000
                        parameter_[1] : ~parameter_[1]) << 2;
 8002bb2:	bfaa      	itet	ge
 8002bb4:	ea6f 0e02 	mvnge.w	lr, r2
    uint16_t balance = (parameter_[1] < 16384 ? 
 8002bb8:	ea4f 0e82 	movlt.w	lr, r2, lsl #2
 8002bbc:	ea4f 0e8e 	movge.w	lr, lr, lsl #2
 8002bc0:	fa1f fe8e 	uxth.w	lr, lr
  return (a * (65535 - balance) + b * balance) >> 16;
 8002bc4:	fb0e f101 	mul.w	r1, lr, r1
 8002bc8:	f5ce 407f 	rsb	r0, lr, #65280	; 0xff00
 8002bcc:	30ff      	adds	r0, #255	; 0xff
 8002bce:	fb0c 1100 	mla	r1, ip, r0, r1
 8002bd2:	9b02      	ldr	r3, [sp, #8]
 8002bd4:	1409      	asrs	r1, r1, #16
 8002bd6:	f823 1b02 	strh.w	r1, [r3], #2
 8002bda:	9302      	str	r3, [sp, #8]
  while (size--) {
 8002bdc:	e766      	b.n	8002aac <_ZN6braids17DigitalOscillator19RenderDigitalFilterEPKhPsj+0x68>
      phase_ = 0;
 8002bde:	2300      	movs	r3, #0
      state_.res.polarity = 1;
 8002be0:	2201      	movs	r2, #1
      phase_ = 0;
 8002be2:	6023      	str	r3, [r4, #0]
      state_.res.polarity = 1;
 8002be4:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      square_integrator = 0;
 8002be8:	461d      	mov	r5, r3
      square_modulator_phase = 0;
 8002bea:	461f      	mov	r7, r3
      modulator_phase = 0;
 8002bec:	4699      	mov	r9, r3
 8002bee:	e772      	b.n	8002ad6 <_ZN6braids17DigitalOscillator19RenderDigitalFilterEPKhPsj+0x92>
      saw_tri_signal = (window * (carrier + 32768) >> 16) - 32768;
 8002bf0:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8002bf4:	fb0c fc00 	mul.w	ip, ip, r0
      if (filter_type == 1) {
 8002bf8:	2e01      	cmp	r6, #1
      saw_tri_signal = (window * (carrier + 32768) >> 16) - 32768;
 8002bfa:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8002bfe:	f5ac 4c00 	sub.w	ip, ip, #32768	; 0x8000
        square_signal = (pulse + square_integrator) >> 1;
 8002c02:	bf08      	it	eq
 8002c04:	1949      	addeq	r1, r1, r5
      saw_tri_signal = (window * (carrier + 32768) >> 16) - 32768;
 8002c06:	fa0f fc8c 	sxth.w	ip, ip
      square_signal = square_integrator;
 8002c0a:	bf14      	ite	ne
 8002c0c:	b229      	sxthne	r1, r5
        square_signal = (pulse + square_integrator) >> 1;
 8002c0e:	f341 014f 	sbfxeq	r1, r1, #1, #16
 8002c12:	e7ca      	b.n	8002baa <_ZN6braids17DigitalOscillator19RenderDigitalFilterEPKhPsj+0x166>
  state_.res.modulator_phase_increment = modulator_phase_increment;
 8002c14:	9b01      	ldr	r3, [sp, #4]
  state_.res.square_modulator_phase = square_modulator_phase;
 8002c16:	e9c4 9709 	strd	r9, r7, [r4, #36]	; 0x24
  state_.res.modulator_phase_increment = modulator_phase_increment;
 8002c1a:	fb0b a303 	mla	r3, fp, r3, sl
  state_.res.integrator = square_integrator;
 8002c1e:	62e5      	str	r5, [r4, #44]	; 0x2c
  state_.res.modulator_phase_increment = modulator_phase_increment;
 8002c20:	6223      	str	r3, [r4, #32]
}
 8002c22:	b007      	add	sp, #28
 8002c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c28:	0800792c 	.word	0x0800792c
 8002c2c:	0800d336 	.word	0x0800d336
 8002c30:	ffff8001 	.word	0xffff8001

08002c34 <_ZN6braids17DigitalOscillator11RenderVosimEPKhPsj>:
    size_t size) {
 8002c34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c38:	460e      	mov	r6, r1
    state_.vow.formant_increment[i] = ComputePhaseIncrement(parameter_[i] >> 1);
 8002c3a:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
    size_t size) {
 8002c3e:	4604      	mov	r4, r0
    state_.vow.formant_increment[i] = ComputePhaseIncrement(parameter_[i] >> 1);
 8002c40:	1049      	asrs	r1, r1, #1
    size_t size) {
 8002c42:	461d      	mov	r5, r3
 8002c44:	4691      	mov	r9, r2
    state_.vow.formant_increment[i] = ComputePhaseIncrement(parameter_[i] >> 1);
 8002c46:	f7ff fd47 	bl	80026d8 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
 8002c4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c4e:	6220      	str	r0, [r4, #32]
 8002c50:	1049      	asrs	r1, r1, #1
 8002c52:	4620      	mov	r0, r4
 8002c54:	f7ff fd40 	bl	80026d8 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
      phase_ = 0;
 8002c58:	f04f 0e00 	mov.w	lr, #0
 8002c5c:	1973      	adds	r3, r6, r5
  int32_t a = table[phase >> 24];
 8002c5e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8002d20 <_ZN6braids17DigitalOscillator11RenderVosimEPKhPsj+0xec>
    state_.vow.formant_increment[i] = ComputePhaseIncrement(parameter_[i] >> 1);
 8002c62:	6260      	str	r0, [r4, #36]	; 0x24
 8002c64:	9301      	str	r3, [sp, #4]
  while (size--) {
 8002c66:	9b01      	ldr	r3, [sp, #4]
 8002c68:	429e      	cmp	r6, r3
 8002c6a:	d050      	beq.n	8002d0e <_ZN6braids17DigitalOscillator11RenderVosimEPKhPsj+0xda>
    phase_ += phase_increment_;
 8002c6c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002c70:	441a      	add	r2, r3
 8002c72:	6022      	str	r2, [r4, #0]
    if (*sync++) {
 8002c74:	f816 2b01 	ldrb.w	r2, [r6], #1
 8002c78:	b10a      	cbz	r2, 8002c7e <_ZN6braids17DigitalOscillator11RenderVosimEPKhPsj+0x4a>
      phase_ = 0;
 8002c7a:	f8c4 e000 	str.w	lr, [r4]
    state_.vow.formant_phase[0] += state_.vow.formant_increment[0];
 8002c7e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002c80:	6a22      	ldr	r2, [r4, #32]
  int32_t b = table[(phase >> 24) + 1];
 8002c82:	4824      	ldr	r0, [pc, #144]	; (8002d14 <_ZN6braids17DigitalOscillator11RenderVosimEPKhPsj+0xe0>)
 8002c84:	4417      	add	r7, r2
  int32_t a = table[phase >> 24];
 8002c86:	0e3a      	lsrs	r2, r7, #24
 8002c88:	62e7      	str	r7, [r4, #44]	; 0x2c
  int32_t b = table[(phase >> 24) + 1];
 8002c8a:	f930 c012 	ldrsh.w	ip, [r0, r2, lsl #1]
  int32_t a = table[phase >> 24];
 8002c8e:	f938 1012 	ldrsh.w	r1, [r8, r2, lsl #1]
    state_.vow.formant_phase[1] += state_.vow.formant_increment[1];
 8002c92:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002c94:	6b22      	ldr	r2, [r4, #48]	; 0x30
    sample = sample * (Interpolate824(lut_bell, phase_) >> 1) >> 15;
 8002c96:	6820      	ldr	r0, [r4, #0]
    state_.vow.formant_phase[1] += state_.vow.formant_increment[1];
 8002c98:	4415      	add	r5, r2
    if (phase_ < phase_increment_) {
 8002c9a:	4283      	cmp	r3, r0
    state_.vow.formant_phase[1] += state_.vow.formant_increment[1];
 8002c9c:	6325      	str	r5, [r4, #48]	; 0x30
    if (phase_ < phase_increment_) {
 8002c9e:	d832      	bhi.n	8002d06 <_ZN6braids17DigitalOscillator11RenderVosimEPKhPsj+0xd2>
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 8002ca0:	ebac 0c01 	sub.w	ip, ip, r1
 8002ca4:	f3c7 270f 	ubfx	r7, r7, #8, #16
 8002ca8:	fb0c f707 	mul.w	r7, ip, r7
 8002cac:	eb01 4727 	add.w	r7, r1, r7, asr #16
  int32_t b = table[(phase >> 24) + 1];
 8002cb0:	4918      	ldr	r1, [pc, #96]	; (8002d14 <_ZN6braids17DigitalOscillator11RenderVosimEPKhPsj+0xe0>)
  int32_t a = table[phase >> 24];
 8002cb2:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8002cb6:	f938 201b 	ldrsh.w	r2, [r8, fp, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 8002cba:	f931 101b 	ldrsh.w	r1, [r1, fp, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 8002cbe:	f3c5 250f 	ubfx	r5, r5, #8, #16
 8002cc2:	1a89      	subs	r1, r1, r2
 8002cc4:	434d      	muls	r5, r1
  uint32_t a = table[phase >> 24];
 8002cc6:	4b14      	ldr	r3, [pc, #80]	; (8002d18 <_ZN6braids17DigitalOscillator11RenderVosimEPKhPsj+0xe4>)
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 8002cc8:	eb02 4525 	add.w	r5, r2, r5, asr #16
    sample += Interpolate824(wav_sine, state_.vow.formant_phase[0]) >> 1;
 8002ccc:	f347 074e 	sbfx	r7, r7, #1, #15
  uint32_t b = table[(phase >> 24) + 1];
 8002cd0:	4a12      	ldr	r2, [pc, #72]	; (8002d1c <_ZN6braids17DigitalOscillator11RenderVosimEPKhPsj+0xe8>)
  uint32_t a = table[phase >> 24];
 8002cd2:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8002cd6:	f507 47c0 	add.w	r7, r7, #24576	; 0x6000
    sample += Interpolate824(wav_sine, state_.vow.formant_phase[1]) >> 2;
 8002cda:	f345 058d 	sbfx	r5, r5, #2, #14
 8002cde:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
 8002ce2:	443d      	add	r5, r7
  uint32_t b = table[(phase >> 24) + 1];
 8002ce4:	f832 701a 	ldrh.w	r7, [r2, sl, lsl #1]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 8002ce8:	1afa      	subs	r2, r7, r3
 8002cea:	f3c0 270f 	ubfx	r7, r0, #8, #16
 8002cee:	4357      	muls	r7, r2
 8002cf0:	eb03 4717 	add.w	r7, r3, r7, lsr #16
    sample = sample * (Interpolate824(lut_bell, phase_) >> 1) >> 15;
 8002cf4:	f3c7 074e 	ubfx	r7, r7, #1, #15
 8002cf8:	436f      	muls	r7, r5
 8002cfa:	13ff      	asrs	r7, r7, #15
    sample -= 16384 + 8192;
 8002cfc:	f5a7 47c0 	sub.w	r7, r7, #24576	; 0x6000
    *buffer++ = sample;
 8002d00:	f829 7b02 	strh.w	r7, [r9], #2
  while (size--) {
 8002d04:	e7af      	b.n	8002c66 <_ZN6braids17DigitalOscillator11RenderVosimEPKhPsj+0x32>
      state_.vow.formant_phase[1] = 0;
 8002d06:	e9c4 ee0b 	strd	lr, lr, [r4, #44]	; 0x2c
      sample = 0;
 8002d0a:	2700      	movs	r7, #0
 8002d0c:	e7f6      	b.n	8002cfc <_ZN6braids17DigitalOscillator11RenderVosimEPKhPsj+0xc8>
}
 8002d0e:	b003      	add	sp, #12
 8002d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d14:	0800d338 	.word	0x0800d338
 8002d18:	0800d134 	.word	0x0800d134
 8002d1c:	0800d136 	.word	0x0800d136
 8002d20:	0800d336 	.word	0x0800d336

08002d24 <_ZN6braids17DigitalOscillator8RenderFmEPKhPsj>:
    size_t size) {
 8002d24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d28:	460e      	mov	r6, r1
      (12 << 7) + pitch_ + ((parameter_[1] - 16384) >> 1)) >> 1;
 8002d2a:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
    size_t size) {
 8002d2e:	461f      	mov	r7, r3
      (12 << 7) + pitch_ + ((parameter_[1] - 16384) >> 1)) >> 1;
 8002d30:	f5a1 4380 	sub.w	r3, r1, #16384	; 0x4000
 8002d34:	8b01      	ldrh	r1, [r0, #24]
    size_t size) {
 8002d36:	4604      	mov	r4, r0
      (12 << 7) + pitch_ + ((parameter_[1] - 16384) >> 1)) >> 1;
 8002d38:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
 8002d3c:	eb01 0163 	add.w	r1, r1, r3, asr #1
  uint32_t modulator_phase_increment = ComputePhaseIncrement(
 8002d40:	b209      	sxth	r1, r1
    size_t size) {
 8002d42:	4690      	mov	r8, r2
  uint32_t modulator_phase = state_.modulator_phase;
 8002d44:	6a05      	ldr	r5, [r0, #32]
  uint32_t modulator_phase_increment = ComputePhaseIncrement(
 8002d46:	f7ff fcc7 	bl	80026d8 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
  BEGIN_INTERPOLATE_PARAMETER_0    
 8002d4a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8002d4e:	f9b4 e010 	ldrsh.w	lr, [r4, #16]
      (12 << 7) + pitch_ + ((parameter_[1] - 16384) >> 1)) >> 1;
 8002d52:	0843      	lsrs	r3, r0, #1
 8002d54:	9300      	str	r3, [sp, #0]
  BEGIN_INTERPOLATE_PARAMETER_0    
 8002d56:	eba1 030e 	sub.w	r3, r1, lr
 8002d5a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002d5e:	fbb1 f1f7 	udiv	r1, r1, r7
 8002d62:	4359      	muls	r1, r3
 8002d64:	19f3      	adds	r3, r6, r7
 8002d66:	460f      	mov	r7, r1
  int32_t a = table[phase >> 24];
 8002d68:	4a22      	ldr	r2, [pc, #136]	; (8002df4 <_ZN6braids17DigitalOscillator8RenderFmEPKhPsj+0xd0>)
 8002d6a:	9301      	str	r3, [sp, #4]
  int32_t b = table[(phase >> 24) + 1];
 8002d6c:	f102 0c02 	add.w	ip, r2, #2
  while (size--) {
 8002d70:	9b01      	ldr	r3, [sp, #4]
 8002d72:	429e      	cmp	r6, r3
 8002d74:	d038      	beq.n	8002de8 <_ZN6braids17DigitalOscillator8RenderFmEPKhPsj+0xc4>
    phase_ += phase_increment_;
 8002d76:	6820      	ldr	r0, [r4, #0]
    INTERPOLATE_PARAMETER_0
 8002d78:	eb0e 33e7 	add.w	r3, lr, r7, asr #15
    phase_ += phase_increment_;
 8002d7c:	4681      	mov	r9, r0
 8002d7e:	6860      	ldr	r0, [r4, #4]
 8002d80:	4481      	add	r9, r0
 8002d82:	f8c4 9000 	str.w	r9, [r4]
    if (*sync++) {
 8002d86:	f816 9b01 	ldrb.w	r9, [r6], #1
 8002d8a:	f1b9 0f00 	cmp.w	r9, #0
 8002d8e:	d002      	beq.n	8002d96 <_ZN6braids17DigitalOscillator8RenderFmEPKhPsj+0x72>
      phase_ = modulator_phase = 0;
 8002d90:	2000      	movs	r0, #0
 8002d92:	4605      	mov	r5, r0
 8002d94:	6020      	str	r0, [r4, #0]
    modulator_phase += modulator_phase_increment;
 8002d96:	9800      	ldr	r0, [sp, #0]
 8002d98:	440f      	add	r7, r1
 8002d9a:	4405      	add	r5, r0
  int32_t a = table[phase >> 24];
 8002d9c:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8002da0:	f932 901a 	ldrsh.w	r9, [r2, sl, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 8002da4:	f93c b01a 	ldrsh.w	fp, [ip, sl, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 8002da8:	f3c5 2a0f 	ubfx	sl, r5, #8, #16
 8002dac:	ebab 0b09 	sub.w	fp, fp, r9
 8002db0:	fb0a fa0b 	mul.w	sl, sl, fp
 8002db4:	eb09 4a2a 	add.w	sl, r9, sl, asr #16
        Interpolate824(wav_sine, modulator_phase) * parameter_0) << 2;
 8002db8:	fa0f fa8a 	sxth.w	sl, sl
 8002dbc:	fb03 f30a 	mul.w	r3, r3, sl
    *buffer++ = Interpolate824(wav_sine, phase_ + pm);
 8002dc0:	6820      	ldr	r0, [r4, #0]
 8002dc2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  int32_t a = table[phase >> 24];
 8002dc6:	ea4f 6913 	mov.w	r9, r3, lsr #24
 8002dca:	f932 a019 	ldrsh.w	sl, [r2, r9, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 8002dce:	f93c b019 	ldrsh.w	fp, [ip, r9, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 8002dd2:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8002dd6:	ebab 0b0a 	sub.w	fp, fp, sl
 8002dda:	fb03 f30b 	mul.w	r3, r3, fp
 8002dde:	eb0a 4a23 	add.w	sl, sl, r3, asr #16
 8002de2:	f828 ab02 	strh.w	sl, [r8], #2
  while (size--) {
 8002de6:	e7c3      	b.n	8002d70 <_ZN6braids17DigitalOscillator8RenderFmEPKhPsj+0x4c>
  END_INTERPOLATE_PARAMETER_0
 8002de8:	89a3      	ldrh	r3, [r4, #12]
  state_.modulator_phase = modulator_phase;
 8002dea:	6225      	str	r5, [r4, #32]
  END_INTERPOLATE_PARAMETER_0
 8002dec:	8223      	strh	r3, [r4, #16]
}
 8002dee:	b003      	add	sp, #12
 8002df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002df4:	0800d336 	.word	0x0800d336

08002df8 <_ZN6braids17DigitalOscillator16RenderFeedbackFmEPKhPsj>:
    size_t size) {
 8002df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  attenuation = 32767 - attenuation * 4;
 8002dfc:	f647 7aff 	movw	sl, #32767	; 0x7fff
    size_t size) {
 8002e00:	460f      	mov	r7, r1
  int32_t attenuation = pitch_ - (72 << 7) + ((parameter_[1] - 16384) >> 1);
 8002e02:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
    size_t size) {
 8002e06:	4690      	mov	r8, r2
  int32_t attenuation = pitch_ - (72 << 7) + ((parameter_[1] - 16384) >> 1);
 8002e08:	f9b0 2018 	ldrsh.w	r2, [r0, #24]
 8002e0c:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
    size_t size) {
 8002e10:	4699      	mov	r9, r3
  int32_t attenuation = pitch_ - (72 << 7) + ((parameter_[1] - 16384) >> 1);
 8002e12:	1049      	asrs	r1, r1, #1
 8002e14:	f5a2 5310 	sub.w	r3, r2, #9216	; 0x2400
 8002e18:	440b      	add	r3, r1
  attenuation = 32767 - attenuation * 4;
 8002e1a:	ebaa 0383 	sub.w	r3, sl, r3, lsl #2
 8002e1e:	4553      	cmp	r3, sl
 8002e20:	bfa8      	it	ge
 8002e22:	4653      	movge	r3, sl
      (12 << 7) + pitch_ + ((parameter_[1] - 16384) >> 1)) >> 1;
 8002e24:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 8002e28:	4411      	add	r1, r2
    size_t size) {
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	4605      	mov	r5, r0
 8002e2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  uint32_t modulator_phase_increment = ComputePhaseIncrement(
 8002e32:	b209      	sxth	r1, r1
 8002e34:	9302      	str	r3, [sp, #8]
  int16_t previous_sample = state_.ffm.previous_sample;
 8002e36:	f9b0 4024 	ldrsh.w	r4, [r0, #36]	; 0x24
  uint32_t modulator_phase = state_.ffm.modulator_phase;
 8002e3a:	6a06      	ldr	r6, [r0, #32]
  uint32_t modulator_phase_increment = ComputePhaseIncrement(
 8002e3c:	f7ff fc4c 	bl	80026d8 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
  BEGIN_INTERPOLATE_PARAMETER_0    
 8002e40:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
 8002e44:	f9b5 e010 	ldrsh.w	lr, [r5, #16]
      (12 << 7) + pitch_ + ((parameter_[1] - 16384) >> 1)) >> 1;
 8002e48:	0843      	lsrs	r3, r0, #1
 8002e4a:	9301      	str	r3, [sp, #4]
  BEGIN_INTERPOLATE_PARAMETER_0    
 8002e4c:	eba1 030e 	sub.w	r3, r1, lr
 8002e50:	fbba f1f9 	udiv	r1, sl, r9
 8002e54:	4359      	muls	r1, r3
 8002e56:	eb07 0309 	add.w	r3, r7, r9
 8002e5a:	9303      	str	r3, [sp, #12]
 8002e5c:	460b      	mov	r3, r1
  int32_t a = table[phase >> 24];
 8002e5e:	4a26      	ldr	r2, [pc, #152]	; (8002ef8 <_ZN6braids17DigitalOscillator16RenderFeedbackFmEPKhPsj+0x100>)
  int32_t b = table[(phase >> 24) + 1];
 8002e60:	f102 0c02 	add.w	ip, r2, #2
  while (size--) {
 8002e64:	9803      	ldr	r0, [sp, #12]
 8002e66:	4287      	cmp	r7, r0
 8002e68:	d03f      	beq.n	8002eea <_ZN6braids17DigitalOscillator16RenderFeedbackFmEPKhPsj+0xf2>
    phase_ += phase_increment_;
 8002e6a:	6828      	ldr	r0, [r5, #0]
    INTERPOLATE_PARAMETER_0
 8002e6c:	eb0e 39e3 	add.w	r9, lr, r3, asr #15
    phase_ += phase_increment_;
 8002e70:	4682      	mov	sl, r0
 8002e72:	6868      	ldr	r0, [r5, #4]
 8002e74:	4482      	add	sl, r0
 8002e76:	f8c5 a000 	str.w	sl, [r5]
    if (*sync++) {
 8002e7a:	f817 ab01 	ldrb.w	sl, [r7], #1
 8002e7e:	f1ba 0f00 	cmp.w	sl, #0
 8002e82:	d002      	beq.n	8002e8a <_ZN6braids17DigitalOscillator16RenderFeedbackFmEPKhPsj+0x92>
      phase_ = modulator_phase = 0;
 8002e84:	2000      	movs	r0, #0
 8002e86:	4606      	mov	r6, r0
 8002e88:	6028      	str	r0, [r5, #0]
    modulator_phase += modulator_phase_increment;
 8002e8a:	9801      	ldr	r0, [sp, #4]
 8002e8c:	440b      	add	r3, r1
 8002e8e:	4406      	add	r6, r0
        Interpolate824(wav_sine, modulator_phase + pm) * p) << 1;
 8002e90:	eb06 3484 	add.w	r4, r6, r4, lsl #14
  int32_t a = table[phase >> 24];
 8002e94:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 8002e98:	f932 a01b 	ldrsh.w	sl, [r2, fp, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 8002e9c:	f93c b01b 	ldrsh.w	fp, [ip, fp, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 8002ea0:	f3c4 240f 	ubfx	r4, r4, #8, #16
 8002ea4:	ebab 0b0a 	sub.w	fp, fp, sl
 8002ea8:	fb04 f40b 	mul.w	r4, r4, fp
    int32_t p = parameter_0 * attenuation >> 15;
 8002eac:	9802      	ldr	r0, [sp, #8]
 8002eae:	eb0a 4424 	add.w	r4, sl, r4, asr #16
 8002eb2:	fb00 fa09 	mul.w	sl, r0, r9
        Interpolate824(wav_sine, modulator_phase + pm) * p) << 1;
 8002eb6:	b224      	sxth	r4, r4
    int32_t p = parameter_0 * attenuation >> 15;
 8002eb8:	ea4f 3aea 	mov.w	sl, sl, asr #15
        Interpolate824(wav_sine, modulator_phase + pm) * p) << 1;
 8002ebc:	fb0a fa04 	mul.w	sl, sl, r4
    previous_sample = Interpolate824(wav_sine, phase_ + pm);
 8002ec0:	682c      	ldr	r4, [r5, #0]
 8002ec2:	eb04 044a 	add.w	r4, r4, sl, lsl #1
  int32_t a = table[phase >> 24];
 8002ec6:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8002eca:	f932 b019 	ldrsh.w	fp, [r2, r9, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 8002ece:	f93c 9019 	ldrsh.w	r9, [ip, r9, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 8002ed2:	f3c4 240f 	ubfx	r4, r4, #8, #16
 8002ed6:	eba9 090b 	sub.w	r9, r9, fp
 8002eda:	fb04 f409 	mul.w	r4, r4, r9
 8002ede:	eb0b 4424 	add.w	r4, fp, r4, asr #16
 8002ee2:	b224      	sxth	r4, r4
    *buffer++ = previous_sample;
 8002ee4:	f828 4b02 	strh.w	r4, [r8], #2
  while (size--) {
 8002ee8:	e7bc      	b.n	8002e64 <_ZN6braids17DigitalOscillator16RenderFeedbackFmEPKhPsj+0x6c>
  END_INTERPOLATE_PARAMETER_0
 8002eea:	89ab      	ldrh	r3, [r5, #12]
  state_.ffm.previous_sample = previous_sample;
 8002eec:	84ac      	strh	r4, [r5, #36]	; 0x24
  END_INTERPOLATE_PARAMETER_0
 8002eee:	822b      	strh	r3, [r5, #16]
  state_.ffm.modulator_phase = modulator_phase;
 8002ef0:	622e      	str	r6, [r5, #32]
}
 8002ef2:	b005      	add	sp, #20
 8002ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ef8:	0800d336 	.word	0x0800d336

08002efc <_ZN6braids17DigitalOscillator23RenderChaoticFeedbackFmEPKhPsj>:
    size_t size) {
 8002efc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f00:	460e      	mov	r6, r1
      (12 << 7) + pitch_ + ((parameter_[1] - 16384) >> 1)) >> 1;
 8002f02:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
    size_t size) {
 8002f06:	461f      	mov	r7, r3
      (12 << 7) + pitch_ + ((parameter_[1] - 16384) >> 1)) >> 1;
 8002f08:	f5a1 4380 	sub.w	r3, r1, #16384	; 0x4000
 8002f0c:	8b01      	ldrh	r1, [r0, #24]
    size_t size) {
 8002f0e:	4604      	mov	r4, r0
      (12 << 7) + pitch_ + ((parameter_[1] - 16384) >> 1)) >> 1;
 8002f10:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
 8002f14:	eb01 0163 	add.w	r1, r1, r3, asr #1
  uint32_t modulator_phase_increment = ComputePhaseIncrement(
 8002f18:	b209      	sxth	r1, r1
    size_t size) {
 8002f1a:	4690      	mov	r8, r2
  uint32_t modulator_phase_increment = ComputePhaseIncrement(
 8002f1c:	f7ff fbdc 	bl	80026d8 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
  BEGIN_INTERPOLATE_PARAMETER_0
 8002f20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002f24:	f9b4 e010 	ldrsh.w	lr, [r4, #16]
    modulator_phase += (modulator_phase_increment >> 8) * \
 8002f28:	0a43      	lsrs	r3, r0, #9
 8002f2a:	9300      	str	r3, [sp, #0]
  BEGIN_INTERPOLATE_PARAMETER_0
 8002f2c:	eba5 030e 	sub.w	r3, r5, lr
 8002f30:	f647 75ff 	movw	r5, #32767	; 0x7fff
 8002f34:	fbb5 f5f7 	udiv	r5, r5, r7
 8002f38:	435d      	muls	r5, r3
 8002f3a:	19f3      	adds	r3, r6, r7
    modulator_phase += (modulator_phase_increment >> 8) * \
 8002f3c:	462f      	mov	r7, r5
  int32_t a = table[phase >> 24];
 8002f3e:	4a28      	ldr	r2, [pc, #160]	; (8002fe0 <_ZN6braids17DigitalOscillator23RenderChaoticFeedbackFmEPKhPsj+0xe4>)
  int16_t previous_sample = state_.ffm.previous_sample;
 8002f40:	f9b4 a024 	ldrsh.w	sl, [r4, #36]	; 0x24
  uint32_t modulator_phase = state_.ffm.modulator_phase;
 8002f44:	6a21      	ldr	r1, [r4, #32]
 8002f46:	9301      	str	r3, [sp, #4]
  int32_t b = table[(phase >> 24) + 1];
 8002f48:	f102 0c02 	add.w	ip, r2, #2
  while (size--) {
 8002f4c:	9b01      	ldr	r3, [sp, #4]
 8002f4e:	429e      	cmp	r6, r3
 8002f50:	d03d      	beq.n	8002fce <_ZN6braids17DigitalOscillator23RenderChaoticFeedbackFmEPKhPsj+0xd2>
    phase_ += phase_increment_;
 8002f52:	6820      	ldr	r0, [r4, #0]
    INTERPOLATE_PARAMETER_0
 8002f54:	eb0e 33e7 	add.w	r3, lr, r7, asr #15
    phase_ += phase_increment_;
 8002f58:	4681      	mov	r9, r0
 8002f5a:	6860      	ldr	r0, [r4, #4]
 8002f5c:	4481      	add	r9, r0
 8002f5e:	f8c4 9000 	str.w	r9, [r4]
    if (*sync++) {
 8002f62:	f816 9b01 	ldrb.w	r9, [r6], #1
 8002f66:	f1b9 0f00 	cmp.w	r9, #0
 8002f6a:	d001      	beq.n	8002f70 <_ZN6braids17DigitalOscillator23RenderChaoticFeedbackFmEPKhPsj+0x74>
      phase_ = modulator_phase = 0;
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	6021      	str	r1, [r4, #0]
  int32_t a = table[phase >> 24];
 8002f70:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8002f74:	f932 901a 	ldrsh.w	r9, [r2, sl, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 8002f78:	f93c b01a 	ldrsh.w	fp, [ip, sl, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 8002f7c:	f3c1 2a0f 	ubfx	sl, r1, #8, #16
 8002f80:	ebab 0b09 	sub.w	fp, fp, r9
 8002f84:	fb0a fa0b 	mul.w	sl, sl, fp
 8002f88:	eb09 4a2a 	add.w	sl, r9, sl, asr #16
    pm = (Interpolate824(wav_sine, modulator_phase) * parameter_0) << 1;
 8002f8c:	fa0f fa8a 	sxth.w	sl, sl
 8002f90:	fb03 f30a 	mul.w	r3, r3, sl
    previous_sample = Interpolate824(wav_sine, phase_ + pm);
 8002f94:	6820      	ldr	r0, [r4, #0]
 8002f96:	442f      	add	r7, r5
 8002f98:	eb00 0343 	add.w	r3, r0, r3, lsl #1
  int32_t a = table[phase >> 24];
 8002f9c:	ea4f 6913 	mov.w	r9, r3, lsr #24
 8002fa0:	f932 a019 	ldrsh.w	sl, [r2, r9, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 8002fa4:	f93c b019 	ldrsh.w	fp, [ip, r9, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 8002fa8:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8002fac:	ebab 0b0a 	sub.w	fp, fp, sl
 8002fb0:	fb03 f30b 	mul.w	r3, r3, fp
 8002fb4:	eb0a 4a23 	add.w	sl, sl, r3, asr #16
 8002fb8:	fa0f fa8a 	sxth.w	sl, sl
        (129 + (previous_sample >> 9));
 8002fbc:	ea4f 236a 	mov.w	r3, sl, asr #9
    modulator_phase += (modulator_phase_increment >> 8) * \
 8002fc0:	9800      	ldr	r0, [sp, #0]
        (129 + (previous_sample >> 9));
 8002fc2:	3381      	adds	r3, #129	; 0x81
    *buffer++ = previous_sample;
 8002fc4:	f828 ab02 	strh.w	sl, [r8], #2
    modulator_phase += (modulator_phase_increment >> 8) * \
 8002fc8:	fb00 1103 	mla	r1, r0, r3, r1
  while (size--) {
 8002fcc:	e7be      	b.n	8002f4c <_ZN6braids17DigitalOscillator23RenderChaoticFeedbackFmEPKhPsj+0x50>
  END_INTERPOLATE_PARAMETER_0
 8002fce:	89a3      	ldrh	r3, [r4, #12]
  state_.ffm.previous_sample = previous_sample;
 8002fd0:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
  END_INTERPOLATE_PARAMETER_0
 8002fd4:	8223      	strh	r3, [r4, #16]
  state_.ffm.modulator_phase = modulator_phase;
 8002fd6:	6221      	str	r1, [r4, #32]
}
 8002fd8:	b003      	add	sp, #12
 8002fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fde:	bf00      	nop
 8002fe0:	0800d336 	.word	0x0800d336

08002fe4 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj>:
    size_t size) {
 8002fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fe8:	4617      	mov	r7, r2
  if (strike_) {
 8002fea:	7f02      	ldrb	r2, [r0, #28]
    size_t size) {
 8002fec:	b08d      	sub	sp, #52	; 0x34
 8002fee:	4604      	mov	r4, r0
 8002ff0:	469a      	mov	sl, r3
  if (strike_) {
 8002ff2:	2a00      	cmp	r2, #0
 8002ff4:	d052      	beq.n	800309c <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0xb8>
    for (size_t i = 0; i < kNumDrumPartials; ++i) {
 8002ff6:	2300      	movs	r3, #0
        state_.add.partial_phase[i] = (1L << 30);
 8002ff8:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bool reset_phase = state_.add.partial_amplitude[0] < 1024;
 8002ffc:	6f81      	ldr	r1, [r0, #120]	; 0x78
 8002ffe:	f100 02a4 	add.w	r2, r0, #164	; 0xa4
      state_.add.target_partial_amplitude[i] = kDrumPartialAmplitude[i];
 8003002:	488c      	ldr	r0, [pc, #560]	; (8003234 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x250>)
 8003004:	f930 6013 	ldrsh.w	r6, [r0, r3, lsl #1]
      if (reset_phase) {
 8003008:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
      state_.add.target_partial_amplitude[i] = kDrumPartialAmplitude[i];
 800300c:	f842 6b04 	str.w	r6, [r2], #4
    for (size_t i = 0; i < kNumDrumPartials; ++i) {
 8003010:	f103 0301 	add.w	r3, r3, #1
        state_.add.partial_phase[i] = (1L << 30);
 8003014:	bfb8      	it	lt
 8003016:	f842 5c88 	strlt.w	r5, [r2, #-136]
    for (size_t i = 0; i < kNumDrumPartials; ++i) {
 800301a:	2b06      	cmp	r3, #6
 800301c:	d1f2      	bne.n	8003004 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x20>
    strike_ = false;
 800301e:	2300      	movs	r3, #0
 8003020:	7723      	strb	r3, [r4, #28]
    int16_t partial_pitch = pitch_ + kDrumPartials[i];
 8003022:	2500      	movs	r5, #0
 8003024:	f9b4 6018 	ldrsh.w	r6, [r4, #24]
 8003028:	f8df b224 	ldr.w	fp, [pc, #548]	; 8003250 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x26c>
 800302c:	fa1f f986 	uxth.w	r9, r6
 8003030:	f104 084c 	add.w	r8, r4, #76	; 0x4c
 8003034:	f83b 1015 	ldrh.w	r1, [fp, r5, lsl #1]
    state_.add.partial_phase_increment[i] = ComputePhaseIncrement(partial_pitch) << 1;
 8003038:	4620      	mov	r0, r4
    int16_t partial_pitch = pitch_ + kDrumPartials[i];
 800303a:	4449      	add	r1, r9
    state_.add.partial_phase_increment[i] = ComputePhaseIncrement(partial_pitch) << 1;
 800303c:	b209      	sxth	r1, r1
 800303e:	f7ff fb4b 	bl	80026d8 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
  for (size_t i = 0; i < kNumDrumPartials; ++i) {
 8003042:	3501      	adds	r5, #1
    state_.add.partial_phase_increment[i] = ComputePhaseIncrement(partial_pitch) << 1;
 8003044:	0040      	lsls	r0, r0, #1
  for (size_t i = 0; i < kNumDrumPartials; ++i) {
 8003046:	2d06      	cmp	r5, #6
    state_.add.partial_phase_increment[i] = ComputePhaseIncrement(partial_pitch) << 1;
 8003048:	f848 0b04 	str.w	r0, [r8], #4
  for (size_t i = 0; i < kNumDrumPartials; ++i) {
 800304c:	d1f2      	bne.n	8003034 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x50>
  int32_t lp_state_1 = state_.add.lp_noise[1];
 800304e:	e9d4 9836 	ldrd	r9, r8, [r4, #216]	; 0xd8
  int32_t cutoff = (pitch_ - 12 * 128) + (parameter_[1] >> 2);
 8003052:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8003056:	f5a6 66c0 	sub.w	r6, r6, #1536	; 0x600
 800305a:	eb06 06a3 	add.w	r6, r6, r3, asr #2
  int32_t f = Interpolate824(lut_svf_cutoff, cutoff << 16);
 800305e:	f386 060f 	usat	r6, #15, r6
 8003062:	0436      	lsls	r6, r6, #16
  uint32_t a = table[phase >> 24];
 8003064:	4974      	ldr	r1, [pc, #464]	; (8003238 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x254>)
 8003066:	0e30      	lsrs	r0, r6, #24
 8003068:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
  uint32_t b = table[(phase >> 24) + 1];
 800306c:	3102      	adds	r1, #2
 800306e:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 8003072:	0a36      	lsrs	r6, r6, #8
 8003074:	1a89      	subs	r1, r1, r2
 8003076:	b2b6      	uxth	r6, r6
 8003078:	434e      	muls	r6, r1
 800307a:	eb02 4616 	add.w	r6, r2, r6, lsr #16
 800307e:	b2b2      	uxth	r2, r6
 8003080:	9201      	str	r2, [sp, #4]
  int32_t harmonics_gain = parameter_[1] < 12888 ? (parameter_[1] + 4096) : 16384;
 8003082:	f243 2257 	movw	r2, #12887	; 0x3257
 8003086:	4293      	cmp	r3, r2
  int16_t previous_sample = state_.add.previous_sample;
 8003088:	f9b4 50d0 	ldrsh.w	r5, [r4, #208]	; 0xd0
  int32_t lp_state_2 = state_.add.lp_noise[2];
 800308c:	f8d4 60e0 	ldr.w	r6, [r4, #224]	; 0xe0
  int32_t harmonics_gain = parameter_[1] < 12888 ? (parameter_[1] + 4096) : 16384;
 8003090:	dc26      	bgt.n	80030e0 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0xfc>
 8003092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003096:	9302      	str	r3, [sp, #8]
  int32_t noise_mode_gain = parameter_[1] < 16384 ? 0 : parameter_[1] - 16384;
 8003098:	2300      	movs	r3, #0
 800309a:	e02a      	b.n	80030f2 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x10e>
    if (parameter_[0] < 32000) {
 800309c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80030a0:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80030a4:	dabd      	bge.n	8003022 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x3e>
        int16_t balance = (32767 - parameter_[0]) >> 8;
 80030a6:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 80030aa:	337f      	adds	r3, #127	; 0x7f
 80030ac:	121b      	asrs	r3, r3, #8
        balance = balance * balance >> 7;
 80030ae:	435b      	muls	r3, r3
        int32_t decay_long = kDrumPartialDecayLong[i];
 80030b0:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8003254 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x270>
        int32_t decay_short = kDrumPartialDecayShort[i];
 80030b4:	4e61      	ldr	r6, [pc, #388]	; (800323c <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x258>)
        balance = balance * balance >> 7;
 80030b6:	11db      	asrs	r3, r3, #7
 80030b8:	f100 0578 	add.w	r5, r0, #120	; 0x78
        int32_t decay_long = kDrumPartialDecayLong[i];
 80030bc:	f83c e012 	ldrh.w	lr, [ip, r2, lsl #1]
        int32_t decay_short = kDrumPartialDecayShort[i];
 80030c0:	f836 0012 	ldrh.w	r0, [r6, r2, lsl #1]
            state_.add.partial_amplitude[i] * decay >> 16;
 80030c4:	f855 1b04 	ldr.w	r1, [r5], #4
        int32_t decay = decay_long - ((decay_long - decay_short) * balance >> 7);
 80030c8:	ebae 0000 	sub.w	r0, lr, r0
 80030cc:	4358      	muls	r0, r3
 80030ce:	ebae 10e0 	sub.w	r0, lr, r0, asr #7
            state_.add.partial_amplitude[i] * decay >> 16;
 80030d2:	4341      	muls	r1, r0
      for (size_t i = 0; i < kNumDrumPartials; ++i) {
 80030d4:	3201      	adds	r2, #1
            state_.add.partial_amplitude[i] * decay >> 16;
 80030d6:	1409      	asrs	r1, r1, #16
      for (size_t i = 0; i < kNumDrumPartials; ++i) {
 80030d8:	2a06      	cmp	r2, #6
        state_.add.target_partial_amplitude[i] = \
 80030da:	62a9      	str	r1, [r5, #40]	; 0x28
      for (size_t i = 0; i < kNumDrumPartials; ++i) {
 80030dc:	d1ee      	bne.n	80030bc <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0xd8>
 80030de:	e7a0      	b.n	8003022 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x3e>
  int32_t noise_mode_gain = parameter_[1] < 16384 ? 0 : parameter_[1] - 16384;
 80030e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030e4:	f2c0 8092 	blt.w	800320c <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x228>
  int32_t harmonics_gain = parameter_[1] < 12888 ? (parameter_[1] + 4096) : 16384;
 80030e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  int32_t noise_mode_gain = parameter_[1] < 16384 ? 0 : parameter_[1] - 16384;
 80030ec:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
  int32_t harmonics_gain = parameter_[1] < 12888 ? (parameter_[1] + 4096) : 16384;
 80030f0:	9202      	str	r2, [sp, #8]
  noise_mode_gain = noise_mode_gain * 12888 >> 14;
 80030f2:	f243 2258 	movw	r2, #12888	; 0x3258
 80030f6:	4353      	muls	r3, r2
 80030f8:	139b      	asrs	r3, r3, #14
 80030fa:	9304      	str	r3, [sp, #16]
  int32_t fade_increment = 65536 / size;
 80030fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003100:	fbb3 f3fa 	udiv	r3, r3, sl
 8003104:	9305      	str	r3, [sp, #20]
  int32_t fade = 0;
 8003106:	2300      	movs	r3, #0
 8003108:	3704      	adds	r7, #4
 800310a:	9300      	str	r3, [sp, #0]
  while (size--) {
 800310c:	f1ba 0f00 	cmp.w	sl, #0
 8003110:	d07f      	beq.n	8003212 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x22e>
    fade += fade_increment;
 8003112:	9b00      	ldr	r3, [sp, #0]
 8003114:	9a05      	ldr	r2, [sp, #20]
 8003116:	4413      	add	r3, r2
 8003118:	9300      	str	r3, [sp, #0]
    int32_t noise = Random::GetSample();
 800311a:	f7fe fb03 	bl	8001724 <_ZN6stmlib6Random9GetSampleEv>
 800311e:	4b48      	ldr	r3, [pc, #288]	; (8003240 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x25c>)
    for (size_t i = 0; i < kNumDrumPartials; ++i) {
 8003120:	f04f 0e00 	mov.w	lr, #0
 8003124:	4298      	cmp	r0, r3
 8003126:	bfb8      	it	lt
 8003128:	4618      	movlt	r0, r3
    lp_state_0 += (noise - lp_state_0) * f >> 15;
 800312a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800312e:	bfd4      	ite	le
 8003130:	ebc9 0000 	rsble	r0, r9, r0
 8003134:	f5c9 4080 	rsbgt	r0, r9, #16384	; 0x4000
 8003138:	9b01      	ldr	r3, [sp, #4]
    lp_state_1 += (lp_state_0 - lp_state_1) * f >> 15;
 800313a:	9a01      	ldr	r2, [sp, #4]
    lp_state_0 += (noise - lp_state_0) * f >> 15;
 800313c:	4358      	muls	r0, r3
 800313e:	eb09 39e0 	add.w	r9, r9, r0, asr #15
    int32_t harmonics = 0;
 8003142:	4670      	mov	r0, lr
    lp_state_1 += (lp_state_0 - lp_state_1) * f >> 15;
 8003144:	eba9 0308 	sub.w	r3, r9, r8
 8003148:	4353      	muls	r3, r2
 800314a:	eb08 38e3 	add.w	r8, r8, r3, asr #15
    lp_state_2 += (lp_state_1 - lp_state_2) * f >> 15;
 800314e:	eba8 0306 	sub.w	r3, r8, r6
 8003152:	4353      	muls	r3, r2
 8003154:	f104 0c20 	add.w	ip, r4, #32
 8003158:	eb06 36e3 	add.w	r6, r6, r3, asr #15
      a->partial_phase[i] += a->partial_phase_increment[i];
 800315c:	f85c 2b04 	ldr.w	r2, [ip], #4
      int32_t amplitude = a->partial_amplitude[i] + \
 8003160:	f8dc 1054 	ldr.w	r1, [ip, #84]	; 0x54
      a->partial_phase[i] += a->partial_phase_increment[i];
 8003164:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
      int32_t amplitude = a->partial_amplitude[i] + \
 8003168:	9103      	str	r1, [sp, #12]
      a->partial_phase[i] += a->partial_phase_increment[i];
 800316a:	4413      	add	r3, r2
  int32_t b = table[(phase >> 24) + 1];
 800316c:	4935      	ldr	r1, [pc, #212]	; (8003244 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x260>)
  int32_t a = table[phase >> 24];
 800316e:	4a36      	ldr	r2, [pc, #216]	; (8003248 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x264>)
 8003170:	ea4f 6b13 	mov.w	fp, r3, lsr #24
 8003174:	f932 201b 	ldrsh.w	r2, [r2, fp, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 8003178:	f931 b01b 	ldrsh.w	fp, [r1, fp, lsl #1]
 800317c:	f84c 3c04 	str.w	r3, [ip, #-4]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 8003180:	ebab 0b02 	sub.w	fp, fp, r2
 8003184:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8003188:	fb03 f30b 	mul.w	r3, r3, fp
          (((a->target_partial_amplitude[i] - a->partial_amplitude[i]) * fade) >> 15);
 800318c:	9903      	ldr	r1, [sp, #12]
 800318e:	eb02 4323 	add.w	r3, r2, r3, asr #16
 8003192:	f8dc 2080 	ldr.w	r2, [ip, #128]	; 0x80
      int32_t partial = Interpolate824(wav_sine, a->partial_phase[i]);
 8003196:	b21b      	sxth	r3, r3
          (((a->target_partial_amplitude[i] - a->partial_amplitude[i]) * fade) >> 15);
 8003198:	1a52      	subs	r2, r2, r1
 800319a:	9900      	ldr	r1, [sp, #0]
 800319c:	434a      	muls	r2, r1
      int32_t amplitude = a->partial_amplitude[i] + \
 800319e:	9903      	ldr	r1, [sp, #12]
 80031a0:	eb01 32e2 	add.w	r2, r1, r2, asr #15
      partial = partial * amplitude >> 16;
 80031a4:	435a      	muls	r2, r3
      partials[i] = partial;
 80031a6:	ab06      	add	r3, sp, #24
      partial = partial * amplitude >> 16;
 80031a8:	1412      	asrs	r2, r2, #16
      partials[i] = partial;
 80031aa:	f843 202e 	str.w	r2, [r3, lr, lsl #2]
    for (size_t i = 0; i < kNumDrumPartials; ++i) {
 80031ae:	f10e 0e01 	add.w	lr, lr, #1
 80031b2:	f1be 0f06 	cmp.w	lr, #6
      harmonics += partial;
 80031b6:	4410      	add	r0, r2
    for (size_t i = 0; i < kNumDrumPartials; ++i) {
 80031b8:	d1d0      	bne.n	800315c <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x178>
    int32_t noise_mode_1 = partials[1] * lp_state_2 >> 8;
 80031ba:	9b07      	ldr	r3, [sp, #28]
    sample += noise_mode_1 * (12288 - noise_mode_gain) >> 14;
 80031bc:	9a04      	ldr	r2, [sp, #16]
    int32_t noise_mode_1 = partials[1] * lp_state_2 >> 8;
 80031be:	4373      	muls	r3, r6
    sample += noise_mode_1 * (12288 - noise_mode_gain) >> 14;
 80031c0:	f5c2 5240 	rsb	r2, r2, #12288	; 0x3000
    int32_t noise_mode_1 = partials[1] * lp_state_2 >> 8;
 80031c4:	121b      	asrs	r3, r3, #8
    int32_t noise_mode_2 = partials[3] * lp_state_2 >> 9;
 80031c6:	9909      	ldr	r1, [sp, #36]	; 0x24
    sample += noise_mode_1 * (12288 - noise_mode_gain) >> 14;
 80031c8:	4353      	muls	r3, r2
    int32_t noise_mode_2 = partials[3] * lp_state_2 >> 9;
 80031ca:	4371      	muls	r1, r6
    sample += noise_mode_1 * (12288 - noise_mode_gain) >> 14;
 80031cc:	9a06      	ldr	r2, [sp, #24]
    int32_t noise_mode_2 = partials[3] * lp_state_2 >> 9;
 80031ce:	1249      	asrs	r1, r1, #9
    sample += noise_mode_1 * (12288 - noise_mode_gain) >> 14;
 80031d0:	eb02 32a3 	add.w	r2, r2, r3, asr #14
    sample += noise_mode_2 * noise_mode_gain >> 14;
 80031d4:	9b04      	ldr	r3, [sp, #16]
    *buffer++ = sample; size--;
 80031d6:	f1aa 0a02 	sub.w	sl, sl, #2
    sample += noise_mode_2 * noise_mode_gain >> 14;
 80031da:	4359      	muls	r1, r3
    sample += harmonics * harmonics_gain >> 14;
 80031dc:	9b02      	ldr	r3, [sp, #8]
    sample += noise_mode_2 * noise_mode_gain >> 14;
 80031de:	eb02 32a1 	add.w	r2, r2, r1, asr #14
    sample += harmonics * harmonics_gain >> 14;
 80031e2:	4358      	muls	r0, r3
 80031e4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80031e8:	eb02 30a0 	add.w	r0, r2, r0, asr #14
 80031ec:	4298      	cmp	r0, r3
 80031ee:	bfa8      	it	ge
 80031f0:	4618      	movge	r0, r3
 80031f2:	4a16      	ldr	r2, [pc, #88]	; (800324c <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x268>)
 80031f4:	3704      	adds	r7, #4
 80031f6:	4290      	cmp	r0, r2
 80031f8:	bfb8      	it	lt
 80031fa:	4610      	movlt	r0, r2
    *buffer++ = (sample + previous_sample) >> 1;
 80031fc:	4405      	add	r5, r0
 80031fe:	106d      	asrs	r5, r5, #1
 8003200:	f827 5c08 	strh.w	r5, [r7, #-8]
    *buffer++ = sample; size--;
 8003204:	b205      	sxth	r5, r0
 8003206:	f827 5c06 	strh.w	r5, [r7, #-6]
  while (size--) {
 800320a:	e77f      	b.n	800310c <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x128>
  int32_t harmonics_gain = parameter_[1] < 12888 ? (parameter_[1] + 4096) : 16384;
 800320c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003210:	e741      	b.n	8003096 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0xb2>
  state_.add.previous_sample = previous_sample;
 8003212:	f8a4 50d0 	strh.w	r5, [r4, #208]	; 0xd0
  state_.add.lp_noise[1] = lp_state_1;
 8003216:	e9c4 9836 	strd	r9, r8, [r4, #216]	; 0xd8
  state_.add.lp_noise[2] = lp_state_2;
 800321a:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
 800321e:	f104 0378 	add.w	r3, r4, #120	; 0x78
 8003222:	34a4      	adds	r4, #164	; 0xa4
    a->partial_amplitude[i] = a->target_partial_amplitude[i];
 8003224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003226:	f843 2b04 	str.w	r2, [r3], #4
  for (size_t i = 0; i < kNumBellPartials; ++i) {
 800322a:	429c      	cmp	r4, r3
 800322c:	d1fa      	bne.n	8003224 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x240>
}
 800322e:	b00d      	add	sp, #52	; 0x34
 8003230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003234:	08007bfe 	.word	0x08007bfe
 8003238:	080086de 	.word	0x080086de
 800323c:	08007c42 	.word	0x08007c42
 8003240:	ffffc000 	.word	0xffffc000
 8003244:	0800d338 	.word	0x0800d338
 8003248:	0800d336 	.word	0x0800d336
 800324c:	ffff8001 	.word	0xffff8001
 8003250:	08007988 	.word	0x08007988
 8003254:	08007c0a 	.word	0x08007c0a

08003258 <_ZN6braids17DigitalOscillator18RenderClockedNoiseEPKhPsj>:
    size_t size) {
 8003258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800325c:	461f      	mov	r7, r3
  if ((parameter_[1] > previous_parameter_[1] + 64) ||
 800325e:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    size_t size) {
 8003262:	4690      	mov	r8, r2
  if ((parameter_[1] > previous_parameter_[1] + 64) ||
 8003264:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
    size_t size) {
 8003268:	460e      	mov	r6, r1
  if ((parameter_[1] > previous_parameter_[1] + 64) ||
 800326a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800326e:	428a      	cmp	r2, r1
    size_t size) {
 8003270:	4604      	mov	r4, r0
  if ((parameter_[1] > previous_parameter_[1] + 64) ||
 8003272:	dc02      	bgt.n	800327a <_ZN6braids17DigitalOscillator18RenderClockedNoiseEPKhPsj+0x22>
      (parameter_[1] < previous_parameter_[1] - 64)) {
 8003274:	3b40      	subs	r3, #64	; 0x40
  if ((parameter_[1] > previous_parameter_[1] + 64) ||
 8003276:	429a      	cmp	r2, r3
 8003278:	da00      	bge.n	800327c <_ZN6braids17DigitalOscillator18RenderClockedNoiseEPKhPsj+0x24>
    previous_parameter_[1] = parameter_[1];
 800327a:	8262      	strh	r2, [r4, #18]
  if ((parameter_[0] > previous_parameter_[0] + 16) ||
 800327c:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8003280:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003284:	f103 0110 	add.w	r1, r3, #16
 8003288:	428a      	cmp	r2, r1
 800328a:	dc02      	bgt.n	8003292 <_ZN6braids17DigitalOscillator18RenderClockedNoiseEPKhPsj+0x3a>
      (parameter_[0] < previous_parameter_[0] - 16)) {
 800328c:	3b10      	subs	r3, #16
  if ((parameter_[0] > previous_parameter_[0] + 16) ||
 800328e:	429a      	cmp	r2, r3
 8003290:	da00      	bge.n	8003294 <_ZN6braids17DigitalOscillator18RenderClockedNoiseEPKhPsj+0x3c>
    previous_parameter_[0] = parameter_[0];
 8003292:	8222      	strh	r2, [r4, #16]
  if (strike_) {
 8003294:	7f23      	ldrb	r3, [r4, #28]
 8003296:	b123      	cbz	r3, 80032a2 <_ZN6braids17DigitalOscillator18RenderClockedNoiseEPKhPsj+0x4a>
    state->seed = Random::GetWord();
 8003298:	f7fe f8d0 	bl	800143c <_ZN6stmlib6Random7GetWordEv>
    strike_ = false;
 800329c:	2300      	movs	r3, #0
    state->seed = Random::GetWord();
 800329e:	62e0      	str	r0, [r4, #44]	; 0x2c
    strike_ = false;
 80032a0:	7723      	strb	r3, [r4, #28]
  uint32_t phase_increment = phase_increment_;
 80032a2:	e9d4 9500 	ldrd	r9, r5, [r4]
    if (phase_increment < (1UL << 31)) {
 80032a6:	2d00      	cmp	r5, #0
 80032a8:	db04      	blt.n	80032b4 <_ZN6braids17DigitalOscillator18RenderClockedNoiseEPKhPsj+0x5c>
 80032aa:	006d      	lsls	r5, r5, #1
 80032ac:	d402      	bmi.n	80032b4 <_ZN6braids17DigitalOscillator18RenderClockedNoiseEPKhPsj+0x5c>
 80032ae:	006d      	lsls	r5, r5, #1
      phase_increment <<= 1;
 80032b0:	bf58      	it	pl
 80032b2:	006d      	lslpl	r5, r5, #1
      previous_parameter_[0] - 16384) << 1;
 80032b4:	8a21      	ldrh	r1, [r4, #16]
  state->cycle_phase_increment = ComputePhaseIncrement(
 80032b6:	4620      	mov	r0, r4
      previous_parameter_[0] - 16384) << 1;
 80032b8:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
  state->cycle_phase_increment = ComputePhaseIncrement(
 80032bc:	b209      	sxth	r1, r1
 80032be:	f7ff fa0b 	bl	80026d8 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
  uint32_t num_steps = 1 + (previous_parameter_[1] >> 10);
 80032c2:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  uint32_t quantizer_divider = 65536 / num_steps;
 80032c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  uint32_t num_steps = 1 + (previous_parameter_[1] >> 10);
 80032ca:	129b      	asrs	r3, r3, #10
 80032cc:	3301      	adds	r3, #1
    num_steps = 2;
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	bf08      	it	eq
 80032d2:	2302      	moveq	r3, #2
  uint32_t quantizer_divider = 65536 / num_steps;
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
      previous_parameter_[0] - 16384) << 1;
 80032d8:	0040      	lsls	r0, r0, #1
      state->rng_state = state->rng_state * 1664525L + 1013904223L;
 80032da:	f8df c070 	ldr.w	ip, [pc, #112]	; 800334c <_ZN6braids17DigitalOscillator18RenderClockedNoiseEPKhPsj+0xf4>
 80032de:	f8df e070 	ldr.w	lr, [pc, #112]	; 8003350 <_ZN6braids17DigitalOscillator18RenderClockedNoiseEPKhPsj+0xf8>
  state->cycle_phase_increment = ComputePhaseIncrement(
 80032e2:	6260      	str	r0, [r4, #36]	; 0x24
      sample += quantizer_divider >> 1;
 80032e4:	0859      	lsrs	r1, r3, #1
 80032e6:	4437      	add	r7, r6
  while (size--) {
 80032e8:	42be      	cmp	r6, r7
 80032ea:	d02b      	beq.n	8003344 <_ZN6braids17DigitalOscillator18RenderClockedNoiseEPKhPsj+0xec>
    if (*sync++) {
 80032ec:	f816 2b01 	ldrb.w	r2, [r6], #1
 80032f0:	bb2a      	cbnz	r2, 800333e <_ZN6braids17DigitalOscillator18RenderClockedNoiseEPKhPsj+0xe6>
    phase += phase_increment;
 80032f2:	44a9      	add	r9, r5
    if (phase < phase_increment) {
 80032f4:	45a9      	cmp	r9, r5
 80032f6:	d21d      	bcs.n	8003334 <_ZN6braids17DigitalOscillator18RenderClockedNoiseEPKhPsj+0xdc>
      state->rng_state = state->rng_state * 1664525L + 1013904223L;
 80032f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80032fa:	f04f 0900 	mov.w	r9, #0
 80032fe:	fb0c e202 	mla	r2, ip, r2, lr
 8003302:	62a2      	str	r2, [r4, #40]	; 0x28
 8003304:	6a22      	ldr	r2, [r4, #32]
 8003306:	1882      	adds	r2, r0, r2
 8003308:	bf28      	it	cs
 800330a:	f04f 0901 	movcs.w	r9, #1
      state->cycle_phase += state->cycle_phase_increment;
 800330e:	6222      	str	r2, [r4, #32]
      if (state->cycle_phase < state->cycle_phase_increment) {
 8003310:	f1b9 0f00 	cmp.w	r9, #0
 8003314:	d002      	beq.n	800331c <_ZN6braids17DigitalOscillator18RenderClockedNoiseEPKhPsj+0xc4>
        state->rng_state = state->seed;
 8003316:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        state->cycle_phase = state->cycle_phase_increment;
 8003318:	6220      	str	r0, [r4, #32]
        state->rng_state = state->seed;
 800331a:	62a2      	str	r2, [r4, #40]	; 0x28
      uint16_t sample = state->rng_state;
 800331c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800331e:	eb01 0902 	add.w	r9, r1, r2
      sample -= sample % quantizer_divider;
 8003322:	b292      	uxth	r2, r2
 8003324:	fbb2 faf3 	udiv	sl, r2, r3
 8003328:	fb03 221a 	mls	r2, r3, sl, r2
      sample += quantizer_divider >> 1;
 800332c:	eba9 0202 	sub.w	r2, r9, r2
 8003330:	46a9      	mov	r9, r5
      state->sample = sample;
 8003332:	8622      	strh	r2, [r4, #48]	; 0x30
    *buffer++ = state->sample;
 8003334:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8003338:	f828 2b02 	strh.w	r2, [r8], #2
  while (size--) {
 800333c:	e7d4      	b.n	80032e8 <_ZN6braids17DigitalOscillator18RenderClockedNoiseEPKhPsj+0x90>
      phase = 0;
 800333e:	f04f 0900 	mov.w	r9, #0
 8003342:	e7d7      	b.n	80032f4 <_ZN6braids17DigitalOscillator18RenderClockedNoiseEPKhPsj+0x9c>
  phase_ = phase;
 8003344:	f8c4 9000 	str.w	r9, [r4]
}
 8003348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800334c:	0019660d 	.word	0x0019660d
 8003350:	3c6ef35f 	.word	0x3c6ef35f

08003354 <_ZN6braids17DigitalOscillator23RenderDigitalModulationEPKhPsj>:
    size_t size) {
 8003354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003358:	4698      	mov	r8, r3
  uint32_t phase = phase_;
 800335a:	6803      	ldr	r3, [r0, #0]
    size_t size) {
 800335c:	b087      	sub	sp, #28
  uint32_t phase = phase_;
 800335e:	9301      	str	r3, [sp, #4]
  uint32_t increment = phase_increment_;
 8003360:	6843      	ldr	r3, [r0, #4]
      pitch_ - 1536 + ((parameter_[0] - 32767) >> 3));
 8003362:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  uint32_t increment = phase_increment_;
 8003366:	9302      	str	r3, [sp, #8]
  uint32_t symbol_stream_phase = state_.dmd.symbol_phase;
 8003368:	6a03      	ldr	r3, [r0, #32]
    size_t size) {
 800336a:	4604      	mov	r4, r0
  uint32_t symbol_stream_phase = state_.dmd.symbol_phase;
 800336c:	9303      	str	r3, [sp, #12]
      pitch_ - 1536 + ((parameter_[0] - 32767) >> 3));
 800336e:	f5a1 43ff 	sub.w	r3, r1, #32640	; 0x7f80
 8003372:	8b01      	ldrh	r1, [r0, #24]
 8003374:	3b7f      	subs	r3, #127	; 0x7f
 8003376:	f5a1 61c0 	sub.w	r1, r1, #1536	; 0x600
 800337a:	eb01 01e3 	add.w	r1, r1, r3, asr #3
 800337e:	b209      	sxth	r1, r1
    size_t size) {
 8003380:	9205      	str	r2, [sp, #20]
      pitch_ - 1536 + ((parameter_[0] - 32767) >> 3));
 8003382:	f7ff f9a9 	bl	80026d8 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
  if (strike_) {
 8003386:	7f23      	ldrb	r3, [r4, #28]
      pitch_ - 1536 + ((parameter_[0] - 32767) >> 3));
 8003388:	9004      	str	r0, [sp, #16]
  uint8_t data_byte = state_.dmd.data_byte;
 800338a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
  if (strike_) {
 800338e:	b113      	cbz	r3, 8003396 <_ZN6braids17DigitalOscillator23RenderDigitalModulationEPKhPsj+0x42>
    state_.dmd.symbol_count = 0;
 8003390:	2300      	movs	r3, #0
 8003392:	84a3      	strh	r3, [r4, #36]	; 0x24
    strike_ = false;
 8003394:	7723      	strb	r3, [r4, #28]
    size_t size) {
 8003396:	46c1      	mov	r9, r8
 8003398:	9f03      	ldr	r7, [sp, #12]
 800339a:	f8dd c004 	ldr.w	ip, [sp, #4]
  int32_t a = table[phase >> 24];
 800339e:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 8003484 <_ZN6braids17DigitalOscillator23RenderDigitalModulationEPKhPsj+0x130>
  while (size--) {
 80033a2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80033a6:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    phase += increment;
 80033aa:	9b02      	ldr	r3, [sp, #8]
  while (size--) {
 80033ac:	d055      	beq.n	800345a <_ZN6braids17DigitalOscillator23RenderDigitalModulationEPKhPsj+0x106>
    phase += increment;
 80033ae:	449c      	add	ip, r3
 80033b0:	9b04      	ldr	r3, [sp, #16]
 80033b2:	18ff      	adds	r7, r7, r3
    if (symbol_stream_phase < symbol_stream_phase_increment) {
 80033b4:	d31b      	bcc.n	80033ee <_ZN6braids17DigitalOscillator23RenderDigitalModulationEPKhPsj+0x9a>
      ++state_.dmd.symbol_count;
 80033b6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 80033b8:	3301      	adds	r3, #1
 80033ba:	b29b      	uxth	r3, r3
      if (!(state_.dmd.symbol_count & 3)) {
 80033bc:	f013 0103 	ands.w	r1, r3, #3
      ++state_.dmd.symbol_count;
 80033c0:	84a3      	strh	r3, [r4, #36]	; 0x24
      if (!(state_.dmd.symbol_count & 3)) {
 80033c2:	d142      	bne.n	800344a <_ZN6braids17DigitalOscillator23RenderDigitalModulationEPKhPsj+0xf6>
        if (state_.dmd.symbol_count >= (64 + 4 * 256)) {
 80033c4:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
          state_.dmd.symbol_count = 0;
 80033c8:	bf28      	it	cs
 80033ca:	84a1      	strhcs	r1, [r4, #36]	; 0x24
        if (state_.dmd.symbol_count < 32) {
 80033cc:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 80033ce:	2b1f      	cmp	r3, #31
 80033d0:	d93d      	bls.n	800344e <_ZN6braids17DigitalOscillator23RenderDigitalModulationEPKhPsj+0xfa>
        } else if (state_.dmd.symbol_count < 48) {
 80033d2:	2b2f      	cmp	r3, #47	; 0x2f
 80033d4:	d93d      	bls.n	8003452 <_ZN6braids17DigitalOscillator23RenderDigitalModulationEPKhPsj+0xfe>
        } else if (state_.dmd.symbol_count < 64) {
 80033d6:	2b3f      	cmp	r3, #63	; 0x3f
 80033d8:	d93d      	bls.n	8003456 <_ZN6braids17DigitalOscillator23RenderDigitalModulationEPKhPsj+0x102>
          state_.dmd.filter_state = (state_.dmd.filter_state * 3 + \
 80033da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
              static_cast<int32_t>(parameter_[1])) >> 2;
 80033dc:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
          state_.dmd.filter_state = (state_.dmd.filter_state * 3 + \
 80033e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80033e4:	441a      	add	r2, r3
              static_cast<int32_t>(parameter_[1])) >> 2;
 80033e6:	1093      	asrs	r3, r2, #2
          state_.dmd.filter_state = (state_.dmd.filter_state * 3 + \
 80033e8:	62a3      	str	r3, [r4, #40]	; 0x28
          data_byte = state_.dmd.filter_state >> 7;
 80033ea:	f3c2 2247 	ubfx	r2, r2, #9, #8
  int32_t b = table[(phase >> 24) + 1];
 80033ee:	4822      	ldr	r0, [pc, #136]	; (8003478 <_ZN6braids17DigitalOscillator23RenderDigitalModulationEPKhPsj+0x124>)
 80033f0:	f10c 4680 	add.w	r6, ip, #1073741824	; 0x40000000
  int32_t a = table[phase >> 24];
 80033f4:	0e33      	lsrs	r3, r6, #24
 80033f6:	f93e 1013 	ldrsh.w	r1, [lr, r3, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 80033fa:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 80033fe:	f3c6 260f 	ubfx	r6, r6, #8, #16
 8003402:	1a5b      	subs	r3, r3, r1
 8003404:	435e      	muls	r6, r3
 8003406:	eb01 4326 	add.w	r3, r1, r6, asr #16
    *buffer++ = (kConstellationQ[data_byte & 3] * q >> 15) + \
 800340a:	b219      	sxth	r1, r3
 800340c:	4b1b      	ldr	r3, [pc, #108]	; (800347c <_ZN6braids17DigitalOscillator23RenderDigitalModulationEPKhPsj+0x128>)
  int32_t a = table[phase >> 24];
 800340e:	ea4f 6b1c 	mov.w	fp, ip, lsr #24
 8003412:	f002 0a03 	and.w	sl, r2, #3
 8003416:	f93e 501b 	ldrsh.w	r5, [lr, fp, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 800341a:	f930 601b 	ldrsh.w	r6, [r0, fp, lsl #1]
 800341e:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 8003422:	1b76      	subs	r6, r6, r5
 8003424:	434b      	muls	r3, r1
 8003426:	f3cc 210f 	ubfx	r1, ip, #8, #16
 800342a:	4371      	muls	r1, r6
        (kConstellationI[data_byte & 3] * i >> 15);
 800342c:	4814      	ldr	r0, [pc, #80]	; (8003480 <_ZN6braids17DigitalOscillator23RenderDigitalModulationEPKhPsj+0x12c>)
 800342e:	eb05 4121 	add.w	r1, r5, r1, asr #16
 8003432:	f850 502a 	ldr.w	r5, [r0, sl, lsl #2]
 8003436:	b209      	sxth	r1, r1
 8003438:	4369      	muls	r1, r5
 800343a:	13c9      	asrs	r1, r1, #15
    *buffer++ = (kConstellationQ[data_byte & 3] * q >> 15) + \
 800343c:	eb01 33e3 	add.w	r3, r1, r3, asr #15
 8003440:	9905      	ldr	r1, [sp, #20]
 8003442:	f821 3b02 	strh.w	r3, [r1], #2
 8003446:	9105      	str	r1, [sp, #20]
  while (size--) {
 8003448:	e7ab      	b.n	80033a2 <_ZN6braids17DigitalOscillator23RenderDigitalModulationEPKhPsj+0x4e>
        data_byte >>= 2;
 800344a:	0892      	lsrs	r2, r2, #2
 800344c:	e7cf      	b.n	80033ee <_ZN6braids17DigitalOscillator23RenderDigitalModulationEPKhPsj+0x9a>
          data_byte = 0x00;
 800344e:	2200      	movs	r2, #0
 8003450:	e7cd      	b.n	80033ee <_ZN6braids17DigitalOscillator23RenderDigitalModulationEPKhPsj+0x9a>
          data_byte = 0x99;
 8003452:	2299      	movs	r2, #153	; 0x99
 8003454:	e7cb      	b.n	80033ee <_ZN6braids17DigitalOscillator23RenderDigitalModulationEPKhPsj+0x9a>
          data_byte = 0xcc;
 8003456:	22cc      	movs	r2, #204	; 0xcc
 8003458:	e7c9      	b.n	80033ee <_ZN6braids17DigitalOscillator23RenderDigitalModulationEPKhPsj+0x9a>
  phase_ = phase;
 800345a:	9901      	ldr	r1, [sp, #4]
  state_.dmd.data_byte = data_byte;
 800345c:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  phase_ = phase;
 8003460:	fb08 1303 	mla	r3, r8, r3, r1
 8003464:	6023      	str	r3, [r4, #0]
  state_.dmd.symbol_phase = symbol_stream_phase;
 8003466:	e9dd 3103 	ldrd	r3, r1, [sp, #12]
 800346a:	fb08 3001 	mla	r0, r8, r1, r3
 800346e:	6220      	str	r0, [r4, #32]
}
 8003470:	b007      	add	sp, #28
 8003472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003476:	bf00      	nop
 8003478:	0800d338 	.word	0x0800d338
 800347c:	08007bc8 	.word	0x08007bc8
 8003480:	08007bb8 	.word	0x08007bb8
 8003484:	0800d336 	.word	0x0800d336

08003488 <_ZN6braids17DigitalOscillator12RenderCymbalEPKhPsj>:

void DigitalOscillator::RenderCymbal(
    const uint8_t* sync,
    int16_t* buffer,
    size_t size) {
 8003488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800348c:	461f      	mov	r7, r3
  if (init_) {
 800348e:	7ec3      	ldrb	r3, [r0, #27]
    size_t size) {
 8003490:	b089      	sub	sp, #36	; 0x24
 8003492:	4604      	mov	r4, r0
 8003494:	4690      	mov	r8, r2
 8003496:	f500 769a 	add.w	r6, r0, #308	; 0x134
 800349a:	f500 75aa 	add.w	r5, r0, #340	; 0x154
  if (init_) {
 800349e:	b1d3      	cbz	r3, 80034d6 <_ZN6braids17DigitalOscillator12RenderCymbalEPKhPsj+0x4e>
    svf_[0].Init();
 80034a0:	4630      	mov	r0, r6
 80034a2:	f7fd fe72 	bl	800118a <_ZN6braids3Svf4InitEv>
    mode_ = mode;
 80034a6:	f04f 0901 	mov.w	r9, #1
    resonance_ = resonance;
 80034aa:	f642 63e0 	movw	r3, #12000	; 0x2ee0
    mode_ = mode;
 80034ae:	f884 9150 	strb.w	r9, [r4, #336]	; 0x150
    resonance_ = resonance;
 80034b2:	f8a4 3138 	strh.w	r3, [r4, #312]	; 0x138
    dirty_ = true;
 80034b6:	f884 9134 	strb.w	r9, [r4, #308]	; 0x134
    svf_[0].set_mode(SVF_MODE_BP);
    svf_[0].set_resonance(12000);
    svf_[1].Init();
 80034ba:	4628      	mov	r0, r5
 80034bc:	f7fd fe65 	bl	800118a <_ZN6braids3Svf4InitEv>
    mode_ = mode;
 80034c0:	2302      	movs	r3, #2
 80034c2:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
    resonance_ = resonance;
 80034c6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80034ca:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
    svf_[1].set_mode(SVF_MODE_HP);
    svf_[1].set_resonance(2000);
    init_ = false;
 80034ce:	2300      	movs	r3, #0
    dirty_ = true;
 80034d0:	f884 9154 	strb.w	r9, [r4, #340]	; 0x154
 80034d4:	76e3      	strb	r3, [r4, #27]
  }
  
  HatState* hat = &state_.hat;

  uint32_t increments[7];
  int32_t note = (40 << 7) + (pitch_ >> 1);
 80034d6:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
  increments[0] = ComputePhaseIncrement(note);
 80034da:	4620      	mov	r0, r4
  int32_t note = (40 << 7) + (pitch_ >> 1);
 80034dc:	1049      	asrs	r1, r1, #1
  increments[0] = ComputePhaseIncrement(note);
 80034de:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 80034e2:	f7ff f8f9 	bl	80026d8 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
  
  uint32_t root = increments[0] >> 10;
  increments[1] = root * 24273 >> 4;
 80034e6:	f645 62d1 	movw	r2, #24273	; 0x5ed1
  uint32_t root = increments[0] >> 10;
 80034ea:	0a83      	lsrs	r3, r0, #10
  increments[1] = root * 24273 >> 4;
 80034ec:	435a      	muls	r2, r3
 80034ee:	0912      	lsrs	r2, r2, #4
 80034f0:	9200      	str	r2, [sp, #0]
  increments[2] = root * 12561 >> 4;
 80034f2:	f243 1211 	movw	r2, #12561	; 0x3111
 80034f6:	435a      	muls	r2, r3
 80034f8:	0912      	lsrs	r2, r2, #4
 80034fa:	9201      	str	r2, [sp, #4]
  increments[3] = root * 18417 >> 4;
 80034fc:	f244 72f1 	movw	r2, #18417	; 0x47f1
 8003500:	435a      	muls	r2, r3
 8003502:	0912      	lsrs	r2, r2, #4
 8003504:	9202      	str	r2, [sp, #8]
  increments[4] = root * 22452 >> 4;
 8003506:	f245 72b4 	movw	r2, #22452	; 0x57b4
 800350a:	435a      	muls	r2, r3
 800350c:	0912      	lsrs	r2, r2, #4
 800350e:	9203      	str	r2, [sp, #12]
  increments[5] = root * 31858 >> 4;
 8003510:	f647 4272 	movw	r2, #31858	; 0x7c72
 8003514:	4353      	muls	r3, r2
 8003516:	091b      	lsrs	r3, r3, #4
 8003518:	9304      	str	r3, [sp, #16]
  increments[6] = increments[0] * 24;
 800351a:	2318      	movs	r3, #24
 800351c:	4343      	muls	r3, r0

  int32_t xfade = parameter_[1];
  svf_[0].set_frequency(parameter_[0] >> 1);
 800351e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
  increments[6] = increments[0] * 24;
 8003522:	9305      	str	r3, [sp, #20]
  int32_t xfade = parameter_[1];
 8003524:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  svf_[0].set_frequency(parameter_[0] >> 1);
 8003528:	1049      	asrs	r1, r1, #1
  increments[0] = ComputePhaseIncrement(note);
 800352a:	4682      	mov	sl, r0
  svf_[0].set_frequency(parameter_[0] >> 1);
 800352c:	4630      	mov	r0, r6
  int32_t xfade = parameter_[1];
 800352e:	9306      	str	r3, [sp, #24]
  svf_[0].set_frequency(parameter_[0] >> 1);
 8003530:	f7fd fe39 	bl	80011a6 <_ZN6braids3Svf13set_frequencyEs>
  svf_[1].set_frequency(parameter_[0] >> 1);
 8003534:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8003538:	4628      	mov	r0, r5
 800353a:	1049      	asrs	r1, r1, #1
 800353c:	f7fd fe33 	bl	80011a6 <_ZN6braids3Svf13set_frequencyEs>
 8003540:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 800361c <_ZN6braids17DigitalOscillator12RenderCymbalEPKhPsj+0x194>
  
  while (size--) {
 8003544:	f117 37ff 	adds.w	r7, r7, #4294967295	; 0xffffffff
 8003548:	d360      	bcc.n	800360c <_ZN6braids17DigitalOscillator12RenderCymbalEPKhPsj+0x184>
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	9905      	ldr	r1, [sp, #20]
 800354e:	2200      	movs	r2, #0
 8003550:	18cb      	adds	r3, r1, r3
 8003552:	bf28      	it	cs
 8003554:	2201      	movcs	r2, #1
    phase_ += increments[6];
 8003556:	6023      	str	r3, [r4, #0]
    if (phase_ < increments[6]) {
 8003558:	b12a      	cbz	r2, 8003566 <_ZN6braids17DigitalOscillator12RenderCymbalEPKhPsj+0xde>
      hat->rng_state = hat->rng_state * 1664525L + 1013904223L;
 800355a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800355c:	4a2d      	ldr	r2, [pc, #180]	; (8003614 <_ZN6braids17DigitalOscillator12RenderCymbalEPKhPsj+0x18c>)
 800355e:	492e      	ldr	r1, [pc, #184]	; (8003618 <_ZN6braids17DigitalOscillator12RenderCymbalEPKhPsj+0x190>)
 8003560:	fb02 1303 	mla	r3, r2, r3, r1
 8003564:	63a3      	str	r3, [r4, #56]	; 0x38
    }
    hat->phase[0] += increments[0];
    hat->phase[1] += increments[1];
 8003566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003568:	9a00      	ldr	r2, [sp, #0]
    hat->phase[2] += increments[2];
    hat->phase[3] += increments[3];
 800356a:	9902      	ldr	r1, [sp, #8]
    hat->phase[1] += increments[1];
 800356c:	eb02 0c03 	add.w	ip, r2, r3
    hat->phase[2] += increments[2];
 8003570:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003572:	9a01      	ldr	r2, [sp, #4]
    hat->phase[0] += increments[0];
 8003574:	6a20      	ldr	r0, [r4, #32]
    hat->phase[2] += increments[2];
 8003576:	eb03 0b02 	add.w	fp, r3, r2
    hat->phase[3] += increments[3];
 800357a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hat->phase[4] += increments[4];
    hat->phase[5] += increments[5];
 800357c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    hat->phase[3] += increments[3];
 800357e:	eb01 0e02 	add.w	lr, r1, r2
    hat->phase[4] += increments[4];
 8003582:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003584:	9903      	ldr	r1, [sp, #12]
    hat->phase[0] += increments[0];
 8003586:	4450      	add	r0, sl
    hat->phase[4] += increments[4];
 8003588:	440a      	add	r2, r1
    hat->phase[5] += increments[5];
 800358a:	9904      	ldr	r1, [sp, #16]
    hat->phase[3] += increments[3];
 800358c:	f8c4 e02c 	str.w	lr, [r4, #44]	; 0x2c
    hat->phase[5] += increments[5];
 8003590:	440b      	add	r3, r1
 8003592:	4619      	mov	r1, r3
 8003594:	6363      	str	r3, [r4, #52]	; 0x34
    
    int32_t hat_noise = 0;
    hat_noise += hat->phase[0] >> 31;
    hat_noise += hat->phase[1] >> 31;
    hat_noise += hat->phase[2] >> 31;
 8003596:	ea4f 73db 	mov.w	r3, fp, lsr #31
 800359a:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
 800359e:	eb03 73d0 	add.w	r3, r3, r0, lsr #31
    hat_noise += hat->phase[3] >> 31;
 80035a2:	eb03 7ede 	add.w	lr, r3, lr, lsr #31
    hat_noise += hat->phase[4] >> 31;
    hat_noise += hat->phase[5] >> 31;
    hat_noise -= 3;
    hat_noise *= 5461;
    hat_noise = svf_[0].Process(hat_noise);
 80035a6:	f241 5355 	movw	r3, #5461	; 0x1555
    hat->phase[4] += increments[4];
 80035aa:	6322      	str	r2, [r4, #48]	; 0x30
    hat_noise += hat->phase[4] >> 31;
 80035ac:	eb0e 72d2 	add.w	r2, lr, r2, lsr #31
    hat_noise += hat->phase[5] >> 31;
 80035b0:	eb02 71d1 	add.w	r1, r2, r1, lsr #31
    hat_noise -= 3;
 80035b4:	3903      	subs	r1, #3
    hat_noise = svf_[0].Process(hat_noise);
 80035b6:	4359      	muls	r1, r3
    hat->phase[0] += increments[0];
 80035b8:	6220      	str	r0, [r4, #32]
    hat->phase[1] += increments[1];
 80035ba:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
    hat->phase[2] += increments[2];
 80035be:	f8c4 b028 	str.w	fp, [r4, #40]	; 0x28
    hat_noise = svf_[0].Process(hat_noise);
 80035c2:	4630      	mov	r0, r6
 80035c4:	f7fd fdfa 	bl	80011bc <_ZN6braids3Svf7ProcessEl>
 80035c8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80035cc:	4298      	cmp	r0, r3
 80035ce:	bfa8      	it	ge
 80035d0:	4618      	movge	r0, r3
 80035d2:	4548      	cmp	r0, r9
 80035d4:	bfb8      	it	lt
 80035d6:	4648      	movlt	r0, r9
    CLIP(hat_noise)
    
    int32_t noise = (hat->rng_state >> 16) - 32768;
 80035d8:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 80035da:	4683      	mov	fp, r0
 80035dc:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
    noise = svf_[1].Process(noise >> 1);
 80035e0:	1049      	asrs	r1, r1, #1
 80035e2:	4628      	mov	r0, r5
 80035e4:	9307      	str	r3, [sp, #28]
 80035e6:	f7fd fde9 	bl	80011bc <_ZN6braids3Svf7ProcessEl>
 80035ea:	9b07      	ldr	r3, [sp, #28]
 80035ec:	4298      	cmp	r0, r3
 80035ee:	bfa8      	it	ge
 80035f0:	4618      	movge	r0, r3
    CLIP(noise)
    
    *buffer++ = hat_noise + ((noise - hat_noise) * xfade >> 15);
 80035f2:	4548      	cmp	r0, r9
 80035f4:	bfac      	ite	ge
 80035f6:	ebcb 0000 	rsbge	r0, fp, r0
 80035fa:	ebcb 0009 	rsblt	r0, fp, r9
 80035fe:	9b06      	ldr	r3, [sp, #24]
 8003600:	4358      	muls	r0, r3
 8003602:	eb0b 30e0 	add.w	r0, fp, r0, asr #15
 8003606:	f828 0b02 	strh.w	r0, [r8], #2
  while (size--) {
 800360a:	e79b      	b.n	8003544 <_ZN6braids17DigitalOscillator12RenderCymbalEPKhPsj+0xbc>
  }
}
 800360c:	b009      	add	sp, #36	; 0x24
 800360e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003612:	bf00      	nop
 8003614:	0019660d 	.word	0x0019660d
 8003618:	3c6ef35f 	.word	0x3c6ef35f
 800361c:	ffff8001 	.word	0xffff8001

08003620 <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj>:
    size_t size) {
 8003620:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003624:	4617      	mov	r7, r2
  state_.add.current_partial = (first_partial + 3) % kNumBellPartials;
 8003626:	220b      	movs	r2, #11
  size_t first_partial = state_.add.current_partial;
 8003628:	f8d0 50d4 	ldr.w	r5, [r0, #212]	; 0xd4
    size_t size) {
 800362c:	4698      	mov	r8, r3
      state_.add.current_partial + 3,
 800362e:	1cee      	adds	r6, r5, #3
  state_.add.current_partial = (first_partial + 3) % kNumBellPartials;
 8003630:	fbb6 f3f2 	udiv	r3, r6, r2
 8003634:	fb02 6313 	mls	r3, r2, r3, r6
 8003638:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
  if (strike_) {
 800363c:	7f03      	ldrb	r3, [r0, #28]
    size_t size) {
 800363e:	4604      	mov	r4, r0
  if (strike_) {
 8003640:	b9eb      	cbnz	r3, 800367e <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0x5e>
 8003642:	4296      	cmp	r6, r2
 8003644:	bf28      	it	cs
 8003646:	4616      	movcs	r6, r2
    int16_t partial_pitch = pitch_ + kBellPartials[i];
 8003648:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800377c <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0x15c>
  for (size_t i = first_partial; i < last_partial; ++i) {
 800364c:	42ae      	cmp	r6, r5
 800364e:	d927      	bls.n	80036a0 <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0x80>
    int16_t partial_pitch = pitch_ + kBellPartials[i];
 8003650:	8b23      	ldrh	r3, [r4, #24]
 8003652:	f839 1015 	ldrh.w	r1, [r9, r5, lsl #1]
    if (i & 1) {
 8003656:	07ea      	lsls	r2, r5, #31
    int16_t partial_pitch = pitch_ + kBellPartials[i];
 8003658:	4419      	add	r1, r3
 800365a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800365e:	b289      	uxth	r1, r1
 8003660:	f3c3 13cf 	ubfx	r3, r3, #7, #16
      partial_pitch += parameter_[1] >> 7;
 8003664:	bf4c      	ite	mi
 8003666:	18c9      	addmi	r1, r1, r3
      partial_pitch -= parameter_[1] >> 7;
 8003668:	1ac9      	subpl	r1, r1, r3
 800366a:	b209      	sxth	r1, r1
        ComputePhaseIncrement(partial_pitch) << 1;
 800366c:	4620      	mov	r0, r4
 800366e:	f7ff f833 	bl	80026d8 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
    state_.add.partial_phase_increment[i] = \
 8003672:	eb04 0385 	add.w	r3, r4, r5, lsl #2
        ComputePhaseIncrement(partial_pitch) << 1;
 8003676:	0040      	lsls	r0, r0, #1
    state_.add.partial_phase_increment[i] = \
 8003678:	64d8      	str	r0, [r3, #76]	; 0x4c
  for (size_t i = first_partial; i < last_partial; ++i) {
 800367a:	3501      	adds	r5, #1
 800367c:	e7e6      	b.n	800364c <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0x2c>
    for (size_t i = 0; i < kNumBellPartials; ++i) {
 800367e:	2600      	movs	r6, #0
      state_.add.partial_phase[i] = (1L << 30);
 8003680:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003684:	f100 0320 	add.w	r3, r0, #32
      state_.add.partial_amplitude[i] = kBellPartialAmplitudes[i];
 8003688:	4838      	ldr	r0, [pc, #224]	; (800376c <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0x14c>)
 800368a:	f930 1016 	ldrsh.w	r1, [r0, r6, lsl #1]
    for (size_t i = 0; i < kNumBellPartials; ++i) {
 800368e:	3601      	adds	r6, #1
 8003690:	2e0b      	cmp	r6, #11
      state_.add.partial_amplitude[i] = kBellPartialAmplitudes[i];
 8003692:	6599      	str	r1, [r3, #88]	; 0x58
      state_.add.partial_phase[i] = (1L << 30);
 8003694:	f843 2b04 	str.w	r2, [r3], #4
    for (size_t i = 0; i < kNumBellPartials; ++i) {
 8003698:	d1f7      	bne.n	800368a <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0x6a>
    strike_ = false;
 800369a:	2500      	movs	r5, #0
 800369c:	7725      	strb	r5, [r4, #28]
 800369e:	e7d3      	b.n	8003648 <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0x28>
  if (parameter_[0] < 32000) {
 80036a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036a4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80036a8:	da1c      	bge.n	80036e4 <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0xc4>
    for (size_t i = 0; i < kNumBellPartials; ++i) {
 80036aa:	2200      	movs	r2, #0
      int16_t balance = (32767 - parameter_[0]) >> 8;
 80036ac:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 80036b0:	337f      	adds	r3, #127	; 0x7f
 80036b2:	121b      	asrs	r3, r3, #8
      balance = balance * balance >> 7;
 80036b4:	435b      	muls	r3, r3
      int32_t decay_long = kBellPartialDecayLong[i];
 80036b6:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 8003780 <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0x160>
      int32_t decay_short = kBellPartialDecayShort[i];
 80036ba:	4e2d      	ldr	r6, [pc, #180]	; (8003770 <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0x150>)
      balance = balance * balance >> 7;
 80036bc:	11db      	asrs	r3, r3, #7
 80036be:	f104 0578 	add.w	r5, r4, #120	; 0x78
      int32_t decay_long = kBellPartialDecayLong[i];
 80036c2:	f83c e012 	ldrh.w	lr, [ip, r2, lsl #1]
      int32_t decay_short = kBellPartialDecayShort[i];
 80036c6:	f836 0012 	ldrh.w	r0, [r6, r2, lsl #1]
          state_.add.partial_amplitude[i] * decay >> 16;
 80036ca:	6829      	ldr	r1, [r5, #0]
      int32_t decay = decay_long - ((decay_long - decay_short) * balance >> 7);
 80036cc:	ebae 0000 	sub.w	r0, lr, r0
 80036d0:	4358      	muls	r0, r3
 80036d2:	ebae 10e0 	sub.w	r0, lr, r0, asr #7
          state_.add.partial_amplitude[i] * decay >> 16;
 80036d6:	4341      	muls	r1, r0
    for (size_t i = 0; i < kNumBellPartials; ++i) {
 80036d8:	3201      	adds	r2, #1
          state_.add.partial_amplitude[i] * decay >> 16;
 80036da:	1409      	asrs	r1, r1, #16
    for (size_t i = 0; i < kNumBellPartials; ++i) {
 80036dc:	2a0b      	cmp	r2, #11
      state_.add.partial_amplitude[i] = \
 80036de:	f845 1b04 	str.w	r1, [r5], #4
    for (size_t i = 0; i < kNumBellPartials; ++i) {
 80036e2:	d1ee      	bne.n	80036c2 <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0xa2>
 80036e4:	f647 7cff 	movw	ip, #32767	; 0x7fff
  int32_t a = table[phase >> 24];
 80036e8:	4d22      	ldr	r5, [pc, #136]	; (8003774 <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0x154>)
  int16_t previous_sample = state_.add.previous_sample;
 80036ea:	f9b4 10d0 	ldrsh.w	r1, [r4, #208]	; 0xd0
 80036ee:	4e22      	ldr	r6, [pc, #136]	; (8003778 <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0x158>)
 80036f0:	3704      	adds	r7, #4
 80036f2:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
  int32_t b = table[(phase >> 24) + 1];
 80036f6:	f105 0902 	add.w	r9, r5, #2
  while (size--) {
 80036fa:	f1b8 0f00 	cmp.w	r8, #0
 80036fe:	d031      	beq.n	8003764 <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0x144>
    int32_t out = 0;
 8003700:	2000      	movs	r0, #0
 8003702:	f104 0a20 	add.w	sl, r4, #32
      state_.add.partial_phase[i] += state_.add.partial_phase_increment[i];
 8003706:	f85a 2b04 	ldr.w	r2, [sl], #4
 800370a:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    for (size_t i = 0; i < kNumBellPartials; ++i) {
 800370e:	45d6      	cmp	lr, sl
      state_.add.partial_phase[i] += state_.add.partial_phase_increment[i];
 8003710:	4413      	add	r3, r2
 8003712:	f84a 3c04 	str.w	r3, [sl, #-4]
  int32_t a = table[phase >> 24];
 8003716:	ea4f 6b13 	mov.w	fp, r3, lsr #24
 800371a:	f935 201b 	ldrsh.w	r2, [r5, fp, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 800371e:	f939 b01b 	ldrsh.w	fp, [r9, fp, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 8003722:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8003726:	ebab 0b02 	sub.w	fp, fp, r2
 800372a:	fb03 f30b 	mul.w	r3, r3, fp
 800372e:	eb02 4323 	add.w	r3, r2, r3, asr #16
      out += partial * state_.add.partial_amplitude[i] >> 17;
 8003732:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
      int32_t partial = Interpolate824(wav_sine, state_.add.partial_phase[i]);
 8003736:	b21b      	sxth	r3, r3
      out += partial * state_.add.partial_amplitude[i] >> 17;
 8003738:	fb02 f203 	mul.w	r2, r2, r3
 800373c:	eb00 4062 	add.w	r0, r0, r2, asr #17
    for (size_t i = 0; i < kNumBellPartials; ++i) {
 8003740:	d1e1      	bne.n	8003706 <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0xe6>
 8003742:	4560      	cmp	r0, ip
 8003744:	bfa8      	it	ge
 8003746:	4660      	movge	r0, ip
 8003748:	42b0      	cmp	r0, r6
 800374a:	bfb8      	it	lt
 800374c:	4630      	movlt	r0, r6
    *buffer++ = (out + previous_sample) >> 1;
 800374e:	4401      	add	r1, r0
 8003750:	1049      	asrs	r1, r1, #1
 8003752:	f827 1c04 	strh.w	r1, [r7, #-4]
    *buffer++ = out; size--;
 8003756:	b201      	sxth	r1, r0
 8003758:	f827 1c02 	strh.w	r1, [r7, #-2]
 800375c:	f1a8 0802 	sub.w	r8, r8, #2
 8003760:	3704      	adds	r7, #4
  while (size--) {
 8003762:	e7ca      	b.n	80036fa <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0xda>
  state_.add.previous_sample = previous_sample;
 8003764:	f8a4 10d0 	strh.w	r1, [r4, #208]	; 0xd0
}
 8003768:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800376c:	08007c16 	.word	0x08007c16
 8003770:	08007c2c 	.word	0x08007c2c
 8003774:	0800d336 	.word	0x0800d336
 8003778:	ffff8001 	.word	0xffff8001
 800377c:	08007972 	.word	0x08007972
 8003780:	08007be8 	.word	0x08007be8

08003784 <_ZN6braids17DigitalOscillator12ComputeDelayEs>:
  int32_t ref_pitch = midi_pitch;
 8003784:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8003788:	bfa8      	it	ge
 800378a:	f44f 4180 	movge.w	r1, #16384	; 0x4000
  size_t num_shifts = 0;
 800378e:	2300      	movs	r3, #0
uint32_t DigitalOscillator::ComputeDelay(int16_t midi_pitch) {
 8003790:	b510      	push	{r4, lr}
  ref_pitch -= kPitchTableStart;
 8003792:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
  while (ref_pitch < 0) {
 8003796:	2900      	cmp	r1, #0
 8003798:	da03      	bge.n	80037a2 <_ZN6braids17DigitalOscillator12ComputeDelayEs+0x1e>
    ref_pitch += kOctave;
 800379a:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
    ++num_shifts;
 800379e:	3301      	adds	r3, #1
  while (ref_pitch < 0) {
 80037a0:	e7f9      	b.n	8003796 <_ZN6braids17DigitalOscillator12ComputeDelayEs+0x12>
  uint32_t a = lut_oscillator_delays[ref_pitch >> 4];
 80037a2:	4c08      	ldr	r4, [pc, #32]	; (80037c4 <_ZN6braids17DigitalOscillator12ComputeDelayEs+0x40>)
 80037a4:	110a      	asrs	r2, r1, #4
 80037a6:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
  uint32_t b = lut_oscillator_delays[(ref_pitch >> 4) + 1];
 80037aa:	3201      	adds	r2, #1
  uint32_t delay = a + (static_cast<int32_t>(b - a) * (ref_pitch & 0xf) >> 4);  
 80037ac:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80037b0:	f001 010f 	and.w	r1, r1, #15
 80037b4:	1a12      	subs	r2, r2, r0
 80037b6:	4351      	muls	r1, r2
  delay >>= 12 - num_shifts;
 80037b8:	f1c3 030c 	rsb	r3, r3, #12
  uint32_t delay = a + (static_cast<int32_t>(b - a) * (ref_pitch & 0xf) >> 4);  
 80037bc:	eb00 1021 	add.w	r0, r0, r1, asr #4
}
 80037c0:	40d8      	lsrs	r0, r3
 80037c2:	bd10      	pop	{r4, pc}
 80037c4:	0800a3dc 	.word	0x0800a3dc

080037c8 <_ZN6braids17DigitalOscillator10RenderCombEPKhPsj>:
     size_t size) {
 80037c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037cc:	4605      	mov	r5, r0
  int32_t pitch = pitch_ + ((parameter_[0] - 16384) >> 1);
 80037ce:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
     size_t size) {
 80037d2:	469a      	mov	sl, r3
  int32_t pitch = pitch_ + ((parameter_[0] - 16384) >> 1);
 80037d4:	f5a1 4380 	sub.w	r3, r1, #16384	; 0x4000
 80037d8:	f9b0 1018 	ldrsh.w	r1, [r0, #24]
     size_t size) {
 80037dc:	4690      	mov	r8, r2
  int32_t pitch = pitch_ + ((parameter_[0] - 16384) >> 1);
 80037de:	eb01 0163 	add.w	r1, r1, r3, asr #1
  int32_t filtered_pitch = state_.ffm.previous_sample;
 80037e2:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	; 0x24
  int16_t* dl = delay_lines_.comb;
 80037e6:	f500 79ca 	add.w	r9, r0, #404	; 0x194
  filtered_pitch = (15 * filtered_pitch + pitch) >> 4;
 80037ea:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80037ee:	4419      	add	r1, r3
  state_.ffm.previous_sample = filtered_pitch;
 80037f0:	f341 110f 	sbfx	r1, r1, #4, #16
 80037f4:	8481      	strh	r1, [r0, #36]	; 0x24
  uint32_t delay = ComputeDelay(filtered_pitch);
 80037f6:	f7ff ffc5 	bl	8003784 <_ZN6braids17DigitalOscillator12ComputeDelayEs>
  int16_t resonance = (parameter_[1] << 1) - 32768;
 80037fa:	89eb      	ldrh	r3, [r5, #14]
  int32_t a = table[index >> 8];
 80037fc:	492b      	ldr	r1, [pc, #172]	; (80038ac <_ZN6braids17DigitalOscillator10RenderCombEPKhPsj+0xe4>)
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	b29b      	uxth	r3, r3
 8003802:	121c      	asrs	r4, r3, #8
 8003804:	f931 2014 	ldrsh.w	r2, [r1, r4, lsl #1]
  int32_t b = table[(index >> 8) + 1];
 8003808:	3102      	adds	r1, #2
 800380a:	f931 1014 	ldrsh.w	r1, [r1, r4, lsl #1]
  return a + ((b - a) * static_cast<int32_t>(index & 0xff) >> 8);
 800380e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003812:	1a89      	subs	r1, r1, r2
 8003814:	434b      	muls	r3, r1
 8003816:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 800381a:	bf28      	it	cs
 800381c:	f04f 5000 	movcs.w	r0, #536870912	; 0x20000000
 8003820:	eb02 2323 	add.w	r3, r2, r3, asr #8
    int32_t b = dl[(offset - 1) % kCombDelayLength];
 8003824:	f643 7eff 	movw	lr, #16383	; 0x3fff
 8003828:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800382c:	b21b      	sxth	r3, r3
  uint32_t delay_ptr = phase_;
 800382e:	682c      	ldr	r4, [r5, #0]
 8003830:	9301      	str	r3, [sp, #4]
    dl[delay_ptr] = feedback;
 8003832:	4b1f      	ldr	r3, [pc, #124]	; (80038b0 <_ZN6braids17DigitalOscillator10RenderCombEPKhPsj+0xe8>)
  uint32_t delay_integral = delay >> 16;
 8003834:	ea4f 4b10 	mov.w	fp, r0, lsr #16
  delay_ptr =  delay_ptr % kCombDelayLength;
 8003838:	f3c4 040c 	ubfx	r4, r4, #0, #13
    int32_t delayed_sample = a + (((b - a) * (delay_fractional >> 1)) >> 15);
 800383c:	f3c0 004e 	ubfx	r0, r0, #1, #15
  while (size--) {
 8003840:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
 8003844:	d32d      	bcc.n	80038a2 <_ZN6braids17DigitalOscillator10RenderCombEPKhPsj+0xda>
    uint32_t offset = delay_ptr + 2 * kCombDelayLength - delay_integral;
 8003846:	eba4 060b 	sub.w	r6, r4, fp
    int32_t a = dl[offset % kCombDelayLength];
 800384a:	f3c6 070c 	ubfx	r7, r6, #0, #13
    int32_t b = dl[(offset - 1) % kCombDelayLength];
 800384e:	4476      	add	r6, lr
 8003850:	f3c6 060c 	ubfx	r6, r6, #0, #13
    int32_t a = dl[offset % kCombDelayLength];
 8003854:	f939 7017 	ldrsh.w	r7, [r9, r7, lsl #1]
    int32_t b = dl[(offset - 1) % kCombDelayLength];
 8003858:	f939 6016 	ldrsh.w	r6, [r9, r6, lsl #1]
    int32_t in = *buffer;
 800385c:	f9b8 1000 	ldrsh.w	r1, [r8]
    int32_t delayed_sample = a + (((b - a) * (delay_fractional >> 1)) >> 15);
 8003860:	1bf6      	subs	r6, r6, r7
 8003862:	4346      	muls	r6, r0
 8003864:	eb07 37e6 	add.w	r7, r7, r6, asr #15
    int32_t feedback = (delayed_sample * resonance >> 15) + (in >> 1);
 8003868:	9e01      	ldr	r6, [sp, #4]
 800386a:	fb07 fc06 	mul.w	ip, r7, r6
 800386e:	104e      	asrs	r6, r1, #1
 8003870:	eb06 36ec 	add.w	r6, r6, ip, asr #15
 8003874:	4296      	cmp	r6, r2
 8003876:	bfa8      	it	ge
 8003878:	4616      	movge	r6, r2
    int32_t out = (in + (delayed_sample << 1)) >> 1;
 800387a:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 800387e:	1049      	asrs	r1, r1, #1
    dl[delay_ptr] = feedback;
 8003880:	429e      	cmp	r6, r3
 8003882:	bfb8      	it	lt
 8003884:	461e      	movlt	r6, r3
 8003886:	4291      	cmp	r1, r2
 8003888:	bfa8      	it	ge
 800388a:	4611      	movge	r1, r2
    *buffer++ = out;
 800388c:	4299      	cmp	r1, r3
 800388e:	bfb8      	it	lt
 8003890:	4619      	movlt	r1, r3
    dl[delay_ptr] = feedback;
 8003892:	f829 6014 	strh.w	r6, [r9, r4, lsl #1]
    delay_ptr = (delay_ptr + 1) % kCombDelayLength;
 8003896:	3401      	adds	r4, #1
    *buffer++ = out;
 8003898:	f828 1b02 	strh.w	r1, [r8], #2
    delay_ptr = (delay_ptr + 1) % kCombDelayLength;
 800389c:	f3c4 040c 	ubfx	r4, r4, #0, #13
  while (size--) {
 80038a0:	e7ce      	b.n	8003840 <_ZN6braids17DigitalOscillator10RenderCombEPKhPsj+0x78>
  phase_ = delay_ptr;
 80038a2:	602c      	str	r4, [r5, #0]
}
 80038a4:	b003      	add	sp, #12
 80038a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038aa:	bf00      	nop
 80038ac:	0800a560 	.word	0x0800a560
 80038b0:	ffff8001 	.word	0xffff8001

080038b4 <_ZN6braids17DigitalOscillator6RenderEPKhPsj>:
    size_t size) {
 80038b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038b8:	4617      	mov	r7, r2
  if (shape_ >= OSC_SHAPE_FM &&
 80038ba:	7f42      	ldrb	r2, [r0, #29]
    size_t size) {
 80038bc:	4698      	mov	r8, r3
  if (shape_ >= OSC_SHAPE_FM &&
 80038be:	f1a2 030c 	sub.w	r3, r2, #12
 80038c2:	2b02      	cmp	r3, #2
    size_t size) {
 80038c4:	4604      	mov	r4, r0
 80038c6:	460e      	mov	r6, r1
  if (shape_ >= OSC_SHAPE_FM &&
 80038c8:	d810      	bhi.n	80038ec <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0x38>
    uint16_t integral = parameter_[1] >> 8;
 80038ca:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    int16_t a = lut_fm_frequency_quantizer[integral];
 80038ce:	4d3b      	ldr	r5, [pc, #236]	; (80039bc <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0x108>)
 80038d0:	f3c3 200f 	ubfx	r0, r3, #8, #16
 80038d4:	f835 1010 	ldrh.w	r1, [r5, r0, lsl #1]
    int16_t b = lut_fm_frequency_quantizer[integral + 1];
 80038d8:	3001      	adds	r0, #1
    parameter_[1] = a + ((b - a) * fractional >> 8);
 80038da:	f935 0010 	ldrsh.w	r0, [r5, r0, lsl #1]
 80038de:	b20d      	sxth	r5, r1
 80038e0:	1b40      	subs	r0, r0, r5
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	4343      	muls	r3, r0
 80038e6:	eb01 2323 	add.w	r3, r1, r3, asr #8
 80038ea:	81e3      	strh	r3, [r4, #14]
  RenderFn fn = fn_table_[shape_];
 80038ec:	4b34      	ldr	r3, [pc, #208]	; (80039c0 <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0x10c>)
 80038ee:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 80038f2:	f853 9032 	ldr.w	r9, [r3, r2, lsl #3]
  if (shape_ != previous_shape_) {
 80038f6:	7fa3      	ldrb	r3, [r4, #30]
  RenderFn fn = fn_table_[shape_];
 80038f8:	f8d1 a004 	ldr.w	sl, [r1, #4]
  if (shape_ != previous_shape_) {
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d034      	beq.n	800396a <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0xb6>

  DigitalOscillator() { }
  ~DigitalOscillator() { }
  
  inline void Init() {
    memset(&state_, 0, sizeof(state_));
 8003900:	22c4      	movs	r2, #196	; 0xc4
 8003902:	2100      	movs	r1, #0
 8003904:	f104 0020 	add.w	r0, r4, #32
 8003908:	f003 fff1 	bl	80078ee <memset>
    decay_ = 4093;
 800390c:	2500      	movs	r5, #0
 800390e:	f640 73fd 	movw	r3, #4093	; 0xffd
    pulse_[0].Init();
    pulse_[1].Init();
    pulse_[2].Init();
    pulse_[3].Init();
    svf_[0].Init();
 8003912:	f504 709a 	add.w	r0, r4, #308	; 0x134
 8003916:	e9c4 5339 	strd	r5, r3, [r4, #228]	; 0xe4
 800391a:	e9c4 533e 	strd	r5, r3, [r4, #248]	; 0xf8
 800391e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8003922:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    state_ = 0;
 8003926:	e9c4 553b 	strd	r5, r5, [r4, #236]	; 0xec
    counter_ = 0;
 800392a:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    state_ = 0;
 800392e:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    delay_ = 0;
 8003932:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
    counter_ = 0;
 8003936:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
    state_ = 0;
 800393a:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
    delay_ = 0;
 800393e:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
    counter_ = 0;
 8003942:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
    state_ = 0;
 8003946:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 800394a:	f7fd fc1e 	bl	800118a <_ZN6braids3Svf4InitEv>
    svf_[1].Init();
 800394e:	f504 70aa 	add.w	r0, r4, #340	; 0x154
 8003952:	f7fd fc1a 	bl	800118a <_ZN6braids3Svf4InitEv>
    svf_[2].Init();
 8003956:	f504 70ba 	add.w	r0, r4, #372	; 0x174
 800395a:	f7fd fc16 	bl	800118a <_ZN6braids3Svf4InitEv>
    phase_ = 0;
    strike_ = true;
 800395e:	2301      	movs	r3, #1
 8003960:	7723      	strb	r3, [r4, #28]
    init_ = true;
 8003962:	76e3      	strb	r3, [r4, #27]
    previous_shape_ = shape_;
 8003964:	7f63      	ldrb	r3, [r4, #29]
    phase_ = 0;
 8003966:	6025      	str	r5, [r4, #0]
 8003968:	77a3      	strb	r3, [r4, #30]
  phase_increment_ = ComputePhaseIncrement(pitch_);
 800396a:	f9b4 5018 	ldrsh.w	r5, [r4, #24]
 800396e:	4620      	mov	r0, r4
 8003970:	4629      	mov	r1, r5
 8003972:	f7fe feb1 	bl	80026d8 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
  delay_ = ComputeDelay(pitch_);
 8003976:	4629      	mov	r1, r5
  phase_increment_ = ComputePhaseIncrement(pitch_);
 8003978:	6060      	str	r0, [r4, #4]
  delay_ = ComputeDelay(pitch_);
 800397a:	4620      	mov	r0, r4
 800397c:	f7ff ff02 	bl	8003784 <_ZN6braids17DigitalOscillator12ComputeDelayEs>
  if (pitch_ > kHighestNote) {
 8003980:	f5b5 4f8c 	cmp.w	r5, #17920	; 0x4600
  delay_ = ComputeDelay(pitch_);
 8003984:	60a0      	str	r0, [r4, #8]
  if (pitch_ > kHighestNote) {
 8003986:	dd14      	ble.n	80039b2 <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0xfe>
    pitch_ = kHighestNote;
 8003988:	f44f 438c 	mov.w	r3, #17920	; 0x4600
    pitch_ = 0;
 800398c:	8323      	strh	r3, [r4, #24]
  (this->*fn)(sync, buffer, size);
 800398e:	ea4f 036a 	mov.w	r3, sl, asr #1
 8003992:	f01a 0f01 	tst.w	sl, #1
 8003996:	eb04 0003 	add.w	r0, r4, r3
 800399a:	bf18      	it	ne
 800399c:	58e3      	ldrne	r3, [r4, r3]
 800399e:	463a      	mov	r2, r7
 80039a0:	bf18      	it	ne
 80039a2:	f853 9009 	ldrne.w	r9, [r3, r9]
 80039a6:	4631      	mov	r1, r6
 80039a8:	4643      	mov	r3, r8
 80039aa:	46cc      	mov	ip, r9
}
 80039ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  (this->*fn)(sync, buffer, size);
 80039b0:	4760      	bx	ip
  } else if (pitch_ < 0) {
 80039b2:	2d00      	cmp	r5, #0
 80039b4:	daeb      	bge.n	800398e <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0xda>
    pitch_ = 0;
 80039b6:	2300      	movs	r3, #0
 80039b8:	e7e8      	b.n	800398c <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0xd8>
 80039ba:	bf00      	nop
 80039bc:	0800c806 	.word	0x0800c806
 80039c0:	20000048 	.word	0x20000048

080039c4 <_ZN6braids17DigitalOscillator27InterpolateFormantParameterEPA5_A5_Ksssh>:
  int16_t a = table[x_index][y_index][formant];
 80039c4:	2032      	movs	r0, #50	; 0x32
    uint8_t formant) {
 80039c6:	b5f0      	push	{r4, r5, r6, r7, lr}
  int16_t a = table[x_index][y_index][formant];
 80039c8:	f3c2 344f 	ubfx	r4, r2, #13, #16
 80039cc:	4360      	muls	r0, r4
    uint8_t formant) {
 80039ce:	f89d c014 	ldrb.w	ip, [sp, #20]
 80039d2:	f3c3 344f 	ubfx	r4, r3, #13, #16
  int16_t a = table[x_index][y_index][formant];
 80039d6:	180f      	adds	r7, r1, r0
 80039d8:	eb04 0684 	add.w	r6, r4, r4, lsl #2
  int16_t b = table[x_index + 1][y_index][formant];
 80039dc:	3032      	adds	r0, #50	; 0x32
  int16_t c = table[x_index][y_index + 1][formant];
 80039de:	3401      	adds	r4, #1
  int16_t a = table[x_index][y_index][formant];
 80039e0:	4466      	add	r6, ip
  int16_t b = table[x_index + 1][y_index][formant];
 80039e2:	4408      	add	r0, r1
  int16_t c = table[x_index][y_index + 1][formant];
 80039e4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  int16_t a = table[x_index][y_index][formant];
 80039e8:	f937 5016 	ldrsh.w	r5, [r7, r6, lsl #1]
  int16_t c = table[x_index][y_index + 1][formant];
 80039ec:	4464      	add	r4, ip
  a = a + ((b - a) * x_mix >> 16);
 80039ee:	f930 6016 	ldrsh.w	r6, [r0, r6, lsl #1]
  int16_t c = table[x_index][y_index + 1][formant];
 80039f2:	f937 1014 	ldrsh.w	r1, [r7, r4, lsl #1]
  c = c + ((d - c) * x_mix >> 16);
 80039f6:	f930 0014 	ldrsh.w	r0, [r0, r4, lsl #1]
  uint16_t x_mix = x << 3;
 80039fa:	00d2      	lsls	r2, r2, #3
  a = a + ((b - a) * x_mix >> 16);
 80039fc:	b292      	uxth	r2, r2
 80039fe:	1b76      	subs	r6, r6, r5
 8003a00:	4356      	muls	r6, r2
  c = c + ((d - c) * x_mix >> 16);
 8003a02:	1a40      	subs	r0, r0, r1
 8003a04:	4342      	muls	r2, r0
  a = a + ((b - a) * x_mix >> 16);
 8003a06:	eb05 4526 	add.w	r5, r5, r6, asr #16
 8003a0a:	b2ad      	uxth	r5, r5
  c = c + ((d - c) * x_mix >> 16);
 8003a0c:	eb01 4222 	add.w	r2, r1, r2, asr #16
  return a + ((c - a) * y_mix >> 16);
 8003a10:	b228      	sxth	r0, r5
 8003a12:	b212      	sxth	r2, r2
 8003a14:	1a12      	subs	r2, r2, r0
  uint16_t y_mix = y << 3;
 8003a16:	00d8      	lsls	r0, r3, #3
  return a + ((c - a) * y_mix >> 16);
 8003a18:	b280      	uxth	r0, r0
 8003a1a:	4350      	muls	r0, r2
 8003a1c:	eb05 4020 	add.w	r0, r5, r0, asr #16
}
 8003a20:	b200      	sxth	r0, r0
 8003a22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a24 <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj>:
  size_t size) {
 8003a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a28:	4604      	mov	r4, r0
  for (size_t i = 0; i < kNumFormants; ++i) {
 8003a2a:	2600      	movs	r6, #0
  size_t size) {
 8003a2c:	461d      	mov	r5, r3
    if (init_) {
 8003a2e:	7ec3      	ldrb	r3, [r0, #27]
  size_t size) {
 8003a30:	b09b      	sub	sp, #108	; 0x6c
    int32_t frequency = InterpolateFormantParameter(
 8003a32:	f9b0 a00e 	ldrsh.w	sl, [r0, #14]
 8003a36:	f9b0 b00c 	ldrsh.w	fp, [r0, #12]
  uint32_t a = table[phase >> 24];
 8003a3a:	4f6a      	ldr	r7, [pc, #424]	; (8003be4 <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0x1c0>)
  size_t size) {
 8003a3c:	9208      	str	r2, [sp, #32]
    if (init_) {
 8003a3e:	9304      	str	r3, [sp, #16]
 8003a40:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8003a44:	f10d 0954 	add.w	r9, sp, #84	; 0x54
    int32_t frequency = InterpolateFormantParameter(
 8003a48:	b2f3      	uxtb	r3, r6
 8003a4a:	9303      	str	r3, [sp, #12]
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	4652      	mov	r2, sl
 8003a50:	465b      	mov	r3, fp
 8003a52:	4965      	ldr	r1, [pc, #404]	; (8003be8 <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0x1c4>)
 8003a54:	4620      	mov	r0, r4
 8003a56:	f7ff ffb5 	bl	80039c4 <_ZN6braids17DigitalOscillator27InterpolateFormantParameterEPA5_A5_Ksssh>
        i) + (12 << 7);
 8003a5a:	f500 60c0 	add.w	r0, r0, #1536	; 0x600
    svf_f[i] = Interpolate824(lut_svf_cutoff, frequency << 17);
 8003a5e:	0440      	lsls	r0, r0, #17
  uint32_t b = table[(phase >> 24) + 1];
 8003a60:	4962      	ldr	r1, [pc, #392]	; (8003bec <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0x1c8>)
  uint32_t a = table[phase >> 24];
 8003a62:	0e02      	lsrs	r2, r0, #24
 8003a64:	f837 3012 	ldrh.w	r3, [r7, r2, lsl #1]
  uint32_t b = table[(phase >> 24) + 1];
 8003a68:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 8003a6c:	0a00      	lsrs	r0, r0, #8
 8003a6e:	1ad2      	subs	r2, r2, r3
 8003a70:	b280      	uxth	r0, r0
 8003a72:	4350      	muls	r0, r2
 8003a74:	eb03 4010 	add.w	r0, r3, r0, lsr #16
 8003a78:	ab0d      	add	r3, sp, #52	; 0x34
 8003a7a:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
    amplitudes[i] = InterpolateFormantParameter(
 8003a7e:	9b03      	ldr	r3, [sp, #12]
 8003a80:	4652      	mov	r2, sl
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	495a      	ldr	r1, [pc, #360]	; (8003bf0 <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0x1cc>)
 8003a86:	465b      	mov	r3, fp
 8003a88:	4620      	mov	r0, r4
 8003a8a:	f7ff ff9b 	bl	80039c4 <_ZN6braids17DigitalOscillator27InterpolateFormantParameterEPA5_A5_Ksssh>
 8003a8e:	ab0a      	add	r3, sp, #40	; 0x28
 8003a90:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
    if (init_) {
 8003a94:	9b04      	ldr	r3, [sp, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 8088 	beq.w	8003bac <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0x188>
      svf_lp[i] = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f848 3026 	str.w	r3, [r8, r6, lsl #2]
      svf_bp[i] = state_.fof.svf_bp[i];
 8003aa2:	f849 3026 	str.w	r3, [r9, r6, lsl #2]
  for (size_t i = 0; i < kNumFormants; ++i) {
 8003aa6:	3601      	adds	r6, #1
 8003aa8:	2e05      	cmp	r6, #5
 8003aaa:	d1cd      	bne.n	8003a48 <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0x24>
  if (init_) {
 8003aac:	9b04      	ldr	r3, [sp, #16]
 8003aae:	b10b      	cbz	r3, 8003ab4 <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0x90>
    init_ = false;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	76e3      	strb	r3, [r4, #27]
      CLIP(svf_lp[i])
 8003ab4:	f647 79ff 	movw	r9, #32767	; 0x7fff
  uint32_t increment = phase_increment_ << 1;
 8003ab8:	6863      	ldr	r3, [r4, #4]
  uint32_t phase = phase_;
 8003aba:	6820      	ldr	r0, [r4, #0]
  uint32_t increment = phase_increment_ << 1;
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	9305      	str	r3, [sp, #20]
      uint32_t t = phase / (increment >> 16);
 8003ac0:	0c1b      	lsrs	r3, r3, #16
 8003ac2:	9306      	str	r3, [sp, #24]
      out += svf_bp[i] * amplitudes[0] >> 17;
 8003ac4:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
  int32_t previous_sample = state_.fof.previous_sample;
 8003ac8:	f9b4 a024 	ldrsh.w	sl, [r4, #36]	; 0x24
      out += svf_bp[i] * amplitudes[0] >> 17;
 8003acc:	9307      	str	r3, [sp, #28]
 8003ace:	9b08      	ldr	r3, [sp, #32]
  int32_t next_saw_sample = state_.fof.next_saw_sample;
 8003ad0:	6a26      	ldr	r6, [r4, #32]
      CLIP(svf_lp[i])
 8003ad2:	f8df b120 	ldr.w	fp, [pc, #288]	; 8003bf4 <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0x1d0>
 8003ad6:	f103 0804 	add.w	r8, r3, #4
  while (size) {
 8003ada:	2d00      	cmp	r5, #0
 8003adc:	d06d      	beq.n	8003bba <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0x196>
 8003ade:	9b05      	ldr	r3, [sp, #20]
 8003ae0:	18c2      	adds	r2, r0, r3
 8003ae2:	bf2c      	ite	cs
 8003ae4:	2301      	movcs	r3, #1
 8003ae6:	2300      	movcc	r3, #0
    phase += increment;
 8003ae8:	4610      	mov	r0, r2
    if (phase < increment) {
 8003aea:	b183      	cbz	r3, 8003b0e <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0xea>
      uint32_t t = phase / (increment >> 16);
 8003aec:	9b06      	ldr	r3, [sp, #24]
 8003aee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af6:	428b      	cmp	r3, r1
 8003af8:	bf28      	it	cs
 8003afa:	460b      	movcs	r3, r1
      this_saw_sample -= static_cast<int32_t>(t * t >> 18);
 8003afc:	fb03 f103 	mul.w	r1, r3, r3
      t = 65535 - t;
 8003b00:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003b04:	33ff      	adds	r3, #255	; 0xff
      next_saw_sample -= -static_cast<int32_t>(t * t >> 18);
 8003b06:	435b      	muls	r3, r3
      this_saw_sample -= static_cast<int32_t>(t * t >> 18);
 8003b08:	eba6 4691 	sub.w	r6, r6, r1, lsr #18
      next_saw_sample -= -static_cast<int32_t>(t * t >> 18);
 8003b0c:	0c9b      	lsrs	r3, r3, #18
    for (int32_t i = 0; i < 5; ++i) {
 8003b0e:	2700      	movs	r7, #0
    next_saw_sample += phase >> 17;
 8003b10:	eb03 4352 	add.w	r3, r3, r2, lsr #17
 8003b14:	9308      	str	r3, [sp, #32]
 8003b16:	f10d 0c50 	add.w	ip, sp, #80	; 0x50
 8003b1a:	f10d 0e3c 	add.w	lr, sp, #60	; 0x3c
    int32_t out = 0;
 8003b1e:	9703      	str	r7, [sp, #12]
      int32_t notch = in - (svf_bp[i] >> 6);
 8003b20:	f85c 3f04 	ldr.w	r3, [ip, #4]!
 8003b24:	eba6 12a3 	sub.w	r2, r6, r3, asr #6
 8003b28:	9209      	str	r2, [sp, #36]	; 0x24
      svf_lp[i] += svf_f[i] * svf_bp[i] >> 15;
 8003b2a:	aa0d      	add	r2, sp, #52	; 0x34
 8003b2c:	f932 2017 	ldrsh.w	r2, [r2, r7, lsl #1]
    for (int32_t i = 0; i < 5; ++i) {
 8003b30:	3701      	adds	r7, #1
      svf_lp[i] += svf_f[i] * svf_bp[i] >> 15;
 8003b32:	9204      	str	r2, [sp, #16]
 8003b34:	435a      	muls	r2, r3
 8003b36:	4611      	mov	r1, r2
 8003b38:	f85e 2f04 	ldr.w	r2, [lr, #4]!
 8003b3c:	eb02 32e1 	add.w	r2, r2, r1, asr #15
 8003b40:	455a      	cmp	r2, fp
 8003b42:	bfb8      	it	lt
 8003b44:	465a      	movlt	r2, fp
      CLIP(svf_lp[i])
 8003b46:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003b4a:	bfa8      	it	ge
 8003b4c:	464a      	movge	r2, r9
      int32_t hp = notch - svf_lp[i];
 8003b4e:	9909      	ldr	r1, [sp, #36]	; 0x24
      CLIP(svf_lp[i])
 8003b50:	f8ce 2000 	str.w	r2, [lr]
      int32_t hp = notch - svf_lp[i];
 8003b54:	1a8a      	subs	r2, r1, r2
      svf_bp[i] += svf_f[i] * hp >> 15;
 8003b56:	9904      	ldr	r1, [sp, #16]
 8003b58:	434a      	muls	r2, r1
 8003b5a:	eb03 32e2 	add.w	r2, r3, r2, asr #15
 8003b5e:	455a      	cmp	r2, fp
 8003b60:	bfb8      	it	lt
 8003b62:	465a      	movlt	r2, fp
      CLIP(svf_bp[i])
 8003b64:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003b68:	bfa8      	it	ge
 8003b6a:	464a      	movge	r2, r9
      out += svf_bp[i] * amplitudes[0] >> 17;
 8003b6c:	4613      	mov	r3, r2
      CLIP(svf_bp[i])
 8003b6e:	f8cc 2000 	str.w	r2, [ip]
      out += svf_bp[i] * amplitudes[0] >> 17;
 8003b72:	9a07      	ldr	r2, [sp, #28]
    for (int32_t i = 0; i < 5; ++i) {
 8003b74:	2f05      	cmp	r7, #5
      out += svf_bp[i] * amplitudes[0] >> 17;
 8003b76:	fb03 f302 	mul.w	r3, r3, r2
 8003b7a:	9a03      	ldr	r2, [sp, #12]
 8003b7c:	eb02 4363 	add.w	r3, r2, r3, asr #17
 8003b80:	9303      	str	r3, [sp, #12]
    for (int32_t i = 0; i < 5; ++i) {
 8003b82:	d1cd      	bne.n	8003b20 <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0xfc>
 8003b84:	454b      	cmp	r3, r9
 8003b86:	bfa8      	it	ge
 8003b88:	464b      	movge	r3, r9
 8003b8a:	455b      	cmp	r3, fp
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	bfb8      	it	lt
 8003b90:	4659      	movlt	r1, fp
    *buffer++ = (out + previous_sample) >> 1;
 8003b92:	eb01 030a 	add.w	r3, r1, sl
 8003b96:	105b      	asrs	r3, r3, #1
 8003b98:	f828 3c04 	strh.w	r3, [r8, #-4]
    *buffer++ = out;
 8003b9c:	f828 1c02 	strh.w	r1, [r8, #-2]
    size -= 2;
 8003ba0:	3d02      	subs	r5, #2
 8003ba2:	f108 0804 	add.w	r8, r8, #4
    next_saw_sample += phase >> 17;
 8003ba6:	9e08      	ldr	r6, [sp, #32]
    previous_sample = out;
 8003ba8:	468a      	mov	sl, r1
  while (size) {
 8003baa:	e796      	b.n	8003ada <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0xb6>
 8003bac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
      svf_lp[i] = state_.fof.svf_lp[i];
 8003bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      svf_bp[i] = state_.fof.svf_bp[i];
 8003bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      svf_lp[i] = state_.fof.svf_lp[i];
 8003bb4:	f848 2026 	str.w	r2, [r8, r6, lsl #2]
 8003bb8:	e773      	b.n	8003aa2 <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0x7e>
  phase_ = phase;
 8003bba:	6020      	str	r0, [r4, #0]
  state_.fof.next_saw_sample = next_saw_sample;
 8003bbc:	6226      	str	r6, [r4, #32]
  state_.fof.previous_sample = previous_sample;
 8003bbe:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
    state_.fof.svf_lp[i] = svf_lp[i];
 8003bc2:	a910      	add	r1, sp, #64	; 0x40
 8003bc4:	3428      	adds	r4, #40	; 0x28
    state_.fof.svf_bp[i] = svf_bp[i];
 8003bc6:	aa15      	add	r2, sp, #84	; 0x54
    state_.fof.svf_lp[i] = svf_lp[i];
 8003bc8:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 8003bcc:	f844 3b04 	str.w	r3, [r4], #4
    state_.fof.svf_bp[i] = svf_bp[i];
 8003bd0:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
  for (size_t i = 0; i < kNumFormants; ++i) {
 8003bd4:	3501      	adds	r5, #1
 8003bd6:	2d05      	cmp	r5, #5
    state_.fof.svf_bp[i] = svf_bp[i];
 8003bd8:	6123      	str	r3, [r4, #16]
  for (size_t i = 0; i < kNumFormants; ++i) {
 8003bda:	d1f5      	bne.n	8003bc8 <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0x1a4>
}
 8003bdc:	b01b      	add	sp, #108	; 0x6c
 8003bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003be2:	bf00      	nop
 8003be4:	080086de 	.word	0x080086de
 8003be8:	08007abe 	.word	0x08007abe
 8003bec:	080086e0 	.word	0x080086e0
 8003bf0:	080079c4 	.word	0x080079c4
 8003bf4:	ffff8001 	.word	0xffff8001

08003bf8 <_ZN6braids15MacroOscillator10RenderBuzzEPKhPsj>:
}

void MacroOscillator::RenderBuzz(
    const uint8_t* sync,
    int16_t* buffer,
    size_t size) {
 8003bf8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  analog_oscillator_[0].set_parameter(parameter_[0]);
 8003bfc:	f9b0 7000 	ldrsh.w	r7, [r0]
    size_t size) {
 8003c00:	4604      	mov	r4, r0
    parameter_ = parameter;
 8003c02:	f8a0 7066 	strh.w	r7, [r0, #102]	; 0x66
    shape_ = shape;
 8003c06:	2008      	movs	r0, #8
 8003c08:	461e      	mov	r6, r3
 8003c0a:	4688      	mov	r8, r1
 8003c0c:	4615      	mov	r5, r2
  analog_oscillator_[0].set_shape(OSC_SHAPE_BUZZ);
  analog_oscillator_[0].set_pitch(pitch_);
 8003c0e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8003c12:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
 8003c16:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94

  analog_oscillator_[1].set_parameter(parameter_[0]);
  analog_oscillator_[1].set_shape(OSC_SHAPE_BUZZ);
  analog_oscillator_[1].set_pitch(pitch_ + (parameter_[1] >> 8));
 8003c1a:	f994 0003 	ldrsb.w	r0, [r4, #3]
    pitch_ = pitch;
 8003c1e:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8003c22:	4403      	add	r3, r0
    parameter_ = parameter;
 8003c24:	f8a4 7086 	strh.w	r7, [r4, #134]	; 0x86
    pitch_ = pitch;
 8003c28:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e

  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8003c2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003c30:	2300      	movs	r3, #0
 8003c32:	9600      	str	r6, [sp, #0]
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 8003c34:	f104 0722 	add.w	r7, r4, #34	; 0x22
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8003c38:	f7fc fffe 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 8003c3c:	463a      	mov	r2, r7
 8003c3e:	9600      	str	r6, [sp, #0]
 8003c40:	2300      	movs	r3, #0
 8003c42:	4641      	mov	r1, r8
 8003c44:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8003c48:	f7fc fff6 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
 8003c4c:	1eaa      	subs	r2, r5, #2
  int16_t* temp_buffer = temp_buffer_;
  while (size--) {
 8003c4e:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 8003c52:	d309      	bcc.n	8003c68 <_ZN6braids15MacroOscillator10RenderBuzzEPKhPsj+0x70>
    *buffer >>= 1;
 8003c54:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 8003c58:	105b      	asrs	r3, r3, #1
 8003c5a:	8013      	strh	r3, [r2, #0]
    *buffer += *temp_buffer >> 1;
 8003c5c:	f937 1b02 	ldrsh.w	r1, [r7], #2
 8003c60:	eb03 0361 	add.w	r3, r3, r1, asr #1
 8003c64:	8013      	strh	r3, [r2, #0]
  while (size--) {
 8003c66:	e7f2      	b.n	8003c4e <_ZN6braids15MacroOscillator10RenderBuzzEPKhPsj+0x56>
    buffer++;
    temp_buffer++;
  }
}
 8003c68:	b002      	add	sp, #8
 8003c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003c6e <_ZN6braids15MacroOscillator10RenderCSawEPKhPsj>:
    size_t size) {
 8003c6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c70:	461d      	mov	r5, r3
 8003c72:	8903      	ldrh	r3, [r0, #8]
 8003c74:	4604      	mov	r4, r0
 8003c76:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
    shape_ = shape;
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    parameter_ = parameter;
 8003c80:	8803      	ldrh	r3, [r0, #0]
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8003c82:	3058      	adds	r0, #88	; 0x58
 8003c84:	81c3      	strh	r3, [r0, #14]
    aux_parameter_ = parameter;
 8003c86:	f830 3c56 	ldrh.w	r3, [r0, #-86]
    size_t size) {
 8003c8a:	4616      	mov	r6, r2
 8003c8c:	8243      	strh	r3, [r0, #18]
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8003c8e:	2300      	movs	r3, #0
 8003c90:	9500      	str	r5, [sp, #0]
 8003c92:	f7fc ffd1 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
    *buffer++ = (s * 13) >> 3;
 8003c96:	210d      	movs	r1, #13
  int16_t shift = -(parameter_[1] - 32767) >> 4;
 8003c98:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8003c9c:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 8003ca0:	337f      	adds	r3, #127	; 0x7f
 8003ca2:	111a      	asrs	r2, r3, #4
  while (size--) {
 8003ca4:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 8003ca8:	d307      	bcc.n	8003cba <_ZN6braids15MacroOscillator10RenderCSawEPKhPsj+0x4c>
    int32_t s = *buffer + shift;
 8003caa:	f9b6 3000 	ldrsh.w	r3, [r6]
 8003cae:	4413      	add	r3, r2
    *buffer++ = (s * 13) >> 3;
 8003cb0:	434b      	muls	r3, r1
 8003cb2:	10db      	asrs	r3, r3, #3
 8003cb4:	f826 3b02 	strh.w	r3, [r6], #2
  while (size--) {
 8003cb8:	e7f4      	b.n	8003ca4 <_ZN6braids15MacroOscillator10RenderCSawEPKhPsj+0x36>
}
 8003cba:	b002      	add	sp, #8
 8003cbc:	bd70      	pop	{r4, r5, r6, pc}

08003cbe <_ZN6braids15MacroOscillator15RenderSawSquareEPKhPsj>:
    size_t size) {
 8003cbe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cc2:	461d      	mov	r5, r3
  analog_oscillator_[0].set_parameter(parameter_[0]);
 8003cc4:	f9b0 3000 	ldrsh.w	r3, [r0]
    size_t size) {
 8003cc8:	4604      	mov	r4, r0
    parameter_ = parameter;
 8003cca:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
 8003cce:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
  analog_oscillator_[0].set_pitch(pitch_);
 8003cd2:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    size_t size) {
 8003cd6:	4688      	mov	r8, r1
    pitch_ = pitch;
 8003cd8:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
 8003cdc:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
    shape_ = shape;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
 8003ce6:	2303      	movs	r3, #3
  int16_t* square_buffer = temp_buffer_;
 8003ce8:	f100 0722 	add.w	r7, r0, #34	; 0x22
 8003cec:	f880 3094 	strb.w	r3, [r0, #148]	; 0x94
  analog_oscillator_[0].Render(sync, saw_buffer, NULL, size);
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	3058      	adds	r0, #88	; 0x58
 8003cf4:	9500      	str	r5, [sp, #0]
    size_t size) {
 8003cf6:	4616      	mov	r6, r2
  analog_oscillator_[0].Render(sync, saw_buffer, NULL, size);
 8003cf8:	f7fc ff9e 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync, square_buffer, NULL, size);
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	463a      	mov	r2, r7
 8003d00:	4641      	mov	r1, r8
 8003d02:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8003d06:	9500      	str	r5, [sp, #0]
 8003d08:	f7fc ff96 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  BEGIN_INTERPOLATE_PARAMETER_1
 8003d0c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8003d10:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
          *square_buffer++) * 148 >> 8;
 8003d14:	f04f 0e94 	mov.w	lr, #148	; 0x94
  BEGIN_INTERPOLATE_PARAMETER_1
 8003d18:	1a13      	subs	r3, r2, r0
 8003d1a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003d1e:	fbb2 f2f5 	udiv	r2, r2, r5
 8003d22:	435a      	muls	r2, r3
  return (a * (65535 - balance) + b * balance) >> 16;
 8003d24:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8003d28:	4611      	mov	r1, r2
  while (size--) {
 8003d2a:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 8003d2e:	d316      	bcc.n	8003d5e <_ZN6braids15MacroOscillator15RenderSawSquareEPKhPsj+0xa0>
    INTERPOLATE_PARAMETER_1
 8003d30:	eb00 33e1 	add.w	r3, r0, r1, asr #15
    uint16_t balance = parameter_1 << 1;
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	fa1f f883 	uxth.w	r8, r3
    int16_t attenuated_square = static_cast<int32_t>(
 8003d3a:	f937 3b02 	ldrsh.w	r3, [r7], #2
 8003d3e:	f936 ab02 	ldrsh.w	sl, [r6], #2
          *square_buffer++) * 148 >> 8;
 8003d42:	fb0e f303 	mul.w	r3, lr, r3
 8003d46:	ebac 0908 	sub.w	r9, ip, r8
 8003d4a:	fb09 f90a 	mul.w	r9, r9, sl
 8003d4e:	121b      	asrs	r3, r3, #8
 8003d50:	fb08 9303 	mla	r3, r8, r3, r9
 8003d54:	141b      	asrs	r3, r3, #16
 8003d56:	f826 3c02 	strh.w	r3, [r6, #-2]
 8003d5a:	4411      	add	r1, r2
  while (size--) {
 8003d5c:	e7e5      	b.n	8003d2a <_ZN6braids15MacroOscillator15RenderSawSquareEPKhPsj+0x6c>
  END_INTERPOLATE_PARAMETER_1
 8003d5e:	8863      	ldrh	r3, [r4, #2]
 8003d60:	80e3      	strh	r3, [r4, #6]
}
 8003d62:	b002      	add	sp, #8
 8003d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003d68 <_ZN6braids15MacroOscillator9RenderSubEPKhPsj>:
    size_t size) {
 8003d68:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d6c:	461d      	mov	r5, r3
  AnalogOscillatorShape base_shape = shape_ == MACRO_OSC_SHAPE_SQUARE_SUB ?
 8003d6e:	f244 234c 	movw	r3, #16972	; 0x424c
    size_t size) {
 8003d72:	4604      	mov	r4, r0
  AnalogOscillatorShape base_shape = shape_ == MACRO_OSC_SHAPE_SQUARE_SUB ?
 8003d74:	5cc3      	ldrb	r3, [r0, r3]
    parameter_ = parameter;
 8003d76:	8800      	ldrh	r0, [r0, #0]
 8003d78:	2b05      	cmp	r3, #5
 8003d7a:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
    shape_ = shape;
 8003d7e:	f04f 0003 	mov.w	r0, #3
 8003d82:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
  int16_t octave = parameter_[1] < 16384 ? (24 << 7) : (12 << 7);
 8003d86:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
  AnalogOscillatorShape base_shape = shape_ == MACRO_OSC_SHAPE_SQUARE_SUB ?
 8003d8a:	bf14      	ite	ne
 8003d8c:	2301      	movne	r3, #1
 8003d8e:	2303      	moveq	r3, #3
  int16_t octave = parameter_[1] < 16384 ? (24 << 7) : (12 << 7);
 8003d90:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8003d94:	bfac      	ite	ge
 8003d96:	f44f 60c0 	movge.w	r0, #1536	; 0x600
 8003d9a:	f44f 6040 	movlt.w	r0, #3072	; 0xc00
    parameter_ = parameter;
 8003d9e:	2700      	movs	r7, #0
    size_t size) {
 8003da0:	4689      	mov	r9, r1
    shape_ = shape;
 8003da2:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  analog_oscillator_[0].set_pitch(pitch_);
 8003da6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    parameter_ = parameter;
 8003daa:	f8a4 7086 	strh.w	r7, [r4, #134]	; 0x86
    pitch_ = pitch;
 8003dae:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
  analog_oscillator_[1].set_pitch(pitch_ - octave);
 8003db2:	1a1b      	subs	r3, r3, r0
 8003db4:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8003db8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003dbc:	463b      	mov	r3, r7
 8003dbe:	9500      	str	r5, [sp, #0]
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 8003dc0:	f104 0622 	add.w	r6, r4, #34	; 0x22
    size_t size) {
 8003dc4:	4690      	mov	r8, r2
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8003dc6:	f7fc ff37 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 8003dca:	463b      	mov	r3, r7
 8003dcc:	4632      	mov	r2, r6
 8003dce:	4649      	mov	r1, r9
 8003dd0:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8003dd4:	9500      	str	r5, [sp, #0]
 8003dd6:	f7fc ff2f 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  BEGIN_INTERPOLATE_PARAMETER_1
 8003dda:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8003dde:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
        ? (16383 - parameter_1) : (parameter_1 - 16384)) << 1;
 8003de2:	f643 7eff 	movw	lr, #16383	; 0x3fff
  BEGIN_INTERPOLATE_PARAMETER_1
 8003de6:	1bcb      	subs	r3, r1, r7
 8003de8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8003dec:	fbb1 f1f5 	udiv	r1, r1, r5
 8003df0:	4359      	muls	r1, r3
 8003df2:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8003df6:	4608      	mov	r0, r1
 8003df8:	f1a8 0202 	sub.w	r2, r8, #2
  while (size--) {
 8003dfc:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 8003e00:	d31a      	bcc.n	8003e38 <_ZN6braids15MacroOscillator9RenderSubEPKhPsj+0xd0>
    INTERPOLATE_PARAMETER_1
 8003e02:	eb07 38e0 	add.w	r8, r7, r0, asr #15
 8003e06:	fa1f f388 	uxth.w	r3, r8
    uint16_t sub_gain = (parameter_1 < 16384
 8003e0a:	f5b8 4f80 	cmp.w	r8, #16384	; 0x4000
        ? (16383 - parameter_1) : (parameter_1 - 16384)) << 1;
 8003e0e:	bfb4      	ite	lt
 8003e10:	ebae 0303 	sublt.w	r3, lr, r3
 8003e14:	f5a3 4380 	subge.w	r3, r3, #16384	; 0x4000
 8003e18:	f936 ab02 	ldrsh.w	sl, [r6], #2
    uint16_t sub_gain = (parameter_1 < 16384
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	ebac 0903 	sub.w	r9, ip, r3
 8003e24:	fb03 f30a 	mul.w	r3, r3, sl
 8003e28:	f932 8f02 	ldrsh.w	r8, [r2, #2]!
 8003e2c:	4408      	add	r0, r1
 8003e2e:	fb09 3308 	mla	r3, r9, r8, r3
 8003e32:	141b      	asrs	r3, r3, #16
 8003e34:	8013      	strh	r3, [r2, #0]
  while (size--) {
 8003e36:	e7e1      	b.n	8003dfc <_ZN6braids15MacroOscillator9RenderSubEPKhPsj+0x94>
  END_INTERPOLATE_PARAMETER_1
 8003e38:	8863      	ldrh	r3, [r4, #2]
 8003e3a:	80e3      	strh	r3, [r4, #6]
}
 8003e3c:	b002      	add	sp, #8
 8003e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003e42 <_ZN6braids15MacroOscillator14RenderDualSyncEPKhPsj>:
    size_t size) {
 8003e42:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003e46:	461d      	mov	r5, r3
  AnalogOscillatorShape base_shape = shape_ == MACRO_OSC_SHAPE_SQUARE_SYNC ?
 8003e48:	f244 234c 	movw	r3, #16972	; 0x424c
 8003e4c:	f04f 0800 	mov.w	r8, #0
 8003e50:	5cc3      	ldrb	r3, [r0, r3]
    size_t size) {
 8003e52:	4604      	mov	r4, r0
  AnalogOscillatorShape base_shape = shape_ == MACRO_OSC_SHAPE_SQUARE_SYNC ?
 8003e54:	2b07      	cmp	r3, #7
 8003e56:	bf0c      	ite	eq
 8003e58:	2003      	moveq	r0, #3
 8003e5a:	4640      	movne	r0, r8
  analog_oscillator_[0].set_pitch(pitch_);
 8003e5c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    shape_ = shape;
 8003e60:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
 8003e64:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
  analog_oscillator_[1].set_pitch(pitch_ + (parameter_[0] >> 2));
 8003e68:	f9b4 0000 	ldrsh.w	r0, [r4]
    pitch_ = pitch;
 8003e6c:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
  analog_oscillator_[0].Render(sync, buffer, sync_buffer_, size);
 8003e70:	f104 090a 	add.w	r9, r4, #10
  analog_oscillator_[1].set_pitch(pitch_ + (parameter_[0] >> 2));
 8003e74:	eb03 03a0 	add.w	r3, r3, r0, asr #2
 8003e78:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
  analog_oscillator_[0].Render(sync, buffer, sync_buffer_, size);
 8003e7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e80:	464b      	mov	r3, r9
    parameter_ = parameter;
 8003e82:	f8a4 8066 	strh.w	r8, [r4, #102]	; 0x66
 8003e86:	f8a4 8086 	strh.w	r8, [r4, #134]	; 0x86
 8003e8a:	9500      	str	r5, [sp, #0]
  analog_oscillator_[1].Render(sync_buffer_, temp_buffer_, NULL, size);
 8003e8c:	f104 0622 	add.w	r6, r4, #34	; 0x22
    size_t size) {
 8003e90:	4617      	mov	r7, r2
  analog_oscillator_[0].Render(sync, buffer, sync_buffer_, size);
 8003e92:	f7fc fed1 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync_buffer_, temp_buffer_, NULL, size);
 8003e96:	4643      	mov	r3, r8
 8003e98:	4632      	mov	r2, r6
 8003e9a:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8003e9e:	9500      	str	r5, [sp, #0]
 8003ea0:	4649      	mov	r1, r9
 8003ea2:	f7fc fec9 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  BEGIN_INTERPOLATE_PARAMETER_1
 8003ea6:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8003eaa:	f9b4 c006 	ldrsh.w	ip, [r4, #6]
 8003eae:	1eba      	subs	r2, r7, #2
 8003eb0:	eba0 030c 	sub.w	r3, r0, ip
 8003eb4:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8003eb8:	fbb0 f0f5 	udiv	r0, r0, r5
 8003ebc:	4358      	muls	r0, r3
 8003ebe:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8003ec2:	4607      	mov	r7, r0
  while (size--) {
 8003ec4:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 8003ec8:	d313      	bcc.n	8003ef2 <_ZN6braids15MacroOscillator14RenderDualSyncEPKhPsj+0xb0>
    INTERPOLATE_PARAMETER_1
 8003eca:	eb0c 31e7 	add.w	r1, ip, r7, asr #15
 8003ece:	f936 9b02 	ldrsh.w	r9, [r6], #2
    uint16_t balance = parameter_1 << 1;
 8003ed2:	0049      	lsls	r1, r1, #1
 8003ed4:	b289      	uxth	r1, r1
 8003ed6:	ebae 0801 	sub.w	r8, lr, r1
 8003eda:	fb01 f109 	mul.w	r1, r1, r9
 8003ede:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 8003ee2:	4407      	add	r7, r0
 8003ee4:	fb08 1303 	mla	r3, r8, r3, r1
    *buffer = (Mix(*buffer, *temp_buffer, balance) >> 2) * 3;
 8003ee8:	149b      	asrs	r3, r3, #18
 8003eea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003eee:	8013      	strh	r3, [r2, #0]
  while (size--) {
 8003ef0:	e7e8      	b.n	8003ec4 <_ZN6braids15MacroOscillator14RenderDualSyncEPKhPsj+0x82>
  END_INTERPOLATE_PARAMETER_1
 8003ef2:	8863      	ldrh	r3, [r4, #2]
 8003ef4:	80e3      	strh	r3, [r4, #6]
}
 8003ef6:	b003      	add	sp, #12
 8003ef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003efc <_ZN6braids15MacroOscillator18RenderSineTriangleEPKhPsj>:
    size_t size) {
 8003efc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  int32_t attenuation_sine = 32767 - 6 * (pitch_ - (92 << 7));
 8003f00:	f06f 0c05 	mvn.w	ip, #5
 8003f04:	f647 75ff 	movw	r5, #32767	; 0x7fff
    size_t size) {
 8003f08:	4604      	mov	r4, r0
  int32_t attenuation_sine = 32767 - 6 * (pitch_ - (92 << 7));
 8003f0a:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
    size_t size) {
 8003f0e:	461e      	mov	r6, r3
  int32_t attenuation_sine = 32767 - 6 * (pitch_ - (92 << 7));
 8003f10:	f5a0 5338 	sub.w	r3, r0, #11776	; 0x2e00
 8003f14:	fb0c 5303 	mla	r3, ip, r3, r5
 8003f18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  analog_oscillator_[0].set_parameter(timbre * attenuation_sine >> 15);
 8003f1c:	42ab      	cmp	r3, r5
 8003f1e:	bfa8      	it	ge
 8003f20:	462b      	movge	r3, r5
  int32_t timbre = parameter_[0];
 8003f22:	f9b4 e000 	ldrsh.w	lr, [r4]
  int32_t attenuation_tri = 32767 - 7 * (pitch_ - (80 << 7));
 8003f26:	f5a0 5c20 	sub.w	ip, r0, #10240	; 0x2800
  analog_oscillator_[0].set_parameter(timbre * attenuation_sine >> 15);
 8003f2a:	fb0e f303 	mul.w	r3, lr, r3
 8003f2e:	13db      	asrs	r3, r3, #15
 8003f30:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    shape_ = shape;
 8003f34:	2307      	movs	r3, #7
  int32_t attenuation_tri = 32767 - 7 * (pitch_ - (80 << 7));
 8003f36:	ebac 0ccc 	sub.w	ip, ip, ip, lsl #3
 8003f3a:	44ac      	add	ip, r5
 8003f3c:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
  analog_oscillator_[1].set_parameter(timbre * attenuation_tri >> 15);
 8003f40:	45ac      	cmp	ip, r5
 8003f42:	bfa8      	it	ge
 8003f44:	46ac      	movge	ip, r5
 8003f46:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
 8003f4a:	2306      	movs	r3, #6
    size_t size) {
 8003f4c:	4688      	mov	r8, r1
  analog_oscillator_[1].set_parameter(timbre * attenuation_tri >> 15);
 8003f4e:	fb0e fe0c 	mul.w	lr, lr, ip
 8003f52:	ea4f 3eee 	mov.w	lr, lr, asr #15
 8003f56:	f8a4 e086 	strh.w	lr, [r4, #134]	; 0x86
    pitch_ = pitch;
 8003f5a:	f8a4 006e 	strh.w	r0, [r4, #110]	; 0x6e
 8003f5e:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    shape_ = shape;
 8003f62:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8003f66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	9600      	str	r6, [sp, #0]
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 8003f6e:	f104 0922 	add.w	r9, r4, #34	; 0x22
    size_t size) {
 8003f72:	4617      	mov	r7, r2
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8003f74:	f7fc fe60 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 8003f78:	2300      	movs	r3, #0
 8003f7a:	464a      	mov	r2, r9
 8003f7c:	4641      	mov	r1, r8
 8003f7e:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8003f82:	9600      	str	r6, [sp, #0]
 8003f84:	f7fc fe58 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  BEGIN_INTERPOLATE_PARAMETER_1
 8003f88:	fbb5 f5f6 	udiv	r5, r5, r6
 8003f8c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8003f90:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8003f94:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003f98:	1a9b      	subs	r3, r3, r2
 8003f9a:	435d      	muls	r5, r3
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	3f02      	subs	r7, #2
  while (size--) {
 8003fa0:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 8003fa4:	d311      	bcc.n	8003fca <_ZN6braids15MacroOscillator18RenderSineTriangleEPKhPsj+0xce>
    INTERPOLATE_PARAMETER_1
 8003fa6:	eb02 33e1 	add.w	r3, r2, r1, asr #15
 8003faa:	f939 8b02 	ldrsh.w	r8, [r9], #2
    uint16_t balance = parameter_1 << 1;
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	eba0 0e03 	sub.w	lr, r0, r3
 8003fb6:	fb03 f308 	mul.w	r3, r3, r8
 8003fba:	f937 cf02 	ldrsh.w	ip, [r7, #2]!
 8003fbe:	4429      	add	r1, r5
 8003fc0:	fb0e 330c 	mla	r3, lr, ip, r3
 8003fc4:	141b      	asrs	r3, r3, #16
 8003fc6:	803b      	strh	r3, [r7, #0]
  while (size--) {
 8003fc8:	e7ea      	b.n	8003fa0 <_ZN6braids15MacroOscillator18RenderSineTriangleEPKhPsj+0xa4>
  END_INTERPOLATE_PARAMETER_1
 8003fca:	8863      	ldrh	r3, [r4, #2]
 8003fcc:	80e3      	strh	r3, [r4, #6]
}
 8003fce:	b003      	add	sp, #12
 8003fd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003fd4 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj>:
    size_t size) {
 8003fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fd8:	4617      	mov	r7, r2
  if (parameter_[0] <= 10922) {
 8003fda:	f642 22aa 	movw	r2, #10922	; 0x2aaa
    size_t size) {
 8003fde:	461e      	mov	r6, r3
  analog_oscillator_[0].set_pitch(pitch_);
 8003fe0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    size_t size) {
 8003fe4:	b087      	sub	sp, #28
    pitch_ = pitch;
 8003fe6:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
 8003fea:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
  if (parameter_[0] <= 10922) {
 8003fee:	f9b0 3000 	ldrsh.w	r3, [r0]
    size_t size) {
 8003ff2:	4604      	mov	r4, r0
  if (parameter_[0] <= 10922) {
 8003ff4:	4293      	cmp	r3, r2
    size_t size) {
 8003ff6:	4689      	mov	r9, r1
 8003ff8:	f04f 0500 	mov.w	r5, #0
  if (parameter_[0] <= 10922) {
 8003ffc:	f300 808b 	bgt.w	8004116 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x142>
    shape_ = shape;
 8004000:	2204      	movs	r2, #4
    parameter_ = parameter;
 8004002:	f8a0 5066 	strh.w	r5, [r0, #102]	; 0x66
 8004006:	f8a0 5086 	strh.w	r5, [r0, #134]	; 0x86
    shape_ = shape;
 800400a:	f880 5094 	strb.w	r5, [r0, #148]	; 0x94
    balance = parameter_[0] * 6;
 800400e:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8004012:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
 8004016:	006d      	lsls	r5, r5, #1
    balance = 65535 - (parameter_[0] - 10923) * 6;
 8004018:	b2ad      	uxth	r5, r5
  analog_oscillator_[0].Render(sync, shape_1, NULL, size);
 800401a:	4649      	mov	r1, r9
 800401c:	2300      	movs	r3, #0
 800401e:	463a      	mov	r2, r7
 8004020:	f104 0058 	add.w	r0, r4, #88	; 0x58
  int16_t* shape_2 = temp_buffer_;
 8004024:	f104 0822 	add.w	r8, r4, #34	; 0x22
  analog_oscillator_[0].Render(sync, shape_1, NULL, size);
 8004028:	9600      	str	r6, [sp, #0]
 800402a:	f7fc fe05 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync, shape_2, NULL, size);
 800402e:	4649      	mov	r1, r9
 8004030:	2300      	movs	r3, #0
 8004032:	4642      	mov	r2, r8
 8004034:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8004038:	9600      	str	r6, [sp, #0]
 800403a:	f7fc fdfd 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  int32_t lp_cutoff = pitch_ - (parameter_[1] >> 1) + 128 * 128;
 800403e:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8004042:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
  uint32_t a = table[phase >> 24];
 8004046:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8004174 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x1a0>
 800404a:	eba2 0361 	sub.w	r3, r2, r1, asr #1
 800404e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
  int32_t f = Interpolate824(lut_svf_cutoff, lp_cutoff << 17);
 8004052:	f383 030f 	usat	r3, #15, r3
 8004056:	045b      	lsls	r3, r3, #17
 8004058:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 800405c:	f83c 001e 	ldrh.w	r0, [ip, lr, lsl #1]
  uint32_t b = table[(phase >> 24) + 1];
 8004060:	f10c 0c02 	add.w	ip, ip, #2
 8004064:	f83c c01e 	ldrh.w	ip, [ip, lr, lsl #1]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 8004068:	0a1b      	lsrs	r3, r3, #8
 800406a:	ebac 0c00 	sub.w	ip, ip, r0
 800406e:	b29b      	uxth	r3, r3
 8004070:	fb03 f30c 	mul.w	r3, r3, ip
 8004074:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  if (pitch_ > (80 << 7)) {
 8004078:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
  int32_t f = Interpolate824(lut_svf_cutoff, lp_cutoff << 17);
 800407c:	b283      	uxth	r3, r0
    fuzz_amount -= (pitch_ - (80 << 7)) << 4;
 800407e:	bfc8      	it	gt
 8004080:	f5a2 5220 	subgt.w	r2, r2, #10240	; 0x2800
  int32_t f = Interpolate824(lut_svf_cutoff, lp_cutoff << 17);
 8004084:	9303      	str	r3, [sp, #12]
  int32_t fuzz_amount = parameter_[1] << 1;
 8004086:	ea4f 0341 	mov.w	r3, r1, lsl #1
    fuzz_amount -= (pitch_ - (80 << 7)) << 4;
 800408a:	bfc4      	itt	gt
 800408c:	eba3 1302 	subgt.w	r3, r3, r2, lsl #4
 8004090:	ea23 73e3 	bicgt.w	r3, r3, r3, asr #31
  return (a * (65535 - balance) + b * balance) >> 16;
 8004094:	b29a      	uxth	r2, r3
 8004096:	43db      	mvns	r3, r3
 8004098:	f647 7bff 	movw	fp, #32767	; 0x7fff
 800409c:	f5c5 497f 	rsb	r9, r5, #65280	; 0xff00
 80040a0:	b29b      	uxth	r3, r3
  int32_t lp_state = lp_state_;
 80040a2:	f8d4 c054 	ldr.w	ip, [r4, #84]	; 0x54
  int32_t a = table[index >> 8];
 80040a6:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8004178 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x1a4>
  return (a * (65535 - balance) + b * balance) >> 16;
 80040aa:	f109 09ff 	add.w	r9, r9, #255	; 0xff
 80040ae:	9204      	str	r2, [sp, #16]
 80040b0:	9305      	str	r3, [sp, #20]
  while (size--) {
 80040b2:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 80040b6:	d353      	bcc.n	8004160 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x18c>
 80040b8:	f938 3b02 	ldrsh.w	r3, [r8], #2
 80040bc:	f937 2b02 	ldrsh.w	r2, [r7], #2
 80040c0:	436b      	muls	r3, r5
 80040c2:	fb09 3202 	mla	r2, r9, r2, r3
    lp_state += (sample - lp_state) * f >> 15;
 80040c6:	9903      	ldr	r1, [sp, #12]
 80040c8:	1412      	asrs	r2, r2, #16
 80040ca:	eba2 030c 	sub.w	r3, r2, ip
 80040ce:	434b      	muls	r3, r1
 80040d0:	eb0c 3ce3 	add.w	ip, ip, r3, asr #15
 80040d4:	45dc      	cmp	ip, fp
 80040d6:	bfa8      	it	ge
 80040d8:	46dc      	movge	ip, fp
 80040da:	4b24      	ldr	r3, [pc, #144]	; (800416c <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x198>)
  int32_t b = table[(index >> 8) + 1];
 80040dc:	4824      	ldr	r0, [pc, #144]	; (8004170 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x19c>)
 80040de:	459c      	cmp	ip, r3
 80040e0:	bfb8      	it	lt
 80040e2:	469c      	movlt	ip, r3
    shifted_sample = lp_state + 32768;
 80040e4:	f50c 4100 	add.w	r1, ip, #32768	; 0x8000
  int32_t a = table[index >> 8];
 80040e8:	ea4f 2e21 	mov.w	lr, r1, asr #8
 80040ec:	f93a 301e 	ldrsh.w	r3, [sl, lr, lsl #1]
  int32_t b = table[(index >> 8) + 1];
 80040f0:	f930 e01e 	ldrsh.w	lr, [r0, lr, lsl #1]
  return a + ((b - a) * static_cast<int32_t>(index & 0xff) >> 8);
 80040f4:	b2c9      	uxtb	r1, r1
 80040f6:	ebae 0e03 	sub.w	lr, lr, r3
 80040fa:	fb01 f10e 	mul.w	r1, r1, lr
 80040fe:	eb03 2121 	add.w	r1, r3, r1, asr #8
  return (a * (65535 - balance) + b * balance) >> 16;
 8004102:	9b05      	ldr	r3, [sp, #20]
 8004104:	b209      	sxth	r1, r1
 8004106:	435a      	muls	r2, r3
 8004108:	9b04      	ldr	r3, [sp, #16]
 800410a:	fb03 2101 	mla	r1, r3, r1, r2
 800410e:	1409      	asrs	r1, r1, #16
 8004110:	f827 1c02 	strh.w	r1, [r7, #-2]
  while (size--) {
 8004114:	e7cd      	b.n	80040b2 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0xde>
  } else if (parameter_[0] <= 21845) {
 8004116:	f245 5255 	movw	r2, #21845	; 0x5555
 800411a:	4293      	cmp	r3, r2
 800411c:	dc10      	bgt.n	8004140 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x16c>
 800411e:	2203      	movs	r2, #3
    balance = 65535 - (parameter_[0] - 10923) * 6;
 8004120:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 8004124:	3b2b      	subs	r3, #43	; 0x2b
 8004126:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
    parameter_ = parameter;
 800412a:	f8a0 5066 	strh.w	r5, [r0, #102]	; 0x66
 800412e:	f8a0 5086 	strh.w	r5, [r0, #134]	; 0x86
    shape_ = shape;
 8004132:	f880 5094 	strb.w	r5, [r0, #148]	; 0x94
 8004136:	005d      	lsls	r5, r3, #1
 8004138:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
 800413c:	3d01      	subs	r5, #1
 800413e:	e76b      	b.n	8004018 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x44>
    analog_oscillator_[0].set_parameter((parameter_[0] - 21846) * 3);
 8004140:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 8004144:	3b56      	subs	r3, #86	; 0x56
 8004146:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    parameter_ = parameter;
 800414a:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
    shape_ = shape;
 800414e:	2303      	movs	r3, #3
 8004150:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
 8004154:	2305      	movs	r3, #5
    parameter_ = parameter;
 8004156:	f8a0 5086 	strh.w	r5, [r0, #134]	; 0x86
    shape_ = shape;
 800415a:	f880 3094 	strb.w	r3, [r0, #148]	; 0x94
 800415e:	e75c      	b.n	800401a <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x46>
  lp_state_ = lp_state;
 8004160:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
}
 8004164:	b007      	add	sp, #28
 8004166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800416a:	bf00      	nop
 800416c:	ffff8001 	.word	0xffff8001
 8004170:	08009cda 	.word	0x08009cda
 8004174:	080086de 	.word	0x080086de
 8004178:	08009cd8 	.word	0x08009cd8

0800417c <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj>:
    size_t size) {
 800417c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004180:	461d      	mov	r5, r3
  switch (shape_) {
 8004182:	f244 234c 	movw	r3, #16972	; 0x424c
 8004186:	5cc3      	ldrb	r3, [r0, r3]
    size_t size) {
 8004188:	4614      	mov	r4, r2
 800418a:	3b09      	subs	r3, #9
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	bf98      	it	ls
 8004192:	4a3c      	ldrls	r2, [pc, #240]	; (8004284 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0x108>)
 8004194:	460e      	mov	r6, r1
 8004196:	bf98      	it	ls
 8004198:	5cd1      	ldrbls	r1, [r2, r3]
    int16_t detune_1 = intervals[parameter_[i] >> 9];
 800419a:	f9b0 3000 	ldrsh.w	r3, [r0]
 800419e:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8004288 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0x10c>
 80041a2:	ea4f 2e63 	mov.w	lr, r3, asr #9
 80041a6:	f93c 801e 	ldrsh.w	r8, [ip, lr, lsl #1]
    int16_t detune_2 = intervals[((parameter_[i] >> 8) + 1) >> 1];
 80041aa:	ea4f 2e23 	mov.w	lr, r3, asr #8
 80041ae:	f10e 0e01 	add.w	lr, lr, #1
 80041b2:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    int16_t detune = detune_1 + ((detune_2 - detune_1) * xfade >> 16);
 80041b6:	f93c e01e 	ldrsh.w	lr, [ip, lr, lsl #1]
    uint16_t xfade = parameter_[i] << 8;
 80041ba:	ea4f 2303 	mov.w	r3, r3, lsl #8
    int16_t detune = detune_1 + ((detune_2 - detune_1) * xfade >> 16);
 80041be:	ebae 0e08 	sub.w	lr, lr, r8
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	fb03 f30e 	mul.w	r3, r3, lr
  analog_oscillator_[0].set_pitch(pitch_);
 80041c8:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  switch (shape_) {
 80041cc:	bf88      	it	hi
 80041ce:	2105      	movhi	r1, #5
    pitch_ = pitch;
 80041d0:	f8a0 706e 	strh.w	r7, [r0, #110]	; 0x6e
    analog_oscillator_[i + 1].set_pitch(pitch_ + detune);
 80041d4:	4447      	add	r7, r8
 80041d6:	eb07 4323 	add.w	r3, r7, r3, asr #16
 80041da:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
    int16_t detune_1 = intervals[parameter_[i] >> 9];
 80041de:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    parameter_ = parameter;
 80041e2:	2200      	movs	r2, #0
    int16_t detune_2 = intervals[((parameter_[i] >> 8) + 1) >> 1];
 80041e4:	ea4f 2e23 	mov.w	lr, r3, asr #8
 80041e8:	f10e 0e01 	add.w	lr, lr, #1
    int16_t detune_1 = intervals[parameter_[i] >> 9];
 80041ec:	125f      	asrs	r7, r3, #9
    int16_t detune_2 = intervals[((parameter_[i] >> 8) + 1) >> 1];
 80041ee:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    int16_t detune_1 = intervals[parameter_[i] >> 9];
 80041f2:	f93c 7017 	ldrsh.w	r7, [ip, r7, lsl #1]
    int16_t detune = detune_1 + ((detune_2 - detune_1) * xfade >> 16);
 80041f6:	f93c c01e 	ldrsh.w	ip, [ip, lr, lsl #1]
    uint16_t xfade = parameter_[i] << 8;
 80041fa:	021b      	lsls	r3, r3, #8
    int16_t detune = detune_1 + ((detune_2 - detune_1) * xfade >> 16);
 80041fc:	ebac 0c07 	sub.w	ip, ip, r7
 8004200:	b29b      	uxth	r3, r3
 8004202:	fb03 f30c 	mul.w	r3, r3, ip
    analog_oscillator_[i + 1].set_pitch(pitch_ + detune);
 8004206:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800420a:	f8a0 2066 	strh.w	r2, [r0, #102]	; 0x66
 800420e:	4467      	add	r7, ip
 8004210:	eb07 4323 	add.w	r3, r7, r3, asr #16
    pitch_ = pitch;
 8004214:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
  std::fill(&buffer[0], &buffer[size], 0);
 8004218:	4623      	mov	r3, r4
    parameter_ = parameter;
 800421a:	f8a0 2086 	strh.w	r2, [r0, #134]	; 0x86
 800421e:	f8a0 20a6 	strh.w	r2, [r0, #166]	; 0xa6
    shape_ = shape;
 8004222:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 8004226:	f880 1094 	strb.w	r1, [r0, #148]	; 0x94
 800422a:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
 800422e:	eb04 0845 	add.w	r8, r4, r5, lsl #1
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 8004232:	4598      	cmp	r8, r3
 8004234:	d002      	beq.n	800423c <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xc0>
	*__first = __tmp;
 8004236:	f823 2b02 	strh.w	r2, [r3], #2
 800423a:	e7fa      	b.n	8004232 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xb6>
      buffer[j] += temp_buffer_[j] * 21 >> 6;
 800423c:	f04f 0b15 	mov.w	fp, #21
 8004240:	f100 0758 	add.w	r7, r0, #88	; 0x58
 8004244:	f100 0ab8 	add.w	sl, r0, #184	; 0xb8
    analog_oscillator_[i].Render(sync, temp_buffer_, NULL, size);
 8004248:	f100 0922 	add.w	r9, r0, #34	; 0x22
 800424c:	2300      	movs	r3, #0
 800424e:	4638      	mov	r0, r7
 8004250:	9500      	str	r5, [sp, #0]
 8004252:	464a      	mov	r2, r9
 8004254:	4631      	mov	r1, r6
 8004256:	f7fc fcef 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
 800425a:	4648      	mov	r0, r9
 800425c:	4623      	mov	r3, r4
    for (size_t j = 0; j < size; ++j) {
 800425e:	4598      	cmp	r8, r3
 8004260:	d00a      	beq.n	8004278 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xfc>
      buffer[j] += temp_buffer_[j] * 21 >> 6;
 8004262:	f930 1b02 	ldrsh.w	r1, [r0], #2
 8004266:	f9b3 2000 	ldrsh.w	r2, [r3]
 800426a:	fb0b f101 	mul.w	r1, fp, r1
 800426e:	eb02 12a1 	add.w	r2, r2, r1, asr #6
 8004272:	f823 2b02 	strh.w	r2, [r3], #2
    for (size_t j = 0; j < size; ++j) {
 8004276:	e7f2      	b.n	800425e <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xe2>
 8004278:	3720      	adds	r7, #32
  for (size_t i = 0; i < 3; ++i) {
 800427a:	4557      	cmp	r7, sl
 800427c:	d1e6      	bne.n	800424c <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xd0>
}
 800427e:	b003      	add	sp, #12
 8004280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004284:	08007c4e 	.word	0x08007c4e
 8004288:	08007c52 	.word	0x08007c52

0800428c <_ZN6braids15MacroOscillator13RenderSawCombEPKhPsj>:
}

void MacroOscillator::RenderSawComb(
  const uint8_t* sync,
  int16_t* buffer,
  size_t size) {
 800428c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800428e:	461d      	mov	r5, r3
    parameter_ = parameter;
 8004290:	2300      	movs	r3, #0
 8004292:	4604      	mov	r4, r0
 8004294:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
    pitch_ = pitch;
 8004298:	8900      	ldrh	r0, [r0, #8]
    shape_ = shape;
 800429a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    pitch_ = pitch;
 800429e:	f8a4 006e 	strh.w	r0, [r4, #110]	; 0x6e
  analog_oscillator_[0].set_parameter(0);
  analog_oscillator_[0].set_pitch(pitch_);
  analog_oscillator_[0].set_shape(OSC_SHAPE_SAW);
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 80042a2:	9500      	str	r5, [sp, #0]
 80042a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
  size_t size) {
 80042a8:	4617      	mov	r7, r2
 80042aa:	460e      	mov	r6, r1
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 80042ac:	f7fc fcc4 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  
  digital_oscillator_.set_parameters(parameter_[0], parameter_[1]);
 80042b0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  }

  inline void set_parameters(
      int16_t parameter_1,
      int16_t parameter_2) {
    parameter_[0] = parameter_1;
 80042b4:	8822      	ldrh	r2, [r4, #0]
    parameter_[1] = parameter_2;
 80042b6:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
    if (pitch_ > (90 << 7) && pitch > (90 << 7)) {
 80042ba:	f9b4 30d0 	ldrsh.w	r3, [r4, #208]	; 0xd0
    parameter_[0] = parameter_1;
 80042be:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
    if (pitch_ > (90 << 7) && pitch > (90 << 7)) {
 80042c2:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80042c6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
  digital_oscillator_.set_pitch(pitch_);
 80042ca:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80042ce:	dd11      	ble.n	80042f4 <_ZN6braids15MacroOscillator13RenderSawCombEPKhPsj+0x68>
 80042d0:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 80042d4:	dd0e      	ble.n	80042f4 <_ZN6braids15MacroOscillator13RenderSawCombEPKhPsj+0x68>
      pitch_ = (static_cast<int32_t>(pitch_) + pitch) >> 1;
 80042d6:	4413      	add	r3, r2
 80042d8:	105b      	asrs	r3, r3, #1
 80042da:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
    shape_ = shape;
 80042de:	2302      	movs	r3, #2
  digital_oscillator_.set_shape(OSC_SHAPE_COMB_FILTER);
  digital_oscillator_.Render(sync, buffer, size);
 80042e0:	463a      	mov	r2, r7
 80042e2:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
 80042e6:	4631      	mov	r1, r6
 80042e8:	462b      	mov	r3, r5
}
 80042ea:	b003      	add	sp, #12
 80042ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  digital_oscillator_.Render(sync, buffer, size);
 80042f0:	f7ff bae0 	b.w	80038b4 <_ZN6braids17DigitalOscillator6RenderEPKhPsj>
      pitch_ = pitch;
 80042f4:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
 80042f8:	e7f1      	b.n	80042de <_ZN6braids15MacroOscillator13RenderSawCombEPKhPsj+0x52>

080042fa <_ZN6braids15MacroOscillator13RenderDigitalEPKhPsj>:
    size_t size) {
 80042fa:	b470      	push	{r4, r5, r6}
  digital_oscillator_.set_parameters(parameter_[0], parameter_[1]);
 80042fc:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
    parameter_[0] = parameter_1;
 8004300:	8805      	ldrh	r5, [r0, #0]
    parameter_[1] = parameter_2;
 8004302:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
    if (pitch_ > (90 << 7) && pitch > (90 << 7)) {
 8004306:	f9b0 40d0 	ldrsh.w	r4, [r0, #208]	; 0xd0
    parameter_[0] = parameter_1;
 800430a:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
    if (pitch_ > (90 << 7) && pitch > (90 << 7)) {
 800430e:	f5b4 5f34 	cmp.w	r4, #11520	; 0x2d00
 8004312:	f100 06b8 	add.w	r6, r0, #184	; 0xb8
  digital_oscillator_.set_pitch(pitch_);
 8004316:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 800431a:	dd10      	ble.n	800433e <_ZN6braids15MacroOscillator13RenderDigitalEPKhPsj+0x44>
 800431c:	f5b5 5f34 	cmp.w	r5, #11520	; 0x2d00
 8004320:	dd0d      	ble.n	800433e <_ZN6braids15MacroOscillator13RenderDigitalEPKhPsj+0x44>
      pitch_ = (static_cast<int32_t>(pitch_) + pitch) >> 1;
 8004322:	442c      	add	r4, r5
 8004324:	1064      	asrs	r4, r4, #1
 8004326:	f8a0 40d0 	strh.w	r4, [r0, #208]	; 0xd0
      shape_ - MACRO_OSC_SHAPE_TRIPLE_RING_MOD));
 800432a:	f244 244c 	movw	r4, #16972	; 0x424c
 800432e:	5d04      	ldrb	r4, [r0, r4]
 8004330:	3c0d      	subs	r4, #13
    shape_ = shape;
 8004332:	f880 40d5 	strb.w	r4, [r0, #213]	; 0xd5
  digital_oscillator_.Render(sync, buffer, size);
 8004336:	4630      	mov	r0, r6
}
 8004338:	bc70      	pop	{r4, r5, r6}
  digital_oscillator_.Render(sync, buffer, size);
 800433a:	f7ff babb 	b.w	80038b4 <_ZN6braids17DigitalOscillator6RenderEPKhPsj>
      pitch_ = pitch;
 800433e:	f8a0 50d0 	strh.w	r5, [r0, #208]	; 0xd0
 8004342:	e7f2      	b.n	800432a <_ZN6braids15MacroOscillator13RenderDigitalEPKhPsj+0x30>

08004344 <_ZN6braids15MacroOscillator6RenderEPKhPsj>:
    size_t size) {
 8004344:	b4f0      	push	{r4, r5, r6, r7}
  RenderFn fn = fn_table_[shape_];
 8004346:	f244 254c 	movw	r5, #16972	; 0x424c
 800434a:	4c09      	ldr	r4, [pc, #36]	; (8004370 <_ZN6braids15MacroOscillator6RenderEPKhPsj+0x2c>)
 800434c:	5d45      	ldrb	r5, [r0, r5]
 800434e:	eb04 06c5 	add.w	r6, r4, r5, lsl #3
 8004352:	6876      	ldr	r6, [r6, #4]
 8004354:	f854 4035 	ldr.w	r4, [r4, r5, lsl #3]
  (this->*fn)(sync, buffer, size);
 8004358:	1075      	asrs	r5, r6, #1
 800435a:	07f6      	lsls	r6, r6, #31
 800435c:	eb00 0705 	add.w	r7, r0, r5
 8004360:	bf44      	itt	mi
 8004362:	5940      	ldrmi	r0, [r0, r5]
 8004364:	5904      	ldrmi	r4, [r0, r4]
 8004366:	4638      	mov	r0, r7
 8004368:	46a4      	mov	ip, r4
}
 800436a:	bcf0      	pop	{r4, r5, r6, r7}
  (this->*fn)(sync, buffer, size);
 800436c:	4760      	bx	ip
 800436e:	bf00      	nop
 8004370:	20000160 	.word	0x20000160

08004374 <_ZN6braids9Quantizer4InitEv>:
#include <cstdlib>

namespace braids {

void Quantizer::Init() {
  enabled_ = true;
 8004374:	2301      	movs	r3, #1
 8004376:	7003      	strb	r3, [r0, #0]
  codeword_ = 0;
 8004378:	2300      	movs	r3, #0
 800437a:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
  previous_boundary_ = 0;
 800437e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  next_boundary_ = 0;
 8004382:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8004386:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800438a:	3002      	adds	r0, #2
  for (int16_t i = 0; i < 128; ++i) {
    codebook_[i] = (i - 64) << 7;
 800438c:	f820 3b02 	strh.w	r3, [r0], #2
 8004390:	3380      	adds	r3, #128	; 0x80
 8004392:	b29b      	uxth	r3, r3
  for (int16_t i = 0; i < 128; ++i) {
 8004394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004398:	d1f8      	bne.n	800438c <_ZN6braids9Quantizer4InitEv+0x18>
  }
}
 800439a:	4770      	bx	lr

0800439c <_ZN6braids9Quantizer9ConfigureEPKssj>:

void Quantizer::Configure(
    const int16_t* notes,
    int16_t span,
    size_t num_notes) {
 800439c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  enabled_ = notes != NULL && num_notes != 0 && span != 0;
 80043a0:	b3a1      	cbz	r1, 800440c <_ZN6braids9Quantizer9ConfigureEPKssj+0x70>
 80043a2:	b39b      	cbz	r3, 800440c <_ZN6braids9Quantizer9ConfigureEPKssj+0x70>
 80043a4:	b392      	cbz	r2, 800440c <_ZN6braids9Quantizer9ConfigureEPKssj+0x70>
 80043a6:	2401      	movs	r4, #1
 80043a8:	4607      	mov	r7, r0
 80043aa:	f807 4b82 	strb.w	r4, [r7], #130
  if (enabled_) {
    int32_t octave = 0;
    size_t note = 0;
 80043ae:	2400      	movs	r4, #0
 80043b0:	f647 78ff 	movw	r8, #32767	; 0x7fff
    int32_t octave = 0;
 80043b4:	4626      	mov	r6, r4
    int16_t root = 0;
    for (int32_t i = 0; i < 64; ++i) {
      int32_t up = root + notes[note] + span * octave;
      int32_t down = root + notes[num_notes - 1 - note] + (-octave - 1) * span;
 80043b6:	f103 4e00 	add.w	lr, r3, #2147483648	; 0x80000000
      CLIP(up)
      CLIP(down)
      codebook_[64 + i] = up;
 80043ba:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8004414 <_ZN6braids9Quantizer9ConfigureEPKssj+0x78>
 80043be:	f100 0c80 	add.w	ip, r0, #128	; 0x80
      int32_t down = root + notes[num_notes - 1 - note] + (-octave - 1) * span;
 80043c2:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80043c6:	ebae 0504 	sub.w	r5, lr, r4
 80043ca:	f931 b015 	ldrsh.w	fp, [r1, r5, lsl #1]
 80043ce:	43f5      	mvns	r5, r6
      int32_t up = root + notes[note] + span * octave;
 80043d0:	f931 a014 	ldrsh.w	sl, [r1, r4, lsl #1]
      int32_t down = root + notes[num_notes - 1 - note] + (-octave - 1) * span;
 80043d4:	fb02 b505 	mla	r5, r2, r5, fp
      int32_t up = root + notes[note] + span * octave;
 80043d8:	fb06 aa02 	mla	sl, r6, r2, sl
 80043dc:	45c2      	cmp	sl, r8
 80043de:	bfa8      	it	ge
 80043e0:	46c2      	movge	sl, r8
 80043e2:	4545      	cmp	r5, r8
 80043e4:	bfa8      	it	ge
 80043e6:	4645      	movge	r5, r8
      codebook_[64 + i] = up;
 80043e8:	45ca      	cmp	sl, r9
 80043ea:	bfb8      	it	lt
 80043ec:	46ca      	movlt	sl, r9
      codebook_[64 - i - 1] = down;
 80043ee:	454d      	cmp	r5, r9
 80043f0:	bfb8      	it	lt
 80043f2:	464d      	movlt	r5, r9
      ++note;
 80043f4:	3401      	adds	r4, #1
      if (note >= num_notes) {
 80043f6:	42a3      	cmp	r3, r4
      codebook_[64 + i] = up;
 80043f8:	f827 ab02 	strh.w	sl, [r7], #2
      codebook_[64 - i - 1] = down;
 80043fc:	f82c 5902 	strh.w	r5, [ip], #-2
        note = 0;
        ++octave;
 8004400:	bf9c      	itt	ls
 8004402:	3601      	addls	r6, #1
        note = 0;
 8004404:	2400      	movls	r4, #0
    for (int32_t i = 0; i < 64; ++i) {
 8004406:	4560      	cmp	r0, ip
 8004408:	d1dd      	bne.n	80043c6 <_ZN6braids9Quantizer9ConfigureEPKssj+0x2a>
 800440a:	e001      	b.n	8004410 <_ZN6braids9Quantizer9ConfigureEPKssj+0x74>
  enabled_ = notes != NULL && num_notes != 0 && span != 0;
 800440c:	2300      	movs	r3, #0
 800440e:	7003      	strb	r3, [r0, #0]
      }
    }
  }
}
 8004410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004414:	ffff8001 	.word	0xffff8001

08004418 <_ZN6braids9Quantizer7ProcessEll>:

int32_t Quantizer::Process(int32_t pitch, int32_t root) {
  if (!enabled_) {
 8004418:	7803      	ldrb	r3, [r0, #0]
int32_t Quantizer::Process(int32_t pitch, int32_t root) {
 800441a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!enabled_) {
 800441c:	b15b      	cbz	r3, 8004436 <_ZN6braids9Quantizer7ProcessEll+0x1e>
    return pitch;
  }

  pitch -= root;
  if (pitch >= previous_boundary_ && pitch <= next_boundary_) {
 800441e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
  pitch -= root;
 8004422:	1a89      	subs	r1, r1, r2
  if (pitch >= previous_boundary_ && pitch <= next_boundary_) {
 8004424:	428b      	cmp	r3, r1
 8004426:	dc08      	bgt.n	800443a <_ZN6braids9Quantizer7ProcessEll+0x22>
 8004428:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 800442c:	428b      	cmp	r3, r1
 800442e:	db04      	blt.n	800443a <_ZN6braids9Quantizer7ProcessEll+0x22>
    // We're still in the voronoi cell for the active codeword.
    pitch = codeword_;
 8004430:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    // Enlarge the current voronoi cell a bit for hysteresis.
    previous_boundary_ = (9 * codebook_[q - 1] + 7 * codeword_) >> 4;
    next_boundary_ = (9 * codebook_[q + 1] + 7 * codeword_) >> 4;
    pitch = codeword_;
  }
  pitch += root;
 8004434:	4411      	add	r1, r2
  return pitch;
}
 8004436:	4608      	mov	r0, r1
 8004438:	bdf0      	pop	{r4, r5, r6, r7, pc}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 800443a:	247b      	movs	r4, #123	; 0x7b
        static_cast<int16_t>(pitch)) - &codebook_[0];
 800443c:	b20f      	sxth	r7, r1
    int16_t upper_bound_index = std::upper_bound(
 800443e:	f100 0308 	add.w	r3, r0, #8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 8004442:	2c00      	cmp	r4, #0
 8004444:	dd0c      	ble.n	8004460 <_ZN6braids9Quantizer7ProcessEll+0x48>
	{
	  _DistanceType __half = __len >> 1;
 8004446:	1065      	asrs	r5, r4, #1
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__val, __middle))
 8004448:	f933 c015 	ldrsh.w	ip, [r3, r5, lsl #1]
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
 800444c:	eb03 0645 	add.w	r6, r3, r5, lsl #1
 8004450:	45bc      	cmp	ip, r7
 8004452:	dc03      	bgt.n	800445c <_ZN6braids9Quantizer7ProcessEll+0x44>
	    __len = __half;
	  else
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 8004454:	1b64      	subs	r4, r4, r5
	      ++__first;
 8004456:	1cb3      	adds	r3, r6, #2
	      __len = __len - __half - 1;
 8004458:	3c01      	subs	r4, #1
 800445a:	e7f2      	b.n	8004442 <_ZN6braids9Quantizer7ProcessEll+0x2a>
	  _DistanceType __half = __len >> 1;
 800445c:	462c      	mov	r4, r5
 800445e:	e7f0      	b.n	8004442 <_ZN6braids9Quantizer7ProcessEll+0x2a>
    int16_t q = -1;
 8004460:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    int16_t best_distance = 16384;
 8004464:	f44f 4680 	mov.w	r6, #16384	; 0x4000
        static_cast<int16_t>(pitch)) - &codebook_[0];
 8004468:	1c84      	adds	r4, r0, #2
 800446a:	1b1b      	subs	r3, r3, r4
 800446c:	105b      	asrs	r3, r3, #1
 800446e:	b21f      	sxth	r7, r3
    int16_t lower_bound_index = upper_bound_index - 2;
 8004470:	3b02      	subs	r3, #2
 8004472:	b21b      	sxth	r3, r3
    for (int16_t i = lower_bound_index; i <= upper_bound_index; ++i) {
 8004474:	42bb      	cmp	r3, r7
 8004476:	dc11      	bgt.n	800449c <_ZN6braids9Quantizer7ProcessEll+0x84>
      int16_t distance = abs(pitch - codebook_[i]);
 8004478:	eb00 0443 	add.w	r4, r0, r3, lsl #1
 800447c:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 8004480:	1b0c      	subs	r4, r1, r4
 8004482:	2c00      	cmp	r4, #0
 8004484:	bfb8      	it	lt
 8004486:	4264      	neglt	r4, r4
 8004488:	b224      	sxth	r4, r4
      if (distance < best_distance) {
 800448a:	42a6      	cmp	r6, r4
 800448c:	bfc8      	it	gt
 800448e:	461d      	movgt	r5, r3
 8004490:	f103 0301 	add.w	r3, r3, #1
 8004494:	bfc8      	it	gt
 8004496:	4626      	movgt	r6, r4
 8004498:	b21b      	sxth	r3, r3
    for (int16_t i = lower_bound_index; i <= upper_bound_index; ++i) {
 800449a:	e7eb      	b.n	8004474 <_ZN6braids9Quantizer7ProcessEll+0x5c>
 800449c:	eb00 0345 	add.w	r3, r0, r5, lsl #1
    codeword_ = codebook_[q];
 80044a0:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 80044a4:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    previous_boundary_ = (9 * codebook_[q - 1] + 7 * codeword_) >> 4;
 80044a8:	f930 4015 	ldrsh.w	r4, [r0, r5, lsl #1]
 80044ac:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 80044b0:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 80044b4:	4434      	add	r4, r6
 80044b6:	1124      	asrs	r4, r4, #4
 80044b8:	f8c0 4108 	str.w	r4, [r0, #264]	; 0x108
    next_boundary_ = (9 * codebook_[q + 1] + 7 * codeword_) >> 4;
 80044bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80044c0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80044c4:	4433      	add	r3, r6
 80044c6:	111b      	asrs	r3, r3, #4
 80044c8:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 80044cc:	e7b2      	b.n	8004434 <_ZN6braids9Quantizer7ProcessEll+0x1c>
	...

080044d0 <_ZN6braids8Settings5ResetEv>:
  }
  CheckPaques();
}

void Settings::Reset() {
  memcpy(&data_, &kInitSettings, sizeof(SettingsData));
 80044d0:	2260      	movs	r2, #96	; 0x60
void Settings::Reset() {
 80044d2:	b508      	push	{r3, lr}
  memcpy(&data_, &kInitSettings, sizeof(SettingsData));
 80044d4:	4903      	ldr	r1, [pc, #12]	; (80044e4 <_ZN6braids8Settings5ResetEv+0x14>)
 80044d6:	f003 f9ff 	bl	80078d8 <memcpy>
  data_.magic_byte = 'M';
 80044da:	224d      	movs	r2, #77	; 0x4d
 80044dc:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
}
 80044e0:	bd08      	pop	{r3, pc}
 80044e2:	bf00      	nop
 80044e4:	0800d780 	.word	0x0800d780

080044e8 <_ZN6braids8Settings11CheckPaquesEv>:
  data_.magic_byte = 'M';
  //storage.ParsimoniousSave(data_, &version_token_);
  CheckPaques();
}

void Settings::CheckPaques() {
 80044e8:	b510      	push	{r4, lr}
  paques_ = !strcmp(data_.marquee_text, "49");
 80044ea:	4905      	ldr	r1, [pc, #20]	; (8004500 <_ZN6braids8Settings11CheckPaquesEv+0x18>)
void Settings::CheckPaques() {
 80044ec:	4604      	mov	r4, r0
  paques_ = !strcmp(data_.marquee_text, "49");
 80044ee:	3028      	adds	r0, #40	; 0x28
 80044f0:	f7fb fe2c 	bl	800014c <strcmp>
 80044f4:	fab0 f080 	clz	r0, r0
 80044f8:	0940      	lsrs	r0, r0, #5
 80044fa:	f884 0062 	strb.w	r0, [r4, #98]	; 0x62
}
 80044fe:	bd10      	pop	{r4, pc}
 8004500:	0800d538 	.word	0x0800d538

08004504 <_ZN6braids8Settings4InitEv>:
void Settings::Init() {
 8004504:	b570      	push	{r4, r5, r6, lr}
 8004506:	4604      	mov	r4, r0
 8004508:	260c      	movs	r6, #12
    Reset();
 800450a:	f7ff ffe1 	bl	80044d0 <_ZN6braids8Settings5ResetEv>
  for (int32_t i = 0; i <= SETTING_LAST_EDITABLE_SETTING; ++i) {
 800450e:	2200      	movs	r2, #0
  bool settings_within_range = true;
 8004510:	2301      	movs	r3, #1
        value >= setting_metadata.min_value && \
 8004512:	481b      	ldr	r0, [pc, #108]	; (8004580 <_ZN6braids8Settings4InitEv+0x7c>)
 8004514:	b15b      	cbz	r3, 800452e <_ZN6braids8Settings4InitEv+0x2a>
 8004516:	fb06 f102 	mul.w	r1, r6, r2
  }
  
  uint8_t GetValue(Setting setting) const {
    const uint8_t* data = static_cast<const uint8_t*>(
        static_cast<const void*>(&data_));
    return data[setting];
 800451a:	5ca5      	ldrb	r5, [r4, r2]
    settings_within_range = settings_within_range && \
 800451c:	5c0b      	ldrb	r3, [r1, r0]
 800451e:	42ab      	cmp	r3, r5
 8004520:	d82b      	bhi.n	800457a <_ZN6braids8Settings4InitEv+0x76>
        value <= setting_metadata.max_value;
 8004522:	4401      	add	r1, r0
        value >= setting_metadata.min_value && \
 8004524:	784b      	ldrb	r3, [r1, #1]
 8004526:	42ab      	cmp	r3, r5
 8004528:	bf34      	ite	cc
 800452a:	2300      	movcc	r3, #0
 800452c:	2301      	movcs	r3, #1
  for (int32_t i = 0; i <= SETTING_LAST_EDITABLE_SETTING; ++i) {
 800452e:	3201      	adds	r2, #1
 8004530:	2a14      	cmp	r2, #20
 8004532:	d1ef      	bne.n	8004514 <_ZN6braids8Settings4InitEv+0x10>
  settings_within_range = settings_within_range && data_.magic_byte == 'M';
 8004534:	b1cb      	cbz	r3, 800456a <_ZN6braids8Settings4InitEv+0x66>
 8004536:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
 800453a:	2b4d      	cmp	r3, #77	; 0x4d
 800453c:	d115      	bne.n	800456a <_ZN6braids8Settings4InitEv+0x66>
    settings_within_range = settings_within_range && \
 800453e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8004540:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004544:	d911      	bls.n	800456a <_ZN6braids8Settings4InitEv+0x66>
    settings_within_range = settings_within_range && \
 8004546:	f641 733f 	movw	r3, #7999	; 0x1f3f
 800454a:	f643 617e 	movw	r1, #15998	; 0x3e7e
 800454e:	8c22      	ldrh	r2, [r4, #32]
 8004550:	441a      	add	r2, r3
 8004552:	b292      	uxth	r2, r2
 8004554:	428a      	cmp	r2, r1
 8004556:	d808      	bhi.n	800456a <_ZN6braids8Settings4InitEv+0x66>
    settings_within_range = settings_within_range && \
 8004558:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800455a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800455e:	d904      	bls.n	800456a <_ZN6braids8Settings4InitEv+0x66>
    settings_within_range = settings_within_range && \
 8004560:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8004562:	4413      	add	r3, r2
 8004564:	b29b      	uxth	r3, r3
 8004566:	428b      	cmp	r3, r1
 8004568:	d902      	bls.n	8004570 <_ZN6braids8Settings4InitEv+0x6c>
    Reset();
 800456a:	4620      	mov	r0, r4
 800456c:	f7ff ffb0 	bl	80044d0 <_ZN6braids8Settings5ResetEv>
  CheckPaques();
 8004570:	4620      	mov	r0, r4
}
 8004572:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  CheckPaques();
 8004576:	f7ff bfb7 	b.w	80044e8 <_ZN6braids8Settings11CheckPaquesEv>
        value >= setting_metadata.min_value && \
 800457a:	2300      	movs	r3, #0
 800457c:	e7d7      	b.n	800452e <_ZN6braids8Settings4InitEv+0x2a>
 800457e:	bf00      	nop
 8004580:	0800d53c 	.word	0x0800d53c

08004584 <_ZN6braids8Settings4SaveEv>:
  data_.magic_byte = 'M';
 8004584:	234d      	movs	r3, #77	; 0x4d
 8004586:	f880 305f 	strb.w	r3, [r0, #95]	; 0x5f
  CheckPaques();
 800458a:	f7ff bfad 	b.w	80044e8 <_ZN6braids8Settings11CheckPaquesEv>

0800458e <_ZN6braids3Adc4InitEv>:
namespace braids {
  

void Adc::Init(void) {

}
 800458e:	4770      	bx	lr

08004590 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004590:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004592:	2414      	movs	r4, #20
{
 8004594:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004596:	4622      	mov	r2, r4
 8004598:	2100      	movs	r1, #0
 800459a:	a808      	add	r0, sp, #32
 800459c:	f003 f9a7 	bl	80078ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045a0:	4622      	mov	r2, r4
 80045a2:	2100      	movs	r1, #0
 80045a4:	a801      	add	r0, sp, #4
 80045a6:	f003 f9a2 	bl	80078ee <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045aa:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80045ac:	2201      	movs	r2, #1
 80045ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80045b6:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80045ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045be:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80045c0:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80045c2:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045c4:	f002 fd5c 	bl	8007080 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045c8:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80045ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045ce:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80045d2:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80045d4:	4621      	mov	r1, r4
 80045d6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80045d8:	e9cd 3203 	strd	r3, r2, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045dc:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80045de:	f002 ffcf 	bl	8007580 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80045e2:	b010      	add	sp, #64	; 0x40
 80045e4:	bd10      	pop	{r4, pc}
	...

080045e8 <main>:
{
 80045e8:	b500      	push	{lr}
 80045ea:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 80045ec:	f001 fac8 	bl	8005b80 <HAL_Init>
  SystemClock_Config();
 80045f0:	f7ff ffce 	bl	8004590 <_Z18SystemClock_Configv>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045f4:	2210      	movs	r2, #16
 80045f6:	2100      	movs	r1, #0
 80045f8:	eb0d 0002 	add.w	r0, sp, r2
 80045fc:	f003 f977 	bl	80078ee <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004600:	4b1a      	ldr	r3, [pc, #104]	; (800466c <main+0x84>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004602:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004606:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004608:	4819      	ldr	r0, [pc, #100]	; (8004670 <main+0x88>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800460a:	f042 0210 	orr.w	r2, r2, #16
 800460e:	619a      	str	r2, [r3, #24]
 8004610:	699a      	ldr	r2, [r3, #24]
 8004612:	f002 0210 	and.w	r2, r2, #16
 8004616:	9201      	str	r2, [sp, #4]
 8004618:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800461a:	699a      	ldr	r2, [r3, #24]
 800461c:	f042 0220 	orr.w	r2, r2, #32
 8004620:	619a      	str	r2, [r3, #24]
 8004622:	699a      	ldr	r2, [r3, #24]
 8004624:	f002 0220 	and.w	r2, r2, #32
 8004628:	9202      	str	r2, [sp, #8]
 800462a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800462c:	699a      	ldr	r2, [r3, #24]
 800462e:	f042 0204 	orr.w	r2, r2, #4
 8004632:	619a      	str	r2, [r3, #24]
 8004634:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004636:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	9303      	str	r3, [sp, #12]
 800463e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004640:	f001 fd77 	bl	8006132 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004644:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004648:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800464a:	2100      	movs	r1, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800464c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004650:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004652:	4807      	ldr	r0, [pc, #28]	; (8004670 <main+0x88>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004654:	e9cd 1306 	strd	r1, r3, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004658:	a904      	add	r1, sp, #16
 800465a:	f001 fbf9 	bl	8005e50 <HAL_GPIO_Init>
  ml.init();
 800465e:	a804      	add	r0, sp, #16
 8004660:	f000 f97c 	bl	800495c <_ZN8MainLoop4initEv>
	  ml.loop();
 8004664:	a804      	add	r0, sp, #16
 8004666:	f000 fc05 	bl	8004e74 <_ZN8MainLoop4loopEv>
 800466a:	e7fb      	b.n	8004664 <main+0x7c>
 800466c:	40021000 	.word	0x40021000
 8004670:	40011000 	.word	0x40011000

08004674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800467a:	4b15      	ldr	r3, [pc, #84]	; (80046d0 <HAL_MspInit+0x5c>)
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	4a14      	ldr	r2, [pc, #80]	; (80046d0 <HAL_MspInit+0x5c>)
 8004680:	f043 0301 	orr.w	r3, r3, #1
 8004684:	6193      	str	r3, [r2, #24]
 8004686:	4b12      	ldr	r3, [pc, #72]	; (80046d0 <HAL_MspInit+0x5c>)
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	60bb      	str	r3, [r7, #8]
 8004690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004692:	4b0f      	ldr	r3, [pc, #60]	; (80046d0 <HAL_MspInit+0x5c>)
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	4a0e      	ldr	r2, [pc, #56]	; (80046d0 <HAL_MspInit+0x5c>)
 8004698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800469c:	61d3      	str	r3, [r2, #28]
 800469e:	4b0c      	ldr	r3, [pc, #48]	; (80046d0 <HAL_MspInit+0x5c>)
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a6:	607b      	str	r3, [r7, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80046aa:	4b0a      	ldr	r3, [pc, #40]	; (80046d4 <HAL_MspInit+0x60>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	4a04      	ldr	r2, [pc, #16]	; (80046d4 <HAL_MspInit+0x60>)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046c6:	bf00      	nop
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr
 80046d0:	40021000 	.word	0x40021000
 80046d4:	40010000 	.word	0x40010000

080046d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b088      	sub	sp, #32
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046e0:	f107 0310 	add.w	r3, r7, #16
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	609a      	str	r2, [r3, #8]
 80046ec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a15      	ldr	r2, [pc, #84]	; (8004748 <HAL_I2C_MspInit+0x70>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d123      	bne.n	8004740 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046f8:	4b14      	ldr	r3, [pc, #80]	; (800474c <HAL_I2C_MspInit+0x74>)
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	4a13      	ldr	r2, [pc, #76]	; (800474c <HAL_I2C_MspInit+0x74>)
 80046fe:	f043 0308 	orr.w	r3, r3, #8
 8004702:	6193      	str	r3, [r2, #24]
 8004704:	4b11      	ldr	r3, [pc, #68]	; (800474c <HAL_I2C_MspInit+0x74>)
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004710:	23c0      	movs	r3, #192	; 0xc0
 8004712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004714:	2312      	movs	r3, #18
 8004716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004718:	2303      	movs	r3, #3
 800471a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800471c:	f107 0310 	add.w	r3, r7, #16
 8004720:	4619      	mov	r1, r3
 8004722:	480b      	ldr	r0, [pc, #44]	; (8004750 <HAL_I2C_MspInit+0x78>)
 8004724:	f001 fb94 	bl	8005e50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004728:	4b08      	ldr	r3, [pc, #32]	; (800474c <HAL_I2C_MspInit+0x74>)
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	4a07      	ldr	r2, [pc, #28]	; (800474c <HAL_I2C_MspInit+0x74>)
 800472e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004732:	61d3      	str	r3, [r2, #28]
 8004734:	4b05      	ldr	r3, [pc, #20]	; (800474c <HAL_I2C_MspInit+0x74>)
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004740:	bf00      	nop
 8004742:	3720      	adds	r7, #32
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40005400 	.word	0x40005400
 800474c:	40021000 	.word	0x40021000
 8004750:	40010c00 	.word	0x40010c00

08004754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004758:	bf00      	nop
 800475a:	46bd      	mov	sp, r7
 800475c:	bc80      	pop	{r7}
 800475e:	4770      	bx	lr

08004760 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004764:	e7fe      	b.n	8004764 <HardFault_Handler+0x4>

08004766 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004766:	b480      	push	{r7}
 8004768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800476a:	e7fe      	b.n	800476a <MemManage_Handler+0x4>

0800476c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004770:	e7fe      	b.n	8004770 <BusFault_Handler+0x4>

08004772 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004772:	b480      	push	{r7}
 8004774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004776:	e7fe      	b.n	8004776 <UsageFault_Handler+0x4>

08004778 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800477c:	bf00      	nop
 800477e:	46bd      	mov	sp, r7
 8004780:	bc80      	pop	{r7}
 8004782:	4770      	bx	lr

08004784 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004788:	bf00      	nop
 800478a:	46bd      	mov	sp, r7
 800478c:	bc80      	pop	{r7}
 800478e:	4770      	bx	lr

08004790 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004794:	bf00      	nop
 8004796:	46bd      	mov	sp, r7
 8004798:	bc80      	pop	{r7}
 800479a:	4770      	bx	lr

0800479c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047a0:	f001 fa34 	bl	8005c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047a4:	bf00      	nop
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80047ac:	4b15      	ldr	r3, [pc, #84]	; (8004804 <SystemInit+0x5c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a14      	ldr	r2, [pc, #80]	; (8004804 <SystemInit+0x5c>)
 80047b2:	f043 0301 	orr.w	r3, r3, #1
 80047b6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80047b8:	4b12      	ldr	r3, [pc, #72]	; (8004804 <SystemInit+0x5c>)
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	4911      	ldr	r1, [pc, #68]	; (8004804 <SystemInit+0x5c>)
 80047be:	4b12      	ldr	r3, [pc, #72]	; (8004808 <SystemInit+0x60>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80047c4:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <SystemInit+0x5c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a0e      	ldr	r2, [pc, #56]	; (8004804 <SystemInit+0x5c>)
 80047ca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80047ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80047d4:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <SystemInit+0x5c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a0a      	ldr	r2, [pc, #40]	; (8004804 <SystemInit+0x5c>)
 80047da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047de:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80047e0:	4b08      	ldr	r3, [pc, #32]	; (8004804 <SystemInit+0x5c>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	4a07      	ldr	r2, [pc, #28]	; (8004804 <SystemInit+0x5c>)
 80047e6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80047ea:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80047ec:	4b05      	ldr	r3, [pc, #20]	; (8004804 <SystemInit+0x5c>)
 80047ee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80047f2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80047f4:	4b05      	ldr	r3, [pc, #20]	; (800480c <SystemInit+0x64>)
 80047f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047fa:	609a      	str	r2, [r3, #8]
#endif 
}
 80047fc:	bf00      	nop
 80047fe:	46bd      	mov	sp, r7
 8004800:	bc80      	pop	{r7}
 8004802:	4770      	bx	lr
 8004804:	40021000 	.word	0x40021000
 8004808:	f8ff0000 	.word	0xf8ff0000
 800480c:	e000ed00 	.word	0xe000ed00

08004810 <_ZL14callbackRenderi>:



static void callbackRender(int flagEndHalf)
{
	flagRender = 1;
 8004810:	2201      	movs	r2, #1
 8004812:	4b05      	ldr	r3, [pc, #20]	; (8004828 <_ZL14callbackRenderi+0x18>)
	if(flagEndHalf==1)
 8004814:	4290      	cmp	r0, r2
	flagRender = 1;
 8004816:	701a      	strb	r2, [r3, #0]
		indexBufferRender=1;
	}
	else
	{
		// transfer reach half, so I can start writing the first half
		indexBufferRender=0;
 8004818:	bf18      	it	ne
 800481a:	2200      	movne	r2, #0
 800481c:	4b03      	ldr	r3, [pc, #12]	; (800482c <_ZL14callbackRenderi+0x1c>)
		indexBufferRender=1;
 800481e:	bf0c      	ite	eq
 8004820:	7018      	strbeq	r0, [r3, #0]
		indexBufferRender=0;
 8004822:	701a      	strbne	r2, [r3, #0]
	}
}
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	200003bc 	.word	0x200003bc
 800482c:	2000043d 	.word	0x2000043d

08004830 <_ZN6braids15MacroOscillator4InitEv>:
  typedef void (MacroOscillator::*RenderFn)(const uint8_t*, int16_t*, size_t);

  MacroOscillator() { }
  ~MacroOscillator() { }
  
  inline void Init() {
 8004830:	b570      	push	{r4, r5, r6, lr}
    pitch_ = 60 << 7;
 8004832:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
    phase_increment_ = 1;
 8004836:	2500      	movs	r5, #0
 8004838:	2601      	movs	r6, #1
    discontinuity_depth_ = -16383;
 800483a:	f24c 0201 	movw	r2, #49153	; 0xc001
 800483e:	4604      	mov	r4, r0
 8004840:	f8a0 206c 	strh.w	r2, [r0, #108]	; 0x6c
    pitch_ = 60 << 7;
 8004844:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
    discontinuity_depth_ = -16383;
 8004848:	f8a0 208c 	strh.w	r2, [r0, #140]	; 0x8c
    pitch_ = 60 << 7;
 800484c:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
    discontinuity_depth_ = -16383;
 8004850:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
    pitch_ = 60 << 7;
 8004854:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
    phase_increment_ = 1;
 8004858:	e9c0 5616 	strd	r5, r6, [r0, #88]	; 0x58
    high_ = false;
 800485c:	f880 5064 	strb.w	r5, [r0, #100]	; 0x64
    parameter_ = previous_parameter_ = 0;
 8004860:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
 8004864:	f8a0 5066 	strh.w	r5, [r0, #102]	; 0x66
    aux_parameter_ = 0;
 8004868:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
    next_sample_ = 0;
 800486c:	6705      	str	r5, [r0, #112]	; 0x70
    phase_increment_ = 1;
 800486e:	e9c0 561e 	strd	r5, r6, [r0, #120]	; 0x78
    high_ = false;
 8004872:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    parameter_ = previous_parameter_ = 0;
 8004876:	f8a0 5088 	strh.w	r5, [r0, #136]	; 0x88
 800487a:	f8a0 5086 	strh.w	r5, [r0, #134]	; 0x86
    aux_parameter_ = 0;
 800487e:	f8a0 508a 	strh.w	r5, [r0, #138]	; 0x8a
    next_sample_ = 0;
 8004882:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    phase_increment_ = 1;
 8004886:	e9c0 5626 	strd	r5, r6, [r0, #152]	; 0x98
    high_ = false;
 800488a:	f880 50a4 	strb.w	r5, [r0, #164]	; 0xa4
    parameter_ = previous_parameter_ = 0;
 800488e:	f8a0 50a8 	strh.w	r5, [r0, #168]	; 0xa8
 8004892:	f8a0 50a6 	strh.w	r5, [r0, #166]	; 0xa6
    aux_parameter_ = 0;
 8004896:	f8a0 50aa 	strh.w	r5, [r0, #170]	; 0xaa
    next_sample_ = 0;
 800489a:	f8c0 50b0 	str.w	r5, [r0, #176]	; 0xb0
    memset(&state_, 0, sizeof(state_));
 800489e:	22c4      	movs	r2, #196	; 0xc4
 80048a0:	4629      	mov	r1, r5
 80048a2:	30d8      	adds	r0, #216	; 0xd8
 80048a4:	f003 f823 	bl	80078ee <memset>
    decay_ = 4093;
 80048a8:	f640 73fd 	movw	r3, #4093	; 0xffd
    frequency_ = 33 << 7;
 80048ac:	f44f 5284 	mov.w	r2, #4224	; 0x1080
 80048b0:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
 80048b4:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
 80048b8:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
 80048bc:	f8c4 31dc 	str.w	r3, [r4, #476]	; 0x1dc
    resonance_ = 16384;
 80048c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    delay_ = 0;
 80048c4:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
    counter_ = 0;
 80048c8:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
    state_ = 0;
 80048cc:	f8c4 51a8 	str.w	r5, [r4, #424]	; 0x1a8
    delay_ = 0;
 80048d0:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
    counter_ = 0;
 80048d4:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    state_ = 0;
 80048d8:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
    delay_ = 0;
 80048dc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    counter_ = 0;
 80048e0:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
    state_ = 0;
 80048e4:	f8c4 51d0 	str.w	r5, [r4, #464]	; 0x1d0
    delay_ = 0;
 80048e8:	f8c4 51d8 	str.w	r5, [r4, #472]	; 0x1d8
    counter_ = 0;
 80048ec:	f8c4 51e0 	str.w	r5, [r4, #480]	; 0x1e0
    state_ = 0;
 80048f0:	f8c4 51e4 	str.w	r5, [r4, #484]	; 0x1e4
    lp_ = 0;
 80048f4:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    bp_ = 0;
 80048f8:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
    frequency_ = 33 << 7;
 80048fc:	f8a4 21ee 	strh.w	r2, [r4, #494]	; 0x1ee
    resonance_ = 16384;
 8004900:	f8a4 31f0 	strh.w	r3, [r4, #496]	; 0x1f0
    dirty_ = true;
 8004904:	f884 61ec 	strb.w	r6, [r4, #492]	; 0x1ec
    punch_ = 0;
 8004908:	f8c4 51f4 	str.w	r5, [r4, #500]	; 0x1f4
    mode_ = SVF_MODE_BP;
 800490c:	f884 6208 	strb.w	r6, [r4, #520]	; 0x208
    lp_ = 0;
 8004910:	f8c4 5220 	str.w	r5, [r4, #544]	; 0x220
    bp_ = 0;
 8004914:	f8c4 5224 	str.w	r5, [r4, #548]	; 0x224
    frequency_ = 33 << 7;
 8004918:	f8a4 220e 	strh.w	r2, [r4, #526]	; 0x20e
    resonance_ = 16384;
 800491c:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
    dirty_ = true;
 8004920:	f884 620c 	strb.w	r6, [r4, #524]	; 0x20c
    punch_ = 0;
 8004924:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
    mode_ = SVF_MODE_BP;
 8004928:	f884 6228 	strb.w	r6, [r4, #552]	; 0x228
    lp_ = 0;
 800492c:	f8c4 5240 	str.w	r5, [r4, #576]	; 0x240
    bp_ = 0;
 8004930:	f8c4 5244 	str.w	r5, [r4, #580]	; 0x244
    frequency_ = 33 << 7;
 8004934:	f8a4 222e 	strh.w	r2, [r4, #558]	; 0x22e
    resonance_ = 16384;
 8004938:	f8a4 3230 	strh.w	r3, [r4, #560]	; 0x230
    dirty_ = true;
 800493c:	f884 622c 	strb.w	r6, [r4, #556]	; 0x22c
    punch_ = 0;
 8004940:	f8c4 5234 	str.w	r5, [r4, #564]	; 0x234
    mode_ = SVF_MODE_BP;
 8004944:	f884 6248 	strb.w	r6, [r4, #584]	; 0x248
    phase_ = 0;
 8004948:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
    strike_ = true;
 800494c:	f884 60d4 	strb.w	r6, [r4, #212]	; 0xd4
    init_ = true;
 8004950:	f884 60d3 	strb.w	r6, [r4, #211]	; 0xd3
    analog_oscillator_[0].Init();
    analog_oscillator_[1].Init();
    analog_oscillator_[2].Init();
    digital_oscillator_.Init();
    lp_state_ = 0;
 8004954:	6565      	str	r5, [r4, #84]	; 0x54
    previous_parameter_[0] = 0;
 8004956:	6065      	str	r5, [r4, #4]
    previous_parameter_[1] = 0;
  }
 8004958:	bd70      	pop	{r4, r5, r6, pc}
	...

0800495c <_ZN8MainLoop4initEv>:


void MainLoop::init(void)
{
 800495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;
	for(i=0; i<SAMPLES_BUFFER_SIZE; i++)
 800495e:	2400      	movs	r4, #0
	{
		samplesBuffer[i] = 0;
 8004960:	4625      	mov	r5, r4
 8004962:	4b35      	ldr	r3, [pc, #212]	; (8004a38 <_ZN8MainLoop4initEv+0xdc>)
 8004964:	54e5      	strb	r5, [r4, r3]
	for(i=0; i<SAMPLES_BUFFER_SIZE; i++)
 8004966:	3401      	adds	r4, #1
 8004968:	2c30      	cmp	r4, #48	; 0x30
 800496a:	d1fb      	bne.n	8004964 <_ZN8MainLoop4initEv+0x8>
	}
    memset(sync_samples, 0, SAMPLES_BUFFER_SIZE/2);
 800496c:	2218      	movs	r2, #24
 800496e:	2100      	movs	r1, #0
 8004970:	4832      	ldr	r0, [pc, #200]	; (8004a3c <_ZN8MainLoop4initEv+0xe0>)
 8004972:	f002 ffbc 	bl	80078ee <memset>

	mehal_init((uint32_t*)samplesBuffer,SAMPLES_BUFFER_SIZE,callbackRender);
 8004976:	4621      	mov	r1, r4
 8004978:	4a31      	ldr	r2, [pc, #196]	; (8004a40 <_ZN8MainLoop4initEv+0xe4>)
 800497a:	482f      	ldr	r0, [pc, #188]	; (8004a38 <_ZN8MainLoop4initEv+0xdc>)
 800497c:	f000 fe8a 	bl	8005694 <mehal_init>

	settings.Init();
 8004980:	4830      	ldr	r0, [pc, #192]	; (8004a44 <_ZN8MainLoop4initEv+0xe8>)
 8004982:	f7ff fdbf 	bl	8004504 <_ZN6braids8Settings4InitEv>
	osc.Init();
 8004986:	4830      	ldr	r0, [pc, #192]	; (8004a48 <_ZN8MainLoop4initEv+0xec>)
 8004988:	f7ff ff52 	bl	8004830 <_ZN6braids15MacroOscillator4InitEv>
	quantizer.Init();
 800498c:	482f      	ldr	r0, [pc, #188]	; (8004a4c <_ZN8MainLoop4initEv+0xf0>)
 800498e:	f7ff fcf1 	bl	8004374 <_ZN6braids9Quantizer4InitEv>

  void Init() {
    target_[ENV_SEGMENT_ATTACK] = 65535;
    target_[ENV_SEGMENT_DECAY] = 0;
    target_[ENV_SEGMENT_DEAD] = 0;
    increment_[ENV_SEGMENT_DEAD] = 0;
 8004992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004996:	4b2e      	ldr	r3, [pc, #184]	; (8004a50 <_ZN8MainLoop4initEv+0xf4>)
	envelope.Init();
	//jitter_source.Init();
	adc.Init();
 8004998:	482e      	ldr	r0, [pc, #184]	; (8004a54 <_ZN8MainLoop4initEv+0xf8>)
 800499a:	609d      	str	r5, [r3, #8]
 800499c:	60da      	str	r2, [r3, #12]
    target_[ENV_SEGMENT_DECAY] = 0;
 800499e:	821d      	strh	r5, [r3, #16]
 80049a0:	f7ff fdf5 	bl	800458e <_ZN6braids3Adc4InitEv>
	userInterface.init(&adc,&memory);
 80049a4:	4a2c      	ldr	r2, [pc, #176]	; (8004a58 <_ZN8MainLoop4initEv+0xfc>)
 80049a6:	492b      	ldr	r1, [pc, #172]	; (8004a54 <_ZN8MainLoop4initEv+0xf8>)
 80049a8:	482c      	ldr	r0, [pc, #176]	; (8004a5c <_ZN8MainLoop4initEv+0x100>)
 80049aa:	f000 fb67 	bl	800507c <_ZN2Ui4initEPN6braids3AdcEP6Memory>
	//ws.Init(GetUniqueId(1));


	// calibration
	int32_t adc_code_c2=memory.readUInt32(Memory::ADDR_ADC_CODE_C2);
 80049ae:	2100      	movs	r1, #0
 80049b0:	4829      	ldr	r0, [pc, #164]	; (8004a58 <_ZN8MainLoop4initEv+0xfc>)
 80049b2:	f000 fe0b 	bl	80055cc <_ZN6Memory10readUInt32Et>
	if(adc_code_c2<0 || adc_code_c2>4095) adc_code_c2=82;

	int32_t adc_code_c4=memory.readUInt32(Memory::ADDR_ADC_CODE_C4);
 80049b6:	2104      	movs	r1, #4
 80049b8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80049bc:	bf34      	ite	cc
 80049be:	4604      	movcc	r4, r0
 80049c0:	2452      	movcs	r4, #82	; 0x52
 80049c2:	4825      	ldr	r0, [pc, #148]	; (8004a58 <_ZN8MainLoop4initEv+0xfc>)
 80049c4:	f000 fe02 	bl	80055cc <_ZN6Memory10readUInt32Et>
 80049c8:	f240 279f 	movw	r7, #671	; 0x29f
	if(adc_code_c4<0 || adc_code_c4>4095) adc_code_c4=671;

	int32_t adc_code_fm=memory.readUInt32(Memory::ADDR_ADC_CODE_FM);
 80049cc:	2108      	movs	r1, #8
 80049ce:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80049d2:	bf38      	it	cc
 80049d4:	4607      	movcc	r7, r0
 80049d6:	4820      	ldr	r0, [pc, #128]	; (8004a58 <_ZN8MainLoop4initEv+0xfc>)
 80049d8:	f000 fdf8 	bl	80055cc <_ZN6Memory10readUInt32Et>
	if(adc_code_fm<0 || adc_code_fm>4095) adc_code_fm=0;

	int32_t adc_code_p0_min= memory.readUInt32(Memory::ADDR_ADC_CODE_P0_MIN);
 80049dc:	210c      	movs	r1, #12
 80049de:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80049e2:	bf34      	ite	cc
 80049e4:	4606      	movcc	r6, r0
 80049e6:	2600      	movcs	r6, #0
 80049e8:	481b      	ldr	r0, [pc, #108]	; (8004a58 <_ZN8MainLoop4initEv+0xfc>)
 80049ea:	f000 fdef 	bl	80055cc <_ZN6Memory10readUInt32Et>
	if(adc_code_p0_min<0 || adc_code_p0_min>4095) adc_code_p0_min=0;

	int32_t adc_code_p0_max= memory.readUInt32(Memory::ADDR_ADC_CODE_P0_MAX);
 80049ee:	2110      	movs	r1, #16
 80049f0:	4819      	ldr	r0, [pc, #100]	; (8004a58 <_ZN8MainLoop4initEv+0xfc>)
 80049f2:	f000 fdeb 	bl	80055cc <_ZN6Memory10readUInt32Et>
	if(adc_code_p0_max<0 || adc_code_p0_max>4095) adc_code_p0_max=4095;

	int32_t adc_code_p1_min= memory.readUInt32(Memory::ADDR_ADC_CODE_P1_MIN);
 80049f6:	2114      	movs	r1, #20
 80049f8:	4817      	ldr	r0, [pc, #92]	; (8004a58 <_ZN8MainLoop4initEv+0xfc>)
 80049fa:	f000 fde7 	bl	80055cc <_ZN6Memory10readUInt32Et>
	if(adc_code_p1_min<0 || adc_code_p1_min>4095) adc_code_p1_min=0;

	int32_t adc_code_p1_max= memory.readUInt32(Memory::ADDR_ADC_CODE_P1_MAX);
 80049fe:	2118      	movs	r1, #24
 8004a00:	4815      	ldr	r0, [pc, #84]	; (8004a58 <_ZN8MainLoop4initEv+0xfc>)
 8004a02:	f000 fde3 	bl	80055cc <_ZN6Memory10readUInt32Et>
      int32_t adc_code_fm,
      int32_t adc_code_p0_min,
      int32_t adc_code_p0_max,
      int32_t adc_code_p1_min,
      int32_t adc_code_p1_max) {
    if (adc_code_c4 != adc_code_c2) {
 8004a06:	42bc      	cmp	r4, r7
 8004a08:	4d0e      	ldr	r5, [pc, #56]	; (8004a44 <_ZN8MainLoop4initEv+0xe8>)
 8004a0a:	d00d      	beq.n	8004a28 <_ZN8MainLoop4initEv+0xcc>
      int32_t scale = (24 * 128 * 4096L) / (adc_code_c4 - adc_code_c2);
 8004a0c:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8004a10:	1b3a      	subs	r2, r7, r4
 8004a12:	fb93 f3f2 	sdiv	r3, r3, r2
      data_.pitch_cv_scale = scale;
      data_.pitch_cv_offset = (60 << 7) - 
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 8004a16:	443c      	add	r4, r7
 8004a18:	1064      	asrs	r4, r4, #1
      data_.pitch_cv_scale = scale;
 8004a1a:	61ab      	str	r3, [r5, #24]
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 8004a1c:	4363      	muls	r3, r4
 8004a1e:	131b      	asrs	r3, r3, #12
      data_.pitch_cv_offset = (60 << 7) - 
 8004a20:	f5c3 53f0 	rsb	r3, r3, #7680	; 0x1e00
 8004a24:	616b      	str	r3, [r5, #20]
      data_.fm_cv_offset = adc_code_fm;
 8004a26:	61ee      	str	r6, [r5, #28]
    //     int32_t offset = -(min_code[i] * scale >> 12) - 40;
    //     data_.parameter_cv_offset[i] = offset;
    //     data_.parameter_cv_scale[i] = scale;
    //   }
    // }
    Save();
 8004a28:	4806      	ldr	r0, [pc, #24]	; (8004a44 <_ZN8MainLoop4initEv+0xe8>)
 8004a2a:	f7ff fdab 	bl	8004584 <_ZN6braids8Settings4SaveEv>
    data[setting] = value;
 8004a2e:	2304      	movs	r3, #4
 8004a30:	706b      	strb	r3, [r5, #1]
 8004a32:	2301      	movs	r3, #1
 8004a34:	722b      	strb	r3, [r5, #8]
	//________________________________

	settings.SetValue(SETTING_RESOLUTION,RESOLUTION_8_BIT);
	settings.SetValue(SETTING_PITCH_OCTAVE,1); // C2: Lowest octave

}
 8004a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a38:	200003d6 	.word	0x200003d6
 8004a3c:	200003bd 	.word	0x200003bd
 8004a40:	08004811 	.word	0x08004811
 8004a44:	20000358 	.word	0x20000358
 8004a48:	20000450 	.word	0x20000450
 8004a4c:	200046c8 	.word	0x200046c8
 8004a50:	200046a4 	.word	0x200046a4
 8004a54:	20000444 	.word	0x20000444
 8004a58:	200046a0 	.word	0x200046a0
 8004a5c:	20000408 	.word	0x20000408

08004a60 <_ZN8MainLoop6renderEPhm>:
	}
	//______________
}

void MainLoop::render(uint8_t* out, uint32_t outSize)
{
 8004a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a64:	b083      	sub	sp, #12
    return data[setting];
 8004a66:	4cb4      	ldr	r4, [pc, #720]	; (8004d38 <_ZN8MainLoop6renderEPhm+0x2d8>)
 8004a68:	af00      	add	r7, sp, #0
	  static int16_t previous_shape = 0;
	  static uint16_t gain_lp;

	  envelope.Update(
	      settings.GetValue(SETTING_AD_ATTACK) * 8,
	      settings.GetValue(SETTING_AD_DECAY) * 8);
 8004a6a:	7be3      	ldrb	r3, [r4, #15]
{
 8004a6c:	6079      	str	r1, [r7, #4]
 8004a6e:	4691      	mov	r9, r2
  inline EnvelopeSegment segment() const {
    return static_cast<EnvelopeSegment>(segment_);
  }

  inline void Update(int32_t a, int32_t d) {
    increment_[ENV_SEGMENT_ATTACK] = lut_env_portamento_increments[a];
 8004a70:	49b2      	ldr	r1, [pc, #712]	; (8004d3c <_ZN8MainLoop6renderEPhm+0x2dc>)
	      settings.GetValue(SETTING_AD_ATTACK) * 8,
 8004a72:	7ba2      	ldrb	r2, [r4, #14]
	      settings.GetValue(SETTING_AD_DECAY) * 8);
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	4db2      	ldr	r5, [pc, #712]	; (8004d40 <_ZN8MainLoop6renderEPhm+0x2e0>)
    increment_[ENV_SEGMENT_DECAY] = lut_env_portamento_increments[d];
 8004a78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    increment_[ENV_SEGMENT_ATTACK] = lut_env_portamento_increments[a];
 8004a7c:	00d2      	lsls	r2, r2, #3
 8004a7e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    increment_[ENV_SEGMENT_DECAY] = lut_env_portamento_increments[d];
 8004a82:	606b      	str	r3, [r5, #4]
    segment_ = segment;
    phase_ = 0;
  }

  inline uint16_t Render() {
    uint32_t increment = increment_[segment_];
 8004a84:	696b      	ldr	r3, [r5, #20]
    increment_[ENV_SEGMENT_ATTACK] = lut_env_portamento_increments[a];
 8004a86:	602a      	str	r2, [r5, #0]
 8004a88:	6a29      	ldr	r1, [r5, #32]
 8004a8a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8004a8e:	2000      	movs	r0, #0
 8004a90:	1852      	adds	r2, r2, r1
 8004a92:	bf28      	it	cs
 8004a94:	2001      	movcs	r0, #1
    phase_ += increment;
 8004a96:	622a      	str	r2, [r5, #32]
    if (phase_ < increment) {
 8004a98:	b198      	cbz	r0, 8004ac2 <_ZN8MainLoop6renderEPhm+0x62>
      value_ = Mix(a_, b_, 65535);
      Trigger(static_cast<EnvelopeSegment>(segment_ + 1));
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	b2db      	uxtb	r3, r3
    if (segment == ENV_SEGMENT_DEAD) {
 8004a9e:	2b02      	cmp	r3, #2
      value_ = 0;
 8004aa0:	bf0c      	ite	eq
 8004aa2:	2200      	moveq	r2, #0
  return (a * (65535 - balance) + b * balance) >> 16;
 8004aa4:	8b6a      	ldrhne	r2, [r5, #26]
    segment_ = segment;
 8004aa6:	616b      	str	r3, [r5, #20]
 8004aa8:	bf1c      	itt	ne
 8004aaa:	ebc2 4202 	rsbne	r2, r2, r2, lsl #16
 8004aae:	1412      	asrne	r2, r2, #16
      value_ = 0;
 8004ab0:	83aa      	strh	r2, [r5, #28]
    a_ = value_;
 8004ab2:	8baa      	ldrh	r2, [r5, #28]
 8004ab4:	832a      	strh	r2, [r5, #24]
    b_ = target_[segment];
 8004ab6:	eb05 0243 	add.w	r2, r5, r3, lsl #1
    phase_ = 0;
 8004aba:	2300      	movs	r3, #0
    b_ = target_[segment];
 8004abc:	8992      	ldrh	r2, [r2, #12]
    phase_ = 0;
 8004abe:	622b      	str	r3, [r5, #32]
    b_ = target_[segment];
 8004ac0:	836a      	strh	r2, [r5, #26]
    }
    if (increment_[segment_]) {
 8004ac2:	696b      	ldr	r3, [r5, #20]
 8004ac4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8004ac8:	b1c3      	cbz	r3, 8004afc <_ZN8MainLoop6renderEPhm+0x9c>
      value_ = Mix(a_, b_, Interpolate824(lut_env_expo, phase_));
 8004aca:	6a2a      	ldr	r2, [r5, #32]
  uint32_t a = table[phase >> 24];
 8004acc:	499d      	ldr	r1, [pc, #628]	; (8004d44 <_ZN8MainLoop6renderEPhm+0x2e4>)
 8004ace:	0e10      	lsrs	r0, r2, #24
 8004ad0:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
  uint32_t b = table[(phase >> 24) + 1];
 8004ad4:	3102      	adds	r1, #2
 8004ad6:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 8004ada:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8004ade:	1ac9      	subs	r1, r1, r3
 8004ae0:	434a      	muls	r2, r1
  return (a * (65535 - balance) + b * balance) >> 16;
 8004ae2:	8b68      	ldrh	r0, [r5, #26]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 8004ae4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  return (a * (65535 - balance) + b * balance) >> 16;
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	f5c3 417f 	rsb	r1, r3, #65280	; 0xff00
 8004aee:	4343      	muls	r3, r0
 8004af0:	8b2a      	ldrh	r2, [r5, #24]
 8004af2:	31ff      	adds	r1, #255	; 0xff
 8004af4:	fb01 3302 	mla	r3, r1, r2, r3
 8004af8:	141b      	asrs	r3, r3, #16
 8004afa:	83ab      	strh	r3, [r5, #28]

	  uint32_t ad_value = envelope.Render();


	  // Shape modulation
	  if (settings.meta_modulation())
 8004afc:	79a2      	ldrb	r2, [r4, #6]
    }
    return value_;
 8004afe:	f8b5 801c 	ldrh.w	r8, [r5, #28]
 8004b02:	7820      	ldrb	r0, [r4, #0]
 8004b04:	4b90      	ldr	r3, [pc, #576]	; (8004d48 <_ZN8MainLoop6renderEPhm+0x2e8>)
 8004b06:	4e91      	ldr	r6, [pc, #580]	; (8004d4c <_ZN8MainLoop6renderEPhm+0x2ec>)
 8004b08:	2a00      	cmp	r2, #0
 8004b0a:	f000 80f2 	beq.w	8004cf2 <_ZN8MainLoop6renderEPhm+0x292>
	  {
	      int16_t shape = adc.channel(ADC_CHANNEL_FM)>>6;
 8004b0e:	88d9      	ldrh	r1, [r3, #6]
	      shape -= settings.data().fm_cv_offset;
 8004b10:	69e2      	ldr	r2, [r4, #28]
 8004b12:	ebc2 1291 	rsb	r2, r2, r1, lsr #6
	      if (shape > previous_shape + 1 || shape < previous_shape - 1) {
 8004b16:	498e      	ldr	r1, [pc, #568]	; (8004d50 <_ZN8MainLoop6renderEPhm+0x2f0>)
	      shape -= settings.data().fm_cv_offset;
 8004b18:	b212      	sxth	r2, r2
	      if (shape > previous_shape + 1 || shape < previous_shape - 1) {
 8004b1a:	f9b1 c000 	ldrsh.w	ip, [r1]
 8004b1e:	f10c 0e01 	add.w	lr, ip, #1
 8004b22:	4572      	cmp	r2, lr
 8004b24:	dc03      	bgt.n	8004b2e <_ZN8MainLoop6renderEPhm+0xce>
 8004b26:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
 8004b2a:	4572      	cmp	r2, lr
 8004b2c:	da01      	bge.n	8004b32 <_ZN8MainLoop6renderEPhm+0xd2>
	      shape -= settings.data().fm_cv_offset;
 8004b2e:	4694      	mov	ip, r2
	        previous_shape = shape;
 8004b30:	800a      	strh	r2, [r1, #0]
	      } else {
	        shape = previous_shape;
	      }
	      shape = (OSCILLATOR_INDEX_LEN* shape) >> 5;
 8004b32:	212b      	movs	r1, #43	; 0x2b
 8004b34:	fb01 f10c 	mul.w	r1, r1, ip
	      shape += settings.shape();
 8004b38:	eb00 1161 	add.w	r1, r0, r1, asr #5

	      shape = userInterface.validateOscillatorIndex(shape);
 8004b3c:	b209      	sxth	r1, r1
 8004b3e:	4885      	ldr	r0, [pc, #532]	; (8004d54 <_ZN8MainLoop6renderEPhm+0x2f4>)
 8004b40:	603b      	str	r3, [r7, #0]
 8004b42:	f000 fa21 	bl	8004f88 <_ZN2Ui23validateOscillatorIndexEs>

	      osc.set_shape(userInterface.getOscillatorShapeFromIndex(shape));
 8004b46:	4601      	mov	r1, r0
 8004b48:	4882      	ldr	r0, [pc, #520]	; (8004d54 <_ZN8MainLoop6renderEPhm+0x2f4>)
 8004b4a:	f000 fa23 	bl	8004f94 <_ZN2Ui27getOscillatorShapeFromIndexEs>
  
  inline void set_shape(MacroOscillatorShape shape) {
    if (shape != shape_) {
 8004b4e:	f244 224c 	movw	r2, #16972	; 0x424c
 8004b52:	5cb1      	ldrb	r1, [r6, r2]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	4281      	cmp	r1, r0
  inline uint32_t phase_increment() const {
    return phase_increment_;
  }
  
  inline void Strike() {
    strike_ = true;
 8004b58:	bf18      	it	ne
 8004b5a:	2101      	movne	r1, #1
 8004b5c:	f647 7cff 	movw	ip, #32767	; 0x7fff
 8004b60:	bf18      	it	ne
 8004b62:	f886 10d4 	strbne.w	r1, [r6, #212]	; 0xd4
      Strike();
    }
    shape_ = shape;
 8004b66:	54b0      	strb	r0, [r6, r2]
    }
    return fm_adc_code;
  }
  
  inline int32_t adc_to_parameter(int index, int32_t adc_code) const {
    int32_t scale = static_cast<int32_t>(data_.parameter_cv_scale[index]);
 8004b68:	8ca1      	ldrh	r1, [r4, #36]	; 0x24


	  // Set timbre and color: CV + internal modulation.
	  uint16_t parameters[2];
	  for (uint16_t i = 0; i < 2; ++i) {
	    int32_t value = settings.adc_to_parameter(i, adc.channel(i));
 8004b6a:	885a      	ldrh	r2, [r3, #2]
 8004b6c:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
    int32_t offset = static_cast<int32_t>(data_.parameter_cv_offset[index]);
    return (scale * adc_code >> 12) + offset;
 8004b6e:	434a      	muls	r2, r1
    int32_t offset = static_cast<int32_t>(data_.parameter_cv_offset[index]);
 8004b70:	f9b4 1020 	ldrsh.w	r1, [r4, #32]
    return (scale * adc_code >> 12) + offset;
 8004b74:	eb01 3122 	add.w	r1, r1, r2, asr #12

	    Setting ad_mod_setting = i == 0 ? SETTING_AD_TIMBRE : SETTING_AD_COLOR;

	    value += ad_value * settings.GetValue(ad_mod_setting) >> 5;
 8004b78:	78e2      	ldrb	r2, [r4, #3]
 8004b7a:	fb08 f202 	mul.w	r2, r8, r2
 8004b7e:	eb01 1152 	add.w	r1, r1, r2, lsr #5
	    int32_t value = settings.adc_to_parameter(i, adc.channel(i));
 8004b82:	881a      	ldrh	r2, [r3, #0]
 8004b84:	4561      	cmp	r1, ip
 8004b86:	fb02 f000 	mul.w	r0, r2, r0
    int32_t offset = static_cast<int32_t>(data_.parameter_cv_offset[index]);
 8004b8a:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 8004b8e:	bfa8      	it	ge
 8004b90:	4661      	movge	r1, ip
    return (scale * adc_code >> 12) + offset;
 8004b92:	eb02 3220 	add.w	r2, r2, r0, asr #12
	    value += ad_value * settings.GetValue(ad_mod_setting) >> 5;
 8004b96:	7c60      	ldrb	r0, [r4, #17]

	    CONSTRAIN(value, 0, 32767);

	    parameters[i] = value;
	  }
	  osc.set_parameters(parameters[0], parameters[1]);
 8004b98:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	    value += ad_value * settings.GetValue(ad_mod_setting) >> 5;
 8004b9c:	fb08 f000 	mul.w	r0, r8, r0
 8004ba0:	eb02 1250 	add.w	r2, r2, r0, lsr #5
 8004ba4:	4562      	cmp	r2, ip
 8004ba6:	bfa8      	it	ge
 8004ba8:	4662      	movge	r2, ip
	  osc.set_parameters(parameters[0], parameters[1]);
 8004baa:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8004bae:	8072      	strh	r2, [r6, #2]
    if (data_.pitch_range == PITCH_RANGE_EXTERNAL ||
 8004bb0:	79e2      	ldrb	r2, [r4, #7]
 8004bb2:	8031      	strh	r1, [r6, #0]
 8004bb4:	f012 0ffb 	tst.w	r2, #251	; 0xfb
	  //_________________________________________________


	  // Apply hysteresis to ADC reading to prevent a single bit error to move
	  // the quantized pitch up and down the quantization boundary.
	  int32_t pitch = quantizer.Process(
 8004bb8:	8919      	ldrh	r1, [r3, #8]
 8004bba:	f040 809f 	bne.w	8004cfc <_ZN8MainLoop6renderEPhm+0x29c>
      pitch_adc_code = pitch_adc_code * data_.pitch_cv_scale >> 12;
 8004bbe:	69a2      	ldr	r2, [r4, #24]
 8004bc0:	434a      	muls	r2, r1
      pitch_adc_code += data_.pitch_cv_offset;
 8004bc2:	6961      	ldr	r1, [r4, #20]
 8004bc4:	eb01 3122 	add.w	r1, r1, r2, asr #12
    return data_.quantizer_root;
 8004bc8:	7ce2      	ldrb	r2, [r4, #19]
	      settings.adc_to_pitch(adc.channel(ADC_CHANNEL_PITCH)),
	      (60 + settings.quantizer_root()) << 7);
 8004bca:	4863      	ldr	r0, [pc, #396]	; (8004d58 <_ZN8MainLoop6renderEPhm+0x2f8>)
 8004bcc:	323c      	adds	r2, #60	; 0x3c
 8004bce:	01d2      	lsls	r2, r2, #7
 8004bd0:	603b      	str	r3, [r7, #0]
 8004bd2:	f7ff fc21 	bl	8004418 <_ZN6braids9Quantizer7ProcessEll>

	  if (!settings.meta_modulation()) {
 8004bd6:	79a1      	ldrb	r1, [r4, #6]
	      (60 + settings.quantizer_root()) << 7);
 8004bd8:	4683      	mov	fp, r0
	  if (!settings.meta_modulation()) {
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	b969      	cbnz	r1, 8004bfa <_ZN8MainLoop6renderEPhm+0x19a>
    if (data_.pitch_range == PITCH_RANGE_440) {
 8004bde:	f894 e007 	ldrb.w	lr, [r4, #7]
		  return this->currentValues[4];
	  }
	  else if(index==3)
	  {
		  // FM
		  return this->currentValues[3];
 8004be2:	88d8      	ldrh	r0, [r3, #6]
 8004be4:	f1be 0f03 	cmp.w	lr, #3
    fm_adc_code = fm_adc_code * 7680 >> 12;
 8004be8:	bf18      	it	ne
 8004bea:	f44f 51f0 	movne.w	r1, #7680	; 0x1e00
    fm_adc_code -= data_.fm_cv_offset;
 8004bee:	69e2      	ldr	r2, [r4, #28]
 8004bf0:	bf1e      	ittt	ne
 8004bf2:	1a80      	subne	r0, r0, r2
    fm_adc_code = fm_adc_code * 7680 >> 12;
 8004bf4:	4341      	mulne	r1, r0
 8004bf6:	1309      	asrne	r1, r1, #12
	    pitch += settings.adc_to_fm(adc.channel(ADC_CHANNEL_FM));
 8004bf8:	448b      	add	fp, r1
	  }
	  // Check if the pitch has changed to cause an auto-retrigger
	  int32_t pitch_delta = pitch - previous_pitch;
	  if (settings.data().auto_trig &&
 8004bfa:	7921      	ldrb	r1, [r4, #4]
 8004bfc:	4857      	ldr	r0, [pc, #348]	; (8004d5c <_ZN8MainLoop6renderEPhm+0x2fc>)
 8004bfe:	f8df a170 	ldr.w	sl, [pc, #368]	; 8004d70 <_ZN8MainLoop6renderEPhm+0x310>
 8004c02:	b149      	cbz	r1, 8004c18 <_ZN8MainLoop6renderEPhm+0x1b8>
	  int32_t pitch_delta = pitch - previous_pitch;
 8004c04:	f9b0 1000 	ldrsh.w	r1, [r0]
 8004c08:	ebab 0101 	sub.w	r1, fp, r1
	      //(pitch_delta >= 0x40 || -pitch_delta >= 0x40)) {
			(pitch_delta >= 0x70 || -pitch_delta >= 0x70)) { // too much noise in this hardware
 8004c0c:	316f      	adds	r1, #111	; 0x6f
	  if (settings.data().auto_trig &&
 8004c0e:	29de      	cmp	r1, #222	; 0xde
		  trigger_flag = true;
 8004c10:	bf84      	itt	hi
 8004c12:	2101      	movhi	r1, #1
 8004c14:	f88a 1000 	strbhi.w	r1, [sl]
	  // JITTER VCO DRIFT
	  //pitch += jitter_source.Render(settings.vco_drift());

	  // Fine tune adjust
	  //pitch += adc.channel(ADC_CHANNEL_FINE_TUNE) >> 8; //pitch += internal_adc.value() >> 8;
	  uint16_t fineTuneAdc = 4095 - adc.channel(ADC_CHANNEL_FINE_TUNE);
 8004c18:	889b      	ldrh	r3, [r3, #4]
	  previous_pitch = pitch;
 8004c1a:	f8a0 b000 	strh.w	fp, [r0]
	  uint16_t fineTuneAdc = 4095 - adc.channel(ADC_CHANNEL_FINE_TUNE);
 8004c1e:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8004c22:	330f      	adds	r3, #15
 8004c24:	b29b      	uxth	r3, r3
	  if(fineTuneAdc>=(2048+256))
 8004c26:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004c2a:	d37c      	bcc.n	8004d26 <_ZN8MainLoop6renderEPhm+0x2c6>
	  {
		  pitch += ((fineTuneAdc-(2048+256))*128)/(4095-(2048+256));
 8004c2c:	f240 61ff 	movw	r1, #1791	; 0x6ff
 8004c30:	f5a3 6310 	sub.w	r3, r3, #2304	; 0x900
 8004c34:	01db      	lsls	r3, r3, #7
 8004c36:	fb93 f3f1 	sdiv	r3, r3, r1
		  userInterface.showUnCalibrated();
	  }
	  else if(fineTuneAdc<=(2048-256))
	  {
		  pitch += (fineTuneAdc*128)/(2048-256) - 128;
		  userInterface.showUnCalibrated();
 8004c3a:	4846      	ldr	r0, [pc, #280]	; (8004d54 <_ZN8MainLoop6renderEPhm+0x2f4>)
		  pitch += (fineTuneAdc*128)/(2048-256) - 128;
 8004c3c:	449b      	add	fp, r3
		  userInterface.showUnCalibrated();
 8004c3e:	f000 f9b5 	bl	8004fac <_ZN2Ui16showUnCalibratedEv>
    return data[setting];
 8004c42:	7c23      	ldrb	r3, [r4, #16]
		  // no adjust. calibrated
		  userInterface.showCalibrated();
	  }
	  //___________

	  pitch += ad_value * settings.GetValue(SETTING_AD_FM) >> 7;
 8004c44:	fb08 f103 	mul.w	r1, r8, r3
 8004c48:	eb0b 12d1 	add.w	r2, fp, r1, lsr #7
	    pitch = 16383;
	  } else if (pitch < 0) {
	    pitch = 0;
	  }

	  if (settings.vco_flatten()) {
 8004c4c:	7aa1      	ldrb	r1, [r4, #10]
 8004c4e:	f382 020e 	usat	r2, #14, r2
 8004c52:	b181      	cbz	r1, 8004c76 <_ZN8MainLoop6renderEPhm+0x216>
	    pitch = Interpolate88(lut_vco_detune, pitch << 2);
 8004c54:	0092      	lsls	r2, r2, #2
 8004c56:	b292      	uxth	r2, r2
  int32_t a = table[index >> 8];
 8004c58:	4841      	ldr	r0, [pc, #260]	; (8004d60 <_ZN8MainLoop6renderEPhm+0x300>)
 8004c5a:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8004c5e:	f830 101c 	ldrh.w	r1, [r0, ip, lsl #1]
  int32_t b = table[(index >> 8) + 1];
 8004c62:	3002      	adds	r0, #2
 8004c64:	f830 001c 	ldrh.w	r0, [r0, ip, lsl #1]
  return a + ((b - a) * static_cast<int32_t>(index & 0xff) >> 8);
 8004c68:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8004c6c:	1a40      	subs	r0, r0, r1
 8004c6e:	4342      	muls	r2, r0
 8004c70:	eb01 2222 	add.w	r2, r1, r2, asr #8
 8004c74:	b292      	uxth	r2, r2
    int32_t t = data_.pitch_range == PITCH_RANGE_LFO ? -36 << 7 : 0;
 8004c76:	79e0      	ldrb	r0, [r4, #7]
    t += (static_cast<int32_t>(data_.pitch_octave) - 2) * 12 * 128;
 8004c78:	f44f 6cc0 	mov.w	ip, #1536	; 0x600
    int32_t t = data_.pitch_range == PITCH_RANGE_LFO ? -36 << 7 : 0;
 8004c7c:	2804      	cmp	r0, #4
 8004c7e:	4839      	ldr	r0, [pc, #228]	; (8004d64 <_ZN8MainLoop6renderEPhm+0x304>)
 8004c80:	bf18      	it	ne
 8004c82:	2000      	movne	r0, #0
	  }
	  osc.set_pitch(pitch + settings.pitch_transposition());
 8004c84:	7a21      	ldrb	r1, [r4, #8]
    t += (static_cast<int32_t>(data_.pitch_octave) - 2) * 12 * 128;
 8004c86:	3902      	subs	r1, #2
 8004c88:	fb0c 0101 	mla	r1, ip, r1, r0
 8004c8c:	440a      	add	r2, r1
  }

  inline void set_pitch(int16_t pitch) {
    pitch_ = pitch;
 8004c8e:	8132      	strh	r2, [r6, #8]

	  if (trigger_flag) {
 8004c90:	f89a 2000 	ldrb.w	r2, [sl]
 8004c94:	b15a      	cbz	r2, 8004cae <_ZN8MainLoop6renderEPhm+0x24e>
 8004c96:	2201      	movs	r2, #1
 8004c98:	f886 20d4 	strb.w	r2, [r6, #212]	; 0xd4
    a_ = value_;
 8004c9c:	8baa      	ldrh	r2, [r5, #28]
 8004c9e:	832a      	strh	r2, [r5, #24]
    b_ = target_[segment];
 8004ca0:	89aa      	ldrh	r2, [r5, #12]
 8004ca2:	836a      	strh	r2, [r5, #26]
    segment_ = segment;
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	616a      	str	r2, [r5, #20]
    phase_ = 0;
 8004ca8:	622a      	str	r2, [r5, #32]
	    osc.Strike();
	    envelope.Trigger(ENV_SEGMENT_ATTACK);
	    //ui.StepMarquee();
	    trigger_flag = false;
 8004caa:	f88a 2000 	strb.w	r2, [sl]
	  }
	  //_________________________________________________________________


	  int16_t audio_samples[outSize];
 8004cae:	ea4f 0249 	mov.w	r2, r9, lsl #1
 8004cb2:	3208      	adds	r2, #8
 8004cb4:	f022 0207 	bic.w	r2, r2, #7
 8004cb8:	ebad 0d02 	sub.w	sp, sp, r2
	  int16_t* render_buffer = audio_samples; //int16_t* render_buffer = audio_samples[render_block];

	  if (settings.GetValue(SETTING_AD_VCA) != 0
	    || settings.GetValue(SETTING_AD_TIMBRE) != 0
	    || settings.GetValue(SETTING_AD_COLOR) != 0
	    || settings.GetValue(SETTING_AD_FM) != 0) {
 8004cbc:	7ca2      	ldrb	r2, [r4, #18]
	  int16_t audio_samples[outSize];
 8004cbe:	466d      	mov	r5, sp
	    || settings.GetValue(SETTING_AD_FM) != 0) {
 8004cc0:	2a00      	cmp	r2, #0
 8004cc2:	d15b      	bne.n	8004d7c <_ZN8MainLoop6renderEPhm+0x31c>
	    || settings.GetValue(SETTING_AD_TIMBRE) != 0
 8004cc4:	78e2      	ldrb	r2, [r4, #3]
 8004cc6:	2a00      	cmp	r2, #0
 8004cc8:	d158      	bne.n	8004d7c <_ZN8MainLoop6renderEPhm+0x31c>
	    || settings.GetValue(SETTING_AD_COLOR) != 0
 8004cca:	7c62      	ldrb	r2, [r4, #17]
 8004ccc:	2a00      	cmp	r2, #0
 8004cce:	d155      	bne.n	8004d7c <_ZN8MainLoop6renderEPhm+0x31c>
	    || settings.GetValue(SETTING_AD_FM) != 0) {
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d153      	bne.n	8004d7c <_ZN8MainLoop6renderEPhm+0x31c>
	    memset(sync_buffer, 0, outSize);
	  }
	  else
	  {
		  //Trigger in sync event (this is placed in sampler interrupt timer in braids)
		  memset(sync_buffer, 0, outSize);
 8004cd4:	4e24      	ldr	r6, [pc, #144]	; (8004d68 <_ZN8MainLoop6renderEPhm+0x308>)
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	464a      	mov	r2, r9
 8004cda:	4630      	mov	r0, r6
 8004cdc:	603b      	str	r3, [r7, #0]
 8004cde:	f002 fe06 	bl	80078ee <memset>
		  if(flagTriggerInEvent==1)
 8004ce2:	4922      	ldr	r1, [pc, #136]	; (8004d6c <_ZN8MainLoop6renderEPhm+0x30c>)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	680a      	ldr	r2, [r1, #0]
 8004ce8:	2a01      	cmp	r2, #1
 8004cea:	d14c      	bne.n	8004d86 <_ZN8MainLoop6renderEPhm+0x326>
		  {
			  flagTriggerInEvent=0;
 8004cec:	600b      	str	r3, [r1, #0]
			  sync_buffer[0]=1;
 8004cee:	7032      	strb	r2, [r6, #0]
 8004cf0:	e049      	b.n	8004d86 <_ZN8MainLoop6renderEPhm+0x326>
    if (shape != shape_) {
 8004cf2:	f244 224c 	movw	r2, #16972	; 0x424c
 8004cf6:	5cb1      	ldrb	r1, [r6, r2]
 8004cf8:	4281      	cmp	r1, r0
 8004cfa:	e72d      	b.n	8004b58 <_ZN8MainLoop6renderEPhm+0xf8>
    } else if (data_.pitch_range == PITCH_RANGE_FREE) {
 8004cfc:	2a01      	cmp	r2, #1
 8004cfe:	d107      	bne.n	8004d10 <_ZN8MainLoop6renderEPhm+0x2b0>
      pitch_adc_code = pitch_adc_code * data_.pitch_cv_scale >> 12;
 8004d00:	69a2      	ldr	r2, [r4, #24]
      pitch_adc_code = (pitch_adc_code - 1638);
 8004d02:	f2a1 6166 	subw	r1, r1, #1638	; 0x666
      pitch_adc_code = pitch_adc_code * data_.pitch_cv_scale >> 12;
 8004d06:	4351      	muls	r1, r2
 8004d08:	1309      	asrs	r1, r1, #12
      pitch_adc_code += 60 << 7;
 8004d0a:	f501 51f0 	add.w	r1, r1, #7680	; 0x1e00
 8004d0e:	e75b      	b.n	8004bc8 <_ZN8MainLoop6renderEPhm+0x168>
    } else if (data_.pitch_range == PITCH_RANGE_440) {
 8004d10:	2a03      	cmp	r2, #3
 8004d12:	d005      	beq.n	8004d20 <_ZN8MainLoop6renderEPhm+0x2c0>
      pitch_adc_code = (pitch_adc_code - 1638) * 9 >> 1;
 8004d14:	f2a1 6166 	subw	r1, r1, #1638	; 0x666
 8004d18:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8004d1c:	1049      	asrs	r1, r1, #1
 8004d1e:	e7f4      	b.n	8004d0a <_ZN8MainLoop6renderEPhm+0x2aa>
      pitch_adc_code = 69 << 7;
 8004d20:	f44f 510a 	mov.w	r1, #8832	; 0x2280
 8004d24:	e750      	b.n	8004bc8 <_ZN8MainLoop6renderEPhm+0x168>
	  else if(fineTuneAdc<=(2048-256))
 8004d26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d2a:	d823      	bhi.n	8004d74 <_ZN8MainLoop6renderEPhm+0x314>
		  pitch += (fineTuneAdc*128)/(2048-256) - 128;
 8004d2c:	210e      	movs	r1, #14
 8004d2e:	fb93 f3f1 	sdiv	r3, r3, r1
 8004d32:	3b80      	subs	r3, #128	; 0x80
 8004d34:	e781      	b.n	8004c3a <_ZN8MainLoop6renderEPhm+0x1da>
 8004d36:	bf00      	nop
 8004d38:	20000358 	.word	0x20000358
 8004d3c:	0800cb0c 	.word	0x0800cb0c
 8004d40:	200046a4 	.word	0x200046a4
 8004d44:	08007ed6 	.word	0x08007ed6
 8004d48:	20000444 	.word	0x20000444
 8004d4c:	20000450 	.word	0x20000450
 8004d50:	200047dc 	.word	0x200047dc
 8004d54:	20000408 	.word	0x20000408
 8004d58:	200046c8 	.word	0x200046c8
 8004d5c:	200047da 	.word	0x200047da
 8004d60:	080088e0 	.word	0x080088e0
 8004d64:	ffffee00 	.word	0xffffee00
 8004d68:	200003bd 	.word	0x200003bd
 8004d6c:	20000440 	.word	0x20000440
 8004d70:	200003d5 	.word	0x200003d5
		  userInterface.showCalibrated();
 8004d74:	482d      	ldr	r0, [pc, #180]	; (8004e2c <_ZN8MainLoop6renderEPhm+0x3cc>)
 8004d76:	f000 f925 	bl	8004fc4 <_ZN2Ui14showCalibratedEv>
 8004d7a:	e762      	b.n	8004c42 <_ZN8MainLoop6renderEPhm+0x1e2>
	    memset(sync_buffer, 0, outSize);
 8004d7c:	464a      	mov	r2, r9
 8004d7e:	2100      	movs	r1, #0
 8004d80:	482b      	ldr	r0, [pc, #172]	; (8004e30 <_ZN8MainLoop6renderEPhm+0x3d0>)
 8004d82:	f002 fdb4 	bl	80078ee <memset>
		  }
		  //______________________
	  }

	  osc.Render(sync_buffer, render_buffer, outSize);
 8004d86:	464b      	mov	r3, r9
 8004d88:	462a      	mov	r2, r5
 8004d8a:	4929      	ldr	r1, [pc, #164]	; (8004e30 <_ZN8MainLoop6renderEPhm+0x3d0>)
 8004d8c:	4829      	ldr	r0, [pc, #164]	; (8004e34 <_ZN8MainLoop6renderEPhm+0x3d4>)
 8004d8e:	f7ff fad9 	bl	8004344 <_ZN6braids15MacroOscillator6RenderEPKhPsj>

	  // Copy to DAC buffer with sample rate and bit reduction applied.
	    int16_t sample = 0;
	    size_t decimation_factor = decimation_factors[settings.data().sample_rate];
	    uint16_t bit_mask = bit_reduction_masks[settings.data().resolution];
	    int32_t gain = settings.GetValue(SETTING_AD_VCA) ? ad_value : 65535;
 8004d92:	f64f 7eff 	movw	lr, #65535	; 0xffff
	    size_t decimation_factor = decimation_factors[settings.data().sample_rate];
 8004d96:	78a2      	ldrb	r2, [r4, #2]
 8004d98:	4b27      	ldr	r3, [pc, #156]	; (8004e38 <_ZN8MainLoop6renderEPhm+0x3d8>)
 8004d9a:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8004e40 <_ZN8MainLoop6renderEPhm+0x3e0>
 8004d9e:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
	    uint16_t bit_mask = bit_reduction_masks[settings.data().resolution];
 8004da2:	7862      	ldrb	r2, [r4, #1]
 8004da4:	4b25      	ldr	r3, [pc, #148]	; (8004e3c <_ZN8MainLoop6renderEPhm+0x3dc>)
 8004da6:	f8ba 0000 	ldrh.w	r0, [sl]
 8004daa:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
	    int32_t gain = settings.GetValue(SETTING_AD_VCA) ? ad_value : 65535;
 8004dae:	7ca3      	ldrb	r3, [r4, #18]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	bf08      	it	eq
 8004db4:	46f0      	moveq	r8, lr
	    uint16_t signature = settings.signature() * settings.signature() * 4095;
 8004db6:	7b23      	ldrb	r3, [r4, #12]
 8004db8:	2400      	movs	r4, #0
	    for (size_t i = 0; i < outSize; ++i) {
 8004dba:	4622      	mov	r2, r4
	    int16_t sample = 0;
 8004dbc:	4621      	mov	r1, r4
	    uint16_t signature = settings.signature() * settings.signature() * 4095;
 8004dbe:	435b      	muls	r3, r3
 8004dc0:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 8004dc4:	b29b      	uxth	r3, r3
  return (a * (65535 - balance) + b * balance) >> 16;
 8004dc6:	ebae 0303 	sub.w	r3, lr, r3
	    for (size_t i = 0; i < outSize; ++i) {
 8004dca:	454a      	cmp	r2, r9
 8004dcc:	d10f      	bne.n	8004dee <_ZN8MainLoop6renderEPhm+0x38e>
 8004dce:	b10c      	cbz	r4, 8004dd4 <_ZN8MainLoop6renderEPhm+0x374>
 8004dd0:	f8aa 0000 	strh.w	r0, [sl]
	      render_buffer[i] = Mix(sample, warped, signature);
	    }

	  // Copy rendered buffer to DMA buffer (8bits)
	  uint32_t i;
	  for(i=0; i<outSize; i++)
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d023      	beq.n	8004e22 <_ZN8MainLoop6renderEPhm+0x3c2>
	  {
		  out[i] = (uint8_t) (((uint16_t)(  -(render_buffer[i]) + 32768U )) >>8)  ;
 8004dda:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f5c1 4100 	rsb	r1, r1, #32768	; 0x8000
 8004de4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8004de8:	54c1      	strb	r1, [r0, r3]
	  for(i=0; i<outSize; i++)
 8004dea:	3301      	adds	r3, #1
 8004dec:	e7f3      	b.n	8004dd6 <_ZN8MainLoop6renderEPhm+0x376>
	      if ((i % decimation_factor) == 0) {
 8004dee:	fbb2 f4f6 	udiv	r4, r2, r6
 8004df2:	fb06 2414 	mls	r4, r6, r4, r2
 8004df6:	b924      	cbnz	r4, 8004e02 <_ZN8MainLoop6renderEPhm+0x3a2>
	        sample = render_buffer[i] & bit_mask;
 8004df8:	f835 1012 	ldrh.w	r1, [r5, r2, lsl #1]
 8004dfc:	ea0c 0101 	and.w	r1, ip, r1
 8004e00:	b209      	sxth	r1, r1
	      sample = sample * gain_lp >> 16;
 8004e02:	fb00 f401 	mul.w	r4, r0, r1
 8004e06:	1424      	asrs	r4, r4, #16
 8004e08:	b221      	sxth	r1, r4
 8004e0a:	435c      	muls	r4, r3
	      gain_lp += (gain - gain_lp) >> 4;
 8004e0c:	eba8 0e00 	sub.w	lr, r8, r0
 8004e10:	1424      	asrs	r4, r4, #16
 8004e12:	eb00 102e 	add.w	r0, r0, lr, asr #4
 8004e16:	f825 4012 	strh.w	r4, [r5, r2, lsl #1]
 8004e1a:	b280      	uxth	r0, r0
	    for (size_t i = 0; i < outSize; ++i) {
 8004e1c:	3201      	adds	r2, #1
 8004e1e:	2401      	movs	r4, #1
 8004e20:	e7d3      	b.n	8004dca <_ZN8MainLoop6renderEPhm+0x36a>
	  }
	  //___________________________________________

}
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e2a:	bf00      	nop
 8004e2c:	20000408 	.word	0x20000408
 8004e30:	200003bd 	.word	0x200003bd
 8004e34:	20000450 	.word	0x20000450
 8004e38:	0800dc54 	.word	0x0800dc54
 8004e3c:	0800dc62 	.word	0x0800dc62
 8004e40:	200047de 	.word	0x200047de

08004e44 <_ZN8MainLoop15adcStateMachineEv>:


void MainLoop::adcStateMachine(void)
{
 8004e44:	b538      	push	{r3, r4, r5, lr}
	static uint8_t chn=0;

	adc.updateChannelValue(chn,mehal_readADC(chn));
 8004e46:	4c09      	ldr	r4, [pc, #36]	; (8004e6c <_ZN8MainLoop15adcStateMachineEv+0x28>)
 8004e48:	7825      	ldrb	r5, [r4, #0]
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	f000 fdae 	bl	80059ac <mehal_readADC>

  }

  void updateChannelValue(uint8_t chn,uint16_t value)
  {
	  if(chn<ADC_CHANNELS)
 8004e50:	2d04      	cmp	r5, #4
	  {
		  this->currentValues[chn] = value;
 8004e52:	bf9c      	itt	ls
 8004e54:	4a06      	ldrls	r2, [pc, #24]	; (8004e70 <_ZN8MainLoop15adcStateMachineEv+0x2c>)
 8004e56:	f822 0015 	strhls.w	r0, [r2, r5, lsl #1]

	chn++;
 8004e5a:	7822      	ldrb	r2, [r4, #0]
 8004e5c:	3201      	adds	r2, #1
 8004e5e:	b2d2      	uxtb	r2, r2
	if(chn>=ADC_CHANNELS)
 8004e60:	2a04      	cmp	r2, #4
	{
		chn=0;
 8004e62:	bf88      	it	hi
 8004e64:	2200      	movhi	r2, #0
 8004e66:	7022      	strb	r2, [r4, #0]
	}

}
 8004e68:	bd38      	pop	{r3, r4, r5, pc}
 8004e6a:	bf00      	nop
 8004e6c:	200047d8 	.word	0x200047d8
 8004e70:	20000444 	.word	0x20000444

08004e74 <_ZN8MainLoop4loopEv>:
{
 8004e74:	b570      	push	{r4, r5, r6, lr}
 8004e76:	4605      	mov	r5, r0
	userInterface.loop();
 8004e78:	4825      	ldr	r0, [pc, #148]	; (8004f10 <_ZN8MainLoop4loopEv+0x9c>)
 8004e7a:	f000 f949 	bl	8005110 <_ZN2Ui4loopEv>
	uint8_t currentGate = mehal_readGateInput();
 8004e7e:	f000 fde1 	bl	8005a44 <mehal_readGateInput>
 8004e82:	4a24      	ldr	r2, [pc, #144]	; (8004f14 <_ZN8MainLoop4loopEv+0xa0>)
	if(currentGate==0 && prevGate==1)
 8004e84:	b930      	cbnz	r0, 8004e94 <_ZN8MainLoop4loopEv+0x20>
 8004e86:	7813      	ldrb	r3, [r2, #0]
 8004e88:	2b01      	cmp	r3, #1
		trigger_flag=true;
 8004e8a:	bf01      	itttt	eq
 8004e8c:	4922      	ldreq	r1, [pc, #136]	; (8004f18 <_ZN8MainLoop4loopEv+0xa4>)
 8004e8e:	700b      	strbeq	r3, [r1, #0]
		flagTriggerInEvent=1;
 8004e90:	4922      	ldreq	r1, [pc, #136]	; (8004f1c <_ZN8MainLoop4loopEv+0xa8>)
 8004e92:	600b      	streq	r3, [r1, #0]
	prevGate = currentGate;
 8004e94:	7010      	strb	r0, [r2, #0]
    return data[setting];
 8004e96:	4b22      	ldr	r3, [pc, #136]	; (8004f20 <_ZN8MainLoop4loopEv+0xac>)
    if (current_scale != settings.GetValue(SETTING_QUANTIZER_SCALE)) {
 8004e98:	4a22      	ldr	r2, [pc, #136]	; (8004f24 <_ZN8MainLoop4loopEv+0xb0>)
 8004e9a:	7a5b      	ldrb	r3, [r3, #9]
 8004e9c:	7811      	ldrb	r1, [r2, #0]
 8004e9e:	4299      	cmp	r1, r3
 8004ea0:	d00c      	beq.n	8004ebc <_ZN8MainLoop4loopEv+0x48>
      current_scale = settings.GetValue(SETTING_QUANTIZER_SCALE);
 8004ea2:	7013      	strb	r3, [r2, #0]
  }
  
  int32_t Process(int32_t pitch, int32_t root);
  
  void Configure(const Scale& scale) {
    Configure(scale.notes, scale.span, scale.num_notes);
 8004ea4:	2228      	movs	r2, #40	; 0x28
 8004ea6:	435a      	muls	r2, r3
 8004ea8:	491f      	ldr	r1, [pc, #124]	; (8004f28 <_ZN8MainLoop4loopEv+0xb4>)
 8004eaa:	f102 0008 	add.w	r0, r2, #8
 8004eae:	188b      	adds	r3, r1, r2
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	5e8a      	ldrsh	r2, [r1, r2]
 8004eb4:	4401      	add	r1, r0
 8004eb6:	481d      	ldr	r0, [pc, #116]	; (8004f2c <_ZN8MainLoop4loopEv+0xb8>)
 8004eb8:	f7ff fa70 	bl	800439c <_ZN6braids9Quantizer9ConfigureEPKssj>
	if(flagRender==1)
 8004ebc:	4e1c      	ldr	r6, [pc, #112]	; (8004f30 <_ZN8MainLoop4loopEv+0xbc>)
    this->adcStateMachine();
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	f7ff ffc0 	bl	8004e44 <_ZN8MainLoop15adcStateMachineEv>
	if(flagRender==1)
 8004ec4:	7832      	ldrb	r2, [r6, #0]
 8004ec6:	2a01      	cmp	r2, #1
 8004ec8:	d121      	bne.n	8004f0e <_ZN8MainLoop4loopEv+0x9a>
		if(indexBufferRender==0)
 8004eca:	4b1a      	ldr	r3, [pc, #104]	; (8004f34 <_ZN8MainLoop4loopEv+0xc0>)
 8004ecc:	7819      	ldrb	r1, [r3, #0]
			out = samplesBuffer+(SAMPLES_BUFFER_SIZE/2);
 8004ece:	4b1a      	ldr	r3, [pc, #104]	; (8004f38 <_ZN8MainLoop4loopEv+0xc4>)
 8004ed0:	f103 0418 	add.w	r4, r3, #24
 8004ed4:	2900      	cmp	r1, #0
 8004ed6:	bf08      	it	eq
 8004ed8:	461c      	moveq	r4, r3
		mehal_debugPinSet();
 8004eda:	f000 fdb1 	bl	8005a40 <mehal_debugPinSet>
		this->render(out,SAMPLES_BUFFER_SIZE/2);
 8004ede:	4621      	mov	r1, r4
		sysTickDivisor++;
 8004ee0:	4c16      	ldr	r4, [pc, #88]	; (8004f3c <_ZN8MainLoop4loopEv+0xc8>)
		this->render(out,SAMPLES_BUFFER_SIZE/2);
 8004ee2:	2218      	movs	r2, #24
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	f7ff fdbb 	bl	8004a60 <_ZN8MainLoop6renderEPhm>
		mehal_debugPinReset();
 8004eea:	f000 fdaa 	bl	8005a42 <mehal_debugPinReset>
		sysTickDivisor++;
 8004eee:	7823      	ldrb	r3, [r4, #0]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	b2db      	uxtb	r3, r3
		if(sysTickDivisor>=4)
 8004ef4:	2b03      	cmp	r3, #3
		sysTickDivisor++;
 8004ef6:	7023      	strb	r3, [r4, #0]
		if(sysTickDivisor>=4)
 8004ef8:	d904      	bls.n	8004f04 <_ZN8MainLoop4loopEv+0x90>
			userInterface.sysTick(); // 1ms
 8004efa:	4805      	ldr	r0, [pc, #20]	; (8004f10 <_ZN8MainLoop4loopEv+0x9c>)
 8004efc:	f000 f86d 	bl	8004fda <_ZN2Ui7sysTickEv>
			sysTickDivisor=0;
 8004f00:	2300      	movs	r3, #0
 8004f02:	7023      	strb	r3, [r4, #0]
		userInterface.justFinishedRender(); // notify the UI the render has finished. Now there is time to update the display
 8004f04:	4802      	ldr	r0, [pc, #8]	; (8004f10 <_ZN8MainLoop4loopEv+0x9c>)
 8004f06:	f000 f8ff 	bl	8005108 <_ZN2Ui18justFinishedRenderEv>
		flagRender=0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	7033      	strb	r3, [r6, #0]
}
 8004f0e:	bd70      	pop	{r4, r5, r6, pc}
 8004f10:	20000408 	.word	0x20000408
 8004f14:	2000032d 	.word	0x2000032d
 8004f18:	200003d5 	.word	0x200003d5
 8004f1c:	20000440 	.word	0x20000440
 8004f20:	20000358 	.word	0x20000358
 8004f24:	2000032c 	.word	0x2000032c
 8004f28:	0800dc70 	.word	0x0800dc70
 8004f2c:	200046c8 	.word	0x200046c8
 8004f30:	200003bc 	.word	0x200003bc
 8004f34:	2000043d 	.word	0x2000043d
 8004f38:	200003d6 	.word	0x200003d6
 8004f3c:	2000043c 	.word	0x2000043c

08004f40 <_GLOBAL__sub_I__ZN6stmlib11GetUniqueIdEh>:
  Adc() { }
 8004f40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f44:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <_GLOBAL__sub_I__ZN6stmlib11GetUniqueIdEh+0x1c>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	8019      	strh	r1, [r3, #0]
 8004f4a:	8059      	strh	r1, [r3, #2]
 8004f4c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8004f50:	f8c3 2006 	str.w	r2, [r3, #6]
 8004f54:	8099      	strh	r1, [r3, #4]

#define OSCILLATOR_INDEX_LEN	43

using namespace braids;

class Ui
 8004f56:	4b02      	ldr	r3, [pc, #8]	; (8004f60 <_GLOBAL__sub_I__ZN6stmlib11GetUniqueIdEh+0x20>)
 8004f58:	759a      	strb	r2, [r3, #22]
}
 8004f5a:	4770      	bx	lr
 8004f5c:	20000444 	.word	0x20000444
 8004f60:	20000408 	.word	0x20000408

08004f64 <_ZNK7Encoder9incrementEv.isra.0>:
  inline bool pressed_immediate() const {
    //return !GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13);
	  return !mehal_readEncoderSwitch();
  }
  
  inline int32_t increment() const {
 8004f64:	f000 0003 	and.w	r0, r0, #3
    int32_t increment = 0;
    uint8_t a = quadrature_decoding_state_[0];
    uint8_t b = quadrature_decoding_state_[1];
    if ((a & 0x03) == 0x02 && (b & 0x03) == 0x00) {
 8004f68:	2802      	cmp	r0, #2
 8004f6a:	f001 0103 	and.w	r1, r1, #3
 8004f6e:	d100      	bne.n	8004f72 <_ZNK7Encoder9incrementEv.isra.0+0xe>
 8004f70:	b129      	cbz	r1, 8004f7e <_ZNK7Encoder9incrementEv.isra.0+0x1a>
      increment = -1;
    } else {
      if ((b & 0x03) == 0x02 && (a & 0x03) == 0x00) {
 8004f72:	2902      	cmp	r1, #2
 8004f74:	d106      	bne.n	8004f84 <_ZNK7Encoder9incrementEv.isra.0+0x20>
 8004f76:	fab0 f080 	clz	r0, r0
 8004f7a:	0940      	lsrs	r0, r0, #5
 8004f7c:	4770      	bx	lr
      increment = -1;
 8004f7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f82:	4770      	bx	lr
    int32_t increment = 0;
 8004f84:	2000      	movs	r0, #0
        increment = 1;
      }
    }
    return increment;
  }
 8004f86:	4770      	bx	lr

08004f88 <_ZN2Ui23validateOscillatorIndexEs>:
	loadAllSettings();

}

int16_t Ui::validateOscillatorIndex(int16_t index)
{
 8004f88:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
	}
	if(index<0)
		return 0;

	return index;
}
 8004f8c:	282a      	cmp	r0, #42	; 0x2a
 8004f8e:	bfa8      	it	ge
 8004f90:	202a      	movge	r0, #42	; 0x2a
 8004f92:	4770      	bx	lr

08004f94 <_ZN2Ui27getOscillatorShapeFromIndexEs>:

MacroOscillatorShape Ui::getOscillatorShapeFromIndex(int16_t index)
{
	uint8_t i = validateOscillatorIndex(index);

	MacroOscillatorShape osc_shape = static_cast<MacroOscillatorShape>(LIMITED_OSCILLATORS[i].osc);
 8004f94:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8004f98:	292a      	cmp	r1, #42	; 0x2a
 8004f9a:	bfa8      	it	ge
 8004f9c:	212a      	movge	r1, #42	; 0x2a

	return osc_shape;
}
 8004f9e:	4b02      	ldr	r3, [pc, #8]	; (8004fa8 <_ZN2Ui27getOscillatorShapeFromIndexEs+0x14>)
	MacroOscillatorShape osc_shape = static_cast<MacroOscillatorShape>(LIMITED_OSCILLATORS[i].osc);
 8004fa0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
 8004fa4:	5c58      	ldrb	r0, [r3, r1]
 8004fa6:	4770      	bx	lr
 8004fa8:	0800e42e 	.word	0x0800e42e

08004fac <_ZN2Ui16showUnCalibratedEv>:

void Ui::showUnCalibrated(void)
{
 8004fac:	b510      	push	{r4, lr}
 8004fae:	4604      	mov	r4, r0
	display.showDigitDot();
 8004fb0:	f000 faad 	bl	800550e <_ZN7Display12showDigitDotEv>
	if(flagUncal!=1)
 8004fb4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8004fb8:	2b01      	cmp	r3, #1
	{
		flagUncal=1;
 8004fba:	bf1c      	itt	ne
 8004fbc:	f240 1301 	movwne	r3, #257	; 0x101
 8004fc0:	85a3      	strhne	r3, [r4, #44]	; 0x2c
		fineTuneChanged=1;
	}
}
 8004fc2:	bd10      	pop	{r4, pc}

08004fc4 <_ZN2Ui14showCalibratedEv>:
void Ui::showCalibrated(void)
{
 8004fc4:	b510      	push	{r4, lr}
 8004fc6:	4604      	mov	r4, r0
	display.hideDigitDot();
 8004fc8:	f000 faa4 	bl	8005514 <_ZN7Display12hideDigitDotEv>
	if(flagUncal!=0)
 8004fcc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8004fd0:	b113      	cbz	r3, 8004fd8 <_ZN2Ui14showCalibratedEv+0x14>
	{
		flagUncal=0;
 8004fd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fd6:	85a3      	strh	r3, [r4, #44]	; 0x2c
		fineTuneChanged=1;
	}
}
 8004fd8:	bd10      	pop	{r4, pc}

08004fda <_ZN2Ui7sysTickEv>:

void Ui::sysTick(void)
{
 8004fda:	b510      	push	{r4, lr}
 8004fdc:	4604      	mov	r4, r0
	encoder.sysTick();
 8004fde:	3004      	adds	r0, #4
 8004fe0:	f000 faa2 	bl	8005528 <_ZN7Encoder7sysTickEv>

	if(timeoutCalibCounter>0)
 8004fe4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	dd04      	ble.n	8004ff6 <_ZN2Ui7sysTickEv+0x1c>
	{
		timeoutCalibCounter--;
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	82a3      	strh	r3, [r4, #20]
		if(timeoutCalibCounter==0)
 8004ff2:	b903      	cbnz	r3, 8004ff6 <_ZN2Ui7sysTickEv+0x1c>
		{
			enterCalibCounter=0;
 8004ff4:	75a3      	strb	r3, [r4, #22]
		}
	}

}
 8004ff6:	bd10      	pop	{r4, pc}

08004ff8 <_ZN2Ui15saveAllSettingsEv>:

void Ui::saveAllSettings(void)
{
 8004ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffa:	4605      	mov	r5, r0
 8004ffc:	2400      	movs	r4, #0
	uint16_t i;
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
	{
		Setting setting_ = CONFIG_ITEMS[i].option;
 8004ffe:	4f07      	ldr	r7, [pc, #28]	; (800501c <_ZN2Ui15saveAllSettingsEv+0x24>)
 8005000:	4e07      	ldr	r6, [pc, #28]	; (8005020 <_ZN2Ui15saveAllSettingsEv+0x28>)
 8005002:	193b      	adds	r3, r7, r4
 8005004:	785b      	ldrb	r3, [r3, #1]
		int16_t value = settings.GetValue(setting_);
		this->memory->writeUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))), (uint16_t)value);
 8005006:	f104 0120 	add.w	r1, r4, #32
 800500a:	5cf2      	ldrb	r2, [r6, r3]
 800500c:	b289      	uxth	r1, r1
 800500e:	69e8      	ldr	r0, [r5, #28]
 8005010:	3402      	adds	r4, #2
 8005012:	f000 fb16 	bl	8005642 <_ZN6Memory11writeUInt16Ett>
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
 8005016:	2c16      	cmp	r4, #22
 8005018:	d1f3      	bne.n	8005002 <_ZN2Ui15saveAllSettingsEv+0xa>
	}
}
 800501a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800501c:	0800e418 	.word	0x0800e418
 8005020:	20000358 	.word	0x20000358

08005024 <_ZN2Ui15loadAllSettingsEv>:
void Ui::loadAllSettings(void)
{
 8005024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005028:	4680      	mov	r8, r0
 800502a:	2400      	movs	r4, #0
	uint16_t i;
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
	{
		Setting setting_ = CONFIG_ITEMS[i].option;
 800502c:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8005078 <_ZN2Ui15loadAllSettingsEv+0x54>
  inline bool paques() const {
    return paques_;
  }
  
  static const SettingMetadata& metadata(Setting setting) {
    return metadata_[setting];
 8005030:	4e0f      	ldr	r6, [pc, #60]	; (8005070 <_ZN2Ui15loadAllSettingsEv+0x4c>)
    data[setting] = value;
 8005032:	4f10      	ldr	r7, [pc, #64]	; (8005074 <_ZN2Ui15loadAllSettingsEv+0x50>)

		int16_t valMem = (int16_t)this->memory->readUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))));
 8005034:	f104 0120 	add.w	r1, r4, #32
		Setting setting_ = CONFIG_ITEMS[i].option;
 8005038:	eb09 0304 	add.w	r3, r9, r4
		int16_t valMem = (int16_t)this->memory->readUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))));
 800503c:	b289      	uxth	r1, r1
 800503e:	f8d8 001c 	ldr.w	r0, [r8, #28]
		Setting setting_ = CONFIG_ITEMS[i].option;
 8005042:	785d      	ldrb	r5, [r3, #1]
		int16_t valMem = (int16_t)this->memory->readUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))));
 8005044:	f000 fad9 	bl	80055fa <_ZN6Memory10readUInt16Et>
    return metadata_[setting];
 8005048:	230c      	movs	r3, #12
 800504a:	436b      	muls	r3, r5
 800504c:	199a      	adds	r2, r3, r6

		int16_t value = settings.metadata(setting_).Clip(valMem);
 800504e:	7852      	ldrb	r2, [r2, #1]
		int16_t valMem = (int16_t)this->memory->readUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))));
 8005050:	b200      	sxth	r0, r0
    if (value > max_value) {
 8005052:	4290      	cmp	r0, r2
		int16_t value = settings.metadata(setting_).Clip(valMem);
 8005054:	5d9b      	ldrb	r3, [r3, r6]
 8005056:	dd06      	ble.n	8005066 <_ZN2Ui15loadAllSettingsEv+0x42>
      value = max_value;
 8005058:	b210      	sxth	r0, r2
 800505a:	3402      	adds	r4, #2
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
 800505c:	2c16      	cmp	r4, #22
		settings.SetValue(setting_, value);
 800505e:	55e8      	strb	r0, [r5, r7]
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
 8005060:	d1e8      	bne.n	8005034 <_ZN2Ui15loadAllSettingsEv+0x10>
	}
}
 8005062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    } else if (value < min_value) {
 8005066:	4298      	cmp	r0, r3
      value = min_value;
 8005068:	bfb8      	it	lt
 800506a:	b218      	sxthlt	r0, r3
 800506c:	e7f5      	b.n	800505a <_ZN2Ui15loadAllSettingsEv+0x36>
 800506e:	bf00      	nop
 8005070:	0800d53c 	.word	0x0800d53c
 8005074:	20000358 	.word	0x20000358
 8005078:	0800e418 	.word	0x0800e418

0800507c <_ZN2Ui4initEPN6braids3AdcEP6Memory>:
void Ui::init(Adc* adc,Memory* memory) {
 800507c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507e:	4604      	mov	r4, r0
 8005080:	4616      	mov	r6, r2
	state = UI_STATE_SELECT_OSCILLATOR;
 8005082:	2500      	movs	r5, #0
void Ui::init(Adc* adc,Memory* memory) {
 8005084:	460f      	mov	r7, r1
	display.init();
 8005086:	f000 f9dd 	bl	8005444 <_ZN7Display4initEv>
	encoder.Init();
 800508a:	1d20      	adds	r0, r4, #4
 800508c:	f000 fa45 	bl	800551a <_ZN7Encoder4InitEv>
	this->flagUncal=2;
 8005090:	4b1a      	ldr	r3, [pc, #104]	; (80050fc <_ZN2Ui4initEPN6braids3AdcEP6Memory+0x80>)
	state = UI_STATE_SELECT_OSCILLATOR;
 8005092:	7465      	strb	r5, [r4, #17]
	timeoutCalibCounter=0;
 8005094:	82a5      	strh	r5, [r4, #20]
	enterCalibCounter=0;
 8005096:	75a5      	strb	r5, [r4, #22]
	this->flagUncal=2;
 8005098:	62e3      	str	r3, [r4, #44]	; 0x2c
	this->flagJustFinishedRender=0;
 800509a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
	this->memory = memory;
 800509e:	e9c4 7606 	strd	r7, r6, [r4, #24]
	currentOscillator=(int8_t)memory->readUInt8(Memory::ADDR_CURRENT_OSCILLATOR);
 80050a2:	211c      	movs	r1, #28
 80050a4:	4630      	mov	r0, r6
 80050a6:	f000 fa9c 	bl	80055e2 <_ZN6Memory9readUInt8Et>
 80050aa:	b240      	sxtb	r0, r0
	if(currentOscillator>=OSCILLATOR_INDEX_LEN)
 80050ac:	282a      	cmp	r0, #42	; 0x2a
	currentOscillator=(int8_t)memory->readUInt8(Memory::ADDR_CURRENT_OSCILLATOR);
 80050ae:	bfd4      	ite	le
 80050b0:	7420      	strble	r0, [r4, #16]
		currentOscillator=0;
 80050b2:	7425      	strbgt	r5, [r4, #16]
	display.showChar(LIMITED_OSCILLATORS[currentOscillator].symbol);
 80050b4:	f994 3010 	ldrsb.w	r3, [r4, #16]
 80050b8:	4d11      	ldr	r5, [pc, #68]	; (8005100 <_ZN2Ui4initEPN6braids3AdcEP6Memory+0x84>)
 80050ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80050be:	442b      	add	r3, r5
 80050c0:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80050c4:	4620      	mov	r0, r4
 80050c6:	f000 f9c1 	bl	800544c <_ZN7Display8showCharEa>
	display.showBank(LIMITED_OSCILLATORS[currentOscillator].bank);
 80050ca:	f994 3010 	ldrsb.w	r3, [r4, #16]
 80050ce:	4620      	mov	r0, r4
 80050d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80050d4:	442b      	add	r3, r5
 80050d6:	7859      	ldrb	r1, [r3, #1]
 80050d8:	f000 f9d2 	bl	8005480 <_ZN7Display8showBankEh>
	settings.SetValue(SETTING_OSCILLATOR_SHAPE, LIMITED_OSCILLATORS[currentOscillator].osc);
 80050dc:	f994 3010 	ldrsb.w	r3, [r4, #16]
	display.showConfig(0);
 80050e0:	4620      	mov	r0, r4
	settings.SetValue(SETTING_OSCILLATOR_SHAPE, LIMITED_OSCILLATORS[currentOscillator].osc);
 80050e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    data[setting] = value;
 80050e6:	5cea      	ldrb	r2, [r5, r3]
 80050e8:	4b06      	ldr	r3, [pc, #24]	; (8005104 <_ZN2Ui4initEPN6braids3AdcEP6Memory+0x88>)
	display.showConfig(0);
 80050ea:	2100      	movs	r1, #0
 80050ec:	701a      	strb	r2, [r3, #0]
 80050ee:	f000 f9e0 	bl	80054b2 <_ZN7Display10showConfigEh>
	loadAllSettings();
 80050f2:	4620      	mov	r0, r4
}
 80050f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	loadAllSettings();
 80050f8:	f7ff bf94 	b.w	8005024 <_ZN2Ui15loadAllSettingsEv>
 80050fc:	00010002 	.word	0x00010002
 8005100:	0800e42e 	.word	0x0800e42e
 8005104:	20000358 	.word	0x20000358

08005108 <_ZN2Ui18justFinishedRenderEv>:

void Ui::justFinishedRender(void)
{
	flagJustFinishedRender=1;
 8005108:	2301      	movs	r3, #1
 800510a:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
}
 800510e:	4770      	bx	lr

08005110 <_ZN2Ui4loopEv>:

void Ui::loop(void) {
 8005110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005114:	4604      	mov	r4, r0

	encoder.loop();
 8005116:	1d05      	adds	r5, r0, #4
 8005118:	4628      	mov	r0, r5
 800511a:	f000 fa0a 	bl	8005532 <_ZN7Encoder4loopEv>

	switch(state)
 800511e:	7c63      	ldrb	r3, [r4, #17]
 8005120:	2b04      	cmp	r3, #4
 8005122:	f200 8084 	bhi.w	800522e <_ZN2Ui4loopEv+0x11e>
 8005126:	e8df f013 	tbh	[pc, r3, lsl #1]
 800512a:	0005      	.short	0x0005
 800512c:	00e80084 	.word	0x00e80084
 8005130:	013a011a 	.word	0x013a011a
	{
		case UI_STATE_SELECT_OSCILLATOR:
		{
			if(flagJustFinishedRender)
 8005134:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8005138:	2b00      	cmp	r3, #0
 800513a:	d042      	beq.n	80051c2 <_ZN2Ui4loopEv+0xb2>
			{
				flagJustFinishedRender=0;
 800513c:	2300      	movs	r3, #0
				if(fineTuneChanged)
 800513e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
				flagJustFinishedRender=0;
 8005142:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
				if(fineTuneChanged)
 8005146:	b162      	cbz	r2, 8005162 <_ZN2Ui4loopEv+0x52>
				{
					fineTuneChanged=0;
 8005148:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
					display.showChar(LIMITED_OSCILLATORS[currentOscillator].symbol); // update display to show DOT
 800514c:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8005150:	4ab8      	ldr	r2, [pc, #736]	; (8005434 <_ZN2Ui4loopEv+0x324>)
 8005152:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005156:	4413      	add	r3, r2
 8005158:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800515c:	4620      	mov	r0, r4
 800515e:	f000 f975 	bl	800544c <_ZN7Display8showCharEa>
				}
				if(oscillatorChanged)
 8005162:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8005166:	b1b3      	cbz	r3, 8005196 <_ZN2Ui4loopEv+0x86>
				{
					oscillatorChanged=0;
 8005168:	2300      	movs	r3, #0
 800516a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
					display.showChar(LIMITED_OSCILLATORS[currentOscillator].symbol);
 800516e:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8005172:	4eb0      	ldr	r6, [pc, #704]	; (8005434 <_ZN2Ui4loopEv+0x324>)
 8005174:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005178:	4433      	add	r3, r6
 800517a:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800517e:	4620      	mov	r0, r4
 8005180:	f000 f964 	bl	800544c <_ZN7Display8showCharEa>
					display.showBank(LIMITED_OSCILLATORS[currentOscillator].bank);
 8005184:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8005188:	4620      	mov	r0, r4
 800518a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800518e:	441e      	add	r6, r3
 8005190:	7871      	ldrb	r1, [r6, #1]
 8005192:	f000 f975 	bl	8005480 <_ZN7Display8showBankEh>

				}
				if(flagPendingSetCurrentOscillator)
 8005196:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800519a:	b193      	cbz	r3, 80051c2 <_ZN2Ui4loopEv+0xb2>
				{
					flagPendingSetCurrentOscillator=0;
 800519c:	2100      	movs	r1, #0
					settings.SetValue(SETTING_OSCILLATOR_SHAPE, LIMITED_OSCILLATORS[currentOscillator].osc);
 800519e:	f994 3010 	ldrsb.w	r3, [r4, #16]
 80051a2:	4aa4      	ldr	r2, [pc, #656]	; (8005434 <_ZN2Ui4loopEv+0x324>)
 80051a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80051a8:	5cd2      	ldrb	r2, [r2, r3]
 80051aa:	4ba3      	ldr	r3, [pc, #652]	; (8005438 <_ZN2Ui4loopEv+0x328>)
					flagPendingSetCurrentOscillator=0;
 80051ac:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 80051b0:	701a      	strb	r2, [r3, #0]
					display.showConfig(0);
 80051b2:	4620      	mov	r0, r4
 80051b4:	f000 f97d 	bl	80054b2 <_ZN7Display10showConfigEh>
					memory->writeUInt8NoWait(Memory::ADDR_CURRENT_OSCILLATOR, (uint8_t)currentOscillator);
 80051b8:	7c22      	ldrb	r2, [r4, #16]
 80051ba:	211c      	movs	r1, #28
 80051bc:	69e0      	ldr	r0, [r4, #28]
 80051be:	f000 fa34 	bl	800562a <_ZN6Memory16writeUInt8NoWaitEth>
				}
			}

			int32_t increment = encoder.increment();
 80051c2:	79a1      	ldrb	r1, [r4, #6]
 80051c4:	7960      	ldrb	r0, [r4, #5]
 80051c6:	f7ff fecd 	bl	8004f64 <_ZNK7Encoder9incrementEv.isra.0>
			if (increment != 0)
 80051ca:	2800      	cmp	r0, #0
 80051cc:	d018      	beq.n	8005200 <_ZN2Ui4loopEv+0xf0>
 80051ce:	7c23      	ldrb	r3, [r4, #16]
				if(currentOscillator>=OSCILLATOR_INDEX_LEN)
					currentOscillator=(OSCILLATOR_INDEX_LEN-1);
				if(currentOscillator<0)
					currentOscillator=0;

				oscillatorChanged=1; // to update display later
 80051d0:	f04f 0101 	mov.w	r1, #1
					currentOscillator++;
 80051d4:	bfcc      	ite	gt
 80051d6:	3301      	addgt	r3, #1
					currentOscillator--;
 80051d8:	f103 33ff 	addle.w	r3, r3, #4294967295	; 0xffffffff
 80051dc:	7423      	strb	r3, [r4, #16]
				if(currentOscillator>=OSCILLATOR_INDEX_LEN)
 80051de:	f994 3010 	ldrsb.w	r3, [r4, #16]
				oscillatorChanged=1; // to update display later
 80051e2:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
				if(currentOscillator>=OSCILLATOR_INDEX_LEN)
 80051e6:	2b2a      	cmp	r3, #42	; 0x2a
					currentOscillator=(OSCILLATOR_INDEX_LEN-1);
 80051e8:	bfc4      	itt	gt
 80051ea:	232a      	movgt	r3, #42	; 0x2a
 80051ec:	7423      	strbgt	r3, [r4, #16]
				if(currentOscillator<0)
 80051ee:	f994 3010 	ldrsb.w	r3, [r4, #16]
				display.showConfig(1);
 80051f2:	4620      	mov	r0, r4
				if(currentOscillator<0)
 80051f4:	2b00      	cmp	r3, #0
					currentOscillator=0;
 80051f6:	bfbc      	itt	lt
 80051f8:	2300      	movlt	r3, #0
 80051fa:	7423      	strblt	r3, [r4, #16]
				display.showConfig(1);
 80051fc:	f000 f959 	bl	80054b2 <_ZN7Display10showConfigEh>
			}
			if(encoder.pressed())
 8005200:	4628      	mov	r0, r5
 8005202:	f000 f9de 	bl	80055c2 <_ZN7Encoder7pressedEv>
 8005206:	b110      	cbz	r0, 800520e <_ZN2Ui4loopEv+0xfe>
			{
				flagPendingSetCurrentOscillator=1;
 8005208:	2301      	movs	r3, #1
 800520a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
			}

			if(encoder.pressedLong())
 800520e:	4628      	mov	r0, r5
 8005210:	f000 f9d1 	bl	80055b6 <_ZN7Encoder11pressedLongEv>
 8005214:	b158      	cbz	r0, 800522e <_ZN2Ui4loopEv+0x11e>
			{
				state = UI_STATE_CONFIG_MENU;
 8005216:	2101      	movs	r1, #1
				display.showConfig(1);
 8005218:	4620      	mov	r0, r4
				state = UI_STATE_CONFIG_MENU;
 800521a:	7461      	strb	r1, [r4, #17]
				display.showConfig(1);
 800521c:	f000 f949 	bl	80054b2 <_ZN7Display10showConfigEh>
				display.showBank(2); // both off
 8005220:	2102      	movs	r1, #2
 8005222:	4620      	mov	r0, r4
 8005224:	f000 f92c 	bl	8005480 <_ZN7Display8showBankEh>
				configIndex=0;
 8005228:	2300      	movs	r3, #0
 800522a:	74a3      	strb	r3, [r4, #18]

				// Calibration mode detection
				if(enterCalibCounter==0)
					timeoutCalibCounter=2000;

				enterCalibCounter++;
 800522c:	75a3      	strb	r3, [r4, #22]
			}
			break;
		}
	}

}
 800522e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(encoder.pressedLong())
 8005232:	4628      	mov	r0, r5
 8005234:	f000 f9bf 	bl	80055b6 <_ZN7Encoder11pressedLongEv>
 8005238:	b1e8      	cbz	r0, 8005276 <_ZN2Ui4loopEv+0x166>
				state = UI_STATE_SELECT_OSCILLATOR;
 800523a:	2100      	movs	r1, #0
				display.showConfig(0);
 800523c:	4620      	mov	r0, r4
				state = UI_STATE_SELECT_OSCILLATOR;
 800523e:	7461      	strb	r1, [r4, #17]
				display.showConfig(0);
 8005240:	f000 f937 	bl	80054b2 <_ZN7Display10showConfigEh>
				display.showBank(LIMITED_OSCILLATORS[currentOscillator].bank);
 8005244:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8005248:	4d7a      	ldr	r5, [pc, #488]	; (8005434 <_ZN2Ui4loopEv+0x324>)
 800524a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800524e:	442b      	add	r3, r5
 8005250:	7859      	ldrb	r1, [r3, #1]
 8005252:	4620      	mov	r0, r4
 8005254:	f000 f914 	bl	8005480 <_ZN7Display8showBankEh>
				display.showChar(LIMITED_OSCILLATORS[currentOscillator].symbol);
 8005258:	f994 3010 	ldrsb.w	r3, [r4, #16]
 800525c:	4620      	mov	r0, r4
 800525e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005262:	441d      	add	r5, r3
 8005264:	f995 1002 	ldrsb.w	r1, [r5, #2]
 8005268:	f000 f8f0 	bl	800544c <_ZN7Display8showCharEa>
				saveAllSettings();
 800526c:	4620      	mov	r0, r4
}
 800526e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				saveAllSettings();
 8005272:	f7ff bec1 	b.w	8004ff8 <_ZN2Ui15saveAllSettingsEv>
			display.showChar(CONFIG_ITEMS[configIndex].symbol);
 8005276:	f994 2012 	ldrsb.w	r2, [r4, #18]
 800527a:	4b70      	ldr	r3, [pc, #448]	; (800543c <_ZN2Ui4loopEv+0x32c>)
 800527c:	4620      	mov	r0, r4
 800527e:	f913 1012 	ldrsb.w	r1, [r3, r2, lsl #1]
 8005282:	f000 f8e3 	bl	800544c <_ZN7Display8showCharEa>
			int32_t increment = encoder.increment();
 8005286:	79a1      	ldrb	r1, [r4, #6]
 8005288:	7960      	ldrb	r0, [r4, #5]
 800528a:	f7ff fe6b 	bl	8004f64 <_ZNK7Encoder9incrementEv.isra.0>
			if (increment != 0)
 800528e:	2800      	cmp	r0, #0
 8005290:	d011      	beq.n	80052b6 <_ZN2Ui4loopEv+0x1a6>
 8005292:	7ca3      	ldrb	r3, [r4, #18]
					configIndex++;
 8005294:	bfcc      	ite	gt
 8005296:	3301      	addgt	r3, #1
					configIndex--;
 8005298:	f103 33ff 	addle.w	r3, r3, #4294967295	; 0xffffffff
 800529c:	74a3      	strb	r3, [r4, #18]
				if(configIndex>=CONFIG_ITEMS_SYMBOLS_LEN)
 800529e:	f994 3012 	ldrsb.w	r3, [r4, #18]
 80052a2:	2b0a      	cmp	r3, #10
					configIndex=CONFIG_ITEMS_SYMBOLS_LEN-1;
 80052a4:	bfc4      	itt	gt
 80052a6:	230a      	movgt	r3, #10
 80052a8:	74a3      	strbgt	r3, [r4, #18]
				if(configIndex<0)
 80052aa:	f994 3012 	ldrsb.w	r3, [r4, #18]
 80052ae:	2b00      	cmp	r3, #0
					configIndex=0;
 80052b0:	bfbc      	itt	lt
 80052b2:	2300      	movlt	r3, #0
 80052b4:	74a3      	strblt	r3, [r4, #18]
			if(encoder.pressed())
 80052b6:	4628      	mov	r0, r5
 80052b8:	f000 f983 	bl	80055c2 <_ZN7Encoder7pressedEv>
 80052bc:	2800      	cmp	r0, #0
 80052be:	d0b6      	beq.n	800522e <_ZN2Ui4loopEv+0x11e>
				state = UI_STATE_SET_VALUE;
 80052c0:	2302      	movs	r3, #2
 80052c2:	7463      	strb	r3, [r4, #17]
				if(enterCalibCounter==0)
 80052c4:	7da3      	ldrb	r3, [r4, #22]
 80052c6:	b913      	cbnz	r3, 80052ce <_ZN2Ui4loopEv+0x1be>
					timeoutCalibCounter=2000;
 80052c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80052cc:	82a2      	strh	r2, [r4, #20]
				enterCalibCounter++;
 80052ce:	3301      	adds	r3, #1
 80052d0:	b2db      	uxtb	r3, r3
				if(enterCalibCounter>=4)
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	d9aa      	bls.n	800522c <_ZN2Ui4loopEv+0x11c>
					enterCalibCounter=0;
 80052d6:	2300      	movs	r3, #0
					state = UI_STATE_CALIB;
 80052d8:	2503      	movs	r5, #3
					enterCalibCounter=0;
 80052da:	75a3      	strb	r3, [r4, #22]
					display.showConfig(1);
 80052dc:	2101      	movs	r1, #1
 80052de:	4620      	mov	r0, r4
					state = UI_STATE_CALIB;
 80052e0:	7465      	strb	r5, [r4, #17]
					display.showConfig(1);
 80052e2:	f000 f8e6 	bl	80054b2 <_ZN7Display10showConfigEh>
					display.showBank(3); // all leds ON
 80052e6:	4629      	mov	r1, r5
 80052e8:	4620      	mov	r0, r4
 80052ea:	f000 f8c9 	bl	8005480 <_ZN7Display8showBankEh>
					display.showChar('2');
 80052ee:	2132      	movs	r1, #50	; 0x32
				display.showChar('4');
 80052f0:	4620      	mov	r0, r4
}
 80052f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				display.showChar('4');
 80052f6:	f000 b8a9 	b.w	800544c <_ZN7Display8showCharEa>
			Setting setting_ = CONFIG_ITEMS[configIndex].option;
 80052fa:	f994 2012 	ldrsb.w	r2, [r4, #18]
 80052fe:	4b4f      	ldr	r3, [pc, #316]	; (800543c <_ZN2Ui4loopEv+0x32c>)
    return data[setting];
 8005300:	4f4d      	ldr	r7, [pc, #308]	; (8005438 <_ZN2Ui4loopEv+0x328>)
 8005302:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8005306:	785b      	ldrb	r3, [r3, #1]
			int32_t increment = encoder.increment();
 8005308:	79a1      	ldrb	r1, [r4, #6]
 800530a:	7960      	ldrb	r0, [r4, #5]
 800530c:	5dda      	ldrb	r2, [r3, r7]
 800530e:	f7ff fe29 	bl	8004f64 <_ZNK7Encoder9incrementEv.isra.0>
 8005312:	4e4b      	ldr	r6, [pc, #300]	; (8005440 <_ZN2Ui4loopEv+0x330>)
			if (increment != 0)
 8005314:	b988      	cbnz	r0, 800533a <_ZN2Ui4loopEv+0x22a>
			int16_t value = settings.GetValue(setting_);
 8005316:	b212      	sxth	r2, r2
			display.showValue(settings.metadata(setting_).max_value,value);
 8005318:	210c      	movs	r1, #12
 800531a:	fb01 6303 	mla	r3, r1, r3, r6
 800531e:	4620      	mov	r0, r4
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	7859      	ldrb	r1, [r3, #1]
 8005324:	f000 f8c8 	bl	80054b8 <_ZN7Display9showValueEhh>
			if(encoder.pressed())
 8005328:	4628      	mov	r0, r5
 800532a:	f000 f94a 	bl	80055c2 <_ZN7Encoder7pressedEv>
 800532e:	2800      	cmp	r0, #0
 8005330:	f43f af7d 	beq.w	800522e <_ZN2Ui4loopEv+0x11e>
				state = UI_STATE_CONFIG_MENU;
 8005334:	2301      	movs	r3, #1
 8005336:	7463      	strb	r3, [r4, #17]
}
 8005338:	e779      	b.n	800522e <_ZN2Ui4loopEv+0x11e>
    return metadata_[setting];
 800533a:	210c      	movs	r1, #12
 800533c:	4359      	muls	r1, r3
 800533e:	eb06 0c01 	add.w	ip, r6, r1
				value = settings.metadata(setting_).Clip(value + increment);
 8005342:	4402      	add	r2, r0
 8005344:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8005348:	b212      	sxth	r2, r2
    if (value > max_value) {
 800534a:	4282      	cmp	r2, r0
 800534c:	5c71      	ldrb	r1, [r6, r1]
 800534e:	dd02      	ble.n	8005356 <_ZN2Ui4loopEv+0x246>
      value = max_value;
 8005350:	b202      	sxth	r2, r0
				settings.SetValue(setting_, value);
 8005352:	55da      	strb	r2, [r3, r7]
 8005354:	e7e0      	b.n	8005318 <_ZN2Ui4loopEv+0x208>
    } else if (value < min_value) {
 8005356:	428a      	cmp	r2, r1
      value = min_value;
 8005358:	bfb8      	it	lt
 800535a:	b20a      	sxthlt	r2, r1
 800535c:	e7f9      	b.n	8005352 <_ZN2Ui4loopEv+0x242>
			if(encoder.pressedLong())
 800535e:	4628      	mov	r0, r5
 8005360:	f000 f929 	bl	80055b6 <_ZN7Encoder11pressedLongEv>
 8005364:	b150      	cbz	r0, 800537c <_ZN2Ui4loopEv+0x26c>
				state = UI_STATE_CONFIG_MENU;
 8005366:	2101      	movs	r1, #1
				display.showConfig(1);
 8005368:	4620      	mov	r0, r4
				state = UI_STATE_CONFIG_MENU;
 800536a:	7461      	strb	r1, [r4, #17]
				display.showConfig(1);
 800536c:	f000 f8a1 	bl	80054b2 <_ZN7Display10showConfigEh>
				display.showBank(2); // all leds OFF
 8005370:	4620      	mov	r0, r4
}
 8005372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				display.showBank(2); // all leds OFF
 8005376:	2102      	movs	r1, #2
 8005378:	f000 b882 	b.w	8005480 <_ZN7Display8showBankEh>
			if(encoder.pressed())
 800537c:	4628      	mov	r0, r5
 800537e:	f000 f920 	bl	80055c2 <_ZN7Encoder7pressedEv>
 8005382:	2800      	cmp	r0, #0
 8005384:	f43f af53 	beq.w	800522e <_ZN2Ui4loopEv+0x11e>
				adc_code_c2 = adc->channel(ADC_CHANNEL_PITCH);
 8005388:	69a3      	ldr	r3, [r4, #24]
				display.showChar('4');
 800538a:	2134      	movs	r1, #52	; 0x34
				adc_code_c2 = adc->channel(ADC_CHANNEL_PITCH);
 800538c:	891a      	ldrh	r2, [r3, #8]
 800538e:	6222      	str	r2, [r4, #32]
				adc_code_p0_min = adc->channel(ADC_CHANNEL_PARAM0);
 8005390:	885a      	ldrh	r2, [r3, #2]
 8005392:	6262      	str	r2, [r4, #36]	; 0x24
				adc_code_p1_min = adc->channel(ADC_CHANNEL_PARAM1);
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	62a3      	str	r3, [r4, #40]	; 0x28
				state = UI_STATE_CALIB_STEP_2;
 8005398:	2304      	movs	r3, #4
 800539a:	7463      	strb	r3, [r4, #17]
 800539c:	e7a8      	b.n	80052f0 <_ZN2Ui4loopEv+0x1e0>
			if(encoder.pressedLong())
 800539e:	4628      	mov	r0, r5
 80053a0:	f000 f909 	bl	80055b6 <_ZN7Encoder11pressedLongEv>
 80053a4:	4680      	mov	r8, r0
 80053a6:	2800      	cmp	r0, #0
 80053a8:	d1dd      	bne.n	8005366 <_ZN2Ui4loopEv+0x256>
			if(encoder.pressed())
 80053aa:	4628      	mov	r0, r5
 80053ac:	f000 f909 	bl	80055c2 <_ZN7Encoder7pressedEv>
 80053b0:	2800      	cmp	r0, #0
 80053b2:	f43f af3c 	beq.w	800522e <_ZN2Ui4loopEv+0x11e>
				int32_t adc_code_c4 = adc->channel(ADC_CHANNEL_PITCH);
 80053b6:	69a3      	ldr	r3, [r4, #24]
				settings.Calibrate(adc_code_c2,
 80053b8:	6a22      	ldr	r2, [r4, #32]
		  return this->currentValues[4];
 80053ba:	891d      	ldrh	r5, [r3, #8]
		  return this->currentValues[1];
 80053bc:	885f      	ldrh	r7, [r3, #2]
    if (adc_code_c4 != adc_code_c2) {
 80053be:	42aa      	cmp	r2, r5
		  return this->currentValues[0];
 80053c0:	881e      	ldrh	r6, [r3, #0]
 80053c2:	d00f      	beq.n	80053e4 <_ZN2Ui4loopEv+0x2d4>
      int32_t scale = (24 * 128 * 4096L) / (adc_code_c4 - adc_code_c2);
 80053c4:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 80053c8:	1aa9      	subs	r1, r5, r2
 80053ca:	fb93 f3f1 	sdiv	r3, r3, r1
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 80053ce:	442a      	add	r2, r5
      data_.pitch_cv_scale = scale;
 80053d0:	4919      	ldr	r1, [pc, #100]	; (8005438 <_ZN2Ui4loopEv+0x328>)
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 80053d2:	1052      	asrs	r2, r2, #1
      data_.pitch_cv_scale = scale;
 80053d4:	618b      	str	r3, [r1, #24]
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 80053d6:	4353      	muls	r3, r2
 80053d8:	131b      	asrs	r3, r3, #12
      data_.pitch_cv_offset = (60 << 7) - 
 80053da:	f5c3 53f0 	rsb	r3, r3, #7680	; 0x1e00
 80053de:	614b      	str	r3, [r1, #20]
      data_.fm_cv_offset = adc_code_fm;
 80053e0:	f8c1 801c 	str.w	r8, [r1, #28]
    Save();
 80053e4:	4814      	ldr	r0, [pc, #80]	; (8005438 <_ZN2Ui4loopEv+0x328>)
 80053e6:	f7ff f8cd 	bl	8004584 <_ZN6braids8Settings4SaveEv>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_C2, adc_code_c2);
 80053ea:	6a22      	ldr	r2, [r4, #32]
 80053ec:	2100      	movs	r1, #0
 80053ee:	69e0      	ldr	r0, [r4, #28]
 80053f0:	f000 f90f 	bl	8005612 <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_C4, adc_code_c4);
 80053f4:	462a      	mov	r2, r5
 80053f6:	2104      	movs	r1, #4
 80053f8:	69e0      	ldr	r0, [r4, #28]
 80053fa:	f000 f90a 	bl	8005612 <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_FM, adc_code_fm);
 80053fe:	2200      	movs	r2, #0
 8005400:	2108      	movs	r1, #8
 8005402:	69e0      	ldr	r0, [r4, #28]
 8005404:	f000 f905 	bl	8005612 <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_P0_MIN, adc_code_p0_min);
 8005408:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800540a:	210c      	movs	r1, #12
 800540c:	69e0      	ldr	r0, [r4, #28]
 800540e:	f000 f900 	bl	8005612 <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_P0_MAX, adc_code_p0_max);
 8005412:	463a      	mov	r2, r7
 8005414:	2110      	movs	r1, #16
 8005416:	69e0      	ldr	r0, [r4, #28]
 8005418:	f000 f8fb 	bl	8005612 <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_P1_MIN, adc_code_p1_min);
 800541c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800541e:	2114      	movs	r1, #20
 8005420:	69e0      	ldr	r0, [r4, #28]
 8005422:	f000 f8f6 	bl	8005612 <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_P1_MAX, adc_code_p1_max);
 8005426:	4632      	mov	r2, r6
 8005428:	2118      	movs	r1, #24
 800542a:	69e0      	ldr	r0, [r4, #28]
 800542c:	f000 f8f1 	bl	8005612 <_ZN6Memory11writeUInt32Etm>
 8005430:	e780      	b.n	8005334 <_ZN2Ui4loopEv+0x224>
 8005432:	bf00      	nop
 8005434:	0800e42e 	.word	0x0800e42e
 8005438:	20000358 	.word	0x20000358
 800543c:	0800e418 	.word	0x0800e418
 8005440:	0800d53c 	.word	0x0800d53c

08005444 <_ZN7Display4initEv>:
		0b00000000, // Y *
		0b00000000  // Z *
};

void Display::init(void) {
	this->dotState=0;
 8005444:	2300      	movs	r3, #0
 8005446:	7003      	strb	r3, [r0, #0]
}
 8005448:	4770      	bx	lr
	...

0800544c <_ZN7Display8showCharEa>:

void Display::showChar(int8_t c) {

	uint8_t data;

	if(c>='A' && c<='Z')
 800544c:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b19      	cmp	r3, #25
		data = CHARS_TABLE[c - 'A'];
 8005454:	bf95      	itete	ls
 8005456:	4b08      	ldrls	r3, [pc, #32]	; (8005478 <_ZN7Display8showCharEa+0x2c>)
	else
		data = NUMBERS_TABLE[c - '0'];
 8005458:	4b08      	ldrhi	r3, [pc, #32]	; (800547c <_ZN7Display8showCharEa+0x30>)
		data = CHARS_TABLE[c - 'A'];
 800545a:	18c9      	addls	r1, r1, r3
		data = NUMBERS_TABLE[c - '0'];
 800545c:	18c9      	addhi	r1, r1, r3
		data = CHARS_TABLE[c - 'A'];
 800545e:	bf94      	ite	ls
 8005460:	f811 3c41 	ldrbls.w	r3, [r1, #-65]
		data = NUMBERS_TABLE[c - '0'];
 8005464:	f811 3c30 	ldrbhi.w	r3, [r1, #-48]

	data = data | (this->dotState<<7);
 8005468:	7800      	ldrb	r0, [r0, #0]
 800546a:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7

	data = ~data;
 800546e:	43c0      	mvns	r0, r0

	mehal_sendDataTo595(data);
 8005470:	b2c0      	uxtb	r0, r0
 8005472:	f000 bb07 	b.w	8005a84 <mehal_sendDataTo595>
 8005476:	bf00      	nop
 8005478:	0800e4af 	.word	0x0800e4af
 800547c:	0800e4c9 	.word	0x0800e4c9

08005480 <_ZN7Display8showBankEh>:
}

void Display::showBank(uint8_t bankNumber) {
 8005480:	b508      	push	{r3, lr}

	switch(bankNumber)
 8005482:	2903      	cmp	r1, #3
 8005484:	d814      	bhi.n	80054b0 <_ZN7Display8showBankEh+0x30>
 8005486:	e8df f001 	tbb	[pc, r1]
 800548a:	0a02      	.short	0x0a02
 800548c:	110f      	.short	0x110f
	{
		case 0:
			mehal_setBank0Led(1);
 800548e:	2001      	movs	r0, #1
		case 1:
			mehal_setBank0Led(0);
			mehal_setBank1Led(1);
			break;
		case 2:
			mehal_setBank0Led(0);
 8005490:	f000 fb44 	bl	8005b1c <mehal_setBank0Led>
			mehal_setBank1Led(0);
 8005494:	2000      	movs	r0, #0
		case 3:
			mehal_setBank0Led(1);
			mehal_setBank1Led(1);
			break;
	}
}
 8005496:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			mehal_setBank1Led(1);
 800549a:	f000 bb33 	b.w	8005b04 <mehal_setBank1Led>
			mehal_setBank0Led(0);
 800549e:	2000      	movs	r0, #0
			mehal_setBank0Led(1);
 80054a0:	f000 fb3c 	bl	8005b1c <mehal_setBank0Led>
			mehal_setBank1Led(1);
 80054a4:	2001      	movs	r0, #1
 80054a6:	e7f6      	b.n	8005496 <_ZN7Display8showBankEh+0x16>
			mehal_setBank0Led(0);
 80054a8:	2000      	movs	r0, #0
 80054aa:	e7f1      	b.n	8005490 <_ZN7Display8showBankEh+0x10>
			mehal_setBank0Led(1);
 80054ac:	2001      	movs	r0, #1
 80054ae:	e7f7      	b.n	80054a0 <_ZN7Display8showBankEh+0x20>
}
 80054b0:	bd08      	pop	{r3, pc}

080054b2 <_ZN7Display10showConfigEh>:

void Display::showConfig(uint8_t flagOnOff) {

	mehal_setConfigLed(flagOnOff);
 80054b2:	4608      	mov	r0, r1
 80054b4:	f000 bb1a 	b.w	8005aec <mehal_setConfigLed>

080054b8 <_ZN7Display9showValueEhh>:
}

void Display::showValue(uint8_t maxValue,uint8_t value)
{
	switch(maxValue)
 80054b8:	3901      	subs	r1, #1
 80054ba:	2912      	cmp	r1, #18
 80054bc:	d826      	bhi.n	800550c <_ZN7Display9showValueEhh+0x54>
 80054be:	e8df f001 	tbb	[pc, r1]
 80054c2:	1812      	.short	0x1812
 80054c4:	25251e25 	.word	0x25251e25
 80054c8:	25252525 	.word	0x25252525
 80054cc:	2525251e 	.word	0x2525251e
 80054d0:	2525250a 	.word	0x2525250a
 80054d4:	1e          	.byte	0x1e
 80054d5:	00          	.byte	0x00
	{
		case 15:
		{
			// 0 to 15 scale
			uint16_t val = value*9/15;
 80054d6:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
 80054da:	220f      	movs	r2, #15
 80054dc:	fb91 f1f2 	sdiv	r1, r1, r2
			showChar('0'+val);
 80054e0:	3130      	adds	r1, #48	; 0x30
		case 19:
		{
			if(value<=9)
				showChar('0'+value);
			else
				showChar('A'+(value-10));
 80054e2:	b249      	sxtb	r1, r1
 80054e4:	e001      	b.n	80054ea <_ZN7Display9showValueEhh+0x32>
			if(value==0)
 80054e6:	b912      	cbnz	r2, 80054ee <_ZN7Display9showValueEhh+0x36>
				showChar('0');
 80054e8:	2130      	movs	r1, #48	; 0x30
				showChar('A'+(value-10));
 80054ea:	f7ff bfaf 	b.w	800544c <_ZN7Display8showCharEa>
				showChar('1');
 80054ee:	2131      	movs	r1, #49	; 0x31
 80054f0:	e7fb      	b.n	80054ea <_ZN7Display9showValueEhh+0x32>
			if(value==0)
 80054f2:	2a00      	cmp	r2, #0
 80054f4:	d0f8      	beq.n	80054e8 <_ZN7Display9showValueEhh+0x30>
			else if(value==1)
 80054f6:	2a01      	cmp	r2, #1
 80054f8:	d0f9      	beq.n	80054ee <_ZN7Display9showValueEhh+0x36>
				showChar('2');
 80054fa:	2132      	movs	r1, #50	; 0x32
 80054fc:	e7f5      	b.n	80054ea <_ZN7Display9showValueEhh+0x32>
			if(value<=9)
 80054fe:	2a09      	cmp	r2, #9
				showChar('0'+value);
 8005500:	bf94      	ite	ls
 8005502:	f102 0130 	addls.w	r1, r2, #48	; 0x30
				showChar('A'+(value-10));
 8005506:	f102 0137 	addhi.w	r1, r2, #55	; 0x37
 800550a:	e7ea      	b.n	80054e2 <_ZN7Display9showValueEhh+0x2a>

			break;
		}

	}
}
 800550c:	4770      	bx	lr

0800550e <_ZN7Display12showDigitDotEv>:

void Display::showDigitDot(void)
{
	this->dotState=1;
 800550e:	2301      	movs	r3, #1
 8005510:	7003      	strb	r3, [r0, #0]
}
 8005512:	4770      	bx	lr

08005514 <_ZN7Display12hideDigitDotEv>:
 8005514:	2300      	movs	r3, #0
 8005516:	7003      	strb	r3, [r0, #0]
 8005518:	4770      	bx	lr

0800551a <_ZN7Encoder4InitEv>:
#define ENCODER_SW_STATE_WAIT_RELEASE 	1
#define ENCODER_SW_STATE_DEBOUNCE		2


void Encoder::Init() {
  switch_state_ = 0xff;
 800551a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800551e:	8003      	strh	r3, [r0, #0]
  quadrature_decoding_state_[0] = quadrature_decoding_state_[1] = 0xff;
 8005520:	7083      	strb	r3, [r0, #2]
  state = ENCODER_SW_STATE_IDLE;
 8005522:	2300      	movs	r3, #0
 8005524:	7203      	strb	r3, [r0, #8]
}
 8005526:	4770      	bx	lr

08005528 <_ZN7Encoder7sysTickEv>:

void Encoder::sysTick(void) {
	if(swTimeout>0)
 8005528:	6843      	ldr	r3, [r0, #4]
 800552a:	b10b      	cbz	r3, 8005530 <_ZN7Encoder7sysTickEv+0x8>
	{
		swTimeout--;
 800552c:	3b01      	subs	r3, #1
 800552e:	6043      	str	r3, [r0, #4]
	}
}
 8005530:	4770      	bx	lr

08005532 <_ZN7Encoder4loopEv>:


void Encoder::loop(void) {
 8005532:	b538      	push	{r3, r4, r5, lr}
	switch(state)
 8005534:	7a03      	ldrb	r3, [r0, #8]
void Encoder::loop(void) {
 8005536:	4604      	mov	r4, r0
	switch(state)
 8005538:	2b01      	cmp	r3, #1
 800553a:	d022      	beq.n	8005582 <_ZN7Encoder4loopEv+0x50>
 800553c:	d317      	bcc.n	800556e <_ZN7Encoder4loopEv+0x3c>
 800553e:	2b02      	cmp	r3, #2
 8005540:	d030      	beq.n	80055a4 <_ZN7Encoder4loopEv+0x72>
			break;
		}
	}

	// encoder reading
	  switch_state_ = (switch_state_ << 1) | \
 8005542:	7825      	ldrb	r5, [r4, #0]
			  mehal_readEncoderSwitch();
 8005544:	f000 fa86 	bl	8005a54 <mehal_readEncoderSwitch>
	  switch_state_ = (switch_state_ << 1) | \
 8005548:	006d      	lsls	r5, r5, #1
 800554a:	b26d      	sxtb	r5, r5
 800554c:	4328      	orrs	r0, r5
 800554e:	7020      	strb	r0, [r4, #0]

	  quadrature_decoding_state_[0] = (quadrature_decoding_state_[0] << 1) | \
 8005550:	7865      	ldrb	r5, [r4, #1]
			  mehal_readEncoderB();
 8005552:	f000 fa8f 	bl	8005a74 <mehal_readEncoderB>
	  quadrature_decoding_state_[0] = (quadrature_decoding_state_[0] << 1) | \
 8005556:	006d      	lsls	r5, r5, #1
 8005558:	b26d      	sxtb	r5, r5
 800555a:	4328      	orrs	r0, r5
 800555c:	7060      	strb	r0, [r4, #1]

	  quadrature_decoding_state_[1] = (quadrature_decoding_state_[1] << 1) | \
 800555e:	78a5      	ldrb	r5, [r4, #2]
			  mehal_readEncoderA();
 8005560:	f000 fa80 	bl	8005a64 <mehal_readEncoderA>
	  quadrature_decoding_state_[1] = (quadrature_decoding_state_[1] << 1) | \
 8005564:	006d      	lsls	r5, r5, #1
 8005566:	b26d      	sxtb	r5, r5
 8005568:	4328      	orrs	r0, r5
 800556a:	70a0      	strb	r0, [r4, #2]
	//_________
}
 800556c:	bd38      	pop	{r3, r4, r5, pc}
			if(mehal_readEncoderSwitch()==0)
 800556e:	f000 fa71 	bl	8005a54 <mehal_readEncoderSwitch>
 8005572:	2800      	cmp	r0, #0
 8005574:	d1e5      	bne.n	8005542 <_ZN7Encoder4loopEv+0x10>
				state = ENCODER_SW_STATE_WAIT_RELEASE;
 8005576:	2301      	movs	r3, #1
 8005578:	7223      	strb	r3, [r4, #8]
				swTimeout = 3000;
 800557a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800557e:	6063      	str	r3, [r4, #4]
 8005580:	e7df      	b.n	8005542 <_ZN7Encoder4loopEv+0x10>
			if(swTimeout==0)
 8005582:	6842      	ldr	r2, [r0, #4]
 8005584:	b922      	cbnz	r2, 8005590 <_ZN7Encoder4loopEv+0x5e>
				flagLongPress=1;
 8005586:	7243      	strb	r3, [r0, #9]
				state = ENCODER_SW_STATE_DEBOUNCE;
 8005588:	2302      	movs	r3, #2
 800558a:	7203      	strb	r3, [r0, #8]
				swTimeout = 100;
 800558c:	2364      	movs	r3, #100	; 0x64
 800558e:	6043      	str	r3, [r0, #4]
			if(mehal_readEncoderSwitch()==1)
 8005590:	f000 fa60 	bl	8005a54 <mehal_readEncoderSwitch>
 8005594:	2801      	cmp	r0, #1
 8005596:	d1d4      	bne.n	8005542 <_ZN7Encoder4loopEv+0x10>
				state = ENCODER_SW_STATE_DEBOUNCE;
 8005598:	2302      	movs	r3, #2
 800559a:	7223      	strb	r3, [r4, #8]
				swTimeout = 100;
 800559c:	2364      	movs	r3, #100	; 0x64
				flagShortPress=1;
 800559e:	72a0      	strb	r0, [r4, #10]
				swTimeout = 100;
 80055a0:	6063      	str	r3, [r4, #4]
 80055a2:	e7ce      	b.n	8005542 <_ZN7Encoder4loopEv+0x10>
			if(mehal_readEncoderSwitch()==1)
 80055a4:	f000 fa56 	bl	8005a54 <mehal_readEncoderSwitch>
 80055a8:	2801      	cmp	r0, #1
 80055aa:	d1ca      	bne.n	8005542 <_ZN7Encoder4loopEv+0x10>
				if(swTimeout==0)
 80055ac:	6863      	ldr	r3, [r4, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1c7      	bne.n	8005542 <_ZN7Encoder4loopEv+0x10>
					state = ENCODER_SW_STATE_IDLE;
 80055b2:	7223      	strb	r3, [r4, #8]
 80055b4:	e7c5      	b.n	8005542 <_ZN7Encoder4loopEv+0x10>

080055b6 <_ZN7Encoder11pressedLongEv>:

bool Encoder::pressedLong(void)
{
	bool r = flagLongPress;
 80055b6:	7a43      	ldrb	r3, [r0, #9]
	if(r!=0)
 80055b8:	b10b      	cbz	r3, 80055be <_ZN7Encoder11pressedLongEv+0x8>
		flagLongPress=0;
 80055ba:	2200      	movs	r2, #0
 80055bc:	7242      	strb	r2, [r0, #9]

	return r;
}
 80055be:	4618      	mov	r0, r3
 80055c0:	4770      	bx	lr

080055c2 <_ZN7Encoder7pressedEv>:

bool Encoder::pressed(void) {
 80055c2:	4603      	mov	r3, r0
    //return switch_state_ == 0x00;
	bool r = flagShortPress;
	flagShortPress=0;
 80055c4:	2200      	movs	r2, #0
	bool r = flagShortPress;
 80055c6:	7a80      	ldrb	r0, [r0, #10]
	flagShortPress=0;
 80055c8:	729a      	strb	r2, [r3, #10]
	return r;
  }
 80055ca:	4770      	bx	lr

080055cc <_ZN6Memory10readUInt32Et>:
#include <stdint.h>
#include "hal/MultiEngineHAL.h"
#include "hal/Memory.h"

uint32_t Memory::readUInt32(uint16_t address)
{
 80055cc:	b507      	push	{r0, r1, r2, lr}
	uint32_t value;
	mehal_i2cMemRead(address,(uint8_t*)&value, sizeof(uint32_t));
 80055ce:	2204      	movs	r2, #4
{
 80055d0:	4608      	mov	r0, r1
	mehal_i2cMemRead(address,(uint8_t*)&value, sizeof(uint32_t));
 80055d2:	eb0d 0102 	add.w	r1, sp, r2
 80055d6:	f000 fa09 	bl	80059ec <mehal_i2cMemRead>
	return value;
}
 80055da:	9801      	ldr	r0, [sp, #4]
 80055dc:	b003      	add	sp, #12
 80055de:	f85d fb04 	ldr.w	pc, [sp], #4

080055e2 <_ZN6Memory9readUInt8Et>:
uint8_t Memory::readUInt8(uint16_t address)
{
 80055e2:	b507      	push	{r0, r1, r2, lr}
 80055e4:	4608      	mov	r0, r1
	uint8_t value;
	mehal_i2cMemRead(address, &value, sizeof(uint8_t));
 80055e6:	2201      	movs	r2, #1
 80055e8:	f10d 0107 	add.w	r1, sp, #7
 80055ec:	f000 f9fe 	bl	80059ec <mehal_i2cMemRead>
	return value;
}
 80055f0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80055f4:	b003      	add	sp, #12
 80055f6:	f85d fb04 	ldr.w	pc, [sp], #4

080055fa <_ZN6Memory10readUInt16Et>:

uint16_t Memory::readUInt16(uint16_t address)
{
 80055fa:	b507      	push	{r0, r1, r2, lr}
 80055fc:	4608      	mov	r0, r1
	uint16_t value;
	mehal_i2cMemRead(address, (uint8_t*)&value, sizeof(uint16_t));
 80055fe:	2202      	movs	r2, #2
 8005600:	f10d 0106 	add.w	r1, sp, #6
 8005604:	f000 f9f2 	bl	80059ec <mehal_i2cMemRead>
	return value;
}
 8005608:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800560c:	b003      	add	sp, #12
 800560e:	f85d fb04 	ldr.w	pc, [sp], #4

08005612 <_ZN6Memory11writeUInt32Etm>:

uint8_t Memory::writeUInt32(uint16_t address,uint32_t value)
{
 8005612:	b507      	push	{r0, r1, r2, lr}
 8005614:	4608      	mov	r0, r1
 8005616:	a902      	add	r1, sp, #8
 8005618:	f841 2d04 	str.w	r2, [r1, #-4]!
	return mehal_i2cMemWrite(address, (uint8_t*)&value, sizeof(uint32_t),1);
 800561c:	2301      	movs	r3, #1
 800561e:	2204      	movs	r2, #4
 8005620:	f000 f9f6 	bl	8005a10 <mehal_i2cMemWrite>
}
 8005624:	b003      	add	sp, #12
 8005626:	f85d fb04 	ldr.w	pc, [sp], #4

0800562a <_ZN6Memory16writeUInt8NoWaitEth>:
{
	return mehal_i2cMemWrite(address, &value, sizeof(uint8_t),1);
}

uint8_t Memory::writeUInt8NoWait(uint16_t address,uint8_t value)
{
 800562a:	b507      	push	{r0, r1, r2, lr}
 800562c:	4608      	mov	r0, r1
 800562e:	a902      	add	r1, sp, #8
 8005630:	f801 2d01 	strb.w	r2, [r1, #-1]!
	return mehal_i2cMemWrite(address, &value, sizeof(uint8_t),0);
 8005634:	2300      	movs	r3, #0
 8005636:	2201      	movs	r2, #1
 8005638:	f000 f9ea 	bl	8005a10 <mehal_i2cMemWrite>
}
 800563c:	b003      	add	sp, #12
 800563e:	f85d fb04 	ldr.w	pc, [sp], #4

08005642 <_ZN6Memory11writeUInt16Ett>:

uint8_t Memory::writeUInt16(uint16_t address,uint16_t value)
{
 8005642:	b507      	push	{r0, r1, r2, lr}
 8005644:	4608      	mov	r0, r1
 8005646:	a902      	add	r1, sp, #8
 8005648:	f821 2d02 	strh.w	r2, [r1, #-2]!
	return mehal_i2cMemWrite(address, (uint8_t*)&value, sizeof(uint16_t),1);
 800564c:	2301      	movs	r3, #1
 800564e:	2202      	movs	r2, #2
 8005650:	f000 f9de 	bl	8005a10 <mehal_i2cMemWrite>
}
 8005654:	b003      	add	sp, #12
 8005656:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800565c <DMA1_Channel5_IRQHandler>:

static void (*callbackDMA)(int) = NULL;
static void MX_I2C1_Init(void);

void DMA1_Channel5_IRQHandler()
{
 800565c:	b510      	push	{r4, lr}
	// check if the "transfer complete event" has triggered the interrupt
	if( DMA1->ISR & DMA_ISR_TCIF5 ){
 800565e:	4c0b      	ldr	r4, [pc, #44]	; (800568c <DMA1_Channel5_IRQHandler+0x30>)
 8005660:	6820      	ldr	r0, [r4, #0]
 8005662:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8005666:	d005      	beq.n	8005674 <DMA1_Channel5_IRQHandler+0x18>
		// complete transfer
		if(callbackDMA!=NULL)
 8005668:	4b09      	ldr	r3, [pc, #36]	; (8005690 <DMA1_Channel5_IRQHandler+0x34>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	b14b      	cbz	r3, 8005682 <DMA1_Channel5_IRQHandler+0x26>
			callbackDMA(1);
 800566e:	2001      	movs	r0, #1
	}
	else if(DMA1->ISR & DMA_ISR_HTIF5)
	{
		// half transfer
		if(callbackDMA!=NULL)
			callbackDMA(0);
 8005670:	4798      	blx	r3
 8005672:	e006      	b.n	8005682 <DMA1_Channel5_IRQHandler+0x26>
	else if(DMA1->ISR & DMA_ISR_HTIF5)
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	035b      	lsls	r3, r3, #13
 8005678:	d503      	bpl.n	8005682 <DMA1_Channel5_IRQHandler+0x26>
		if(callbackDMA!=NULL)
 800567a:	4b05      	ldr	r3, [pc, #20]	; (8005690 <DMA1_Channel5_IRQHandler+0x34>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1f6      	bne.n	8005670 <DMA1_Channel5_IRQHandler+0x14>
	}
	// clear the interrupt flag
	DMA1->IFCR |= DMA_IFCR_CGIF5;
 8005682:	6863      	ldr	r3, [r4, #4]
 8005684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005688:	6063      	str	r3, [r4, #4]
}
 800568a:	bd10      	pop	{r4, pc}
 800568c:	40020000 	.word	0x40020000
 8005690:	200047e0 	.word	0x200047e0

08005694 <mehal_init>:

void mehal_init(uint32_t* samplesBuffer,uint32_t samplesBufferSize,void (*fnCallbackDMA)(int))
{
 8005694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	callbackDMA = fnCallbackDMA;
 8005698:	4bb8      	ldr	r3, [pc, #736]	; (800597c <mehal_init+0x2e8>)

	/* TIMER 2 SETUP FOR PWM */
	// enable timer 2 clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800569a:	4db9      	ldr	r5, [pc, #740]	; (8005980 <mehal_init+0x2ec>)
	callbackDMA = fnCallbackDMA;
 800569c:	601a      	str	r2, [r3, #0]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800569e:	69eb      	ldr	r3, [r5, #28]
	// enable AFIO and GPIO port A clock
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN | RCC_APB2ENR_IOPAEN;
	// configure pin PA0 as AFIO push-pull output with max speed
	GPIOA->CRL &=~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0);
 80056a0:	4eb8      	ldr	r6, [pc, #736]	; (8005984 <mehal_init+0x2f0>)
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80056a2:	f043 0301 	orr.w	r3, r3, #1
 80056a6:	61eb      	str	r3, [r5, #28]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN | RCC_APB2ENR_IOPAEN;
 80056a8:	69ab      	ldr	r3, [r5, #24]
	GPIOA->CRL |= GPIO_CRL_MODE0 | GPIO_CRL_CNF0_1;

	// set timer 2 prescaler to 1, so the timer frequency is equal to the APB2 frequency (here 72MHz)
	// the actual prescaling factor is PSC+1
	TIM2->PSC = 0;
 80056aa:	2400      	movs	r4, #0
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN | RCC_APB2ENR_IOPAEN;
 80056ac:	f043 0305 	orr.w	r3, r3, #5
 80056b0:	61ab      	str	r3, [r5, #24]
	GPIOA->CRL &=~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0);
 80056b2:	6833      	ldr	r3, [r6, #0]
	// set the auto-reload value, i.e. the max counter value
	TIM2->ARR = 255;
 80056b4:	22ff      	movs	r2, #255	; 0xff
	GPIOA->CRL &=~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0);
 80056b6:	f023 030f 	bic.w	r3, r3, #15
 80056ba:	6033      	str	r3, [r6, #0]
	GPIOA->CRL |= GPIO_CRL_MODE0 | GPIO_CRL_CNF0_1;
 80056bc:	6833      	ldr	r3, [r6, #0]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056be:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 80056c2:	f043 030b 	orr.w	r3, r3, #11
 80056c6:	6033      	str	r3, [r6, #0]
	TIM2->PSC = 0;
 80056c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056cc:	629c      	str	r4, [r3, #40]	; 0x28
	TIM2->ARR = 255;
 80056ce:	62da      	str	r2, [r3, #44]	; 0x2c
	// set the output compare value which determines the duty cycle
	TIM2->CCR1 = 128;
 80056d0:	2280      	movs	r2, #128	; 0x80
 80056d2:	635a      	str	r2, [r3, #52]	; 0x34
	// refer to ST's app note "AN4776" p.14-16 for details about preload
	// PWM mode 1: duty_cycle = CCRx / ARR
	// PWM mode 2: duty_cycle = 1 - CCRx / ARR
	// if the counter is not up- but downcounting it is inverted
	// by default, the timers are upcounting
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1PE;
 80056d4:	699a      	ldr	r2, [r3, #24]
{
 80056d6:	b087      	sub	sp, #28
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1PE;
 80056d8:	f042 0268 	orr.w	r2, r2, #104	; 0x68
 80056dc:	619a      	str	r2, [r3, #24]
	// set polarity of the output to non-inverted (default, so actually not necessary)
	TIM2->CCER &=~TIM_CCER_CC1P;
 80056de:	6a1a      	ldr	r2, [r3, #32]
 80056e0:	f022 0202 	bic.w	r2, r2, #2
 80056e4:	621a      	str	r2, [r3, #32]
	// enable the compare outputs
	TIM2->CCER |= TIM_CCER_CC1E;
 80056e6:	6a1a      	ldr	r2, [r3, #32]
 80056e8:	f042 0201 	orr.w	r2, r2, #1
 80056ec:	621a      	str	r2, [r3, #32]
	 	so here f_PWM = f_APB2 / ( 2*(PSC+1)*ARR ) = approx. 140.6 kHz
	*/
	//TIM2->CR1 |= TIM_CR1_CMS;

	// enable the timer 2 counter
	TIM2->CR1 |= TIM_CR1_CEN;
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	f042 0201 	orr.w	r2, r2, #1
 80056f4:	601a      	str	r2, [r3, #0]


	/* DMA SETUP */
	//enable DMA1 clock
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 80056f6:	696b      	ldr	r3, [r5, #20]
	// set the peripheral address where to put the data
	// in this case it's the timers compare (duty-cycle) register
	DMA1_Channel5->CPAR = (uint32_t) (&(TIM2->CCR1));
 80056f8:	4aa3      	ldr	r2, [pc, #652]	; (8005988 <mehal_init+0x2f4>)
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 80056fa:	f043 0301 	orr.w	r3, r3, #1
 80056fe:	616b      	str	r3, [r5, #20]
	DMA1_Channel5->CPAR = (uint32_t) (&(TIM2->CCR1));
 8005700:	4ba2      	ldr	r3, [pc, #648]	; (800598c <mehal_init+0x2f8>)
 8005702:	609a      	str	r2, [r3, #8]
	// set the memory address from where to fetch the data
	// this is the starting address of our array of samples
	DMA1_Channel5->CMAR = (uint32_t) samplesBuffer;
 8005704:	60d8      	str	r0, [r3, #12]
	//DMA1_Channel5->CMAR = (uint32_t) sine_LUT;
	// set the number of data (samples) to be transferred
	DMA1_Channel5->CNDTR = samplesBufferSize;
 8005706:	6059      	str	r1, [r3, #4]
	//DMA1_Channel5->CNDTR = 9; //for sine_LUT
	// set data transfer direction to "memory->peripheral"
	DMA1_Channel5->CCR |= DMA_CCR_DIR;
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	f042 0210 	orr.w	r2, r2, #16
 800570e:	601a      	str	r2, [r3, #0]
	// set the DMA channel priority to "high"
	DMA1_Channel5->CCR |= DMA_CCR_PL_1;
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005716:	601a      	str	r2, [r3, #0]

	// enable circular mode (this means it will be repeated eternally)
	DMA1_Channel5->CCR |= DMA_CCR_CIRC;
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	f042 0220 	orr.w	r2, r2, #32
 800571e:	601a      	str	r2, [r3, #0]

	// enable memory increment mode
	DMA1_Channel5->CCR |= DMA_CCR_MINC;
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005726:	601a      	str	r2, [r3, #0]
	// disable peripheral increment mode
	DMA1_Channel5->CCR &=~DMA_CCR_PINC;
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800572e:	601a      	str	r2, [r3, #0]
	// set memory size to 8bit
	DMA1_Channel5->CCR &=~DMA_CCR_MSIZE;
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005736:	601a      	str	r2, [r3, #0]
	// set peripheral size to 16bit
	DMA1_Channel5->CCR |= DMA_CCR_PSIZE_0;
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800573e:	601a      	str	r2, [r3, #0]

	// enable transfer complete interrupt and halft complete interrupt
	DMA1_Channel5->CCR |= DMA_CCR_TCIE;
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	f042 0202 	orr.w	r2, r2, #2
 8005746:	601a      	str	r2, [r3, #0]
	DMA1_Channel5->CCR |= DMA_CCR_HTIE;
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	f042 0204 	orr.w	r2, r2, #4
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	4a8f      	ldr	r2, [pc, #572]	; (8005990 <mehal_init+0x2fc>)
 8005752:	f8c2 9000 	str.w	r9, [r2]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8005756:	b662      	cpsie	i
	// globally enable interrupts
	__enable_irq();
	//________________________________________________________________

	// enable the DMA channel
	DMA1_Channel5->CCR |= DMA_CCR_EN;
 8005758:	681a      	ldr	r2, [r3, #0]

	// PIN  B11 GATE_IN
	GPIO_InitStruct.Pin = GPIO_PIN_11;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800575a:	2702      	movs	r7, #2
	DMA1_Channel5->CCR |= DMA_CCR_EN;
 800575c:	f042 0201 	orr.w	r2, r2, #1
 8005760:	601a      	str	r2, [r3, #0]
	TIM1->ARR = 750; // 96Khz
 8005762:	f240 22ee 	movw	r2, #750	; 0x2ee
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005766:	f04f 0801 	mov.w	r8, #1
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 800576a:	f44f 6b00 	mov.w	fp, #2048	; 0x800
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	// PIN  B12 ENC_A
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 800576e:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8005772:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005774:	a902      	add	r1, sp, #8
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8005776:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800577a:	61ab      	str	r3, [r5, #24]
	TIM1->PSC = 0;
 800577c:	4b85      	ldr	r3, [pc, #532]	; (8005994 <mehal_init+0x300>)
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800577e:	4886      	ldr	r0, [pc, #536]	; (8005998 <mehal_init+0x304>)
	TIM1->PSC = 0;
 8005780:	629c      	str	r4, [r3, #40]	; 0x28
	TIM1->ARR = 750; // 96Khz
 8005782:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->DIER |= TIM_DIER_UDE;
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800578a:	60da      	str	r2, [r3, #12]
	TIM1->CR1 |= TIM_CR1_CEN;
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	f042 0201 	orr.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]
	__HAL_RCC_GPIOB_CLK_ENABLE(); // Enable clck for portb
 8005794:	69ab      	ldr	r3, [r5, #24]
 8005796:	f043 0308 	orr.w	r3, r3, #8
 800579a:	61ab      	str	r3, [r5, #24]
 800579c:	69ab      	ldr	r3, [r5, #24]
 800579e:	f003 0308 	and.w	r3, r3, #8
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	9b00      	ldr	r3, [sp, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE(); // Enable clck for porta
 80057a6:	69ab      	ldr	r3, [r5, #24]
 80057a8:	f043 0304 	orr.w	r3, r3, #4
 80057ac:	61ab      	str	r3, [r5, #24]
 80057ae:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057b0:	9403      	str	r4, [sp, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE(); // Enable clck for porta
 80057b2:	f003 0304 	and.w	r3, r3, #4
 80057b6:	9301      	str	r3, [sp, #4]
 80057b8:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 80057ba:	f8cd b008 	str.w	fp, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057be:	e9cd 8704 	strd	r8, r7, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057c2:	f000 fb45 	bl	8005e50 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057c6:	a902      	add	r1, sp, #8
 80057c8:	4873      	ldr	r0, [pc, #460]	; (8005998 <mehal_init+0x304>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057ca:	e9cd a402 	strd	sl, r4, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057ce:	e9cd 8704 	strd	r8, r7, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057d2:	f000 fb3d 	bl	8005e50 <HAL_GPIO_Init>

	// PIN  B13 ENC_B
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80057d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057da:	a902      	add	r1, sp, #8
 80057dc:	486e      	ldr	r0, [pc, #440]	; (8005998 <mehal_init+0x304>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057de:	e9cd 3402 	strd	r3, r4, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057e2:	e9cd 8704 	strd	r8, r7, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057e6:	f000 fb33 	bl	8005e50 <HAL_GPIO_Init>

	// PIN  B14 ENC_SW
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 80057ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057ee:	a902      	add	r1, sp, #8
 80057f0:	4869      	ldr	r0, [pc, #420]	; (8005998 <mehal_init+0x304>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057f2:	e9cd 3402 	strd	r3, r4, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057f6:	e9cd 8704 	strd	r8, r7, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057fa:	f000 fb29 	bl	8005e50 <HAL_GPIO_Init>
	// PIN  B15 LED_CONFIG
	GPIO_InitStruct.Pin = GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057fe:	a902      	add	r1, sp, #8
 8005800:	4865      	ldr	r0, [pc, #404]	; (8005998 <mehal_init+0x304>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005802:	e9cd 9802 	strd	r9, r8, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005806:	e9cd 4704 	strd	r4, r7, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800580a:	f000 fb21 	bl	8005e50 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); //Configure GPIO pin Output Level
 800580e:	4649      	mov	r1, r9


	// PIN  A1 ANALOG INPUT PARAM2
	GPIO_InitStruct.Pin = GPIO_PIN_1;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005810:	f04f 0903 	mov.w	r9, #3
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); //Configure GPIO pin Output Level
 8005814:	4622      	mov	r2, r4
 8005816:	4860      	ldr	r0, [pc, #384]	; (8005998 <mehal_init+0x304>)
 8005818:	f000 fc8b 	bl	8006132 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800581c:	a902      	add	r1, sp, #8
 800581e:	4630      	mov	r0, r6
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005820:	e9cd 9403 	strd	r9, r4, [sp, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005824:	9702      	str	r7, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005826:	9705      	str	r7, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005828:	f000 fb12 	bl	8005e50 <HAL_GPIO_Init>

	// PIN  A2 ANALOG INPUT PARAM1
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800582c:	2304      	movs	r3, #4
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800582e:	a902      	add	r1, sp, #8
 8005830:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005832:	e9cd 3902 	strd	r3, r9, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005836:	e9cd 4704 	strd	r4, r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800583a:	f000 fb09 	bl	8005e50 <HAL_GPIO_Init>

	// PIN  A3 ANALOG INPUT FINE_TUNE
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 800583e:	2308      	movs	r3, #8
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005840:	4630      	mov	r0, r6
 8005842:	eb0d 0103 	add.w	r1, sp, r3
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005846:	e9cd 3902 	strd	r3, r9, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800584a:	e9cd 4704 	strd	r4, r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800584e:	f000 faff 	bl	8005e50 <HAL_GPIO_Init>

	// PIN  A4 ANALOG INPUT FM
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005852:	2310      	movs	r3, #16
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005854:	a902      	add	r1, sp, #8
 8005856:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005858:	e9cd 3902 	strd	r3, r9, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800585c:	e9cd 4704 	strd	r4, r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005860:	f000 faf6 	bl	8005e50 <HAL_GPIO_Init>

	// PIN  A5 ANALOG INPUT PITCH
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005864:	2320      	movs	r3, #32
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005866:	e9cd 3902 	strd	r3, r9, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);


	// PIN  A8 LED_BANK1
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 800586a:	f44f 7980 	mov.w	r9, #256	; 0x100
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800586e:	a902      	add	r1, sp, #8
 8005870:	4630      	mov	r0, r6
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005872:	e9cd 4704 	strd	r4, r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005876:	f000 faeb 	bl	8005e50 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800587a:	a902      	add	r1, sp, #8
 800587c:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800587e:	e9cd 9802 	strd	r9, r8, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005882:	e9cd 4704 	strd	r4, r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005886:	f000 fae3 	bl	8005e50 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //Configure GPIO pin Output Level
 800588a:	4649      	mov	r1, r9

	// PIN  A9 LED_BANK0
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 800588c:	f44f 7900 	mov.w	r9, #512	; 0x200
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //Configure GPIO pin Output Level
 8005890:	4622      	mov	r2, r4
 8005892:	4630      	mov	r0, r6
 8005894:	f000 fc4d 	bl	8006132 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005898:	a902      	add	r1, sp, #8
 800589a:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800589c:	e9cd 9802 	strd	r9, r8, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058a0:	e9cd 4704 	strd	r4, r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058a4:	f000 fad4 	bl	8005e50 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //Configure GPIO pin Output Level
 80058a8:	4649      	mov	r1, r9

	// PIN  A10 DISPLAY_CLK
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 80058aa:	f44f 6980 	mov.w	r9, #1024	; 0x400
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //Configure GPIO pin Output Level
 80058ae:	4622      	mov	r2, r4
 80058b0:	4630      	mov	r0, r6
 80058b2:	f000 fc3e 	bl	8006132 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058b6:	a902      	add	r1, sp, #8
 80058b8:	4630      	mov	r0, r6
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058ba:	e9cd 4704 	strd	r4, r7, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058be:	e9cd 9802 	strd	r9, r8, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058c2:	f000 fac5 	bl	8005e50 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); //Configure GPIO pin Output Level
 80058c6:	4622      	mov	r2, r4
 80058c8:	4649      	mov	r1, r9
 80058ca:	4630      	mov	r0, r6
 80058cc:	f000 fc31 	bl	8006132 <HAL_GPIO_WritePin>
	// PIN  A11 DISPLAY_LATCH
	GPIO_InitStruct.Pin = GPIO_PIN_11;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058d0:	a902      	add	r1, sp, #8
 80058d2:	4630      	mov	r0, r6
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058d4:	e9cd 4704 	strd	r4, r7, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058d8:	e9cd b802 	strd	fp, r8, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058dc:	f000 fab8 	bl	8005e50 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET); //Configure GPIO pin Output Level
 80058e0:	4622      	mov	r2, r4
 80058e2:	4659      	mov	r1, fp
 80058e4:	4630      	mov	r0, r6
 80058e6:	f000 fc24 	bl	8006132 <HAL_GPIO_WritePin>
	// PIN  A12 DISPLAY_DATA
	GPIO_InitStruct.Pin = GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058ea:	a902      	add	r1, sp, #8
 80058ec:	4630      	mov	r0, r6
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058ee:	e9cd 4704 	strd	r4, r7, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058f2:	e9cd a802 	strd	sl, r8, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058f6:	f000 faab 	bl	8005e50 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); //Configure GPIO pin Output Level
 80058fa:	4622      	mov	r2, r4
 80058fc:	4651      	mov	r1, sl
 80058fe:	4630      	mov	r0, r6
 8005900:	f000 fc17 	bl	8006132 <HAL_GPIO_WritePin>


	// Configure ADC1
	// set ADC clock prescaler to 6 to get a 12MHZ ADC clock (14MHz is maximum)
	RCC->CFGR &=~RCC_CFGR_ADCPRE_0;
 8005904:	686b      	ldr	r3, [r5, #4]
	RCC->CFGR |= RCC_CFGR_ADCPRE_1;
	// enable ADC1 clock
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
	// enable ADC1
	ADC1->CR2 |= ADC_CR2_ADON;
 8005906:	4c25      	ldr	r4, [pc, #148]	; (800599c <mehal_init+0x308>)
	RCC->CFGR &=~RCC_CFGR_ADCPRE_0;
 8005908:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800590c:	606b      	str	r3, [r5, #4]
	RCC->CFGR |= RCC_CFGR_ADCPRE_1;
 800590e:	686b      	ldr	r3, [r5, #4]
	ADC1->SMPR2 &=~(ADC_SMPR2_SMP0_2 | ADC_SMPR2_SMP0_1 | ADC_SMPR2_SMP0_0);
	// set data alignment to right
	ADC1->CR2 &=~ADC_CR2_ALIGN;
	// wait 10µs before ADC calibration
	//delay(10);
	HAL_Delay(1); // 1ms
 8005910:	4640      	mov	r0, r8
	RCC->CFGR |= RCC_CFGR_ADCPRE_1;
 8005912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005916:	606b      	str	r3, [r5, #4]
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8005918:	69ab      	ldr	r3, [r5, #24]
 800591a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800591e:	61ab      	str	r3, [r5, #24]
	ADC1->CR2 |= ADC_CR2_ADON;
 8005920:	68a3      	ldr	r3, [r4, #8]
 8005922:	ea43 0308 	orr.w	r3, r3, r8
 8005926:	60a3      	str	r3, [r4, #8]
	ADC1->CR2 |= (ADC_CR2_EXTSEL_2 | ADC_CR2_EXTSEL_1 | ADC_CR2_EXTSEL_0);
 8005928:	68a3      	ldr	r3, [r4, #8]
 800592a:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 800592e:	60a3      	str	r3, [r4, #8]
	ADC1->SMPR2 &=~(ADC_SMPR2_SMP0_2 | ADC_SMPR2_SMP0_1 | ADC_SMPR2_SMP0_0);
 8005930:	6923      	ldr	r3, [r4, #16]
 8005932:	f023 0307 	bic.w	r3, r3, #7
 8005936:	6123      	str	r3, [r4, #16]
	ADC1->CR2 &=~ADC_CR2_ALIGN;
 8005938:	68a3      	ldr	r3, [r4, #8]
 800593a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800593e:	60a3      	str	r3, [r4, #8]
	HAL_Delay(1); // 1ms
 8005940:	f000 f980 	bl	8005c44 <HAL_Delay>
	// start calibration of ADC1
	ADC1->CR2 |= ADC_CR2_CAL;
 8005944:	68a3      	ldr	r3, [r4, #8]
 8005946:	f043 0304 	orr.w	r3, r3, #4
 800594a:	60a3      	str	r3, [r4, #8]
	// wait until calibration is finished
	while( (ADC1->CR2) & ADC_CR2_CAL );
 800594c:	68a3      	ldr	r3, [r4, #8]
 800594e:	f013 0304 	ands.w	r3, r3, #4
 8005952:	d1fb      	bne.n	800594c <mehal_init+0x2b8>
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005954:	4812      	ldr	r0, [pc, #72]	; (80059a0 <mehal_init+0x30c>)
  hi2c1.Init.ClockSpeed = 400000;
 8005956:	4913      	ldr	r1, [pc, #76]	; (80059a4 <mehal_init+0x310>)
 8005958:	4a13      	ldr	r2, [pc, #76]	; (80059a8 <mehal_init+0x314>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
 800595a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.ClockSpeed = 400000;
 800595e:	e9c0 1200 	strd	r1, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005962:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005966:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800596a:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800596e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005970:	f000 fbf8 	bl	8006164 <HAL_I2C_Init>
}
 8005974:	b007      	add	sp, #28
 8005976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800597a:	bf00      	nop
 800597c:	200047e0 	.word	0x200047e0
 8005980:	40021000 	.word	0x40021000
 8005984:	40010800 	.word	0x40010800
 8005988:	40000034 	.word	0x40000034
 800598c:	40020058 	.word	0x40020058
 8005990:	e000e100 	.word	0xe000e100
 8005994:	40012c00 	.word	0x40012c00
 8005998:	40010c00 	.word	0x40010c00
 800599c:	40012400 	.word	0x40012400
 80059a0:	200047e4 	.word	0x200047e4
 80059a4:	40005400 	.word	0x40005400
 80059a8:	00061a80 	.word	0x00061a80

080059ac <mehal_readADC>:
	channel = channel + 1; // A0 is not used (its PWM output)
 80059ac:	3001      	adds	r0, #1
 80059ae:	b2c0      	uxtb	r0, r0
	if( (channel>17) || (channel<0) ) return 0xFFFF;
 80059b0:	2811      	cmp	r0, #17
 80059b2:	d816      	bhi.n	80059e2 <mehal_readADC+0x36>
	ADC1->SQR1 = 0;
 80059b4:	2200      	movs	r2, #0
 80059b6:	4b0c      	ldr	r3, [pc, #48]	; (80059e8 <mehal_readADC+0x3c>)
 80059b8:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1->SQR3 = (channel << ADC_SQR3_SQ1_Pos);
 80059ba:	6358      	str	r0, [r3, #52]	; 0x34
	ADC1->SR &=~ADC_SR_EOC;
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	f022 0202 	bic.w	r2, r2, #2
 80059c2:	601a      	str	r2, [r3, #0]
	ADC1->CR2 |= ADC_CR2_ADON;
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	f042 0201 	orr.w	r2, r2, #1
 80059ca:	609a      	str	r2, [r3, #8]
	ADC1->CR2 |= ADC_CR2_SWSTART;
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80059d2:	609a      	str	r2, [r3, #8]
	while( !(ADC1->SR & ADC_SR_EOC) );
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	0792      	lsls	r2, r2, #30
 80059d8:	d5fc      	bpl.n	80059d4 <mehal_readADC+0x28>
	return ((ADC1->DR) & 0b111111111111);
 80059da:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80059dc:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80059e0:	4770      	bx	lr
	if( (channel>17) || (channel<0) ) return 0xFFFF;
 80059e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 80059e6:	4770      	bx	lr
 80059e8:	40012400 	.word	0x40012400

080059ec <mehal_i2cMemRead>:

}


uint8_t mehal_i2cMemRead(uint16_t memAddress,uint8_t *pData, uint16_t size)
{
 80059ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return (uint8_t)HAL_I2C_Mem_Read(&hi2c1, MEM_ADDRESS, memAddress, I2C_MEMADD_SIZE_8BIT, pData, size, 300);
 80059ee:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80059f2:	9100      	str	r1, [sp, #0]
 80059f4:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80059f8:	21a0      	movs	r1, #160	; 0xa0
 80059fa:	4602      	mov	r2, r0
 80059fc:	2301      	movs	r3, #1
 80059fe:	4803      	ldr	r0, [pc, #12]	; (8005a0c <mehal_i2cMemRead+0x20>)
 8005a00:	f000 fdd2 	bl	80065a8 <HAL_I2C_Mem_Read>
}
 8005a04:	b005      	add	sp, #20
 8005a06:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a0a:	bf00      	nop
 8005a0c:	200047e4 	.word	0x200047e4

08005a10 <mehal_i2cMemWrite>:

uint8_t mehal_i2cMemWrite(uint16_t memAddress,uint8_t *pData, uint16_t size,uint8_t flagWait)
{
 8005a10:	b530      	push	{r4, r5, lr}
 8005a12:	461d      	mov	r5, r3
	uint8_t r;
	r= (uint8_t)HAL_I2C_Mem_Write(&hi2c1, MEM_ADDRESS, memAddress, I2C_MEMADD_SIZE_8BIT, pData, size, 500);
 8005a14:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
{
 8005a18:	b085      	sub	sp, #20
	r= (uint8_t)HAL_I2C_Mem_Write(&hi2c1, MEM_ADDRESS, memAddress, I2C_MEMADD_SIZE_8BIT, pData, size, 500);
 8005a1a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005a1e:	9100      	str	r1, [sp, #0]
 8005a20:	4602      	mov	r2, r0
 8005a22:	2301      	movs	r3, #1
 8005a24:	21a0      	movs	r1, #160	; 0xa0
 8005a26:	4805      	ldr	r0, [pc, #20]	; (8005a3c <mehal_i2cMemWrite+0x2c>)
 8005a28:	f000 fcc4 	bl	80063b4 <HAL_I2C_Mem_Write>
 8005a2c:	4604      	mov	r4, r0
	if(flagWait)
 8005a2e:	b115      	cbz	r5, 8005a36 <mehal_i2cMemWrite+0x26>
}


void mehal_delay(uint32_t t)
{
	  HAL_Delay(t);
 8005a30:	201e      	movs	r0, #30
 8005a32:	f000 f907 	bl	8005c44 <HAL_Delay>
}
 8005a36:	4620      	mov	r0, r4
 8005a38:	b005      	add	sp, #20
 8005a3a:	bd30      	pop	{r4, r5, pc}
 8005a3c:	200047e4 	.word	0x200047e4

08005a40 <mehal_debugPinSet>:
}
 8005a40:	4770      	bx	lr

08005a42 <mehal_debugPinReset>:
 8005a42:	4770      	bx	lr

08005a44 <mehal_readGateInput>:
	return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 8005a44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005a48:	4801      	ldr	r0, [pc, #4]	; (8005a50 <mehal_readGateInput+0xc>)
 8005a4a:	f000 bb5b 	b.w	8006104 <HAL_GPIO_ReadPin>
 8005a4e:	bf00      	nop
 8005a50:	40010c00 	.word	0x40010c00

08005a54 <mehal_readEncoderSwitch>:
	return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8005a54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a58:	4801      	ldr	r0, [pc, #4]	; (8005a60 <mehal_readEncoderSwitch+0xc>)
 8005a5a:	f000 bb53 	b.w	8006104 <HAL_GPIO_ReadPin>
 8005a5e:	bf00      	nop
 8005a60:	40010c00 	.word	0x40010c00

08005a64 <mehal_readEncoderA>:
	return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8005a64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a68:	4801      	ldr	r0, [pc, #4]	; (8005a70 <mehal_readEncoderA+0xc>)
 8005a6a:	f000 bb4b 	b.w	8006104 <HAL_GPIO_ReadPin>
 8005a6e:	bf00      	nop
 8005a70:	40010c00 	.word	0x40010c00

08005a74 <mehal_readEncoderB>:
	return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8005a74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a78:	4801      	ldr	r0, [pc, #4]	; (8005a80 <mehal_readEncoderB+0xc>)
 8005a7a:	f000 bb43 	b.w	8006104 <HAL_GPIO_ReadPin>
 8005a7e:	bf00      	nop
 8005a80:	40010c00 	.word	0x40010c00

08005a84 <mehal_sendDataTo595>:
{
 8005a84:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8005a86:	2200      	movs	r2, #0
 8005a88:	f44f 6100 	mov.w	r1, #2048	; 0x800
{
 8005a8c:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8005a8e:	4816      	ldr	r0, [pc, #88]	; (8005ae8 <mehal_sendDataTo595+0x64>)
 8005a90:	f000 fb4f 	bl	8006132 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8005a94:	2200      	movs	r2, #0
 8005a96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a9a:	4813      	ldr	r0, [pc, #76]	; (8005ae8 <mehal_sendDataTo595+0x64>)
 8005a9c:	f000 fb49 	bl	8006132 <HAL_GPIO_WritePin>
 8005aa0:	2400      	movs	r4, #0
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8005aa2:	4e11      	ldr	r6, [pc, #68]	; (8005ae8 <mehal_sendDataTo595+0x64>)
		if( (data&(0x80>>i)) == 0)
 8005aa4:	2280      	movs	r2, #128	; 0x80
 8005aa6:	4122      	asrs	r2, r4
 8005aa8:	402a      	ands	r2, r5
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8005aaa:	bf18      	it	ne
 8005aac:	2201      	movne	r2, #1
 8005aae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	f000 fb3d 	bl	8006132 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005abe:	480a      	ldr	r0, [pc, #40]	; (8005ae8 <mehal_sendDataTo595+0x64>)
 8005ac0:	f000 fb37 	bl	8006132 <HAL_GPIO_WritePin>
 8005ac4:	3401      	adds	r4, #1
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005acc:	4806      	ldr	r0, [pc, #24]	; (8005ae8 <mehal_sendDataTo595+0x64>)
 8005ace:	f000 fb30 	bl	8006132 <HAL_GPIO_WritePin>
	for(i=0; i<8;i++)
 8005ad2:	2c08      	cmp	r4, #8
 8005ad4:	d1e6      	bne.n	8005aa4 <mehal_sendDataTo595+0x20>
}
 8005ad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8005ada:	2201      	movs	r2, #1
 8005adc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ae0:	4801      	ldr	r0, [pc, #4]	; (8005ae8 <mehal_sendDataTo595+0x64>)
 8005ae2:	f000 bb26 	b.w	8006132 <HAL_GPIO_WritePin>
 8005ae6:	bf00      	nop
 8005ae8:	40010800 	.word	0x40010800

08005aec <mehal_setConfigLed>:
	if(state==1)
 8005aec:	2801      	cmp	r0, #1
{
 8005aee:	4602      	mov	r2, r0
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8005af0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005af4:	bf18      	it	ne
 8005af6:	2200      	movne	r2, #0
 8005af8:	4801      	ldr	r0, [pc, #4]	; (8005b00 <mehal_setConfigLed+0x14>)
 8005afa:	f000 bb1a 	b.w	8006132 <HAL_GPIO_WritePin>
 8005afe:	bf00      	nop
 8005b00:	40010c00 	.word	0x40010c00

08005b04 <mehal_setBank1Led>:
	if(state==1)
 8005b04:	2801      	cmp	r0, #1
{
 8005b06:	4602      	mov	r2, r0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8005b08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b0c:	bf18      	it	ne
 8005b0e:	2200      	movne	r2, #0
 8005b10:	4801      	ldr	r0, [pc, #4]	; (8005b18 <mehal_setBank1Led+0x14>)
 8005b12:	f000 bb0e 	b.w	8006132 <HAL_GPIO_WritePin>
 8005b16:	bf00      	nop
 8005b18:	40010800 	.word	0x40010800

08005b1c <mehal_setBank0Led>:
	if(state==1)
 8005b1c:	2801      	cmp	r0, #1
{
 8005b1e:	4602      	mov	r2, r0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8005b20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b24:	bf18      	it	ne
 8005b26:	2200      	movne	r2, #0
 8005b28:	4801      	ldr	r0, [pc, #4]	; (8005b30 <mehal_setBank0Led+0x14>)
 8005b2a:	f000 bb02 	b.w	8006132 <HAL_GPIO_WritePin>
 8005b2e:	bf00      	nop
 8005b30:	40010800 	.word	0x40010800

08005b34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005b34:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005b36:	e003      	b.n	8005b40 <LoopCopyDataInit>

08005b38 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005b38:	4b0b      	ldr	r3, [pc, #44]	; (8005b68 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005b3a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005b3c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005b3e:	3104      	adds	r1, #4

08005b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005b40:	480a      	ldr	r0, [pc, #40]	; (8005b6c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005b42:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005b44:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005b46:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005b48:	d3f6      	bcc.n	8005b38 <CopyDataInit>
  ldr r2, =_sbss
 8005b4a:	4a0a      	ldr	r2, [pc, #40]	; (8005b74 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005b4c:	e002      	b.n	8005b54 <LoopFillZerobss>

08005b4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005b4e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005b50:	f842 3b04 	str.w	r3, [r2], #4

08005b54 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005b54:	4b08      	ldr	r3, [pc, #32]	; (8005b78 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005b56:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005b58:	d3f9      	bcc.n	8005b4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005b5a:	f7fe fe25 	bl	80047a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b5e:	f001 fe97 	bl	8007890 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005b62:	f7fe fd41 	bl	80045e8 <main>
  bx lr
 8005b66:	4770      	bx	lr
  ldr r3, =_sidata
 8005b68:	0800e4e0 	.word	0x0800e4e0
  ldr r0, =_sdata
 8005b6c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005b70:	2000033c 	.word	0x2000033c
  ldr r2, =_sbss
 8005b74:	2000033c 	.word	0x2000033c
  ldr r3, = _ebss
 8005b78:	2000483c 	.word	0x2000483c

08005b7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005b7c:	e7fe      	b.n	8005b7c <ADC1_2_IRQHandler>
	...

08005b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005b84:	4b08      	ldr	r3, [pc, #32]	; (8005ba8 <HAL_Init+0x28>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a07      	ldr	r2, [pc, #28]	; (8005ba8 <HAL_Init+0x28>)
 8005b8a:	f043 0310 	orr.w	r3, r3, #16
 8005b8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b90:	2003      	movs	r0, #3
 8005b92:	f000 f929 	bl	8005de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b96:	2000      	movs	r0, #0
 8005b98:	f000 f808 	bl	8005bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005b9c:	f7fe fd6a 	bl	8004674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	40022000 	.word	0x40022000

08005bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005bb4:	4b12      	ldr	r3, [pc, #72]	; (8005c00 <HAL_InitTick+0x54>)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	4b12      	ldr	r3, [pc, #72]	; (8005c04 <HAL_InitTick+0x58>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 f933 	bl	8005e36 <HAL_SYSTICK_Config>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e00e      	b.n	8005bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b0f      	cmp	r3, #15
 8005bde:	d80a      	bhi.n	8005bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005be0:	2200      	movs	r2, #0
 8005be2:	6879      	ldr	r1, [r7, #4]
 8005be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005be8:	f000 f909 	bl	8005dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005bec:	4a06      	ldr	r2, [pc, #24]	; (8005c08 <HAL_InitTick+0x5c>)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	e000      	b.n	8005bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	20000328 	.word	0x20000328
 8005c04:	20000338 	.word	0x20000338
 8005c08:	20000334 	.word	0x20000334

08005c0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005c10:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <HAL_IncTick+0x1c>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	461a      	mov	r2, r3
 8005c16:	4b05      	ldr	r3, [pc, #20]	; (8005c2c <HAL_IncTick+0x20>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	4a03      	ldr	r2, [pc, #12]	; (8005c2c <HAL_IncTick+0x20>)
 8005c1e:	6013      	str	r3, [r2, #0]
}
 8005c20:	bf00      	nop
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bc80      	pop	{r7}
 8005c26:	4770      	bx	lr
 8005c28:	20000338 	.word	0x20000338
 8005c2c:	20004838 	.word	0x20004838

08005c30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c30:	b480      	push	{r7}
 8005c32:	af00      	add	r7, sp, #0
  return uwTick;
 8005c34:	4b02      	ldr	r3, [pc, #8]	; (8005c40 <HAL_GetTick+0x10>)
 8005c36:	681b      	ldr	r3, [r3, #0]
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bc80      	pop	{r7}
 8005c3e:	4770      	bx	lr
 8005c40:	20004838 	.word	0x20004838

08005c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c4c:	f7ff fff0 	bl	8005c30 <HAL_GetTick>
 8005c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c5c:	d005      	beq.n	8005c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c5e:	4b09      	ldr	r3, [pc, #36]	; (8005c84 <HAL_Delay+0x40>)
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	461a      	mov	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4413      	add	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005c6a:	bf00      	nop
 8005c6c:	f7ff ffe0 	bl	8005c30 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d8f7      	bhi.n	8005c6c <HAL_Delay+0x28>
  {
  }
}
 8005c7c:	bf00      	nop
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	20000338 	.word	0x20000338

08005c88 <__NVIC_SetPriorityGrouping>:
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f003 0307 	and.w	r3, r3, #7
 8005c96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c98:	4b0c      	ldr	r3, [pc, #48]	; (8005ccc <__NVIC_SetPriorityGrouping+0x44>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cba:	4a04      	ldr	r2, [pc, #16]	; (8005ccc <__NVIC_SetPriorityGrouping+0x44>)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	60d3      	str	r3, [r2, #12]
}
 8005cc0:	bf00      	nop
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bc80      	pop	{r7}
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	e000ed00 	.word	0xe000ed00

08005cd0 <__NVIC_GetPriorityGrouping>:
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cd4:	4b04      	ldr	r3, [pc, #16]	; (8005ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	0a1b      	lsrs	r3, r3, #8
 8005cda:	f003 0307 	and.w	r3, r3, #7
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bc80      	pop	{r7}
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	e000ed00 	.word	0xe000ed00

08005cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	6039      	str	r1, [r7, #0]
 8005cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	db0a      	blt.n	8005d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	490c      	ldr	r1, [pc, #48]	; (8005d38 <__NVIC_SetPriority+0x4c>)
 8005d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d0a:	0112      	lsls	r2, r2, #4
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	440b      	add	r3, r1
 8005d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d14:	e00a      	b.n	8005d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	4908      	ldr	r1, [pc, #32]	; (8005d3c <__NVIC_SetPriority+0x50>)
 8005d1c:	79fb      	ldrb	r3, [r7, #7]
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	3b04      	subs	r3, #4
 8005d24:	0112      	lsls	r2, r2, #4
 8005d26:	b2d2      	uxtb	r2, r2
 8005d28:	440b      	add	r3, r1
 8005d2a:	761a      	strb	r2, [r3, #24]
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bc80      	pop	{r7}
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	e000e100 	.word	0xe000e100
 8005d3c:	e000ed00 	.word	0xe000ed00

08005d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b089      	sub	sp, #36	; 0x24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f003 0307 	and.w	r3, r3, #7
 8005d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	f1c3 0307 	rsb	r3, r3, #7
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	bf28      	it	cs
 8005d5e:	2304      	movcs	r3, #4
 8005d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	3304      	adds	r3, #4
 8005d66:	2b06      	cmp	r3, #6
 8005d68:	d902      	bls.n	8005d70 <NVIC_EncodePriority+0x30>
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	3b03      	subs	r3, #3
 8005d6e:	e000      	b.n	8005d72 <NVIC_EncodePriority+0x32>
 8005d70:	2300      	movs	r3, #0
 8005d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	43da      	mvns	r2, r3
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	401a      	ands	r2, r3
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d92:	43d9      	mvns	r1, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d98:	4313      	orrs	r3, r2
         );
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3724      	adds	r7, #36	; 0x24
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bc80      	pop	{r7}
 8005da2:	4770      	bx	lr

08005da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	3b01      	subs	r3, #1
 8005db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005db4:	d301      	bcc.n	8005dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005db6:	2301      	movs	r3, #1
 8005db8:	e00f      	b.n	8005dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005dba:	4a0a      	ldr	r2, [pc, #40]	; (8005de4 <SysTick_Config+0x40>)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005dc2:	210f      	movs	r1, #15
 8005dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dc8:	f7ff ff90 	bl	8005cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005dcc:	4b05      	ldr	r3, [pc, #20]	; (8005de4 <SysTick_Config+0x40>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005dd2:	4b04      	ldr	r3, [pc, #16]	; (8005de4 <SysTick_Config+0x40>)
 8005dd4:	2207      	movs	r2, #7
 8005dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	e000e010 	.word	0xe000e010

08005de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7ff ff49 	bl	8005c88 <__NVIC_SetPriorityGrouping>
}
 8005df6:	bf00      	nop
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b086      	sub	sp, #24
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	4603      	mov	r3, r0
 8005e06:	60b9      	str	r1, [r7, #8]
 8005e08:	607a      	str	r2, [r7, #4]
 8005e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e10:	f7ff ff5e 	bl	8005cd0 <__NVIC_GetPriorityGrouping>
 8005e14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	68b9      	ldr	r1, [r7, #8]
 8005e1a:	6978      	ldr	r0, [r7, #20]
 8005e1c:	f7ff ff90 	bl	8005d40 <NVIC_EncodePriority>
 8005e20:	4602      	mov	r2, r0
 8005e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e26:	4611      	mov	r1, r2
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7ff ff5f 	bl	8005cec <__NVIC_SetPriority>
}
 8005e2e:	bf00      	nop
 8005e30:	3718      	adds	r7, #24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b082      	sub	sp, #8
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f7ff ffb0 	bl	8005da4 <SysTick_Config>
 8005e44:	4603      	mov	r3, r0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
	...

08005e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b08b      	sub	sp, #44	; 0x2c
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e62:	e127      	b.n	80060b4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005e64:	2201      	movs	r2, #1
 8005e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e68:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	4013      	ands	r3, r2
 8005e76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	f040 8116 	bne.w	80060ae <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2b12      	cmp	r3, #18
 8005e88:	d034      	beq.n	8005ef4 <HAL_GPIO_Init+0xa4>
 8005e8a:	2b12      	cmp	r3, #18
 8005e8c:	d80d      	bhi.n	8005eaa <HAL_GPIO_Init+0x5a>
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d02b      	beq.n	8005eea <HAL_GPIO_Init+0x9a>
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d804      	bhi.n	8005ea0 <HAL_GPIO_Init+0x50>
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d031      	beq.n	8005efe <HAL_GPIO_Init+0xae>
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d01c      	beq.n	8005ed8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005e9e:	e048      	b.n	8005f32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005ea0:	2b03      	cmp	r3, #3
 8005ea2:	d043      	beq.n	8005f2c <HAL_GPIO_Init+0xdc>
 8005ea4:	2b11      	cmp	r3, #17
 8005ea6:	d01b      	beq.n	8005ee0 <HAL_GPIO_Init+0x90>
          break;
 8005ea8:	e043      	b.n	8005f32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005eaa:	4a89      	ldr	r2, [pc, #548]	; (80060d0 <HAL_GPIO_Init+0x280>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d026      	beq.n	8005efe <HAL_GPIO_Init+0xae>
 8005eb0:	4a87      	ldr	r2, [pc, #540]	; (80060d0 <HAL_GPIO_Init+0x280>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d806      	bhi.n	8005ec4 <HAL_GPIO_Init+0x74>
 8005eb6:	4a87      	ldr	r2, [pc, #540]	; (80060d4 <HAL_GPIO_Init+0x284>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d020      	beq.n	8005efe <HAL_GPIO_Init+0xae>
 8005ebc:	4a86      	ldr	r2, [pc, #536]	; (80060d8 <HAL_GPIO_Init+0x288>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d01d      	beq.n	8005efe <HAL_GPIO_Init+0xae>
          break;
 8005ec2:	e036      	b.n	8005f32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005ec4:	4a85      	ldr	r2, [pc, #532]	; (80060dc <HAL_GPIO_Init+0x28c>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d019      	beq.n	8005efe <HAL_GPIO_Init+0xae>
 8005eca:	4a85      	ldr	r2, [pc, #532]	; (80060e0 <HAL_GPIO_Init+0x290>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d016      	beq.n	8005efe <HAL_GPIO_Init+0xae>
 8005ed0:	4a84      	ldr	r2, [pc, #528]	; (80060e4 <HAL_GPIO_Init+0x294>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d013      	beq.n	8005efe <HAL_GPIO_Init+0xae>
          break;
 8005ed6:	e02c      	b.n	8005f32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	623b      	str	r3, [r7, #32]
          break;
 8005ede:	e028      	b.n	8005f32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	623b      	str	r3, [r7, #32]
          break;
 8005ee8:	e023      	b.n	8005f32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	3308      	adds	r3, #8
 8005ef0:	623b      	str	r3, [r7, #32]
          break;
 8005ef2:	e01e      	b.n	8005f32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	330c      	adds	r3, #12
 8005efa:	623b      	str	r3, [r7, #32]
          break;
 8005efc:	e019      	b.n	8005f32 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d102      	bne.n	8005f0c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005f06:	2304      	movs	r3, #4
 8005f08:	623b      	str	r3, [r7, #32]
          break;
 8005f0a:	e012      	b.n	8005f32 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d105      	bne.n	8005f20 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005f14:	2308      	movs	r3, #8
 8005f16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	69fa      	ldr	r2, [r7, #28]
 8005f1c:	611a      	str	r2, [r3, #16]
          break;
 8005f1e:	e008      	b.n	8005f32 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005f20:	2308      	movs	r3, #8
 8005f22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	69fa      	ldr	r2, [r7, #28]
 8005f28:	615a      	str	r2, [r3, #20]
          break;
 8005f2a:	e002      	b.n	8005f32 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	623b      	str	r3, [r7, #32]
          break;
 8005f30:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	2bff      	cmp	r3, #255	; 0xff
 8005f36:	d801      	bhi.n	8005f3c <HAL_GPIO_Init+0xec>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	e001      	b.n	8005f40 <HAL_GPIO_Init+0xf0>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	3304      	adds	r3, #4
 8005f40:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	2bff      	cmp	r3, #255	; 0xff
 8005f46:	d802      	bhi.n	8005f4e <HAL_GPIO_Init+0xfe>
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	e002      	b.n	8005f54 <HAL_GPIO_Init+0x104>
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	3b08      	subs	r3, #8
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	210f      	movs	r1, #15
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f62:	43db      	mvns	r3, r3
 8005f64:	401a      	ands	r2, r3
 8005f66:	6a39      	ldr	r1, [r7, #32]
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 8096 	beq.w	80060ae <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005f82:	4b59      	ldr	r3, [pc, #356]	; (80060e8 <HAL_GPIO_Init+0x298>)
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	4a58      	ldr	r2, [pc, #352]	; (80060e8 <HAL_GPIO_Init+0x298>)
 8005f88:	f043 0301 	orr.w	r3, r3, #1
 8005f8c:	6193      	str	r3, [r2, #24]
 8005f8e:	4b56      	ldr	r3, [pc, #344]	; (80060e8 <HAL_GPIO_Init+0x298>)
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	60bb      	str	r3, [r7, #8]
 8005f98:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005f9a:	4a54      	ldr	r2, [pc, #336]	; (80060ec <HAL_GPIO_Init+0x29c>)
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	089b      	lsrs	r3, r3, #2
 8005fa0:	3302      	adds	r3, #2
 8005fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fa6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	f003 0303 	and.w	r3, r3, #3
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	220f      	movs	r2, #15
 8005fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb6:	43db      	mvns	r3, r3
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a4b      	ldr	r2, [pc, #300]	; (80060f0 <HAL_GPIO_Init+0x2a0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d013      	beq.n	8005fee <HAL_GPIO_Init+0x19e>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a4a      	ldr	r2, [pc, #296]	; (80060f4 <HAL_GPIO_Init+0x2a4>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d00d      	beq.n	8005fea <HAL_GPIO_Init+0x19a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a49      	ldr	r2, [pc, #292]	; (80060f8 <HAL_GPIO_Init+0x2a8>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d007      	beq.n	8005fe6 <HAL_GPIO_Init+0x196>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a48      	ldr	r2, [pc, #288]	; (80060fc <HAL_GPIO_Init+0x2ac>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d101      	bne.n	8005fe2 <HAL_GPIO_Init+0x192>
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e006      	b.n	8005ff0 <HAL_GPIO_Init+0x1a0>
 8005fe2:	2304      	movs	r3, #4
 8005fe4:	e004      	b.n	8005ff0 <HAL_GPIO_Init+0x1a0>
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	e002      	b.n	8005ff0 <HAL_GPIO_Init+0x1a0>
 8005fea:	2301      	movs	r3, #1
 8005fec:	e000      	b.n	8005ff0 <HAL_GPIO_Init+0x1a0>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff2:	f002 0203 	and.w	r2, r2, #3
 8005ff6:	0092      	lsls	r2, r2, #2
 8005ff8:	4093      	lsls	r3, r2
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006000:	493a      	ldr	r1, [pc, #232]	; (80060ec <HAL_GPIO_Init+0x29c>)
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	089b      	lsrs	r3, r3, #2
 8006006:	3302      	adds	r3, #2
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d006      	beq.n	8006028 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800601a:	4b39      	ldr	r3, [pc, #228]	; (8006100 <HAL_GPIO_Init+0x2b0>)
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	4938      	ldr	r1, [pc, #224]	; (8006100 <HAL_GPIO_Init+0x2b0>)
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	4313      	orrs	r3, r2
 8006024:	600b      	str	r3, [r1, #0]
 8006026:	e006      	b.n	8006036 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006028:	4b35      	ldr	r3, [pc, #212]	; (8006100 <HAL_GPIO_Init+0x2b0>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	43db      	mvns	r3, r3
 8006030:	4933      	ldr	r1, [pc, #204]	; (8006100 <HAL_GPIO_Init+0x2b0>)
 8006032:	4013      	ands	r3, r2
 8006034:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d006      	beq.n	8006050 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006042:	4b2f      	ldr	r3, [pc, #188]	; (8006100 <HAL_GPIO_Init+0x2b0>)
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	492e      	ldr	r1, [pc, #184]	; (8006100 <HAL_GPIO_Init+0x2b0>)
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	4313      	orrs	r3, r2
 800604c:	604b      	str	r3, [r1, #4]
 800604e:	e006      	b.n	800605e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006050:	4b2b      	ldr	r3, [pc, #172]	; (8006100 <HAL_GPIO_Init+0x2b0>)
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	43db      	mvns	r3, r3
 8006058:	4929      	ldr	r1, [pc, #164]	; (8006100 <HAL_GPIO_Init+0x2b0>)
 800605a:	4013      	ands	r3, r2
 800605c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d006      	beq.n	8006078 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800606a:	4b25      	ldr	r3, [pc, #148]	; (8006100 <HAL_GPIO_Init+0x2b0>)
 800606c:	689a      	ldr	r2, [r3, #8]
 800606e:	4924      	ldr	r1, [pc, #144]	; (8006100 <HAL_GPIO_Init+0x2b0>)
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	4313      	orrs	r3, r2
 8006074:	608b      	str	r3, [r1, #8]
 8006076:	e006      	b.n	8006086 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006078:	4b21      	ldr	r3, [pc, #132]	; (8006100 <HAL_GPIO_Init+0x2b0>)
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	43db      	mvns	r3, r3
 8006080:	491f      	ldr	r1, [pc, #124]	; (8006100 <HAL_GPIO_Init+0x2b0>)
 8006082:	4013      	ands	r3, r2
 8006084:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d006      	beq.n	80060a0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006092:	4b1b      	ldr	r3, [pc, #108]	; (8006100 <HAL_GPIO_Init+0x2b0>)
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	491a      	ldr	r1, [pc, #104]	; (8006100 <HAL_GPIO_Init+0x2b0>)
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	4313      	orrs	r3, r2
 800609c:	60cb      	str	r3, [r1, #12]
 800609e:	e006      	b.n	80060ae <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80060a0:	4b17      	ldr	r3, [pc, #92]	; (8006100 <HAL_GPIO_Init+0x2b0>)
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	43db      	mvns	r3, r3
 80060a8:	4915      	ldr	r1, [pc, #84]	; (8006100 <HAL_GPIO_Init+0x2b0>)
 80060aa:	4013      	ands	r3, r2
 80060ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	3301      	adds	r3, #1
 80060b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	fa22 f303 	lsr.w	r3, r2, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f47f aed0 	bne.w	8005e64 <HAL_GPIO_Init+0x14>
  }
}
 80060c4:	bf00      	nop
 80060c6:	372c      	adds	r7, #44	; 0x2c
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bc80      	pop	{r7}
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	10210000 	.word	0x10210000
 80060d4:	10110000 	.word	0x10110000
 80060d8:	10120000 	.word	0x10120000
 80060dc:	10310000 	.word	0x10310000
 80060e0:	10320000 	.word	0x10320000
 80060e4:	10220000 	.word	0x10220000
 80060e8:	40021000 	.word	0x40021000
 80060ec:	40010000 	.word	0x40010000
 80060f0:	40010800 	.word	0x40010800
 80060f4:	40010c00 	.word	0x40010c00
 80060f8:	40011000 	.word	0x40011000
 80060fc:	40011400 	.word	0x40011400
 8006100:	40010400 	.word	0x40010400

08006104 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	460b      	mov	r3, r1
 800610e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	887b      	ldrh	r3, [r7, #2]
 8006116:	4013      	ands	r3, r2
 8006118:	2b00      	cmp	r3, #0
 800611a:	d002      	beq.n	8006122 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800611c:	2301      	movs	r3, #1
 800611e:	73fb      	strb	r3, [r7, #15]
 8006120:	e001      	b.n	8006126 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006122:	2300      	movs	r3, #0
 8006124:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006126:	7bfb      	ldrb	r3, [r7, #15]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	bc80      	pop	{r7}
 8006130:	4770      	bx	lr

08006132 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006132:	b480      	push	{r7}
 8006134:	b083      	sub	sp, #12
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	460b      	mov	r3, r1
 800613c:	807b      	strh	r3, [r7, #2]
 800613e:	4613      	mov	r3, r2
 8006140:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006142:	787b      	ldrb	r3, [r7, #1]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d003      	beq.n	8006150 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006148:	887a      	ldrh	r2, [r7, #2]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800614e:	e003      	b.n	8006158 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006150:	887b      	ldrh	r3, [r7, #2]
 8006152:	041a      	lsls	r2, r3, #16
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	611a      	str	r2, [r3, #16]
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	bc80      	pop	{r7}
 8006160:	4770      	bx	lr
	...

08006164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e10f      	b.n	8006396 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d106      	bne.n	8006190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7fe faa4 	bl	80046d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2224      	movs	r2, #36	; 0x24
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 0201 	bic.w	r2, r2, #1
 80061a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80061a8:	f001 fb40 	bl	800782c <HAL_RCC_GetPCLK1Freq>
 80061ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	4a7b      	ldr	r2, [pc, #492]	; (80063a0 <HAL_I2C_Init+0x23c>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d807      	bhi.n	80061c8 <HAL_I2C_Init+0x64>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4a7a      	ldr	r2, [pc, #488]	; (80063a4 <HAL_I2C_Init+0x240>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	bf94      	ite	ls
 80061c0:	2301      	movls	r3, #1
 80061c2:	2300      	movhi	r3, #0
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	e006      	b.n	80061d6 <HAL_I2C_Init+0x72>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4a77      	ldr	r2, [pc, #476]	; (80063a8 <HAL_I2C_Init+0x244>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	bf94      	ite	ls
 80061d0:	2301      	movls	r3, #1
 80061d2:	2300      	movhi	r3, #0
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e0db      	b.n	8006396 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	4a72      	ldr	r2, [pc, #456]	; (80063ac <HAL_I2C_Init+0x248>)
 80061e2:	fba2 2303 	umull	r2, r3, r2, r3
 80061e6:	0c9b      	lsrs	r3, r3, #18
 80061e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6a1b      	ldr	r3, [r3, #32]
 8006204:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	4a64      	ldr	r2, [pc, #400]	; (80063a0 <HAL_I2C_Init+0x23c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d802      	bhi.n	8006218 <HAL_I2C_Init+0xb4>
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	3301      	adds	r3, #1
 8006216:	e009      	b.n	800622c <HAL_I2C_Init+0xc8>
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800621e:	fb02 f303 	mul.w	r3, r2, r3
 8006222:	4a63      	ldr	r2, [pc, #396]	; (80063b0 <HAL_I2C_Init+0x24c>)
 8006224:	fba2 2303 	umull	r2, r3, r2, r3
 8006228:	099b      	lsrs	r3, r3, #6
 800622a:	3301      	adds	r3, #1
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	6812      	ldr	r2, [r2, #0]
 8006230:	430b      	orrs	r3, r1
 8006232:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800623e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	4956      	ldr	r1, [pc, #344]	; (80063a0 <HAL_I2C_Init+0x23c>)
 8006248:	428b      	cmp	r3, r1
 800624a:	d80d      	bhi.n	8006268 <HAL_I2C_Init+0x104>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	1e59      	subs	r1, r3, #1
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	fbb1 f3f3 	udiv	r3, r1, r3
 800625a:	3301      	adds	r3, #1
 800625c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006260:	2b04      	cmp	r3, #4
 8006262:	bf38      	it	cc
 8006264:	2304      	movcc	r3, #4
 8006266:	e04f      	b.n	8006308 <HAL_I2C_Init+0x1a4>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d111      	bne.n	8006294 <HAL_I2C_Init+0x130>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	1e58      	subs	r0, r3, #1
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6859      	ldr	r1, [r3, #4]
 8006278:	460b      	mov	r3, r1
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	440b      	add	r3, r1
 800627e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006282:	3301      	adds	r3, #1
 8006284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006288:	2b00      	cmp	r3, #0
 800628a:	bf0c      	ite	eq
 800628c:	2301      	moveq	r3, #1
 800628e:	2300      	movne	r3, #0
 8006290:	b2db      	uxtb	r3, r3
 8006292:	e012      	b.n	80062ba <HAL_I2C_Init+0x156>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	1e58      	subs	r0, r3, #1
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6859      	ldr	r1, [r3, #4]
 800629c:	460b      	mov	r3, r1
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	440b      	add	r3, r1
 80062a2:	0099      	lsls	r1, r3, #2
 80062a4:	440b      	add	r3, r1
 80062a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80062aa:	3301      	adds	r3, #1
 80062ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	bf0c      	ite	eq
 80062b4:	2301      	moveq	r3, #1
 80062b6:	2300      	movne	r3, #0
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <HAL_I2C_Init+0x15e>
 80062be:	2301      	movs	r3, #1
 80062c0:	e022      	b.n	8006308 <HAL_I2C_Init+0x1a4>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10e      	bne.n	80062e8 <HAL_I2C_Init+0x184>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	1e58      	subs	r0, r3, #1
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6859      	ldr	r1, [r3, #4]
 80062d2:	460b      	mov	r3, r1
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	440b      	add	r3, r1
 80062d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80062dc:	3301      	adds	r3, #1
 80062de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e6:	e00f      	b.n	8006308 <HAL_I2C_Init+0x1a4>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	1e58      	subs	r0, r3, #1
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6859      	ldr	r1, [r3, #4]
 80062f0:	460b      	mov	r3, r1
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	440b      	add	r3, r1
 80062f6:	0099      	lsls	r1, r3, #2
 80062f8:	440b      	add	r3, r1
 80062fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80062fe:	3301      	adds	r3, #1
 8006300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006304:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006308:	6879      	ldr	r1, [r7, #4]
 800630a:	6809      	ldr	r1, [r1, #0]
 800630c:	4313      	orrs	r3, r2
 800630e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	69da      	ldr	r2, [r3, #28]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	431a      	orrs	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	430a      	orrs	r2, r1
 800632a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006336:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	6911      	ldr	r1, [r2, #16]
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	68d2      	ldr	r2, [r2, #12]
 8006342:	4311      	orrs	r1, r2
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	6812      	ldr	r2, [r2, #0]
 8006348:	430b      	orrs	r3, r1
 800634a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	695a      	ldr	r2, [r3, #20]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f042 0201 	orr.w	r2, r2, #1
 8006376:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2220      	movs	r2, #32
 8006382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	000186a0 	.word	0x000186a0
 80063a4:	001e847f 	.word	0x001e847f
 80063a8:	003d08ff 	.word	0x003d08ff
 80063ac:	431bde83 	.word	0x431bde83
 80063b0:	10624dd3 	.word	0x10624dd3

080063b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b088      	sub	sp, #32
 80063b8:	af02      	add	r7, sp, #8
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	4608      	mov	r0, r1
 80063be:	4611      	mov	r1, r2
 80063c0:	461a      	mov	r2, r3
 80063c2:	4603      	mov	r3, r0
 80063c4:	817b      	strh	r3, [r7, #10]
 80063c6:	460b      	mov	r3, r1
 80063c8:	813b      	strh	r3, [r7, #8]
 80063ca:	4613      	mov	r3, r2
 80063cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063ce:	f7ff fc2f 	bl	8005c30 <HAL_GetTick>
 80063d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b20      	cmp	r3, #32
 80063de:	f040 80d9 	bne.w	8006594 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	2319      	movs	r3, #25
 80063e8:	2201      	movs	r2, #1
 80063ea:	496d      	ldr	r1, [pc, #436]	; (80065a0 <HAL_I2C_Mem_Write+0x1ec>)
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f000 fc6b 	bl	8006cc8 <I2C_WaitOnFlagUntilTimeout>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d001      	beq.n	80063fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80063f8:	2302      	movs	r3, #2
 80063fa:	e0cc      	b.n	8006596 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006402:	2b01      	cmp	r3, #1
 8006404:	d101      	bne.n	800640a <HAL_I2C_Mem_Write+0x56>
 8006406:	2302      	movs	r3, #2
 8006408:	e0c5      	b.n	8006596 <HAL_I2C_Mem_Write+0x1e2>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b01      	cmp	r3, #1
 800641e:	d007      	beq.n	8006430 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0201 	orr.w	r2, r2, #1
 800642e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800643e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2221      	movs	r2, #33	; 0x21
 8006444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2240      	movs	r2, #64	; 0x40
 800644c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6a3a      	ldr	r2, [r7, #32]
 800645a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006460:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006466:	b29a      	uxth	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	4a4d      	ldr	r2, [pc, #308]	; (80065a4 <HAL_I2C_Mem_Write+0x1f0>)
 8006470:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006472:	88f8      	ldrh	r0, [r7, #6]
 8006474:	893a      	ldrh	r2, [r7, #8]
 8006476:	8979      	ldrh	r1, [r7, #10]
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	9301      	str	r3, [sp, #4]
 800647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	4603      	mov	r3, r0
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f000 fac6 	bl	8006a14 <I2C_RequestMemoryWrite>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d052      	beq.n	8006534 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e081      	b.n	8006596 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f000 fcec 	bl	8006e74 <I2C_WaitOnTXEFlagUntilTimeout>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00d      	beq.n	80064be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	2b04      	cmp	r3, #4
 80064a8:	d107      	bne.n	80064ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e06b      	b.n	8006596 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c2:	781a      	ldrb	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	1c5a      	adds	r2, r3, #1
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d8:	3b01      	subs	r3, #1
 80064da:	b29a      	uxth	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	3b01      	subs	r3, #1
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b04      	cmp	r3, #4
 80064fa:	d11b      	bne.n	8006534 <HAL_I2C_Mem_Write+0x180>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006500:	2b00      	cmp	r3, #0
 8006502:	d017      	beq.n	8006534 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006508:	781a      	ldrb	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800651e:	3b01      	subs	r3, #1
 8006520:	b29a      	uxth	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800652a:	b29b      	uxth	r3, r3
 800652c:	3b01      	subs	r3, #1
 800652e:	b29a      	uxth	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1aa      	bne.n	8006492 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 fcd8 	bl	8006ef6 <I2C_WaitOnBTFFlagUntilTimeout>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00d      	beq.n	8006568 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006550:	2b04      	cmp	r3, #4
 8006552:	d107      	bne.n	8006564 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006562:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e016      	b.n	8006596 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006576:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2220      	movs	r2, #32
 800657c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006590:	2300      	movs	r3, #0
 8006592:	e000      	b.n	8006596 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006594:	2302      	movs	r3, #2
  }
}
 8006596:	4618      	mov	r0, r3
 8006598:	3718      	adds	r7, #24
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	00100002 	.word	0x00100002
 80065a4:	ffff0000 	.word	0xffff0000

080065a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b08c      	sub	sp, #48	; 0x30
 80065ac:	af02      	add	r7, sp, #8
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	4608      	mov	r0, r1
 80065b2:	4611      	mov	r1, r2
 80065b4:	461a      	mov	r2, r3
 80065b6:	4603      	mov	r3, r0
 80065b8:	817b      	strh	r3, [r7, #10]
 80065ba:	460b      	mov	r3, r1
 80065bc:	813b      	strh	r3, [r7, #8]
 80065be:	4613      	mov	r3, r2
 80065c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065c2:	f7ff fb35 	bl	8005c30 <HAL_GetTick>
 80065c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b20      	cmp	r3, #32
 80065d2:	f040 8218 	bne.w	8006a06 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	2319      	movs	r3, #25
 80065dc:	2201      	movs	r2, #1
 80065de:	4981      	ldr	r1, [pc, #516]	; (80067e4 <HAL_I2C_Mem_Read+0x23c>)
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 fb71 	bl	8006cc8 <I2C_WaitOnFlagUntilTimeout>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d001      	beq.n	80065f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80065ec:	2302      	movs	r3, #2
 80065ee:	e20b      	b.n	8006a08 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d101      	bne.n	80065fe <HAL_I2C_Mem_Read+0x56>
 80065fa:	2302      	movs	r3, #2
 80065fc:	e204      	b.n	8006a08 <HAL_I2C_Mem_Read+0x460>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b01      	cmp	r3, #1
 8006612:	d007      	beq.n	8006624 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f042 0201 	orr.w	r2, r2, #1
 8006622:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006632:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2222      	movs	r2, #34	; 0x22
 8006638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2240      	movs	r2, #64	; 0x40
 8006640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800664e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006654:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665a:	b29a      	uxth	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	4a61      	ldr	r2, [pc, #388]	; (80067e8 <HAL_I2C_Mem_Read+0x240>)
 8006664:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006666:	88f8      	ldrh	r0, [r7, #6]
 8006668:	893a      	ldrh	r2, [r7, #8]
 800666a:	8979      	ldrh	r1, [r7, #10]
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	9301      	str	r3, [sp, #4]
 8006670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	4603      	mov	r3, r0
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 fa56 	bl	8006b28 <I2C_RequestMemoryRead>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e1c0      	b.n	8006a08 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800668a:	2b00      	cmp	r3, #0
 800668c:	d113      	bne.n	80066b6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800668e:	2300      	movs	r3, #0
 8006690:	623b      	str	r3, [r7, #32]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	623b      	str	r3, [r7, #32]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	623b      	str	r3, [r7, #32]
 80066a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066b2:	601a      	str	r2, [r3, #0]
 80066b4:	e194      	b.n	80069e0 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d11d      	bne.n	80066fa <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066cc:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80066ce:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066d0:	2300      	movs	r3, #0
 80066d2:	61fb      	str	r3, [r7, #28]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	61fb      	str	r3, [r7, #28]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	61fb      	str	r3, [r7, #28]
 80066e4:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80066f6:	b662      	cpsie	i
 80066f8:	e172      	b.n	80069e0 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d11d      	bne.n	800673e <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006710:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006712:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006714:	2300      	movs	r3, #0
 8006716:	61bb      	str	r3, [r7, #24]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	61bb      	str	r3, [r7, #24]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	61bb      	str	r3, [r7, #24]
 8006728:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006738:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800673a:	b662      	cpsie	i
 800673c:	e150      	b.n	80069e0 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800674c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800674e:	2300      	movs	r3, #0
 8006750:	617b      	str	r3, [r7, #20]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	617b      	str	r3, [r7, #20]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	617b      	str	r3, [r7, #20]
 8006762:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006764:	e13c      	b.n	80069e0 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800676a:	2b03      	cmp	r3, #3
 800676c:	f200 80f5 	bhi.w	800695a <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006774:	2b01      	cmp	r3, #1
 8006776:	d123      	bne.n	80067c0 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800677a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f000 fbfb 	bl	8006f78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e13d      	b.n	8006a08 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	691a      	ldr	r2, [r3, #16]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	b2d2      	uxtb	r2, r2
 8006798:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a8:	3b01      	subs	r3, #1
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	3b01      	subs	r3, #1
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067be:	e10f      	b.n	80069e0 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d150      	bne.n	800686a <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ce:	2200      	movs	r2, #0
 80067d0:	4906      	ldr	r1, [pc, #24]	; (80067ec <HAL_I2C_Mem_Read+0x244>)
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 fa78 	bl	8006cc8 <I2C_WaitOnFlagUntilTimeout>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d008      	beq.n	80067f0 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e112      	b.n	8006a08 <HAL_I2C_Mem_Read+0x460>
 80067e2:	bf00      	nop
 80067e4:	00100002 	.word	0x00100002
 80067e8:	ffff0000 	.word	0xffff0000
 80067ec:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80067f0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006800:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	691a      	ldr	r2, [r3, #16]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	b2d2      	uxtb	r2, r2
 800680e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006814:	1c5a      	adds	r2, r3, #1
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800681e:	3b01      	subs	r3, #1
 8006820:	b29a      	uxth	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800682a:	b29b      	uxth	r3, r3
 800682c:	3b01      	subs	r3, #1
 800682e:	b29a      	uxth	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006834:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	691a      	ldr	r2, [r3, #16]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	b2d2      	uxtb	r2, r2
 8006842:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006852:	3b01      	subs	r3, #1
 8006854:	b29a      	uxth	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685e:	b29b      	uxth	r3, r3
 8006860:	3b01      	subs	r3, #1
 8006862:	b29a      	uxth	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006868:	e0ba      	b.n	80069e0 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006870:	2200      	movs	r2, #0
 8006872:	4967      	ldr	r1, [pc, #412]	; (8006a10 <HAL_I2C_Mem_Read+0x468>)
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 fa27 	bl	8006cc8 <I2C_WaitOnFlagUntilTimeout>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d001      	beq.n	8006884 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e0c1      	b.n	8006a08 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006892:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006894:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	691a      	ldr	r2, [r3, #16]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	b2d2      	uxtb	r2, r2
 80068a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a8:	1c5a      	adds	r2, r3, #1
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b2:	3b01      	subs	r3, #1
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068be:	b29b      	uxth	r3, r3
 80068c0:	3b01      	subs	r3, #1
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ce:	2200      	movs	r2, #0
 80068d0:	494f      	ldr	r1, [pc, #316]	; (8006a10 <HAL_I2C_Mem_Read+0x468>)
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 f9f8 	bl	8006cc8 <I2C_WaitOnFlagUntilTimeout>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e092      	b.n	8006a08 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068f0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	691a      	ldr	r2, [r3, #16]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fc:	b2d2      	uxtb	r2, r2
 80068fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006904:	1c5a      	adds	r2, r3, #1
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800690e:	3b01      	subs	r3, #1
 8006910:	b29a      	uxth	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800691a:	b29b      	uxth	r3, r3
 800691c:	3b01      	subs	r3, #1
 800691e:	b29a      	uxth	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006924:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	691a      	ldr	r2, [r3, #16]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006930:	b2d2      	uxtb	r2, r2
 8006932:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006942:	3b01      	subs	r3, #1
 8006944:	b29a      	uxth	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800694e:	b29b      	uxth	r3, r3
 8006950:	3b01      	subs	r3, #1
 8006952:	b29a      	uxth	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006958:	e042      	b.n	80069e0 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800695a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800695c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f000 fb0a 	bl	8006f78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e04c      	b.n	8006a08 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	691a      	ldr	r2, [r3, #16]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006978:	b2d2      	uxtb	r2, r2
 800697a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800698a:	3b01      	subs	r3, #1
 800698c:	b29a      	uxth	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006996:	b29b      	uxth	r3, r3
 8006998:	3b01      	subs	r3, #1
 800699a:	b29a      	uxth	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	f003 0304 	and.w	r3, r3, #4
 80069aa:	2b04      	cmp	r3, #4
 80069ac:	d118      	bne.n	80069e0 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	691a      	ldr	r2, [r3, #16]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b8:	b2d2      	uxtb	r2, r2
 80069ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c0:	1c5a      	adds	r2, r3, #1
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ca:	3b01      	subs	r3, #1
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	3b01      	subs	r3, #1
 80069da:	b29a      	uxth	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f47f aebe 	bne.w	8006766 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2220      	movs	r2, #32
 80069ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006a02:	2300      	movs	r3, #0
 8006a04:	e000      	b.n	8006a08 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8006a06:	2302      	movs	r3, #2
  }
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3728      	adds	r7, #40	; 0x28
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	00010004 	.word	0x00010004

08006a14 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b088      	sub	sp, #32
 8006a18:	af02      	add	r7, sp, #8
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	4608      	mov	r0, r1
 8006a1e:	4611      	mov	r1, r2
 8006a20:	461a      	mov	r2, r3
 8006a22:	4603      	mov	r3, r0
 8006a24:	817b      	strh	r3, [r7, #10]
 8006a26:	460b      	mov	r3, r1
 8006a28:	813b      	strh	r3, [r7, #8]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f000 f93c 	bl	8006cc8 <I2C_WaitOnFlagUntilTimeout>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d001      	beq.n	8006a5a <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e05f      	b.n	8006b1a <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a5a:	897b      	ldrh	r3, [r7, #10]
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	461a      	mov	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006a68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	6a3a      	ldr	r2, [r7, #32]
 8006a6e:	492d      	ldr	r1, [pc, #180]	; (8006b24 <I2C_RequestMemoryWrite+0x110>)
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f000 f980 	bl	8006d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d001      	beq.n	8006a80 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e04c      	b.n	8006b1a <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a80:	2300      	movs	r3, #0
 8006a82:	617b      	str	r3, [r7, #20]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	617b      	str	r3, [r7, #20]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	617b      	str	r3, [r7, #20]
 8006a94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a98:	6a39      	ldr	r1, [r7, #32]
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f000 f9ea 	bl	8006e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00d      	beq.n	8006ac2 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	2b04      	cmp	r3, #4
 8006aac:	d107      	bne.n	8006abe <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006abc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e02b      	b.n	8006b1a <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ac2:	88fb      	ldrh	r3, [r7, #6]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d105      	bne.n	8006ad4 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ac8:	893b      	ldrh	r3, [r7, #8]
 8006aca:	b2da      	uxtb	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	611a      	str	r2, [r3, #16]
 8006ad2:	e021      	b.n	8006b18 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ad4:	893b      	ldrh	r3, [r7, #8]
 8006ad6:	0a1b      	lsrs	r3, r3, #8
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae4:	6a39      	ldr	r1, [r7, #32]
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f000 f9c4 	bl	8006e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00d      	beq.n	8006b0e <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af6:	2b04      	cmp	r3, #4
 8006af8:	d107      	bne.n	8006b0a <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e005      	b.n	8006b1a <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b0e:	893b      	ldrh	r3, [r7, #8]
 8006b10:	b2da      	uxtb	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3718      	adds	r7, #24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	00010002 	.word	0x00010002

08006b28 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af02      	add	r7, sp, #8
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	4608      	mov	r0, r1
 8006b32:	4611      	mov	r1, r2
 8006b34:	461a      	mov	r2, r3
 8006b36:	4603      	mov	r3, r0
 8006b38:	817b      	strh	r3, [r7, #10]
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	813b      	strh	r3, [r7, #8]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b50:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f000 f8aa 	bl	8006cc8 <I2C_WaitOnFlagUntilTimeout>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d001      	beq.n	8006b7e <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e09e      	b.n	8006cbc <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b7e:	897b      	ldrh	r3, [r7, #10]
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	461a      	mov	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b90:	6a3a      	ldr	r2, [r7, #32]
 8006b92:	494c      	ldr	r1, [pc, #304]	; (8006cc4 <I2C_RequestMemoryRead+0x19c>)
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 f8ee 	bl	8006d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e08b      	b.n	8006cbc <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	617b      	str	r3, [r7, #20]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bbc:	6a39      	ldr	r1, [r7, #32]
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 f958 	bl	8006e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00d      	beq.n	8006be6 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bce:	2b04      	cmp	r3, #4
 8006bd0:	d107      	bne.n	8006be2 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006be0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e06a      	b.n	8006cbc <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006be6:	88fb      	ldrh	r3, [r7, #6]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d105      	bne.n	8006bf8 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006bec:	893b      	ldrh	r3, [r7, #8]
 8006bee:	b2da      	uxtb	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	611a      	str	r2, [r3, #16]
 8006bf6:	e021      	b.n	8006c3c <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006bf8:	893b      	ldrh	r3, [r7, #8]
 8006bfa:	0a1b      	lsrs	r3, r3, #8
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c08:	6a39      	ldr	r1, [r7, #32]
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 f932 	bl	8006e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00d      	beq.n	8006c32 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1a:	2b04      	cmp	r3, #4
 8006c1c:	d107      	bne.n	8006c2e <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e044      	b.n	8006cbc <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c32:	893b      	ldrh	r3, [r7, #8]
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c3e:	6a39      	ldr	r1, [r7, #32]
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 f917 	bl	8006e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00d      	beq.n	8006c68 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c50:	2b04      	cmp	r3, #4
 8006c52:	d107      	bne.n	8006c64 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c62:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e029      	b.n	8006cbc <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c76:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 f81f 	bl	8006cc8 <I2C_WaitOnFlagUntilTimeout>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e013      	b.n	8006cbc <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006c94:	897b      	ldrh	r3, [r7, #10]
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	f043 0301 	orr.w	r3, r3, #1
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	6a3a      	ldr	r2, [r7, #32]
 8006ca8:	4906      	ldr	r1, [pc, #24]	; (8006cc4 <I2C_RequestMemoryRead+0x19c>)
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f000 f863 	bl	8006d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e000      	b.n	8006cbc <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3718      	adds	r7, #24
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	00010002 	.word	0x00010002

08006cc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	603b      	str	r3, [r7, #0]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cd8:	e025      	b.n	8006d26 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ce0:	d021      	beq.n	8006d26 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ce2:	f7fe ffa5 	bl	8005c30 <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d302      	bcc.n	8006cf8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d116      	bne.n	8006d26 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2220      	movs	r2, #32
 8006d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d12:	f043 0220 	orr.w	r2, r3, #32
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e023      	b.n	8006d6e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	0c1b      	lsrs	r3, r3, #16
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d10d      	bne.n	8006d4c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	43da      	mvns	r2, r3
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	bf0c      	ite	eq
 8006d42:	2301      	moveq	r3, #1
 8006d44:	2300      	movne	r3, #0
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	461a      	mov	r2, r3
 8006d4a:	e00c      	b.n	8006d66 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	43da      	mvns	r2, r3
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	4013      	ands	r3, r2
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	bf0c      	ite	eq
 8006d5e:	2301      	moveq	r3, #1
 8006d60:	2300      	movne	r3, #0
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	461a      	mov	r2, r3
 8006d66:	79fb      	ldrb	r3, [r7, #7]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d0b6      	beq.n	8006cda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b084      	sub	sp, #16
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	60f8      	str	r0, [r7, #12]
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	607a      	str	r2, [r7, #4]
 8006d82:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d84:	e051      	b.n	8006e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d94:	d123      	bne.n	8006dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006da4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006dae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2220      	movs	r2, #32
 8006dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dca:	f043 0204 	orr.w	r2, r3, #4
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e046      	b.n	8006e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006de4:	d021      	beq.n	8006e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006de6:	f7fe ff23 	bl	8005c30 <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d302      	bcc.n	8006dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d116      	bne.n	8006e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2220      	movs	r2, #32
 8006e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e16:	f043 0220 	orr.w	r2, r3, #32
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e020      	b.n	8006e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	0c1b      	lsrs	r3, r3, #16
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d10c      	bne.n	8006e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	43da      	mvns	r2, r3
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	4013      	ands	r3, r2
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	bf14      	ite	ne
 8006e46:	2301      	movne	r3, #1
 8006e48:	2300      	moveq	r3, #0
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	e00b      	b.n	8006e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	43da      	mvns	r2, r3
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	4013      	ands	r3, r2
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	bf14      	ite	ne
 8006e60:	2301      	movne	r3, #1
 8006e62:	2300      	moveq	r3, #0
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d18d      	bne.n	8006d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e80:	e02d      	b.n	8006ede <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f000 f8ce 	bl	8007024 <I2C_IsAcknowledgeFailed>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e02d      	b.n	8006eee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e98:	d021      	beq.n	8006ede <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e9a:	f7fe fec9 	bl	8005c30 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d302      	bcc.n	8006eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d116      	bne.n	8006ede <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2220      	movs	r2, #32
 8006eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eca:	f043 0220 	orr.w	r2, r3, #32
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e007      	b.n	8006eee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee8:	2b80      	cmp	r3, #128	; 0x80
 8006eea:	d1ca      	bne.n	8006e82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b084      	sub	sp, #16
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	60f8      	str	r0, [r7, #12]
 8006efe:	60b9      	str	r1, [r7, #8]
 8006f00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f02:	e02d      	b.n	8006f60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 f88d 	bl	8007024 <I2C_IsAcknowledgeFailed>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d001      	beq.n	8006f14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e02d      	b.n	8006f70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f1a:	d021      	beq.n	8006f60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f1c:	f7fe fe88 	bl	8005c30 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d302      	bcc.n	8006f32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d116      	bne.n	8006f60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4c:	f043 0220 	orr.w	r2, r3, #32
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e007      	b.n	8006f70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	f003 0304 	and.w	r3, r3, #4
 8006f6a:	2b04      	cmp	r3, #4
 8006f6c:	d1ca      	bne.n	8006f04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f84:	e042      	b.n	800700c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	695b      	ldr	r3, [r3, #20]
 8006f8c:	f003 0310 	and.w	r3, r3, #16
 8006f90:	2b10      	cmp	r3, #16
 8006f92:	d119      	bne.n	8006fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f06f 0210 	mvn.w	r2, #16
 8006f9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e029      	b.n	800701c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fc8:	f7fe fe32 	bl	8005c30 <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d302      	bcc.n	8006fde <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d116      	bne.n	800700c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff8:	f043 0220 	orr.w	r2, r3, #32
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e007      	b.n	800701c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007016:	2b40      	cmp	r3, #64	; 0x40
 8007018:	d1b5      	bne.n	8006f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800703a:	d11b      	bne.n	8007074 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007044:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2220      	movs	r2, #32
 8007050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007060:	f043 0204 	orr.w	r2, r3, #4
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e000      	b.n	8007076 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	bc80      	pop	{r7}
 800707e:	4770      	bx	lr

08007080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b086      	sub	sp, #24
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e26c      	b.n	800756c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0301 	and.w	r3, r3, #1
 800709a:	2b00      	cmp	r3, #0
 800709c:	f000 8087 	beq.w	80071ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80070a0:	4b92      	ldr	r3, [pc, #584]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f003 030c 	and.w	r3, r3, #12
 80070a8:	2b04      	cmp	r3, #4
 80070aa:	d00c      	beq.n	80070c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80070ac:	4b8f      	ldr	r3, [pc, #572]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f003 030c 	and.w	r3, r3, #12
 80070b4:	2b08      	cmp	r3, #8
 80070b6:	d112      	bne.n	80070de <HAL_RCC_OscConfig+0x5e>
 80070b8:	4b8c      	ldr	r3, [pc, #560]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070c4:	d10b      	bne.n	80070de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070c6:	4b89      	ldr	r3, [pc, #548]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d06c      	beq.n	80071ac <HAL_RCC_OscConfig+0x12c>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d168      	bne.n	80071ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e246      	b.n	800756c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070e6:	d106      	bne.n	80070f6 <HAL_RCC_OscConfig+0x76>
 80070e8:	4b80      	ldr	r3, [pc, #512]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a7f      	ldr	r2, [pc, #508]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 80070ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070f2:	6013      	str	r3, [r2, #0]
 80070f4:	e02e      	b.n	8007154 <HAL_RCC_OscConfig+0xd4>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10c      	bne.n	8007118 <HAL_RCC_OscConfig+0x98>
 80070fe:	4b7b      	ldr	r3, [pc, #492]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a7a      	ldr	r2, [pc, #488]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 8007104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007108:	6013      	str	r3, [r2, #0]
 800710a:	4b78      	ldr	r3, [pc, #480]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a77      	ldr	r2, [pc, #476]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 8007110:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007114:	6013      	str	r3, [r2, #0]
 8007116:	e01d      	b.n	8007154 <HAL_RCC_OscConfig+0xd4>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007120:	d10c      	bne.n	800713c <HAL_RCC_OscConfig+0xbc>
 8007122:	4b72      	ldr	r3, [pc, #456]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a71      	ldr	r2, [pc, #452]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 8007128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800712c:	6013      	str	r3, [r2, #0]
 800712e:	4b6f      	ldr	r3, [pc, #444]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a6e      	ldr	r2, [pc, #440]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 8007134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007138:	6013      	str	r3, [r2, #0]
 800713a:	e00b      	b.n	8007154 <HAL_RCC_OscConfig+0xd4>
 800713c:	4b6b      	ldr	r3, [pc, #428]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a6a      	ldr	r2, [pc, #424]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 8007142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007146:	6013      	str	r3, [r2, #0]
 8007148:	4b68      	ldr	r3, [pc, #416]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a67      	ldr	r2, [pc, #412]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 800714e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007152:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d013      	beq.n	8007184 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800715c:	f7fe fd68 	bl	8005c30 <HAL_GetTick>
 8007160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007162:	e008      	b.n	8007176 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007164:	f7fe fd64 	bl	8005c30 <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	2b64      	cmp	r3, #100	; 0x64
 8007170:	d901      	bls.n	8007176 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e1fa      	b.n	800756c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007176:	4b5d      	ldr	r3, [pc, #372]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d0f0      	beq.n	8007164 <HAL_RCC_OscConfig+0xe4>
 8007182:	e014      	b.n	80071ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007184:	f7fe fd54 	bl	8005c30 <HAL_GetTick>
 8007188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800718a:	e008      	b.n	800719e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800718c:	f7fe fd50 	bl	8005c30 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	2b64      	cmp	r3, #100	; 0x64
 8007198:	d901      	bls.n	800719e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e1e6      	b.n	800756c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800719e:	4b53      	ldr	r3, [pc, #332]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1f0      	bne.n	800718c <HAL_RCC_OscConfig+0x10c>
 80071aa:	e000      	b.n	80071ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0302 	and.w	r3, r3, #2
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d063      	beq.n	8007282 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80071ba:	4b4c      	ldr	r3, [pc, #304]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f003 030c 	and.w	r3, r3, #12
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00b      	beq.n	80071de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80071c6:	4b49      	ldr	r3, [pc, #292]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f003 030c 	and.w	r3, r3, #12
 80071ce:	2b08      	cmp	r3, #8
 80071d0:	d11c      	bne.n	800720c <HAL_RCC_OscConfig+0x18c>
 80071d2:	4b46      	ldr	r3, [pc, #280]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d116      	bne.n	800720c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071de:	4b43      	ldr	r3, [pc, #268]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0302 	and.w	r3, r3, #2
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d005      	beq.n	80071f6 <HAL_RCC_OscConfig+0x176>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d001      	beq.n	80071f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e1ba      	b.n	800756c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071f6:	4b3d      	ldr	r3, [pc, #244]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	00db      	lsls	r3, r3, #3
 8007204:	4939      	ldr	r1, [pc, #228]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 8007206:	4313      	orrs	r3, r2
 8007208:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800720a:	e03a      	b.n	8007282 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d020      	beq.n	8007256 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007214:	4b36      	ldr	r3, [pc, #216]	; (80072f0 <HAL_RCC_OscConfig+0x270>)
 8007216:	2201      	movs	r2, #1
 8007218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800721a:	f7fe fd09 	bl	8005c30 <HAL_GetTick>
 800721e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007220:	e008      	b.n	8007234 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007222:	f7fe fd05 	bl	8005c30 <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	2b02      	cmp	r3, #2
 800722e:	d901      	bls.n	8007234 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e19b      	b.n	800756c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007234:	4b2d      	ldr	r3, [pc, #180]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0302 	and.w	r3, r3, #2
 800723c:	2b00      	cmp	r3, #0
 800723e:	d0f0      	beq.n	8007222 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007240:	4b2a      	ldr	r3, [pc, #168]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	00db      	lsls	r3, r3, #3
 800724e:	4927      	ldr	r1, [pc, #156]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 8007250:	4313      	orrs	r3, r2
 8007252:	600b      	str	r3, [r1, #0]
 8007254:	e015      	b.n	8007282 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007256:	4b26      	ldr	r3, [pc, #152]	; (80072f0 <HAL_RCC_OscConfig+0x270>)
 8007258:	2200      	movs	r2, #0
 800725a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800725c:	f7fe fce8 	bl	8005c30 <HAL_GetTick>
 8007260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007262:	e008      	b.n	8007276 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007264:	f7fe fce4 	bl	8005c30 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d901      	bls.n	8007276 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e17a      	b.n	800756c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007276:	4b1d      	ldr	r3, [pc, #116]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0302 	and.w	r3, r3, #2
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1f0      	bne.n	8007264 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0308 	and.w	r3, r3, #8
 800728a:	2b00      	cmp	r3, #0
 800728c:	d03a      	beq.n	8007304 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d019      	beq.n	80072ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007296:	4b17      	ldr	r3, [pc, #92]	; (80072f4 <HAL_RCC_OscConfig+0x274>)
 8007298:	2201      	movs	r2, #1
 800729a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800729c:	f7fe fcc8 	bl	8005c30 <HAL_GetTick>
 80072a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072a2:	e008      	b.n	80072b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072a4:	f7fe fcc4 	bl	8005c30 <HAL_GetTick>
 80072a8:	4602      	mov	r2, r0
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d901      	bls.n	80072b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e15a      	b.n	800756c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072b6:	4b0d      	ldr	r3, [pc, #52]	; (80072ec <HAL_RCC_OscConfig+0x26c>)
 80072b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ba:	f003 0302 	and.w	r3, r3, #2
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d0f0      	beq.n	80072a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80072c2:	2001      	movs	r0, #1
 80072c4:	f000 fac6 	bl	8007854 <RCC_Delay>
 80072c8:	e01c      	b.n	8007304 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072ca:	4b0a      	ldr	r3, [pc, #40]	; (80072f4 <HAL_RCC_OscConfig+0x274>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072d0:	f7fe fcae 	bl	8005c30 <HAL_GetTick>
 80072d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072d6:	e00f      	b.n	80072f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072d8:	f7fe fcaa 	bl	8005c30 <HAL_GetTick>
 80072dc:	4602      	mov	r2, r0
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d908      	bls.n	80072f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e140      	b.n	800756c <HAL_RCC_OscConfig+0x4ec>
 80072ea:	bf00      	nop
 80072ec:	40021000 	.word	0x40021000
 80072f0:	42420000 	.word	0x42420000
 80072f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072f8:	4b9e      	ldr	r3, [pc, #632]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 80072fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fc:	f003 0302 	and.w	r3, r3, #2
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1e9      	bne.n	80072d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0304 	and.w	r3, r3, #4
 800730c:	2b00      	cmp	r3, #0
 800730e:	f000 80a6 	beq.w	800745e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007312:	2300      	movs	r3, #0
 8007314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007316:	4b97      	ldr	r3, [pc, #604]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10d      	bne.n	800733e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007322:	4b94      	ldr	r3, [pc, #592]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 8007324:	69db      	ldr	r3, [r3, #28]
 8007326:	4a93      	ldr	r2, [pc, #588]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 8007328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800732c:	61d3      	str	r3, [r2, #28]
 800732e:	4b91      	ldr	r3, [pc, #580]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 8007330:	69db      	ldr	r3, [r3, #28]
 8007332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007336:	60bb      	str	r3, [r7, #8]
 8007338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800733a:	2301      	movs	r3, #1
 800733c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800733e:	4b8e      	ldr	r3, [pc, #568]	; (8007578 <HAL_RCC_OscConfig+0x4f8>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007346:	2b00      	cmp	r3, #0
 8007348:	d118      	bne.n	800737c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800734a:	4b8b      	ldr	r3, [pc, #556]	; (8007578 <HAL_RCC_OscConfig+0x4f8>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a8a      	ldr	r2, [pc, #552]	; (8007578 <HAL_RCC_OscConfig+0x4f8>)
 8007350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007356:	f7fe fc6b 	bl	8005c30 <HAL_GetTick>
 800735a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800735c:	e008      	b.n	8007370 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800735e:	f7fe fc67 	bl	8005c30 <HAL_GetTick>
 8007362:	4602      	mov	r2, r0
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	2b64      	cmp	r3, #100	; 0x64
 800736a:	d901      	bls.n	8007370 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e0fd      	b.n	800756c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007370:	4b81      	ldr	r3, [pc, #516]	; (8007578 <HAL_RCC_OscConfig+0x4f8>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007378:	2b00      	cmp	r3, #0
 800737a:	d0f0      	beq.n	800735e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d106      	bne.n	8007392 <HAL_RCC_OscConfig+0x312>
 8007384:	4b7b      	ldr	r3, [pc, #492]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 8007386:	6a1b      	ldr	r3, [r3, #32]
 8007388:	4a7a      	ldr	r2, [pc, #488]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 800738a:	f043 0301 	orr.w	r3, r3, #1
 800738e:	6213      	str	r3, [r2, #32]
 8007390:	e02d      	b.n	80073ee <HAL_RCC_OscConfig+0x36e>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10c      	bne.n	80073b4 <HAL_RCC_OscConfig+0x334>
 800739a:	4b76      	ldr	r3, [pc, #472]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	4a75      	ldr	r2, [pc, #468]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 80073a0:	f023 0301 	bic.w	r3, r3, #1
 80073a4:	6213      	str	r3, [r2, #32]
 80073a6:	4b73      	ldr	r3, [pc, #460]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	4a72      	ldr	r2, [pc, #456]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 80073ac:	f023 0304 	bic.w	r3, r3, #4
 80073b0:	6213      	str	r3, [r2, #32]
 80073b2:	e01c      	b.n	80073ee <HAL_RCC_OscConfig+0x36e>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	2b05      	cmp	r3, #5
 80073ba:	d10c      	bne.n	80073d6 <HAL_RCC_OscConfig+0x356>
 80073bc:	4b6d      	ldr	r3, [pc, #436]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 80073be:	6a1b      	ldr	r3, [r3, #32]
 80073c0:	4a6c      	ldr	r2, [pc, #432]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 80073c2:	f043 0304 	orr.w	r3, r3, #4
 80073c6:	6213      	str	r3, [r2, #32]
 80073c8:	4b6a      	ldr	r3, [pc, #424]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	4a69      	ldr	r2, [pc, #420]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 80073ce:	f043 0301 	orr.w	r3, r3, #1
 80073d2:	6213      	str	r3, [r2, #32]
 80073d4:	e00b      	b.n	80073ee <HAL_RCC_OscConfig+0x36e>
 80073d6:	4b67      	ldr	r3, [pc, #412]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	4a66      	ldr	r2, [pc, #408]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 80073dc:	f023 0301 	bic.w	r3, r3, #1
 80073e0:	6213      	str	r3, [r2, #32]
 80073e2:	4b64      	ldr	r3, [pc, #400]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	4a63      	ldr	r2, [pc, #396]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 80073e8:	f023 0304 	bic.w	r3, r3, #4
 80073ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d015      	beq.n	8007422 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073f6:	f7fe fc1b 	bl	8005c30 <HAL_GetTick>
 80073fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073fc:	e00a      	b.n	8007414 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073fe:	f7fe fc17 	bl	8005c30 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	f241 3288 	movw	r2, #5000	; 0x1388
 800740c:	4293      	cmp	r3, r2
 800740e:	d901      	bls.n	8007414 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e0ab      	b.n	800756c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007414:	4b57      	ldr	r3, [pc, #348]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	f003 0302 	and.w	r3, r3, #2
 800741c:	2b00      	cmp	r3, #0
 800741e:	d0ee      	beq.n	80073fe <HAL_RCC_OscConfig+0x37e>
 8007420:	e014      	b.n	800744c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007422:	f7fe fc05 	bl	8005c30 <HAL_GetTick>
 8007426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007428:	e00a      	b.n	8007440 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800742a:	f7fe fc01 	bl	8005c30 <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	f241 3288 	movw	r2, #5000	; 0x1388
 8007438:	4293      	cmp	r3, r2
 800743a:	d901      	bls.n	8007440 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e095      	b.n	800756c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007440:	4b4c      	ldr	r3, [pc, #304]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	f003 0302 	and.w	r3, r3, #2
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1ee      	bne.n	800742a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800744c:	7dfb      	ldrb	r3, [r7, #23]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d105      	bne.n	800745e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007452:	4b48      	ldr	r3, [pc, #288]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	4a47      	ldr	r2, [pc, #284]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 8007458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800745c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	2b00      	cmp	r3, #0
 8007464:	f000 8081 	beq.w	800756a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007468:	4b42      	ldr	r3, [pc, #264]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f003 030c 	and.w	r3, r3, #12
 8007470:	2b08      	cmp	r3, #8
 8007472:	d061      	beq.n	8007538 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	69db      	ldr	r3, [r3, #28]
 8007478:	2b02      	cmp	r3, #2
 800747a:	d146      	bne.n	800750a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800747c:	4b3f      	ldr	r3, [pc, #252]	; (800757c <HAL_RCC_OscConfig+0x4fc>)
 800747e:	2200      	movs	r2, #0
 8007480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007482:	f7fe fbd5 	bl	8005c30 <HAL_GetTick>
 8007486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007488:	e008      	b.n	800749c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800748a:	f7fe fbd1 	bl	8005c30 <HAL_GetTick>
 800748e:	4602      	mov	r2, r0
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	2b02      	cmp	r3, #2
 8007496:	d901      	bls.n	800749c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	e067      	b.n	800756c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800749c:	4b35      	ldr	r3, [pc, #212]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1f0      	bne.n	800748a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074b0:	d108      	bne.n	80074c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80074b2:	4b30      	ldr	r3, [pc, #192]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	492d      	ldr	r1, [pc, #180]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 80074c0:	4313      	orrs	r3, r2
 80074c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074c4:	4b2b      	ldr	r3, [pc, #172]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a19      	ldr	r1, [r3, #32]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d4:	430b      	orrs	r3, r1
 80074d6:	4927      	ldr	r1, [pc, #156]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 80074d8:	4313      	orrs	r3, r2
 80074da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074dc:	4b27      	ldr	r3, [pc, #156]	; (800757c <HAL_RCC_OscConfig+0x4fc>)
 80074de:	2201      	movs	r2, #1
 80074e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074e2:	f7fe fba5 	bl	8005c30 <HAL_GetTick>
 80074e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80074e8:	e008      	b.n	80074fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074ea:	f7fe fba1 	bl	8005c30 <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d901      	bls.n	80074fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e037      	b.n	800756c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80074fc:	4b1d      	ldr	r3, [pc, #116]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d0f0      	beq.n	80074ea <HAL_RCC_OscConfig+0x46a>
 8007508:	e02f      	b.n	800756a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800750a:	4b1c      	ldr	r3, [pc, #112]	; (800757c <HAL_RCC_OscConfig+0x4fc>)
 800750c:	2200      	movs	r2, #0
 800750e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007510:	f7fe fb8e 	bl	8005c30 <HAL_GetTick>
 8007514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007516:	e008      	b.n	800752a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007518:	f7fe fb8a 	bl	8005c30 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	2b02      	cmp	r3, #2
 8007524:	d901      	bls.n	800752a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e020      	b.n	800756c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800752a:	4b12      	ldr	r3, [pc, #72]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1f0      	bne.n	8007518 <HAL_RCC_OscConfig+0x498>
 8007536:	e018      	b.n	800756a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	69db      	ldr	r3, [r3, #28]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d101      	bne.n	8007544 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e013      	b.n	800756c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007544:	4b0b      	ldr	r3, [pc, #44]	; (8007574 <HAL_RCC_OscConfig+0x4f4>)
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	429a      	cmp	r2, r3
 8007556:	d106      	bne.n	8007566 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007562:	429a      	cmp	r2, r3
 8007564:	d001      	beq.n	800756a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e000      	b.n	800756c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3718      	adds	r7, #24
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	40021000 	.word	0x40021000
 8007578:	40007000 	.word	0x40007000
 800757c:	42420060 	.word	0x42420060

08007580 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e0d0      	b.n	8007736 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007594:	4b6a      	ldr	r3, [pc, #424]	; (8007740 <HAL_RCC_ClockConfig+0x1c0>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0307 	and.w	r3, r3, #7
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d910      	bls.n	80075c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075a2:	4b67      	ldr	r3, [pc, #412]	; (8007740 <HAL_RCC_ClockConfig+0x1c0>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f023 0207 	bic.w	r2, r3, #7
 80075aa:	4965      	ldr	r1, [pc, #404]	; (8007740 <HAL_RCC_ClockConfig+0x1c0>)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075b2:	4b63      	ldr	r3, [pc, #396]	; (8007740 <HAL_RCC_ClockConfig+0x1c0>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0307 	and.w	r3, r3, #7
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d001      	beq.n	80075c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e0b8      	b.n	8007736 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0302 	and.w	r3, r3, #2
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d020      	beq.n	8007612 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0304 	and.w	r3, r3, #4
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d005      	beq.n	80075e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075dc:	4b59      	ldr	r3, [pc, #356]	; (8007744 <HAL_RCC_ClockConfig+0x1c4>)
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	4a58      	ldr	r2, [pc, #352]	; (8007744 <HAL_RCC_ClockConfig+0x1c4>)
 80075e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80075e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0308 	and.w	r3, r3, #8
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d005      	beq.n	8007600 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075f4:	4b53      	ldr	r3, [pc, #332]	; (8007744 <HAL_RCC_ClockConfig+0x1c4>)
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	4a52      	ldr	r2, [pc, #328]	; (8007744 <HAL_RCC_ClockConfig+0x1c4>)
 80075fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80075fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007600:	4b50      	ldr	r3, [pc, #320]	; (8007744 <HAL_RCC_ClockConfig+0x1c4>)
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	494d      	ldr	r1, [pc, #308]	; (8007744 <HAL_RCC_ClockConfig+0x1c4>)
 800760e:	4313      	orrs	r3, r2
 8007610:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d040      	beq.n	80076a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d107      	bne.n	8007636 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007626:	4b47      	ldr	r3, [pc, #284]	; (8007744 <HAL_RCC_ClockConfig+0x1c4>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d115      	bne.n	800765e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e07f      	b.n	8007736 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	2b02      	cmp	r3, #2
 800763c:	d107      	bne.n	800764e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800763e:	4b41      	ldr	r3, [pc, #260]	; (8007744 <HAL_RCC_ClockConfig+0x1c4>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d109      	bne.n	800765e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e073      	b.n	8007736 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800764e:	4b3d      	ldr	r3, [pc, #244]	; (8007744 <HAL_RCC_ClockConfig+0x1c4>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0302 	and.w	r3, r3, #2
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e06b      	b.n	8007736 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800765e:	4b39      	ldr	r3, [pc, #228]	; (8007744 <HAL_RCC_ClockConfig+0x1c4>)
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f023 0203 	bic.w	r2, r3, #3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	4936      	ldr	r1, [pc, #216]	; (8007744 <HAL_RCC_ClockConfig+0x1c4>)
 800766c:	4313      	orrs	r3, r2
 800766e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007670:	f7fe fade 	bl	8005c30 <HAL_GetTick>
 8007674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007676:	e00a      	b.n	800768e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007678:	f7fe fada 	bl	8005c30 <HAL_GetTick>
 800767c:	4602      	mov	r2, r0
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	f241 3288 	movw	r2, #5000	; 0x1388
 8007686:	4293      	cmp	r3, r2
 8007688:	d901      	bls.n	800768e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	e053      	b.n	8007736 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800768e:	4b2d      	ldr	r3, [pc, #180]	; (8007744 <HAL_RCC_ClockConfig+0x1c4>)
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	f003 020c 	and.w	r2, r3, #12
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	429a      	cmp	r2, r3
 800769e:	d1eb      	bne.n	8007678 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076a0:	4b27      	ldr	r3, [pc, #156]	; (8007740 <HAL_RCC_ClockConfig+0x1c0>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0307 	and.w	r3, r3, #7
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d210      	bcs.n	80076d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076ae:	4b24      	ldr	r3, [pc, #144]	; (8007740 <HAL_RCC_ClockConfig+0x1c0>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f023 0207 	bic.w	r2, r3, #7
 80076b6:	4922      	ldr	r1, [pc, #136]	; (8007740 <HAL_RCC_ClockConfig+0x1c0>)
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076be:	4b20      	ldr	r3, [pc, #128]	; (8007740 <HAL_RCC_ClockConfig+0x1c0>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0307 	and.w	r3, r3, #7
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d001      	beq.n	80076d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e032      	b.n	8007736 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0304 	and.w	r3, r3, #4
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d008      	beq.n	80076ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076dc:	4b19      	ldr	r3, [pc, #100]	; (8007744 <HAL_RCC_ClockConfig+0x1c4>)
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	4916      	ldr	r1, [pc, #88]	; (8007744 <HAL_RCC_ClockConfig+0x1c4>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0308 	and.w	r3, r3, #8
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d009      	beq.n	800770e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80076fa:	4b12      	ldr	r3, [pc, #72]	; (8007744 <HAL_RCC_ClockConfig+0x1c4>)
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	00db      	lsls	r3, r3, #3
 8007708:	490e      	ldr	r1, [pc, #56]	; (8007744 <HAL_RCC_ClockConfig+0x1c4>)
 800770a:	4313      	orrs	r3, r2
 800770c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800770e:	f000 f821 	bl	8007754 <HAL_RCC_GetSysClockFreq>
 8007712:	4601      	mov	r1, r0
 8007714:	4b0b      	ldr	r3, [pc, #44]	; (8007744 <HAL_RCC_ClockConfig+0x1c4>)
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	091b      	lsrs	r3, r3, #4
 800771a:	f003 030f 	and.w	r3, r3, #15
 800771e:	4a0a      	ldr	r2, [pc, #40]	; (8007748 <HAL_RCC_ClockConfig+0x1c8>)
 8007720:	5cd3      	ldrb	r3, [r2, r3]
 8007722:	fa21 f303 	lsr.w	r3, r1, r3
 8007726:	4a09      	ldr	r2, [pc, #36]	; (800774c <HAL_RCC_ClockConfig+0x1cc>)
 8007728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800772a:	4b09      	ldr	r3, [pc, #36]	; (8007750 <HAL_RCC_ClockConfig+0x1d0>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4618      	mov	r0, r3
 8007730:	f7fe fa3c 	bl	8005bac <HAL_InitTick>

  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	40022000 	.word	0x40022000
 8007744:	40021000 	.word	0x40021000
 8007748:	0800dc3c 	.word	0x0800dc3c
 800774c:	20000328 	.word	0x20000328
 8007750:	20000334 	.word	0x20000334

08007754 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007754:	b490      	push	{r4, r7}
 8007756:	b08a      	sub	sp, #40	; 0x28
 8007758:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800775a:	4b2a      	ldr	r3, [pc, #168]	; (8007804 <HAL_RCC_GetSysClockFreq+0xb0>)
 800775c:	1d3c      	adds	r4, r7, #4
 800775e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007760:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007764:	4b28      	ldr	r3, [pc, #160]	; (8007808 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800776a:	2300      	movs	r3, #0
 800776c:	61fb      	str	r3, [r7, #28]
 800776e:	2300      	movs	r3, #0
 8007770:	61bb      	str	r3, [r7, #24]
 8007772:	2300      	movs	r3, #0
 8007774:	627b      	str	r3, [r7, #36]	; 0x24
 8007776:	2300      	movs	r3, #0
 8007778:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800777a:	2300      	movs	r3, #0
 800777c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800777e:	4b23      	ldr	r3, [pc, #140]	; (800780c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	f003 030c 	and.w	r3, r3, #12
 800778a:	2b04      	cmp	r3, #4
 800778c:	d002      	beq.n	8007794 <HAL_RCC_GetSysClockFreq+0x40>
 800778e:	2b08      	cmp	r3, #8
 8007790:	d003      	beq.n	800779a <HAL_RCC_GetSysClockFreq+0x46>
 8007792:	e02d      	b.n	80077f0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007794:	4b1e      	ldr	r3, [pc, #120]	; (8007810 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007796:	623b      	str	r3, [r7, #32]
      break;
 8007798:	e02d      	b.n	80077f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	0c9b      	lsrs	r3, r3, #18
 800779e:	f003 030f 	and.w	r3, r3, #15
 80077a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80077a6:	4413      	add	r3, r2
 80077a8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80077ac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d013      	beq.n	80077e0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80077b8:	4b14      	ldr	r3, [pc, #80]	; (800780c <HAL_RCC_GetSysClockFreq+0xb8>)
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	0c5b      	lsrs	r3, r3, #17
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80077c6:	4413      	add	r3, r2
 80077c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80077cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	4a0f      	ldr	r2, [pc, #60]	; (8007810 <HAL_RCC_GetSysClockFreq+0xbc>)
 80077d2:	fb02 f203 	mul.w	r2, r2, r3
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077dc:	627b      	str	r3, [r7, #36]	; 0x24
 80077de:	e004      	b.n	80077ea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	4a0c      	ldr	r2, [pc, #48]	; (8007814 <HAL_RCC_GetSysClockFreq+0xc0>)
 80077e4:	fb02 f303 	mul.w	r3, r2, r3
 80077e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80077ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ec:	623b      	str	r3, [r7, #32]
      break;
 80077ee:	e002      	b.n	80077f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80077f0:	4b07      	ldr	r3, [pc, #28]	; (8007810 <HAL_RCC_GetSysClockFreq+0xbc>)
 80077f2:	623b      	str	r3, [r7, #32]
      break;
 80077f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80077f6:	6a3b      	ldr	r3, [r7, #32]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3728      	adds	r7, #40	; 0x28
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bc90      	pop	{r4, r7}
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	08007918 	.word	0x08007918
 8007808:	08007928 	.word	0x08007928
 800780c:	40021000 	.word	0x40021000
 8007810:	007a1200 	.word	0x007a1200
 8007814:	003d0900 	.word	0x003d0900

08007818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007818:	b480      	push	{r7}
 800781a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800781c:	4b02      	ldr	r3, [pc, #8]	; (8007828 <HAL_RCC_GetHCLKFreq+0x10>)
 800781e:	681b      	ldr	r3, [r3, #0]
}
 8007820:	4618      	mov	r0, r3
 8007822:	46bd      	mov	sp, r7
 8007824:	bc80      	pop	{r7}
 8007826:	4770      	bx	lr
 8007828:	20000328 	.word	0x20000328

0800782c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007830:	f7ff fff2 	bl	8007818 <HAL_RCC_GetHCLKFreq>
 8007834:	4601      	mov	r1, r0
 8007836:	4b05      	ldr	r3, [pc, #20]	; (800784c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	0a1b      	lsrs	r3, r3, #8
 800783c:	f003 0307 	and.w	r3, r3, #7
 8007840:	4a03      	ldr	r2, [pc, #12]	; (8007850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007842:	5cd3      	ldrb	r3, [r2, r3]
 8007844:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007848:	4618      	mov	r0, r3
 800784a:	bd80      	pop	{r7, pc}
 800784c:	40021000 	.word	0x40021000
 8007850:	0800dc4c 	.word	0x0800dc4c

08007854 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800785c:	4b0a      	ldr	r3, [pc, #40]	; (8007888 <RCC_Delay+0x34>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a0a      	ldr	r2, [pc, #40]	; (800788c <RCC_Delay+0x38>)
 8007862:	fba2 2303 	umull	r2, r3, r2, r3
 8007866:	0a5b      	lsrs	r3, r3, #9
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	fb02 f303 	mul.w	r3, r2, r3
 800786e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007870:	bf00      	nop
  }
  while (Delay --);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	1e5a      	subs	r2, r3, #1
 8007876:	60fa      	str	r2, [r7, #12]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1f9      	bne.n	8007870 <RCC_Delay+0x1c>
}
 800787c:	bf00      	nop
 800787e:	3714      	adds	r7, #20
 8007880:	46bd      	mov	sp, r7
 8007882:	bc80      	pop	{r7}
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	20000328 	.word	0x20000328
 800788c:	10624dd3 	.word	0x10624dd3

08007890 <__libc_init_array>:
 8007890:	b570      	push	{r4, r5, r6, lr}
 8007892:	2500      	movs	r5, #0
 8007894:	4e0c      	ldr	r6, [pc, #48]	; (80078c8 <__libc_init_array+0x38>)
 8007896:	4c0d      	ldr	r4, [pc, #52]	; (80078cc <__libc_init_array+0x3c>)
 8007898:	1ba4      	subs	r4, r4, r6
 800789a:	10a4      	asrs	r4, r4, #2
 800789c:	42a5      	cmp	r5, r4
 800789e:	d109      	bne.n	80078b4 <__libc_init_array+0x24>
 80078a0:	f000 f82e 	bl	8007900 <_init>
 80078a4:	2500      	movs	r5, #0
 80078a6:	4e0a      	ldr	r6, [pc, #40]	; (80078d0 <__libc_init_array+0x40>)
 80078a8:	4c0a      	ldr	r4, [pc, #40]	; (80078d4 <__libc_init_array+0x44>)
 80078aa:	1ba4      	subs	r4, r4, r6
 80078ac:	10a4      	asrs	r4, r4, #2
 80078ae:	42a5      	cmp	r5, r4
 80078b0:	d105      	bne.n	80078be <__libc_init_array+0x2e>
 80078b2:	bd70      	pop	{r4, r5, r6, pc}
 80078b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078b8:	4798      	blx	r3
 80078ba:	3501      	adds	r5, #1
 80078bc:	e7ee      	b.n	800789c <__libc_init_array+0xc>
 80078be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078c2:	4798      	blx	r3
 80078c4:	3501      	adds	r5, #1
 80078c6:	e7f2      	b.n	80078ae <__libc_init_array+0x1e>
 80078c8:	0800e4d4 	.word	0x0800e4d4
 80078cc:	0800e4d4 	.word	0x0800e4d4
 80078d0:	0800e4d4 	.word	0x0800e4d4
 80078d4:	0800e4dc 	.word	0x0800e4dc

080078d8 <memcpy>:
 80078d8:	b510      	push	{r4, lr}
 80078da:	1e43      	subs	r3, r0, #1
 80078dc:	440a      	add	r2, r1
 80078de:	4291      	cmp	r1, r2
 80078e0:	d100      	bne.n	80078e4 <memcpy+0xc>
 80078e2:	bd10      	pop	{r4, pc}
 80078e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078ec:	e7f7      	b.n	80078de <memcpy+0x6>

080078ee <memset>:
 80078ee:	4603      	mov	r3, r0
 80078f0:	4402      	add	r2, r0
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d100      	bne.n	80078f8 <memset+0xa>
 80078f6:	4770      	bx	lr
 80078f8:	f803 1b01 	strb.w	r1, [r3], #1
 80078fc:	e7f9      	b.n	80078f2 <memset+0x4>
	...

08007900 <_init>:
 8007900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007902:	bf00      	nop
 8007904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007906:	bc08      	pop	{r3}
 8007908:	469e      	mov	lr, r3
 800790a:	4770      	bx	lr

0800790c <_fini>:
 800790c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790e:	bf00      	nop
 8007910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007912:	bc08      	pop	{r3}
 8007914:	469e      	mov	lr, r3
 8007916:	4770      	bx	lr
