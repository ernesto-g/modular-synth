
SoundSource.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007154  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006994  08007260  08007260  00017260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbf4  0800dbf4  0002033c  2**0
                  CONTENTS
  4 .ARM          00000000  0800dbf4  0800dbf4  0002033c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dbf4  0800dbf4  0002033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800dbf4  0800dbf4  0001dbf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dbfc  0800dbfc  0001dbfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  0800dc00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004500  2000033c  0800df3c  0002033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000483c  0800df3c  0002483c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025e15  00000000  00000000  00020365  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004bac  00000000  00000000  0004617a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00010440  00000000  00000000  0004ad26  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000b90  00000000  00000000  0005b168  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000038c0  00000000  00000000  0005bcf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001876a  00000000  00000000  0005f5b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000e8e3  00000000  00000000  00077d22  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00078e15  00000000  00000000  00086605  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000ff41a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a04  00000000  00000000  000ff498  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000033c 	.word	0x2000033c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007248 	.word	0x08007248

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000340 	.word	0x20000340
 8000148:	08007248 	.word	0x08007248

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <_ZN6braids16AnalogOscillator14RenderTriangleEPKhPsPhj>:
 8000160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000164:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
 8000168:	9f07      	ldr	r7, [sp, #28]
 800016a:	42b3      	cmp	r3, r6
 800016c:	bf99      	ittee	ls
 800016e:	1af3      	subls	r3, r6, r3
 8000170:	fbb3 f3f7 	udivls	r3, r3, r7
 8000174:	1b9b      	subhi	r3, r3, r6
 8000176:	fbb3 f3f7 	udivhi	r3, r3, r7
 800017a:	bf98      	it	ls
 800017c:	43db      	mvnls	r3, r3
 800017e:	46b4      	mov	ip, r6
 8000180:	6804      	ldr	r4, [r0, #0]
 8000182:	eb01 0e07 	add.w	lr, r1, r7
 8000186:	4571      	cmp	r1, lr
 8000188:	d020      	beq.n	80001cc <_ZN6braids16AnalogOscillator14RenderTriangleEPKhPsPhj+0x6c>
 800018a:	f811 5b01 	ldrb.w	r5, [r1], #1
 800018e:	449c      	add	ip, r3
 8000190:	2d00      	cmp	r5, #0
 8000192:	bf18      	it	ne
 8000194:	2400      	movne	r4, #0
 8000196:	ea4f 095c 	mov.w	r9, ip, lsr #1
 800019a:	444c      	add	r4, r9
 800019c:	0c25      	lsrs	r5, r4, #16
 800019e:	444c      	add	r4, r9
 80001a0:	f345 38c0 	sbfx	r8, r5, #15, #1
 80001a4:	ea4f 4914 	mov.w	r9, r4, lsr #16
 80001a8:	ea88 0845 	eor.w	r8, r8, r5, lsl #1
 80001ac:	f349 35c0 	sbfx	r5, r9, #15, #1
 80001b0:	ea85 0549 	eor.w	r5, r5, r9, lsl #1
 80001b4:	f5a8 4800 	sub.w	r8, r8, #32768	; 0x8000
 80001b8:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
 80001bc:	f348 084e 	sbfx	r8, r8, #1, #15
 80001c0:	f345 054e 	sbfx	r5, r5, #1, #15
 80001c4:	4445      	add	r5, r8
 80001c6:	f822 5b02 	strh.w	r5, [r2], #2
 80001ca:	e7dc      	b.n	8000186 <_ZN6braids16AnalogOscillator14RenderTriangleEPKhPsPhj+0x26>
 80001cc:	fb07 6303 	mla	r3, r7, r3, r6
 80001d0:	6004      	str	r4, [r0, #0]
 80001d2:	6083      	str	r3, [r0, #8]
 80001d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080001d8 <_ZN6braids16AnalogOscillator10RenderSineEPKhPsPhj>:
 80001d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001dc:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 80001e0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80001e2:	42ab      	cmp	r3, r5
 80001e4:	bf99      	ittee	ls
 80001e6:	1aeb      	subls	r3, r5, r3
 80001e8:	fbb3 f3f6 	udivls	r3, r3, r6
 80001ec:	1b5b      	subhi	r3, r3, r5
 80001ee:	fbb3 f3f6 	udivhi	r3, r3, r6
 80001f2:	bf98      	it	ls
 80001f4:	43db      	mvnls	r3, r3
 80001f6:	46ae      	mov	lr, r5
 80001f8:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8000248 <_ZN6braids16AnalogOscillator10RenderSineEPKhPsPhj+0x70>
 80001fc:	6804      	ldr	r4, [r0, #0]
 80001fe:	eb01 0a06 	add.w	sl, r1, r6
 8000202:	f108 0902 	add.w	r9, r8, #2
 8000206:	4551      	cmp	r1, sl
 8000208:	d017      	beq.n	800023a <_ZN6braids16AnalogOscillator10RenderSineEPKhPsPhj+0x62>
 800020a:	f811 7b01 	ldrb.w	r7, [r1], #1
 800020e:	449e      	add	lr, r3
 8000210:	b98f      	cbnz	r7, 8000236 <_ZN6braids16AnalogOscillator10RenderSineEPKhPsPhj+0x5e>
 8000212:	4474      	add	r4, lr
 8000214:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8000218:	f938 701c 	ldrsh.w	r7, [r8, ip, lsl #1]
 800021c:	f939 c01c 	ldrsh.w	ip, [r9, ip, lsl #1]
 8000220:	ebac 0b07 	sub.w	fp, ip, r7
 8000224:	f3c4 2c0f 	ubfx	ip, r4, #8, #16
 8000228:	fb0c fc0b 	mul.w	ip, ip, fp
 800022c:	eb07 472c 	add.w	r7, r7, ip, asr #16
 8000230:	f822 7b02 	strh.w	r7, [r2], #2
 8000234:	e7e7      	b.n	8000206 <_ZN6braids16AnalogOscillator10RenderSineEPKhPsPhj+0x2e>
 8000236:	2400      	movs	r4, #0
 8000238:	e7ec      	b.n	8000214 <_ZN6braids16AnalogOscillator10RenderSineEPKhPsPhj+0x3c>
 800023a:	fb06 5303 	mla	r3, r6, r3, r5
 800023e:	6004      	str	r4, [r0, #0]
 8000240:	6083      	str	r3, [r0, #8]
 8000242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000246:	bf00      	nop
 8000248:	0800ca5e 	.word	0x0800ca5e

0800024c <_ZN6braids16AnalogOscillator18RenderTriangleFoldEPKhPsPhj>:
 800024c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000250:	e9d0 4701 	ldrd	r4, r7, [r0, #4]
 8000254:	468b      	mov	fp, r1
 8000256:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800025a:	b087      	sub	sp, #28
 800025c:	42bc      	cmp	r4, r7
 800025e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8000262:	bf9c      	itt	ls
 8000264:	1b3c      	subls	r4, r7, r4
 8000266:	fbb4 f4fc 	udivls	r4, r4, ip
 800026a:	fbb1 f1fc 	udiv	r1, r1, ip
 800026e:	bf86      	itte	hi
 8000270:	1be4      	subhi	r4, r4, r7
 8000272:	fbb4 f4fc 	udivhi	r4, r4, ip
 8000276:	43e4      	mvnls	r4, r4
 8000278:	46ba      	mov	sl, r7
 800027a:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 800027e:	9201      	str	r2, [sp, #4]
 8000280:	9303      	str	r3, [sp, #12]
 8000282:	9a03      	ldr	r2, [sp, #12]
 8000284:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8000288:	6805      	ldr	r5, [r0, #0]
 800028a:	1a9b      	subs	r3, r3, r2
 800028c:	434b      	muls	r3, r1
 800028e:	9304      	str	r3, [sp, #16]
 8000290:	f8dd e010 	ldr.w	lr, [sp, #16]
 8000294:	eb0b 030c 	add.w	r3, fp, ip
 8000298:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8000370 <_ZN6braids16AnalogOscillator18RenderTriangleFoldEPKhPsPhj+0x124>
 800029c:	9305      	str	r3, [sp, #20]
 800029e:	9b05      	ldr	r3, [sp, #20]
 80002a0:	459b      	cmp	fp, r3
 80002a2:	d059      	beq.n	8000358 <_ZN6braids16AnalogOscillator18RenderTriangleFoldEPKhPsPhj+0x10c>
 80002a4:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80002a8:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 80002ac:	2900      	cmp	r1, #0
 80002ae:	bf18      	it	ne
 80002b0:	2500      	movne	r5, #0
 80002b2:	9b03      	ldr	r3, [sp, #12]
 80002b4:	44a2      	add	sl, r4
 80002b6:	eb03 33ee 	add.w	r3, r3, lr, asr #15
 80002ba:	4353      	muls	r3, r2
 80002bc:	ea4f 025a 	mov.w	r2, sl, lsr #1
 80002c0:	4415      	add	r5, r2
 80002c2:	0c2e      	lsrs	r6, r5, #16
 80002c4:	f346 31c0 	sbfx	r1, r6, #15, #1
 80002c8:	ea81 0146 	eor.w	r1, r1, r6, lsl #1
 80002cc:	13db      	asrs	r3, r3, #15
 80002ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80002d2:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 80002d6:	b21b      	sxth	r3, r3
 80002d8:	b209      	sxth	r1, r1
 80002da:	4359      	muls	r1, r3
 80002dc:	f3c1 31cf 	ubfx	r1, r1, #15, #16
 80002e0:	9202      	str	r2, [sp, #8]
 80002e2:	f481 4100 	eor.w	r1, r1, #32768	; 0x8000
 80002e6:	4a21      	ldr	r2, [pc, #132]	; (800036c <_ZN6braids16AnalogOscillator18RenderTriangleFoldEPKhPsPhj+0x120>)
 80002e8:	ea4f 2921 	mov.w	r9, r1, asr #8
 80002ec:	f938 6019 	ldrsh.w	r6, [r8, r9, lsl #1]
 80002f0:	f932 9019 	ldrsh.w	r9, [r2, r9, lsl #1]
 80002f4:	b2c9      	uxtb	r1, r1
 80002f6:	eba9 0906 	sub.w	r9, r9, r6
 80002fa:	fb01 f109 	mul.w	r1, r1, r9
 80002fe:	eb06 2621 	add.w	r6, r6, r1, asr #8
 8000302:	9901      	ldr	r1, [sp, #4]
 8000304:	f346 064e 	sbfx	r6, r6, #1, #15
 8000308:	800e      	strh	r6, [r1, #0]
 800030a:	9902      	ldr	r1, [sp, #8]
 800030c:	440d      	add	r5, r1
 800030e:	ea4f 4915 	mov.w	r9, r5, lsr #16
 8000312:	f349 31c0 	sbfx	r1, r9, #15, #1
 8000316:	ea81 0149 	eor.w	r1, r1, r9, lsl #1
 800031a:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 800031e:	b209      	sxth	r1, r1
 8000320:	434b      	muls	r3, r1
 8000322:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8000326:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 800032a:	ea4f 2923 	mov.w	r9, r3, asr #8
 800032e:	f938 1019 	ldrsh.w	r1, [r8, r9, lsl #1]
 8000332:	f932 9019 	ldrsh.w	r9, [r2, r9, lsl #1]
 8000336:	b2db      	uxtb	r3, r3
 8000338:	eba9 0901 	sub.w	r9, r9, r1
 800033c:	fb03 f309 	mul.w	r3, r3, r9
 8000340:	eb01 2323 	add.w	r3, r1, r3, asr #8
 8000344:	f343 034e 	sbfx	r3, r3, #1, #15
 8000348:	441e      	add	r6, r3
 800034a:	9b01      	ldr	r3, [sp, #4]
 800034c:	f823 6b02 	strh.w	r6, [r3], #2
 8000350:	9301      	str	r3, [sp, #4]
 8000352:	9b04      	ldr	r3, [sp, #16]
 8000354:	449e      	add	lr, r3
 8000356:	e7a2      	b.n	800029e <_ZN6braids16AnalogOscillator18RenderTriangleFoldEPKhPsPhj+0x52>
 8000358:	fb0c 7404 	mla	r4, ip, r4, r7
 800035c:	89c3      	ldrh	r3, [r0, #14]
 800035e:	6084      	str	r4, [r0, #8]
 8000360:	8203      	strh	r3, [r0, #16]
 8000362:	6005      	str	r5, [r0, #0]
 8000364:	b007      	add	sp, #28
 8000366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800036a:	bf00      	nop
 800036c:	080075fe 	.word	0x080075fe
 8000370:	080075fc 	.word	0x080075fc

08000374 <_ZN6braids16AnalogOscillator14RenderSineFoldEPKhPsPhj>:
 8000374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000378:	e9d0 4c01 	ldrd	r4, ip, [r0, #4]
 800037c:	4689      	mov	r9, r1
 800037e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000382:	b085      	sub	sp, #20
 8000384:	4564      	cmp	r4, ip
 8000386:	bf9d      	ittte	ls
 8000388:	9b0e      	ldrls	r3, [sp, #56]	; 0x38
 800038a:	ebac 0404 	subls.w	r4, ip, r4
 800038e:	fbb4 f4f3 	udivls	r4, r4, r3
 8000392:	9b0e      	ldrhi	r3, [sp, #56]	; 0x38
 8000394:	bf84      	itt	hi
 8000396:	eba4 040c 	subhi.w	r4, r4, ip
 800039a:	fbb4 f4f3 	udivhi	r4, r4, r3
 800039e:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 80003a2:	9200      	str	r2, [sp, #0]
 80003a4:	9301      	str	r3, [sp, #4]
 80003a6:	9a01      	ldr	r2, [sp, #4]
 80003a8:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80003ac:	bf98      	it	ls
 80003ae:	43e4      	mvnls	r4, r4
 80003b0:	1a9b      	subs	r3, r3, r2
 80003b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80003b4:	46e6      	mov	lr, ip
 80003b6:	fbb1 f1f2 	udiv	r1, r1, r2
 80003ba:	434b      	muls	r3, r1
 80003bc:	9302      	str	r3, [sp, #8]
 80003be:	6805      	ldr	r5, [r0, #0]
 80003c0:	eb09 0302 	add.w	r3, r9, r2
 80003c4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80003c8:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 80004c0 <_ZN6braids16AnalogOscillator14RenderSineFoldEPKhPsPhj+0x14c>
 80003cc:	9303      	str	r3, [sp, #12]
 80003ce:	9b03      	ldr	r3, [sp, #12]
 80003d0:	4599      	cmp	r9, r3
 80003d2:	d064      	beq.n	800049e <_ZN6braids16AnalogOscillator14RenderSineFoldEPKhPsPhj+0x12a>
 80003d4:	f819 1b01 	ldrb.w	r1, [r9], #1
 80003d8:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 80003dc:	2900      	cmp	r1, #0
 80003de:	bf18      	it	ne
 80003e0:	2500      	movne	r5, #0
 80003e2:	9b01      	ldr	r3, [sp, #4]
 80003e4:	44a6      	add	lr, r4
 80003e6:	ea4f 075e 	mov.w	r7, lr, lsr #1
 80003ea:	eb03 33e8 	add.w	r3, r3, r8, asr #15
 80003ee:	443d      	add	r5, r7
 80003f0:	4353      	muls	r3, r2
 80003f2:	4a30      	ldr	r2, [pc, #192]	; (80004b4 <_ZN6braids16AnalogOscillator14RenderSineFoldEPKhPsPhj+0x140>)
 80003f4:	0e2e      	lsrs	r6, r5, #24
 80003f6:	f93a 1016 	ldrsh.w	r1, [sl, r6, lsl #1]
 80003fa:	f932 b016 	ldrsh.w	fp, [r2, r6, lsl #1]
 80003fe:	f3c5 260f 	ubfx	r6, r5, #8, #16
 8000402:	ebab 0b01 	sub.w	fp, fp, r1
 8000406:	fb06 f60b 	mul.w	r6, r6, fp
 800040a:	13db      	asrs	r3, r3, #15
 800040c:	eb01 4126 	add.w	r1, r1, r6, asr #16
 8000410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000414:	b21b      	sxth	r3, r3
 8000416:	b209      	sxth	r1, r1
 8000418:	4359      	muls	r1, r3
 800041a:	f3c1 31cf 	ubfx	r1, r1, #15, #16
 800041e:	f481 4100 	eor.w	r1, r1, #32768	; 0x8000
 8000422:	4a25      	ldr	r2, [pc, #148]	; (80004b8 <_ZN6braids16AnalogOscillator14RenderSineFoldEPKhPsPhj+0x144>)
 8000424:	4e25      	ldr	r6, [pc, #148]	; (80004bc <_ZN6braids16AnalogOscillator14RenderSineFoldEPKhPsPhj+0x148>)
 8000426:	ea4f 2b21 	mov.w	fp, r1, asr #8
 800042a:	f936 601b 	ldrsh.w	r6, [r6, fp, lsl #1]
 800042e:	f932 b01b 	ldrsh.w	fp, [r2, fp, lsl #1]
 8000432:	b2c9      	uxtb	r1, r1
 8000434:	ebab 0b06 	sub.w	fp, fp, r6
 8000438:	fb01 f10b 	mul.w	r1, r1, fp
 800043c:	9a00      	ldr	r2, [sp, #0]
 800043e:	eb06 2621 	add.w	r6, r6, r1, asr #8
 8000442:	f346 064e 	sbfx	r6, r6, #1, #15
 8000446:	8016      	strh	r6, [r2, #0]
 8000448:	443d      	add	r5, r7
 800044a:	4a1a      	ldr	r2, [pc, #104]	; (80004b4 <_ZN6braids16AnalogOscillator14RenderSineFoldEPKhPsPhj+0x140>)
 800044c:	0e29      	lsrs	r1, r5, #24
 800044e:	f93a 7011 	ldrsh.w	r7, [sl, r1, lsl #1]
 8000452:	f932 b011 	ldrsh.w	fp, [r2, r1, lsl #1]
 8000456:	f3c5 210f 	ubfx	r1, r5, #8, #16
 800045a:	ebab 0b07 	sub.w	fp, fp, r7
 800045e:	fb01 f10b 	mul.w	r1, r1, fp
 8000462:	eb07 4121 	add.w	r1, r7, r1, asr #16
 8000466:	b209      	sxth	r1, r1
 8000468:	434b      	muls	r3, r1
 800046a:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 800046e:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 8000472:	4a12      	ldr	r2, [pc, #72]	; (80004bc <_ZN6braids16AnalogOscillator14RenderSineFoldEPKhPsPhj+0x148>)
 8000474:	121f      	asrs	r7, r3, #8
 8000476:	f932 1017 	ldrsh.w	r1, [r2, r7, lsl #1]
 800047a:	3202      	adds	r2, #2
 800047c:	f932 7017 	ldrsh.w	r7, [r2, r7, lsl #1]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	1a7f      	subs	r7, r7, r1
 8000484:	437b      	muls	r3, r7
 8000486:	eb01 2323 	add.w	r3, r1, r3, asr #8
 800048a:	f343 034e 	sbfx	r3, r3, #1, #15
 800048e:	441e      	add	r6, r3
 8000490:	9b00      	ldr	r3, [sp, #0]
 8000492:	f823 6b02 	strh.w	r6, [r3], #2
 8000496:	9300      	str	r3, [sp, #0]
 8000498:	9b02      	ldr	r3, [sp, #8]
 800049a:	4498      	add	r8, r3
 800049c:	e797      	b.n	80003ce <_ZN6braids16AnalogOscillator14RenderSineFoldEPKhPsPhj+0x5a>
 800049e:	89c3      	ldrh	r3, [r0, #14]
 80004a0:	6005      	str	r5, [r0, #0]
 80004a2:	8203      	strh	r3, [r0, #16]
 80004a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80004a6:	fb03 c404 	mla	r4, r3, r4, ip
 80004aa:	6084      	str	r4, [r0, #8]
 80004ac:	b005      	add	sp, #20
 80004ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80004b2:	bf00      	nop
 80004b4:	0800ca60 	.word	0x0800ca60
 80004b8:	08007c04 	.word	0x08007c04
 80004bc:	08007c02 	.word	0x08007c02
 80004c0:	0800ca5e 	.word	0x0800ca5e

080004c4 <_ZN6braids16AnalogOscillator10RenderBuzzEPKhPsPhj>:
 80004c4:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80004c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004cc:	f5c3 44ff 	rsb	r4, r3, #32640	; 0x7f80
 80004d0:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 80004d4:	347f      	adds	r4, #127	; 0x7f
 80004d6:	eb03 0364 	add.w	r3, r3, r4, asr #1
 80004da:	019c      	lsls	r4, r3, #6
 80004dc:	129b      	asrs	r3, r3, #10
 80004de:	2b0e      	cmp	r3, #14
 80004e0:	bf28      	it	cs
 80004e2:	230e      	movcs	r3, #14
 80004e4:	1cde      	adds	r6, r3, #3
 80004e6:	3301      	adds	r3, #1
 80004e8:	2b0f      	cmp	r3, #15
 80004ea:	bf08      	it	eq
 80004ec:	230e      	moveq	r3, #14
 80004ee:	f04f 0e00 	mov.w	lr, #0
 80004f2:	4d1f      	ldr	r5, [pc, #124]	; (8000570 <_ZN6braids16AnalogOscillator10RenderBuzzEPKhPsPhj+0xac>)
 80004f4:	3303      	adds	r3, #3
 80004f6:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80004fa:	f855 c023 	ldr.w	ip, [r5, r3, lsl #2]
 80004fe:	9d08      	ldr	r5, [sp, #32]
 8000500:	b2a4      	uxth	r4, r4
 8000502:	440d      	add	r5, r1
 8000504:	42a9      	cmp	r1, r5
 8000506:	d030      	beq.n	800056a <_ZN6braids16AnalogOscillator10RenderBuzzEPKhPsPhj+0xa6>
 8000508:	e9d0 3700 	ldrd	r3, r7, [r0]
 800050c:	443b      	add	r3, r7
 800050e:	6003      	str	r3, [r0, #0]
 8000510:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000514:	b10b      	cbz	r3, 800051a <_ZN6braids16AnalogOscillator10RenderBuzzEPKhPsPhj+0x56>
 8000516:	f8c0 e000 	str.w	lr, [r0]
 800051a:	6803      	ldr	r3, [r0, #0]
 800051c:	ea4f 6a13 	mov.w	sl, r3, lsr #24
 8000520:	ea4f 094a 	mov.w	r9, sl, lsl #1
 8000524:	f109 0902 	add.w	r9, r9, #2
 8000528:	f936 701a 	ldrsh.w	r7, [r6, sl, lsl #1]
 800052c:	f3c3 280f 	ubfx	r8, r3, #8, #16
 8000530:	f936 3009 	ldrsh.w	r3, [r6, r9]
 8000534:	f93c 9009 	ldrsh.w	r9, [ip, r9]
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	fb08 f303 	mul.w	r3, r8, r3
 800053e:	eb07 4723 	add.w	r7, r7, r3, asr #16
 8000542:	f93c 301a 	ldrsh.w	r3, [ip, sl, lsl #1]
 8000546:	b2bf      	uxth	r7, r7
 8000548:	eba9 0903 	sub.w	r9, r9, r3
 800054c:	fb08 f809 	mul.w	r8, r8, r9
 8000550:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8000554:	b21b      	sxth	r3, r3
 8000556:	fa0f f887 	sxth.w	r8, r7
 800055a:	eba3 0308 	sub.w	r3, r3, r8
 800055e:	4363      	muls	r3, r4
 8000560:	eb07 4323 	add.w	r3, r7, r3, asr #16
 8000564:	f822 3b02 	strh.w	r3, [r2], #2
 8000568:	e7cc      	b.n	8000504 <_ZN6braids16AnalogOscillator10RenderBuzzEPKhPsPhj+0x40>
 800056a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056e:	bf00      	nop
 8000570:	200002e0 	.word	0x200002e0

08000574 <_ZN6braids16AnalogOscillator14ThisBlepSampleEm.isra.0>:
 8000574:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000578:	4298      	cmp	r0, r3
 800057a:	bf28      	it	cs
 800057c:	4618      	movcs	r0, r3
 800057e:	4340      	muls	r0, r0
 8000580:	0c80      	lsrs	r0, r0, #18
 8000582:	4770      	bx	lr

08000584 <_ZN6braids16AnalogOscillator14NextBlepSampleEm.isra.1>:
 8000584:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000588:	4298      	cmp	r0, r3
 800058a:	bf94      	ite	ls
 800058c:	1a1b      	subls	r3, r3, r0
 800058e:	1adb      	subhi	r3, r3, r3
 8000590:	435b      	muls	r3, r3
 8000592:	0c98      	lsrs	r0, r3, #18
 8000594:	4240      	negs	r0, r0
 8000596:	4770      	bx	lr

08000598 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj>:
 8000598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800059c:	461e      	mov	r6, r3
 800059e:	e9d0 3a01 	ldrd	r3, sl, [r0, #4]
 80005a2:	b089      	sub	sp, #36	; 0x24
 80005a4:	4553      	cmp	r3, sl
 80005a6:	9205      	str	r2, [sp, #20]
 80005a8:	bf9d      	ittte	ls
 80005aa:	9a12      	ldrls	r2, [sp, #72]	; 0x48
 80005ac:	ebaa 0303 	subls.w	r3, sl, r3
 80005b0:	fbb3 f3f2 	udivls	r3, r3, r2
 80005b4:	9a12      	ldrhi	r2, [sp, #72]	; 0x48
 80005b6:	bf86      	itte	hi
 80005b8:	eba3 030a 	subhi.w	r3, r3, sl
 80005bc:	fbb3 f3f2 	udivhi	r3, r3, r2
 80005c0:	43db      	mvnls	r3, r3
 80005c2:	9304      	str	r3, [sp, #16]
 80005c4:	460b      	mov	r3, r1
 80005c6:	4604      	mov	r4, r0
 80005c8:	46d0      	mov	r8, sl
 80005ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80005cc:	6985      	ldr	r5, [r0, #24]
 80005ce:	4413      	add	r3, r2
 80005d0:	9103      	str	r1, [sp, #12]
 80005d2:	9306      	str	r3, [sp, #24]
 80005d4:	9b06      	ldr	r3, [sp, #24]
 80005d6:	9a03      	ldr	r2, [sp, #12]
 80005d8:	4293      	cmp	r3, r2
 80005da:	f000 80bb 	beq.w	8000754 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x1bc>
 80005de:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80005e2:	9b04      	ldr	r3, [sp, #16]
 80005e4:	6827      	ldr	r7, [r4, #0]
 80005e6:	4498      	add	r8, r3
 80005e8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80005ec:	4353      	muls	r3, r2
 80005ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80005f2:	429a      	cmp	r2, r3
 80005f4:	bf38      	it	cc
 80005f6:	461a      	movcc	r2, r3
 80005f8:	9b03      	ldr	r3, [sp, #12]
 80005fa:	4693      	mov	fp, r2
 80005fc:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000600:	9303      	str	r3, [sp, #12]
 8000602:	ea4f 4318 	mov.w	r3, r8, lsr #16
 8000606:	9302      	str	r3, [sp, #8]
 8000608:	2900      	cmp	r1, #0
 800060a:	f000 8084 	beq.w	8000716 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x17e>
 800060e:	3901      	subs	r1, #1
 8000610:	0249      	lsls	r1, r1, #9
 8000612:	f5c1 427f 	rsb	r2, r1, #65280	; 0xff00
 8000616:	32ff      	adds	r2, #255	; 0xff
 8000618:	435a      	muls	r2, r3
 800061a:	19d0      	adds	r0, r2, r7
 800061c:	d207      	bcs.n	800062e <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x96>
 800061e:	7b23      	ldrb	r3, [r4, #12]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d176      	bne.n	8000712 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x17a>
 8000624:	4583      	cmp	fp, r0
 8000626:	bf8c      	ite	hi
 8000628:	2300      	movhi	r3, #0
 800062a:	2301      	movls	r3, #1
 800062c:	e000      	b.n	8000630 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x98>
 800062e:	2301      	movs	r3, #1
 8000630:	45bb      	cmp	fp, r7
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	d873      	bhi.n	800071e <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x186>
 8000636:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 800063a:	1092      	asrs	r2, r2, #2
 800063c:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8000640:	b212      	sxth	r2, r2
 8000642:	82a2      	strh	r2, [r4, #20]
 8000644:	eba2 4290 	sub.w	r2, r2, r0, lsr #18
 8000648:	4608      	mov	r0, r1
 800064a:	f7ff ff93 	bl	8000574 <_ZN6braids16AnalogOscillator14ThisBlepSampleEm.isra.0>
 800064e:	4350      	muls	r0, r2
 8000650:	eb05 35e0 	add.w	r5, r5, r0, asr #15
 8000654:	4608      	mov	r0, r1
 8000656:	f7ff ff95 	bl	8000584 <_ZN6braids16AnalogOscillator14NextBlepSampleEm.isra.1>
 800065a:	2301      	movs	r3, #1
 800065c:	4342      	muls	r2, r0
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	13d2      	asrs	r2, r2, #15
 8000662:	eb18 0307 	adds.w	r3, r8, r7
 8000666:	bf2c      	ite	cs
 8000668:	2701      	movcs	r7, #1
 800066a:	2700      	movcc	r7, #0
 800066c:	6023      	str	r3, [r4, #0]
 800066e:	2f00      	cmp	r7, #0
 8000670:	d179      	bne.n	8000766 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x1ce>
 8000672:	2e00      	cmp	r6, #0
 8000674:	d04b      	beq.n	800070e <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x176>
 8000676:	7037      	strb	r7, [r6, #0]
 8000678:	3601      	adds	r6, #1
 800067a:	9b01      	ldr	r3, [sp, #4]
 800067c:	b913      	cbnz	r3, 8000684 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0xec>
 800067e:	9b00      	ldr	r3, [sp, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d151      	bne.n	8000728 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x190>
 8000684:	7b23      	ldrb	r3, [r4, #12]
 8000686:	bb03      	cbnz	r3, 80006ca <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x132>
 8000688:	6820      	ldr	r0, [r4, #0]
 800068a:	4583      	cmp	fp, r0
 800068c:	d875      	bhi.n	800077a <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x1e2>
 800068e:	9b02      	ldr	r3, [sp, #8]
 8000690:	eba0 0c0b 	sub.w	ip, r0, fp
 8000694:	fbbc f3f3 	udiv	r3, ip, r3
 8000698:	f8b4 9014 	ldrh.w	r9, [r4, #20]
 800069c:	9307      	str	r3, [sp, #28]
 800069e:	ebc9 4990 	rsb	r9, r9, r0, lsr #18
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff66 	bl	8000574 <_ZN6braids16AnalogOscillator14ThisBlepSampleEm.isra.0>
 80006a8:	fa0f f989 	sxth.w	r9, r9
 80006ac:	fb00 f009 	mul.w	r0, r0, r9
 80006b0:	9b07      	ldr	r3, [sp, #28]
 80006b2:	eb05 35e0 	add.w	r5, r5, r0, asr #15
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ff64 	bl	8000584 <_ZN6braids16AnalogOscillator14NextBlepSampleEm.isra.1>
 80006bc:	f04f 0301 	mov.w	r3, #1
 80006c0:	fb00 f009 	mul.w	r0, r0, r9
 80006c4:	7323      	strb	r3, [r4, #12]
 80006c6:	eb02 32e0 	add.w	r2, r2, r0, asr #15
 80006ca:	7b23      	ldrb	r3, [r4, #12]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d0d4      	beq.n	800067a <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0xe2>
 80006d0:	b347      	cbz	r7, 8000724 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x18c>
 80006d2:	f9b4 7012 	ldrsh.w	r7, [r4, #18]
 80006d6:	9802      	ldr	r0, [sp, #8]
 80006d8:	f3c7 078f 	ubfx	r7, r7, #2, #16
 80006dc:	f5a7 6300 	sub.w	r3, r7, #2048	; 0x800
 80006e0:	82a3      	strh	r3, [r4, #20]
 80006e2:	6823      	ldr	r3, [r4, #0]
 80006e4:	f5a7 478f 	sub.w	r7, r7, #18304	; 0x4780
 80006e8:	fbb3 f9f0 	udiv	r9, r3, r0
 80006ec:	4648      	mov	r0, r9
 80006ee:	f7ff ff41 	bl	8000574 <_ZN6braids16AnalogOscillator14ThisBlepSampleEm.isra.0>
 80006f2:	3f7f      	subs	r7, #127	; 0x7f
 80006f4:	b23f      	sxth	r7, r7
 80006f6:	4378      	muls	r0, r7
 80006f8:	eb05 35e0 	add.w	r5, r5, r0, asr #15
 80006fc:	4648      	mov	r0, r9
 80006fe:	f7ff ff41 	bl	8000584 <_ZN6braids16AnalogOscillator14NextBlepSampleEm.isra.1>
 8000702:	f04f 0300 	mov.w	r3, #0
 8000706:	4378      	muls	r0, r7
 8000708:	7323      	strb	r3, [r4, #12]
 800070a:	eb02 32e0 	add.w	r2, r2, r0, asr #15
 800070e:	2700      	movs	r7, #0
 8000710:	e7b3      	b.n	800067a <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0xe2>
 8000712:	2300      	movs	r3, #0
 8000714:	e78c      	b.n	8000630 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x98>
 8000716:	e9cd 1100 	strd	r1, r1, [sp]
 800071a:	2200      	movs	r2, #0
 800071c:	e7a1      	b.n	8000662 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0xca>
 800071e:	2301      	movs	r3, #1
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	e7fa      	b.n	800071a <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x182>
 8000724:	9b00      	ldr	r3, [sp, #0]
 8000726:	b12b      	cbz	r3, 8000734 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x19c>
 8000728:	9b02      	ldr	r3, [sp, #8]
 800072a:	434b      	muls	r3, r1
 800072c:	6023      	str	r3, [r4, #0]
 800072e:	f04f 0300 	mov.w	r3, #0
 8000732:	7323      	strb	r3, [r4, #12]
 8000734:	6823      	ldr	r3, [r4, #0]
 8000736:	459b      	cmp	fp, r3
 8000738:	d90a      	bls.n	8000750 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x1b8>
 800073a:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800073e:	9905      	ldr	r1, [sp, #20]
 8000740:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
 8000744:	006d      	lsls	r5, r5, #1
 8000746:	f821 5b02 	strh.w	r5, [r1], #2
 800074a:	9105      	str	r1, [sp, #20]
 800074c:	18d5      	adds	r5, r2, r3
 800074e:	e741      	b.n	80005d4 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x3c>
 8000750:	0c9b      	lsrs	r3, r3, #18
 8000752:	e7f4      	b.n	800073e <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x1a6>
 8000754:	9b04      	ldr	r3, [sp, #16]
 8000756:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8000758:	61a5      	str	r5, [r4, #24]
 800075a:	fb02 a303 	mla	r3, r2, r3, sl
 800075e:	60a3      	str	r3, [r4, #8]
 8000760:	b009      	add	sp, #36	; 0x24
 8000762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000766:	b136      	cbz	r6, 8000776 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x1de>
 8000768:	ea4f 17d8 	mov.w	r7, r8, lsr #7
 800076c:	fbb3 f7f7 	udiv	r7, r3, r7
 8000770:	3701      	adds	r7, #1
 8000772:	7037      	strb	r7, [r6, #0]
 8000774:	3601      	adds	r6, #1
 8000776:	2701      	movs	r7, #1
 8000778:	e77f      	b.n	800067a <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0xe2>
 800077a:	9b00      	ldr	r3, [sp, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d0dc      	beq.n	800073a <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x1a2>
 8000780:	e7d2      	b.n	8000728 <_ZN6braids16AnalogOscillator10RenderCSawEPKhPsPhj+0x190>

08000782 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj>:
 8000782:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000786:	461e      	mov	r6, r3
 8000788:	e9d0 3a01 	ldrd	r3, sl, [r0, #4]
 800078c:	b089      	sub	sp, #36	; 0x24
 800078e:	4553      	cmp	r3, sl
 8000790:	9205      	str	r2, [sp, #20]
 8000792:	bf9d      	ittte	ls
 8000794:	9a12      	ldrls	r2, [sp, #72]	; 0x48
 8000796:	ebaa 0303 	subls.w	r3, sl, r3
 800079a:	fbb3 f3f2 	udivls	r3, r3, r2
 800079e:	9a12      	ldrhi	r2, [sp, #72]	; 0x48
 80007a0:	bf86      	itte	hi
 80007a2:	eba3 030a 	subhi.w	r3, r3, sl
 80007a6:	fbb3 f3f2 	udivhi	r3, r3, r2
 80007aa:	43db      	mvnls	r3, r3
 80007ac:	9304      	str	r3, [sp, #16]
 80007ae:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80007b2:	4604      	mov	r4, r0
 80007b4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80007b8:	bfc4      	itt	gt
 80007ba:	f44f 43fa 	movgt.w	r3, #32000	; 0x7d00
 80007be:	81c3      	strhgt	r3, [r0, #14]
 80007c0:	460b      	mov	r3, r1
 80007c2:	46d3      	mov	fp, sl
 80007c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80007c6:	6985      	ldr	r5, [r0, #24]
 80007c8:	4413      	add	r3, r2
 80007ca:	9101      	str	r1, [sp, #4]
 80007cc:	9306      	str	r3, [sp, #24]
 80007ce:	9b01      	ldr	r3, [sp, #4]
 80007d0:	9a06      	ldr	r2, [sp, #24]
 80007d2:	4293      	cmp	r3, r2
 80007d4:	f000 8093 	beq.w	80008fe <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x17c>
 80007d8:	9b04      	ldr	r3, [sp, #16]
 80007da:	f9b4 700e 	ldrsh.w	r7, [r4, #14]
 80007de:	449b      	add	fp, r3
 80007e0:	9b01      	ldr	r3, [sp, #4]
 80007e2:	f5c7 4700 	rsb	r7, r7, #32768	; 0x8000
 80007e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80007ea:	043f      	lsls	r7, r7, #16
 80007ec:	9301      	str	r3, [sp, #4]
 80007ee:	ea4f 431b 	mov.w	r3, fp, lsr #16
 80007f2:	f8d4 8000 	ldr.w	r8, [r4]
 80007f6:	9303      	str	r3, [sp, #12]
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	d061      	beq.n	80008c0 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x13e>
 80007fc:	3a01      	subs	r2, #1
 80007fe:	0252      	lsls	r2, r2, #9
 8000800:	f5c2 437f 	rsb	r3, r2, #65280	; 0xff00
 8000804:	9903      	ldr	r1, [sp, #12]
 8000806:	33ff      	adds	r3, #255	; 0xff
 8000808:	434b      	muls	r3, r1
 800080a:	eb13 0308 	adds.w	r3, r3, r8
 800080e:	d207      	bcs.n	8000820 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x9e>
 8000810:	7b21      	ldrb	r1, [r4, #12]
 8000812:	2900      	cmp	r1, #0
 8000814:	d152      	bne.n	80008bc <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x13a>
 8000816:	429f      	cmp	r7, r3
 8000818:	bf8c      	ite	hi
 800081a:	2100      	movhi	r1, #0
 800081c:	2101      	movls	r1, #1
 800081e:	e000      	b.n	8000822 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0xa0>
 8000820:	2101      	movs	r1, #1
 8000822:	429f      	cmp	r7, r3
 8000824:	9102      	str	r1, [sp, #8]
 8000826:	d850      	bhi.n	80008ca <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x148>
 8000828:	4610      	mov	r0, r2
 800082a:	f7ff fea3 	bl	8000574 <_ZN6braids16AnalogOscillator14ThisBlepSampleEm.isra.0>
 800082e:	1a2d      	subs	r5, r5, r0
 8000830:	4610      	mov	r0, r2
 8000832:	f7ff fea7 	bl	8000584 <_ZN6braids16AnalogOscillator14NextBlepSampleEm.isra.1>
 8000836:	2101      	movs	r1, #1
 8000838:	f1c0 0900 	rsb	r9, r0, #0
 800083c:	eb1b 0308 	adds.w	r3, fp, r8
 8000840:	bf2c      	ite	cs
 8000842:	2001      	movcs	r0, #1
 8000844:	2000      	movcc	r0, #0
 8000846:	6023      	str	r3, [r4, #0]
 8000848:	2800      	cmp	r0, #0
 800084a:	d161      	bne.n	8000910 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x18e>
 800084c:	2e00      	cmp	r6, #0
 800084e:	d032      	beq.n	80008b6 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x134>
 8000850:	4680      	mov	r8, r0
 8000852:	7030      	strb	r0, [r6, #0]
 8000854:	3601      	adds	r6, #1
 8000856:	9b02      	ldr	r3, [sp, #8]
 8000858:	b90b      	cbnz	r3, 800085e <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0xdc>
 800085a:	2900      	cmp	r1, #0
 800085c:	d138      	bne.n	80008d0 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x14e>
 800085e:	7b23      	ldrb	r3, [r4, #12]
 8000860:	b99b      	cbnz	r3, 800088a <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x108>
 8000862:	6823      	ldr	r3, [r4, #0]
 8000864:	42bb      	cmp	r3, r7
 8000866:	d360      	bcc.n	800092a <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x1a8>
 8000868:	9803      	ldr	r0, [sp, #12]
 800086a:	1bdb      	subs	r3, r3, r7
 800086c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000870:	4618      	mov	r0, r3
 8000872:	9307      	str	r3, [sp, #28]
 8000874:	f7ff fe7e 	bl	8000574 <_ZN6braids16AnalogOscillator14ThisBlepSampleEm.isra.0>
 8000878:	9b07      	ldr	r3, [sp, #28]
 800087a:	4405      	add	r5, r0
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fe81 	bl	8000584 <_ZN6braids16AnalogOscillator14NextBlepSampleEm.isra.1>
 8000882:	f04f 0301 	mov.w	r3, #1
 8000886:	4481      	add	r9, r0
 8000888:	7323      	strb	r3, [r4, #12]
 800088a:	7b23      	ldrb	r3, [r4, #12]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d0e2      	beq.n	8000856 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0xd4>
 8000890:	f1b8 0f00 	cmp.w	r8, #0
 8000894:	d01b      	beq.n	80008ce <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x14c>
 8000896:	6823      	ldr	r3, [r4, #0]
 8000898:	9803      	ldr	r0, [sp, #12]
 800089a:	fbb3 f8f0 	udiv	r8, r3, r0
 800089e:	4640      	mov	r0, r8
 80008a0:	f7ff fe68 	bl	8000574 <_ZN6braids16AnalogOscillator14ThisBlepSampleEm.isra.0>
 80008a4:	1a2d      	subs	r5, r5, r0
 80008a6:	4640      	mov	r0, r8
 80008a8:	f7ff fe6c 	bl	8000584 <_ZN6braids16AnalogOscillator14NextBlepSampleEm.isra.1>
 80008ac:	f04f 0300 	mov.w	r3, #0
 80008b0:	eba9 0900 	sub.w	r9, r9, r0
 80008b4:	7323      	strb	r3, [r4, #12]
 80008b6:	f04f 0800 	mov.w	r8, #0
 80008ba:	e7cc      	b.n	8000856 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0xd4>
 80008bc:	2100      	movs	r1, #0
 80008be:	e7b0      	b.n	8000822 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0xa0>
 80008c0:	4611      	mov	r1, r2
 80008c2:	9202      	str	r2, [sp, #8]
 80008c4:	f04f 0900 	mov.w	r9, #0
 80008c8:	e7b8      	b.n	800083c <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0xba>
 80008ca:	2101      	movs	r1, #1
 80008cc:	e7fa      	b.n	80008c4 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x142>
 80008ce:	b129      	cbz	r1, 80008dc <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x15a>
 80008d0:	9b03      	ldr	r3, [sp, #12]
 80008d2:	4353      	muls	r3, r2
 80008d4:	6023      	str	r3, [r4, #0]
 80008d6:	f04f 0300 	mov.w	r3, #0
 80008da:	7323      	strb	r3, [r4, #12]
 80008dc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80008e0:	6821      	ldr	r1, [r4, #0]
 80008e2:	42b9      	cmp	r1, r7
 80008e4:	bf38      	it	cc
 80008e6:	2300      	movcc	r3, #0
 80008e8:	4619      	mov	r1, r3
 80008ea:	9b05      	ldr	r3, [sp, #20]
 80008ec:	f5a5 4580 	sub.w	r5, r5, #16384	; 0x4000
 80008f0:	006d      	lsls	r5, r5, #1
 80008f2:	f823 5b02 	strh.w	r5, [r3], #2
 80008f6:	9305      	str	r3, [sp, #20]
 80008f8:	eb09 0501 	add.w	r5, r9, r1
 80008fc:	e767      	b.n	80007ce <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x4c>
 80008fe:	9b04      	ldr	r3, [sp, #16]
 8000900:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8000902:	61a5      	str	r5, [r4, #24]
 8000904:	fb02 a303 	mla	r3, r2, r3, sl
 8000908:	60a3      	str	r3, [r4, #8]
 800090a:	b009      	add	sp, #36	; 0x24
 800090c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000910:	b146      	cbz	r6, 8000924 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x1a2>
 8000912:	ea4f 18db 	mov.w	r8, fp, lsr #7
 8000916:	fbb3 f8f8 	udiv	r8, r3, r8
 800091a:	f108 0801 	add.w	r8, r8, #1
 800091e:	f886 8000 	strb.w	r8, [r6]
 8000922:	3601      	adds	r6, #1
 8000924:	f04f 0801 	mov.w	r8, #1
 8000928:	e795      	b.n	8000856 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0xd4>
 800092a:	2900      	cmp	r1, #0
 800092c:	d0dd      	beq.n	80008ea <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x168>
 800092e:	e7cf      	b.n	80008d0 <_ZN6braids16AnalogOscillator12RenderSquareEPKhPsPhj+0x14e>

08000930 <_ZN6braids16AnalogOscillator9RenderSawEPKhPsPhj>:
 8000930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000934:	4699      	mov	r9, r3
 8000936:	e9d0 3a01 	ldrd	r3, sl, [r0, #4]
 800093a:	b085      	sub	sp, #20
 800093c:	4553      	cmp	r3, sl
 800093e:	9202      	str	r2, [sp, #8]
 8000940:	bf9e      	ittt	ls
 8000942:	9a0e      	ldrls	r2, [sp, #56]	; 0x38
 8000944:	ebaa 0303 	subls.w	r3, sl, r3
 8000948:	fbb3 f3f2 	udivls	r3, r3, r2
 800094c:	4607      	mov	r7, r0
 800094e:	46d0      	mov	r8, sl
 8000950:	bf83      	ittte	hi
 8000952:	9a0e      	ldrhi	r2, [sp, #56]	; 0x38
 8000954:	eba3 030a 	subhi.w	r3, r3, sl
 8000958:	fbb3 fbf2 	udivhi	fp, r3, r2
 800095c:	ea6f 0b03 	mvnls.w	fp, r3
 8000960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000962:	6986      	ldr	r6, [r0, #24]
 8000964:	18cb      	adds	r3, r1, r3
 8000966:	9303      	str	r3, [sp, #12]
 8000968:	9b03      	ldr	r3, [sp, #12]
 800096a:	428b      	cmp	r3, r1
 800096c:	d045      	beq.n	80009fa <_ZN6braids16AnalogOscillator9RenderSawEPKhPsPhj+0xca>
 800096e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000972:	44d8      	add	r8, fp
 8000974:	683d      	ldr	r5, [r7, #0]
 8000976:	2c00      	cmp	r4, #0
 8000978:	d03b      	beq.n	80009f2 <_ZN6braids16AnalogOscillator9RenderSawEPKhPsPhj+0xc2>
 800097a:	3c01      	subs	r4, #1
 800097c:	0264      	lsls	r4, r4, #9
 800097e:	f5c4 407f 	rsb	r0, r4, #65280	; 0xff00
 8000982:	30ff      	adds	r0, #255	; 0xff
 8000984:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8000988:	4342      	muls	r2, r0
 800098a:	1952      	adds	r2, r2, r5
 800098c:	bf2c      	ite	cs
 800098e:	2301      	movcs	r3, #1
 8000990:	2300      	movcc	r3, #0
 8000992:	4620      	mov	r0, r4
 8000994:	0c52      	lsrs	r2, r2, #17
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	f7ff fdec 	bl	8000574 <_ZN6braids16AnalogOscillator14ThisBlepSampleEm.isra.0>
 800099c:	4350      	muls	r0, r2
 800099e:	eba6 36e0 	sub.w	r6, r6, r0, asr #15
 80009a2:	4620      	mov	r0, r4
 80009a4:	f7ff fdee 	bl	8000584 <_ZN6braids16AnalogOscillator14NextBlepSampleEm.isra.1>
 80009a8:	2301      	movs	r3, #1
 80009aa:	4342      	muls	r2, r0
 80009ac:	13d2      	asrs	r2, r2, #15
 80009ae:	4252      	negs	r2, r2
 80009b0:	eb18 0505 	adds.w	r5, r8, r5
 80009b4:	bf2c      	ite	cs
 80009b6:	2001      	movcs	r0, #1
 80009b8:	2000      	movcc	r0, #0
 80009ba:	603d      	str	r5, [r7, #0]
 80009bc:	bb28      	cbnz	r0, 8000a0a <_ZN6braids16AnalogOscillator9RenderSawEPKhPsPhj+0xda>
 80009be:	f1b9 0f00 	cmp.w	r9, #0
 80009c2:	d003      	beq.n	80009cc <_ZN6braids16AnalogOscillator9RenderSawEPKhPsPhj+0x9c>
 80009c4:	f889 0000 	strb.w	r0, [r9]
 80009c8:	f109 0901 	add.w	r9, r9, #1
 80009cc:	b133      	cbz	r3, 80009dc <_ZN6braids16AnalogOscillator9RenderSawEPKhPsPhj+0xac>
 80009ce:	ea4f 4318 	mov.w	r3, r8, lsr #16
 80009d2:	435c      	muls	r4, r3
 80009d4:	f04f 0300 	mov.w	r3, #0
 80009d8:	603c      	str	r4, [r7, #0]
 80009da:	733b      	strb	r3, [r7, #12]
 80009dc:	9802      	ldr	r0, [sp, #8]
 80009de:	f5a6 4680 	sub.w	r6, r6, #16384	; 0x4000
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	0076      	lsls	r6, r6, #1
 80009e6:	f820 6b02 	strh.w	r6, [r0], #2
 80009ea:	9002      	str	r0, [sp, #8]
 80009ec:	eb02 4653 	add.w	r6, r2, r3, lsr #17
 80009f0:	e7ba      	b.n	8000968 <_ZN6braids16AnalogOscillator9RenderSawEPKhPsPhj+0x38>
 80009f2:	9401      	str	r4, [sp, #4]
 80009f4:	4623      	mov	r3, r4
 80009f6:	4622      	mov	r2, r4
 80009f8:	e7da      	b.n	80009b0 <_ZN6braids16AnalogOscillator9RenderSawEPKhPsPhj+0x80>
 80009fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80009fc:	61be      	str	r6, [r7, #24]
 80009fe:	fb03 a30b 	mla	r3, r3, fp, sl
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	b005      	add	sp, #20
 8000a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a0a:	f1b9 0f00 	cmp.w	r9, #0
 8000a0e:	d008      	beq.n	8000a22 <_ZN6braids16AnalogOscillator9RenderSawEPKhPsPhj+0xf2>
 8000a10:	ea4f 10d8 	mov.w	r0, r8, lsr #7
 8000a14:	fbb5 f5f0 	udiv	r5, r5, r0
 8000a18:	3501      	adds	r5, #1
 8000a1a:	f889 5000 	strb.w	r5, [r9]
 8000a1e:	f109 0901 	add.w	r9, r9, #1
 8000a22:	9801      	ldr	r0, [sp, #4]
 8000a24:	b908      	cbnz	r0, 8000a2a <_ZN6braids16AnalogOscillator9RenderSawEPKhPsPhj+0xfa>
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d1d1      	bne.n	80009ce <_ZN6braids16AnalogOscillator9RenderSawEPKhPsPhj+0x9e>
 8000a2a:	6838      	ldr	r0, [r7, #0]
 8000a2c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000a30:	fbb0 f5f5 	udiv	r5, r0, r5
 8000a34:	4628      	mov	r0, r5
 8000a36:	9301      	str	r3, [sp, #4]
 8000a38:	f7ff fd9c 	bl	8000574 <_ZN6braids16AnalogOscillator14ThisBlepSampleEm.isra.0>
 8000a3c:	1a36      	subs	r6, r6, r0
 8000a3e:	4628      	mov	r0, r5
 8000a40:	f7ff fda0 	bl	8000584 <_ZN6braids16AnalogOscillator14NextBlepSampleEm.isra.1>
 8000a44:	9b01      	ldr	r3, [sp, #4]
 8000a46:	1a12      	subs	r2, r2, r0
 8000a48:	e7c0      	b.n	80009cc <_ZN6braids16AnalogOscillator9RenderSawEPKhPsPhj+0x9c>

08000a4a <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj>:
 8000a4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a4e:	4698      	mov	r8, r3
 8000a50:	e9d0 3901 	ldrd	r3, r9, [r0, #4]
 8000a54:	b089      	sub	sp, #36	; 0x24
 8000a56:	454b      	cmp	r3, r9
 8000a58:	9205      	str	r2, [sp, #20]
 8000a5a:	bf9d      	ittte	ls
 8000a5c:	9a12      	ldrls	r2, [sp, #72]	; 0x48
 8000a5e:	eba9 0303 	subls.w	r3, r9, r3
 8000a62:	fbb3 f3f2 	udivls	r3, r3, r2
 8000a66:	9a12      	ldrhi	r2, [sp, #72]	; 0x48
 8000a68:	bf86      	itte	hi
 8000a6a:	eba3 0309 	subhi.w	r3, r3, r9
 8000a6e:	fbb3 f3f2 	udivhi	r3, r3, r2
 8000a72:	43db      	mvnls	r3, r3
 8000a74:	9304      	str	r3, [sp, #16]
 8000a76:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a80:	bfbc      	itt	lt
 8000a82:	f44f 6380 	movlt.w	r3, #1024	; 0x400
 8000a86:	81c3      	strhlt	r3, [r0, #14]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	46cb      	mov	fp, r9
 8000a8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8000a8e:	6985      	ldr	r5, [r0, #24]
 8000a90:	4413      	add	r3, r2
 8000a92:	9102      	str	r1, [sp, #8]
 8000a94:	9306      	str	r3, [sp, #24]
 8000a96:	9b06      	ldr	r3, [sp, #24]
 8000a98:	9a02      	ldr	r2, [sp, #8]
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	f000 8095 	beq.w	8000bca <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0x180>
 8000aa0:	9b04      	ldr	r3, [sp, #16]
 8000aa2:	f9b4 600e 	ldrsh.w	r6, [r4, #14]
 8000aa6:	449b      	add	fp, r3
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000aae:	0436      	lsls	r6, r6, #16
 8000ab0:	9302      	str	r3, [sp, #8]
 8000ab2:	ea4f 431b 	mov.w	r3, fp, lsr #16
 8000ab6:	6827      	ldr	r7, [r4, #0]
 8000ab8:	9303      	str	r3, [sp, #12]
 8000aba:	2900      	cmp	r1, #0
 8000abc:	d033      	beq.n	8000b26 <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0xdc>
 8000abe:	3901      	subs	r1, #1
 8000ac0:	0249      	lsls	r1, r1, #9
 8000ac2:	f5c1 437f 	rsb	r3, r1, #65280	; 0xff00
 8000ac6:	9a03      	ldr	r2, [sp, #12]
 8000ac8:	33ff      	adds	r3, #255	; 0xff
 8000aca:	4353      	muls	r3, r2
 8000acc:	19db      	adds	r3, r3, r7
 8000ace:	d203      	bcs.n	8000ad8 <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0x8e>
 8000ad0:	7b22      	ldrb	r2, [r4, #12]
 8000ad2:	b31a      	cbz	r2, 8000b1c <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0xd2>
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e000      	b.n	8000ada <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0x90>
 8000ad8:	2201      	movs	r2, #1
 8000ada:	1b98      	subs	r0, r3, r6
 8000adc:	0c9b      	lsrs	r3, r3, #18
 8000ade:	eb03 4390 	add.w	r3, r3, r0, lsr #18
 8000ae2:	9201      	str	r2, [sp, #4]
 8000ae4:	4608      	mov	r0, r1
 8000ae6:	4272      	negs	r2, r6
 8000ae8:	ebc3 4292 	rsb	r2, r3, r2, lsr #18
 8000aec:	f7ff fd42 	bl	8000574 <_ZN6braids16AnalogOscillator14ThisBlepSampleEm.isra.0>
 8000af0:	4350      	muls	r0, r2
 8000af2:	eb05 35e0 	add.w	r5, r5, r0, asr #15
 8000af6:	4608      	mov	r0, r1
 8000af8:	f7ff fd44 	bl	8000584 <_ZN6braids16AnalogOscillator14NextBlepSampleEm.isra.1>
 8000afc:	2301      	movs	r3, #1
 8000afe:	4342      	muls	r2, r0
 8000b00:	13d2      	asrs	r2, r2, #15
 8000b02:	eb1b 0007 	adds.w	r0, fp, r7
 8000b06:	bf2c      	ite	cs
 8000b08:	2701      	movcs	r7, #1
 8000b0a:	2700      	movcc	r7, #0
 8000b0c:	6020      	str	r0, [r4, #0]
 8000b0e:	2f00      	cmp	r7, #0
 8000b10:	d164      	bne.n	8000bdc <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0x192>
 8000b12:	f1b8 0f00 	cmp.w	r8, #0
 8000b16:	d10a      	bne.n	8000b2e <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0xe4>
 8000b18:	4647      	mov	r7, r8
 8000b1a:	e00c      	b.n	8000b36 <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0xec>
 8000b1c:	429e      	cmp	r6, r3
 8000b1e:	bf8c      	ite	hi
 8000b20:	2200      	movhi	r2, #0
 8000b22:	2201      	movls	r2, #1
 8000b24:	e7d9      	b.n	8000ada <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0x90>
 8000b26:	9101      	str	r1, [sp, #4]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	460a      	mov	r2, r1
 8000b2c:	e7e9      	b.n	8000b02 <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0xb8>
 8000b2e:	f888 7000 	strb.w	r7, [r8]
 8000b32:	f108 0801 	add.w	r8, r8, #1
 8000b36:	9801      	ldr	r0, [sp, #4]
 8000b38:	b900      	cbnz	r0, 8000b3c <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0xf2>
 8000b3a:	bb93      	cbnz	r3, 8000ba2 <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0x158>
 8000b3c:	7b20      	ldrb	r0, [r4, #12]
 8000b3e:	b9b0      	cbnz	r0, 8000b6e <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0x124>
 8000b40:	6820      	ldr	r0, [r4, #0]
 8000b42:	42b0      	cmp	r0, r6
 8000b44:	d32c      	bcc.n	8000ba0 <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0x156>
 8000b46:	9307      	str	r3, [sp, #28]
 8000b48:	9b03      	ldr	r3, [sp, #12]
 8000b4a:	eba0 0a06 	sub.w	sl, r0, r6
 8000b4e:	fbba faf3 	udiv	sl, sl, r3
 8000b52:	4650      	mov	r0, sl
 8000b54:	f7ff fd0e 	bl	8000574 <_ZN6braids16AnalogOscillator14ThisBlepSampleEm.isra.0>
 8000b58:	eba5 0560 	sub.w	r5, r5, r0, asr #1
 8000b5c:	4650      	mov	r0, sl
 8000b5e:	f7ff fd11 	bl	8000584 <_ZN6braids16AnalogOscillator14NextBlepSampleEm.isra.1>
 8000b62:	f04f 0301 	mov.w	r3, #1
 8000b66:	7323      	strb	r3, [r4, #12]
 8000b68:	9b07      	ldr	r3, [sp, #28]
 8000b6a:	eba2 0260 	sub.w	r2, r2, r0, asr #1
 8000b6e:	7b20      	ldrb	r0, [r4, #12]
 8000b70:	2800      	cmp	r0, #0
 8000b72:	d0e0      	beq.n	8000b36 <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0xec>
 8000b74:	b1a7      	cbz	r7, 8000ba0 <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0x156>
 8000b76:	9307      	str	r3, [sp, #28]
 8000b78:	6827      	ldr	r7, [r4, #0]
 8000b7a:	9b03      	ldr	r3, [sp, #12]
 8000b7c:	fbb7 f7f3 	udiv	r7, r7, r3
 8000b80:	4638      	mov	r0, r7
 8000b82:	f7ff fcf7 	bl	8000574 <_ZN6braids16AnalogOscillator14ThisBlepSampleEm.isra.0>
 8000b86:	eba5 0560 	sub.w	r5, r5, r0, asr #1
 8000b8a:	4638      	mov	r0, r7
 8000b8c:	f7ff fcfa 	bl	8000584 <_ZN6braids16AnalogOscillator14NextBlepSampleEm.isra.1>
 8000b90:	f04f 0300 	mov.w	r3, #0
 8000b94:	eba2 0260 	sub.w	r2, r2, r0, asr #1
 8000b98:	7323      	strb	r3, [r4, #12]
 8000b9a:	2700      	movs	r7, #0
 8000b9c:	9b07      	ldr	r3, [sp, #28]
 8000b9e:	e7ca      	b.n	8000b36 <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0xec>
 8000ba0:	b12b      	cbz	r3, 8000bae <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0x164>
 8000ba2:	9b03      	ldr	r3, [sp, #12]
 8000ba4:	434b      	muls	r3, r1
 8000ba6:	6023      	str	r3, [r4, #0]
 8000ba8:	f04f 0300 	mov.w	r3, #0
 8000bac:	7323      	strb	r3, [r4, #12]
 8000bae:	6823      	ldr	r3, [r4, #0]
 8000bb0:	9905      	ldr	r1, [sp, #20]
 8000bb2:	f5a5 4580 	sub.w	r5, r5, #16384	; 0x4000
 8000bb6:	1b9e      	subs	r6, r3, r6
 8000bb8:	006d      	lsls	r5, r5, #1
 8000bba:	0c9b      	lsrs	r3, r3, #18
 8000bbc:	f821 5b02 	strh.w	r5, [r1], #2
 8000bc0:	eb03 4396 	add.w	r3, r3, r6, lsr #18
 8000bc4:	9105      	str	r1, [sp, #20]
 8000bc6:	189d      	adds	r5, r3, r2
 8000bc8:	e765      	b.n	8000a96 <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0x4c>
 8000bca:	9b04      	ldr	r3, [sp, #16]
 8000bcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8000bce:	61a5      	str	r5, [r4, #24]
 8000bd0:	fb02 9303 	mla	r3, r2, r3, r9
 8000bd4:	60a3      	str	r3, [r4, #8]
 8000bd6:	b009      	add	sp, #36	; 0x24
 8000bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bdc:	f1b8 0f00 	cmp.w	r8, #0
 8000be0:	d008      	beq.n	8000bf4 <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0x1aa>
 8000be2:	ea4f 17db 	mov.w	r7, fp, lsr #7
 8000be6:	fbb0 f7f7 	udiv	r7, r0, r7
 8000bea:	3701      	adds	r7, #1
 8000bec:	f888 7000 	strb.w	r7, [r8]
 8000bf0:	f108 0801 	add.w	r8, r8, #1
 8000bf4:	2701      	movs	r7, #1
 8000bf6:	e79e      	b.n	8000b36 <_ZN6braids16AnalogOscillator17RenderVariableSawEPKhPsPhj+0xec>

08000bf8 <_ZN6braids16AnalogOscillator21ComputePhaseIncrementEs>:
 8000bf8:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000bfc:	4299      	cmp	r1, r3
 8000bfe:	bfa8      	it	ge
 8000c00:	4619      	movge	r1, r3
 8000c02:	2000      	movs	r0, #0
 8000c04:	b510      	push	{r4, lr}
 8000c06:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
 8000c0a:	f511 61c0 	adds.w	r1, r1, #1536	; 0x600
 8000c0e:	f100 0001 	add.w	r0, r0, #1
 8000c12:	d4fa      	bmi.n	8000c0a <_ZN6braids16AnalogOscillator21ComputePhaseIncrementEs+0x12>
 8000c14:	4c07      	ldr	r4, [pc, #28]	; (8000c34 <_ZN6braids16AnalogOscillator21ComputePhaseIncrementEs+0x3c>)
 8000c16:	110a      	asrs	r2, r1, #4
 8000c18:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 8000c1c:	3201      	adds	r2, #1
 8000c1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8000c22:	f001 010f 	and.w	r1, r1, #15
 8000c26:	1ad2      	subs	r2, r2, r3
 8000c28:	4351      	muls	r1, r2
 8000c2a:	eb03 1121 	add.w	r1, r3, r1, asr #4
 8000c2e:	fa21 f000 	lsr.w	r0, r1, r0
 8000c32:	bd10      	pop	{r4, pc}
 8000c34:	0800bca8 	.word	0x0800bca8

08000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>:
 8000c38:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c3c:	4604      	mov	r4, r0
 8000c3e:	469a      	mov	sl, r3
 8000c40:	7f00      	ldrb	r0, [r0, #28]
 8000c42:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x8c>)
 8000c44:	4691      	mov	r9, r2
 8000c46:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]
 8000c4a:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 8000c4e:	7f63      	ldrb	r3, [r4, #29]
 8000c50:	4688      	mov	r8, r1
 8000c52:	4283      	cmp	r3, r0
 8000c54:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8000c58:	6857      	ldr	r7, [r2, #4]
 8000c5a:	d00f      	beq.n	8000c7c <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x44>
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e9c4 1300 	strd	r1, r3, [r4]
 8000c64:	f24c 0301 	movw	r3, #49153	; 0xc001
 8000c68:	82a3      	strh	r3, [r4, #20]
 8000c6a:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000c6e:	7321      	strb	r1, [r4, #12]
 8000c70:	8221      	strh	r1, [r4, #16]
 8000c72:	81e1      	strh	r1, [r4, #14]
 8000c74:	8261      	strh	r1, [r4, #18]
 8000c76:	82e3      	strh	r3, [r4, #22]
 8000c78:	61a1      	str	r1, [r4, #24]
 8000c7a:	7760      	strb	r0, [r4, #29]
 8000c7c:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 8000c80:	4620      	mov	r0, r4
 8000c82:	4631      	mov	r1, r6
 8000c84:	f7ff ffb8 	bl	8000bf8 <_ZN6braids16AnalogOscillator21ComputePhaseIncrementEs>
 8000c88:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
 8000c8c:	6060      	str	r0, [r4, #4]
 8000c8e:	dd14      	ble.n	8000cba <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x82>
 8000c90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c94:	82e3      	strh	r3, [r4, #22]
 8000c96:	107b      	asrs	r3, r7, #1
 8000c98:	07fa      	lsls	r2, r7, #31
 8000c9a:	eb04 0003 	add.w	r0, r4, r3
 8000c9e:	bf48      	it	mi
 8000ca0:	58e3      	ldrmi	r3, [r4, r3]
 8000ca2:	464a      	mov	r2, r9
 8000ca4:	bf48      	it	mi
 8000ca6:	595d      	ldrmi	r5, [r3, r5]
 8000ca8:	4641      	mov	r1, r8
 8000caa:	4653      	mov	r3, sl
 8000cac:	46ac      	mov	ip, r5
 8000cae:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8000cb2:	b001      	add	sp, #4
 8000cb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cb8:	4760      	bx	ip
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	daeb      	bge.n	8000c96 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x5e>
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e7e8      	b.n	8000c94 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x5c>
 8000cc2:	bf00      	nop
 8000cc4:	20000000 	.word	0x20000000

08000cc8 <_ZN6braids17DigitalOscillator9RenderToyEPKhPsj>:
 8000cc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ccc:	4691      	mov	r9, r2
 8000cce:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 8000cd2:	6842      	ldr	r2, [r0, #4]
 8000cd4:	11bf      	asrs	r7, r7, #6
 8000cd6:	ea4f 0c92 	mov.w	ip, r2, lsr #2
 8000cda:	f5c7 7700 	rsb	r7, r7, #512	; 0x200
 8000cde:	440b      	add	r3, r1
 8000ce0:	ea4f 058c 	mov.w	r5, ip, lsl #2
 8000ce4:	6802      	ldr	r2, [r0, #0]
 8000ce6:	8c46      	ldrh	r6, [r0, #34]	; 0x22
 8000ce8:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000cec:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8000d6c <_ZN6braids17DigitalOscillator9RenderToyEPKhPsj+0xa4>
 8000cf0:	f8c0 c004 	str.w	ip, [r0, #4]
 8000cf4:	b2bf      	uxth	r7, r7
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	9501      	str	r5, [sp, #4]
 8000cfa:	9b00      	ldr	r3, [sp, #0]
 8000cfc:	428b      	cmp	r3, r1
 8000cfe:	d02d      	beq.n	8000d5c <_ZN6braids17DigitalOscillator9RenderToyEPKhPsj+0x94>
 8000d00:	f811 5b01 	ldrb.w	r5, [r1], #1
 8000d04:	f04f 0e00 	mov.w	lr, #0
 8000d08:	2d00      	cmp	r5, #0
 8000d0a:	bf18      	it	ne
 8000d0c:	2200      	movne	r2, #0
 8000d0e:	4675      	mov	r5, lr
 8000d10:	4690      	mov	r8, r2
 8000d12:	42b7      	cmp	r7, r6
 8000d14:	44e0      	add	r8, ip
 8000d16:	d80d      	bhi.n	8000d34 <_ZN6braids17DigitalOscillator9RenderToyEPKhPsj+0x6c>
 8000d18:	f9b0 b00e 	ldrsh.w	fp, [r0, #14]
 8000d1c:	f3cb 2407 	ubfx	r4, fp, #8, #8
 8000d20:	0066      	lsls	r6, r4, #1
 8000d22:	ea86 6618 	eor.w	r6, r6, r8, lsr #24
 8000d26:	ea26 0404 	bic.w	r4, r6, r4
 8000d2a:	2600      	movs	r6, #0
 8000d2c:	f3cb 2b46 	ubfx	fp, fp, #9, #7
 8000d30:	445c      	add	r4, fp
 8000d32:	b2e4      	uxtb	r4, r4
 8000d34:	f85a 302e 	ldr.w	r3, [sl, lr, lsl #2]
 8000d38:	f10e 0e01 	add.w	lr, lr, #1
 8000d3c:	3601      	adds	r6, #1
 8000d3e:	f1be 0f04 	cmp.w	lr, #4
 8000d42:	fb03 5504 	mla	r5, r3, r4, r5
 8000d46:	b2b6      	uxth	r6, r6
 8000d48:	d1e3      	bne.n	8000d12 <_ZN6braids17DigitalOscillator9RenderToyEPKhPsj+0x4a>
 8000d4a:	122d      	asrs	r5, r5, #8
 8000d4c:	9b01      	ldr	r3, [sp, #4]
 8000d4e:	f5a5 45dc 	sub.w	r5, r5, #28160	; 0x6e00
 8000d52:	3d30      	subs	r5, #48	; 0x30
 8000d54:	441a      	add	r2, r3
 8000d56:	f829 5b02 	strh.w	r5, [r9], #2
 8000d5a:	e7ce      	b.n	8000cfa <_ZN6braids17DigitalOscillator9RenderToyEPKhPsj+0x32>
 8000d5c:	f880 4020 	strb.w	r4, [r0, #32]
 8000d60:	8446      	strh	r6, [r0, #34]	; 0x22
 8000d62:	6002      	str	r2, [r0, #0]
 8000d64:	b003      	add	sp, #12
 8000d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d6a:	bf00      	nop
 8000d6c:	08007500 	.word	0x08007500

08000d70 <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj>:
 8000d70:	f04f 0c00 	mov.w	ip, #0
 8000d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d78:	260c      	movs	r6, #12
 8000d7a:	46e1      	mov	r9, ip
 8000d7c:	f44f 0a80 	mov.w	sl, #4194304	; 0x400000
 8000d80:	4693      	mov	fp, r2
 8000d82:	f9b0 20d0 	ldrsh.w	r2, [r0, #208]	; 0xd0
 8000d86:	b09d      	sub	sp, #116	; 0x74
 8000d88:	9200      	str	r2, [sp, #0]
 8000d8a:	6842      	ldr	r2, [r0, #4]
 8000d8c:	f9b0 700e 	ldrsh.w	r7, [r0, #14]
 8000d90:	0052      	lsls	r2, r2, #1
 8000d92:	9203      	str	r2, [sp, #12]
 8000d94:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 8000d98:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 8000d9c:	fb06 f602 	mul.w	r6, r6, r2
 8000da0:	ea4f 12a7 	mov.w	r2, r7, asr #6
 8000da4:	bfa4      	itt	ge
 8000da6:	f5c2 72ff 	rsbge	r2, r2, #510	; 0x1fe
 8000daa:	3201      	addge	r2, #1
 8000dac:	4352      	muls	r2, r2
 8000dae:	fb07 f807 	mul.w	r8, r7, r7
 8000db2:	1292      	asrs	r2, r2, #10
 8000db4:	4352      	muls	r2, r2
 8000db6:	09f6      	lsrs	r6, r6, #7
 8000db8:	1074      	asrs	r4, r6, #1
 8000dba:	ea4f 38e8 	mov.w	r8, r8, asr #15
 8000dbe:	f1c6 0e00 	rsb	lr, r6, #0
 8000dc2:	6805      	ldr	r5, [r0, #0]
 8000dc4:	f5a6 66c0 	sub.w	r6, r6, #1536	; 0x600
 8000dc8:	3204      	adds	r2, #4
 8000dca:	ea4f 18c8 	mov.w	r8, r8, lsl #7
 8000dce:	1b36      	subs	r6, r6, r4
 8000dd0:	eb06 040e 	add.w	r4, r6, lr
 8000dd4:	fb0e f70e 	mul.w	r7, lr, lr
 8000dd8:	4364      	muls	r4, r4
 8000dda:	fb97 f7f2 	sdiv	r7, r7, r2
 8000dde:	fb94 f4f2 	sdiv	r4, r4, r2
 8000de2:	3780      	adds	r7, #128	; 0x80
 8000de4:	3480      	adds	r4, #128	; 0x80
 8000de6:	fb98 f4f4 	sdiv	r4, r8, r4
 8000dea:	fb9a f7f7 	sdiv	r7, sl, r7
 8000dee:	4427      	add	r7, r4
 8000df0:	ac04      	add	r4, sp, #16
 8000df2:	f844 702c 	str.w	r7, [r4, ip, lsl #2]
 8000df6:	f10c 0c01 	add.w	ip, ip, #1
 8000dfa:	f1bc 0f0c 	cmp.w	ip, #12
 8000dfe:	44b9      	add	r9, r7
 8000e00:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
 8000e04:	d1e4      	bne.n	8000dd0 <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj+0x60>
 8000e06:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000e0a:	fb92 f9f9 	sdiv	r9, r2, r9
 8000e0e:	9a03      	ldr	r2, [sp, #12]
 8000e10:	f10d 0e40 	add.w	lr, sp, #64	; 0x40
 8000e14:	0c17      	lsrs	r7, r2, #16
 8000e16:	f100 0220 	add.w	r2, r0, #32
 8000e1a:	9202      	str	r2, [sp, #8]
 8000e1c:	4694      	mov	ip, r2
 8000e1e:	2200      	movs	r2, #0
 8000e20:	463e      	mov	r6, r7
 8000e22:	4690      	mov	r8, r2
 8000e24:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
 8000e28:	ac04      	add	r4, sp, #16
 8000e2a:	bf9f      	itttt	ls
 8000e2c:	f854 4022 	ldrls.w	r4, [r4, r2, lsl #2]
 8000e30:	f10d 0a10 	addls.w	sl, sp, #16
 8000e34:	fb04 f409 	mulls.w	r4, r4, r9
 8000e38:	1424      	asrls	r4, r4, #16
 8000e3a:	bf8c      	ite	hi
 8000e3c:	f844 8022 	strhi.w	r8, [r4, r2, lsl #2]
 8000e40:	f84a 4022 	strls.w	r4, [sl, r2, lsl #2]
 8000e44:	f85c 4b04 	ldr.w	r4, [ip], #4
 8000e48:	443e      	add	r6, r7
 8000e4a:	f84e 4022 	str.w	r4, [lr, r2, lsl #2]
 8000e4e:	3201      	adds	r2, #1
 8000e50:	2a0c      	cmp	r2, #12
 8000e52:	d1e7      	bne.n	8000e24 <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj+0xb4>
 8000e54:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8000f2c <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj+0x1bc>
 8000e58:	f10b 0204 	add.w	r2, fp, #4
 8000e5c:	f10d 0a40 	add.w	sl, sp, #64	; 0x40
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d04e      	beq.n	8000f02 <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj+0x192>
 8000e64:	780c      	ldrb	r4, [r1, #0]
 8000e66:	2c00      	cmp	r4, #0
 8000e68:	d042      	beq.n	8000ef0 <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj+0x180>
 8000e6a:	2500      	movs	r5, #0
 8000e6c:	f101 0801 	add.w	r8, r1, #1
 8000e70:	2600      	movs	r6, #0
 8000e72:	46ac      	mov	ip, r5
 8000e74:	9601      	str	r6, [sp, #4]
 8000e76:	492b      	ldr	r1, [pc, #172]	; (8000f24 <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj+0x1b4>)
 8000e78:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
 8000e7c:	f939 401e 	ldrsh.w	r4, [r9, lr, lsl #1]
 8000e80:	f931 b01e 	ldrsh.w	fp, [r1, lr, lsl #1]
 8000e84:	f3cc 2e0f 	ubfx	lr, ip, #8, #16
 8000e88:	ebab 0b04 	sub.w	fp, fp, r4
 8000e8c:	fb0e fe0b 	mul.w	lr, lr, fp
 8000e90:	f85a 7026 	ldr.w	r7, [sl, r6, lsl #2]
 8000e94:	eb04 4e2e 	add.w	lr, r4, lr, asr #16
 8000e98:	fa0f fe8e 	sxth.w	lr, lr
 8000e9c:	fb07 fe0e 	mul.w	lr, r7, lr
 8000ea0:	9901      	ldr	r1, [sp, #4]
 8000ea2:	44ac      	add	ip, r5
 8000ea4:	eb01 31ee 	add.w	r1, r1, lr, asr #15
 8000ea8:	9101      	str	r1, [sp, #4]
 8000eaa:	a904      	add	r1, sp, #16
 8000eac:	f851 4026 	ldr.w	r4, [r1, r6, lsl #2]
 8000eb0:	1be4      	subs	r4, r4, r7
 8000eb2:	eb07 2424 	add.w	r4, r7, r4, asr #8
 8000eb6:	f84a 4026 	str.w	r4, [sl, r6, lsl #2]
 8000eba:	3601      	adds	r6, #1
 8000ebc:	2e0c      	cmp	r6, #12
 8000ebe:	d1da      	bne.n	8000e76 <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj+0x106>
 8000ec0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000ec4:	9c01      	ldr	r4, [sp, #4]
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	428c      	cmp	r4, r1
 8000eca:	bfa8      	it	ge
 8000ecc:	460c      	movge	r4, r1
 8000ece:	4621      	mov	r1, r4
 8000ed0:	4c15      	ldr	r4, [pc, #84]	; (8000f28 <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj+0x1b8>)
 8000ed2:	3204      	adds	r2, #4
 8000ed4:	42a1      	cmp	r1, r4
 8000ed6:	bfb8      	it	lt
 8000ed8:	4621      	movlt	r1, r4
 8000eda:	9c00      	ldr	r4, [sp, #0]
 8000edc:	440c      	add	r4, r1
 8000ede:	1064      	asrs	r4, r4, #1
 8000ee0:	b209      	sxth	r1, r1
 8000ee2:	f822 1c06 	strh.w	r1, [r2, #-6]
 8000ee6:	f822 4c08 	strh.w	r4, [r2, #-8]
 8000eea:	9100      	str	r1, [sp, #0]
 8000eec:	4641      	mov	r1, r8
 8000eee:	e7b7      	b.n	8000e60 <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj+0xf0>
 8000ef0:	f101 0802 	add.w	r8, r1, #2
 8000ef4:	7849      	ldrb	r1, [r1, #1]
 8000ef6:	b911      	cbnz	r1, 8000efe <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj+0x18e>
 8000ef8:	9903      	ldr	r1, [sp, #12]
 8000efa:	440d      	add	r5, r1
 8000efc:	e7b8      	b.n	8000e70 <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj+0x100>
 8000efe:	4625      	mov	r5, r4
 8000f00:	e7b6      	b.n	8000e70 <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj+0x100>
 8000f02:	9a00      	ldr	r2, [sp, #0]
 8000f04:	6005      	str	r5, [r0, #0]
 8000f06:	f8a0 20d0 	strh.w	r2, [r0, #208]	; 0xd0
 8000f0a:	a910      	add	r1, sp, #64	; 0x40
 8000f0c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000f10:	9802      	ldr	r0, [sp, #8]
 8000f12:	3301      	adds	r3, #1
 8000f14:	f840 2b04 	str.w	r2, [r0], #4
 8000f18:	2b0c      	cmp	r3, #12
 8000f1a:	9002      	str	r0, [sp, #8]
 8000f1c:	d1f6      	bne.n	8000f0c <_ZN6braids17DigitalOscillator15RenderHarmonicsEPKhPsj+0x19c>
 8000f1e:	b01d      	add	sp, #116	; 0x74
 8000f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f24:	0800ca60 	.word	0x0800ca60
 8000f28:	ffff8001 	.word	0xffff8001
 8000f2c:	0800ca5e 	.word	0x0800ca5e

08000f30 <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj>:
 8000f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f34:	b08f      	sub	sp, #60	; 0x3c
 8000f36:	9303      	str	r3, [sp, #12]
 8000f38:	7f03      	ldrb	r3, [r0, #28]
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	9205      	str	r2, [sp, #20]
 8000f3e:	f500 7aca 	add.w	sl, r0, #404	; 0x194
 8000f42:	f200 5594 	addw	r5, r0, #1428	; 0x594
 8000f46:	b19b      	cbz	r3, 8000f70 <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj+0x40>
 8000f48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4650      	mov	r0, sl
 8000f50:	f006 f971 	bl	8007236 <memset>
 8000f54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4628      	mov	r0, r5
 8000f5c:	f006 f96b 	bl	8007236 <memset>
 8000f60:	22c4      	movs	r2, #196	; 0xc4
 8000f62:	2100      	movs	r1, #0
 8000f64:	f104 0020 	add.w	r0, r4, #32
 8000f68:	f006 f965 	bl	8007236 <memset>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	7723      	strb	r3, [r4, #28]
 8000f70:	f994 300d 	ldrsb.w	r3, [r4, #13]
 8000f74:	f9b4 600e 	ldrsh.w	r6, [r4, #14]
 8000f78:	f1c3 03ac 	rsb	r3, r3, #172	; 0xac
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	9308      	str	r3, [sp, #32]
 8000f80:	8c23      	ldrh	r3, [r4, #32]
 8000f82:	1276      	asrs	r6, r6, #9
 8000f84:	9302      	str	r3, [sp, #8]
 8000f86:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8000f88:	1db2      	adds	r2, r6, #6
 8000f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8000f8c:	68a3      	ldr	r3, [r4, #8]
 8000f8e:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
 8000f92:	085b      	lsrs	r3, r3, #1
 8000f94:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
 8000f98:	0a1e      	lsrs	r6, r3, #8
 8000f9a:	4356      	muls	r6, r2
 8000f9c:	e9d4 1909 	ldrd	r1, r9, [r4, #36]	; 0x24
 8000fa0:	4867      	ldr	r0, [pc, #412]	; (8001140 <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj+0x210>)
 8000fa2:	4f68      	ldr	r7, [pc, #416]	; (8001144 <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj+0x214>)
 8000fa4:	1b9a      	subs	r2, r3, r6
 8000fa6:	4282      	cmp	r2, r0
 8000fa8:	d801      	bhi.n	8000fae <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj+0x7e>
 8000faa:	42be      	cmp	r6, r7
 8000fac:	d902      	bls.n	8000fb4 <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj+0x84>
 8000fae:	085b      	lsrs	r3, r3, #1
 8000fb0:	0876      	lsrs	r6, r6, #1
 8000fb2:	e7f7      	b.n	8000fa4 <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj+0x74>
 8000fb4:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8000fb8:	f04f 0800 	mov.w	r8, #0
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	9b02      	ldr	r3, [sp, #8]
 8000fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000fc4:	eba3 4316 	sub.w	r3, r3, r6, lsr #16
 8000fc8:	930a      	str	r3, [sp, #40]	; 0x28
 8000fca:	9b02      	ldr	r3, [sp, #8]
 8000fcc:	b2b6      	uxth	r6, r6
 8000fce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000fd2:	eba3 4312 	sub.w	r3, r3, r2, lsr #16
 8000fd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8000fd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fdc:	b292      	uxth	r2, r2
 8000fde:	9606      	str	r6, [sp, #24]
 8000fe0:	1b9e      	subs	r6, r3, r6
 8000fe2:	1a9b      	subs	r3, r3, r2
 8000fe4:	960c      	str	r6, [sp, #48]	; 0x30
 8000fe6:	9207      	str	r2, [sp, #28]
 8000fe8:	930d      	str	r3, [sp, #52]	; 0x34
 8000fea:	9a02      	ldr	r2, [sp, #8]
 8000fec:	fa1f f388 	uxth.w	r3, r8
 8000ff0:	eb03 0e02 	add.w	lr, r3, r2
 8000ff4:	fa1f fe8e 	uxth.w	lr, lr
 8000ff8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ffa:	f3ce 060b 	ubfx	r6, lr, #0, #12
 8000ffe:	189a      	adds	r2, r3, r2
 8001000:	9604      	str	r6, [sp, #16]
 8001002:	9e03      	ldr	r6, [sp, #12]
 8001004:	b292      	uxth	r2, r2
 8001006:	ea4f 0b62 	mov.w	fp, r2, asr #1
 800100a:	2e00      	cmp	r6, #0
 800100c:	f000 8087 	beq.w	800111e <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj+0x1ee>
 8001010:	e9d4 6700 	ldrd	r6, r7, [r4]
 8001014:	443e      	add	r6, r7
 8001016:	6026      	str	r6, [r4, #0]
 8001018:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800101a:	9806      	ldr	r0, [sp, #24]
 800101c:	199f      	adds	r7, r3, r6
 800101e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8001020:	b2bf      	uxth	r7, r7
 8001022:	4433      	add	r3, r6
 8001024:	f3c7 0609 	ubfx	r6, r7, #0, #10
 8001028:	3f01      	subs	r7, #1
 800102a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800102e:	f91a 7007 	ldrsb.w	r7, [sl, r7]
 8001032:	f91a 6006 	ldrsb.w	r6, [sl, r6]
 8001036:	4347      	muls	r7, r0
 8001038:	980c      	ldr	r0, [sp, #48]	; 0x30
 800103a:	b29b      	uxth	r3, r3
 800103c:	fb00 7606 	mla	r6, r0, r6, r7
 8001040:	f3c3 070b 	ubfx	r7, r3, #0, #12
 8001044:	3b01      	subs	r3, #1
 8001046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800104a:	56eb      	ldrsb	r3, [r5, r3]
 800104c:	9807      	ldr	r0, [sp, #28]
 800104e:	57ef      	ldrsb	r7, [r5, r7]
 8001050:	4343      	muls	r3, r0
 8001052:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001054:	1436      	asrs	r6, r6, #16
 8001056:	fb00 3707 	mla	r7, r0, r7, r3
 800105a:	f244 6366 	movw	r3, #18022	; 0x4666
 800105e:	4359      	muls	r1, r3
 8001060:	f243 63b8 	movw	r3, #14008	; 0x36b8
 8001064:	0236      	lsls	r6, r6, #8
 8001066:	fb03 1106 	mla	r1, r3, r6, r1
 800106a:	3201      	adds	r2, #1
 800106c:	4b36      	ldr	r3, [pc, #216]	; (8001148 <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj+0x218>)
 800106e:	1052      	asrs	r2, r2, #1
 8001070:	f833 b01b 	ldrh.w	fp, [r3, fp, lsl #1]
 8001074:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001078:	13c9      	asrs	r1, r1, #15
 800107a:	445b      	add	r3, fp
 800107c:	143f      	asrs	r7, r7, #16
 800107e:	023f      	lsls	r7, r7, #8
 8001080:	eb01 0353 	add.w	r3, r1, r3, lsr #1
 8001084:	9a08      	ldr	r2, [sp, #32]
 8001086:	443b      	add	r3, r7
 8001088:	435a      	muls	r2, r3
 800108a:	1152      	asrs	r2, r2, #5
 800108c:	2a00      	cmp	r2, #0
 800108e:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8001154 <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj+0x224>
 8001092:	bfb8      	it	lt
 8001094:	4252      	neglt	r2, r2
 8001096:	455a      	cmp	r2, fp
 8001098:	bfa8      	it	ge
 800109a:	465a      	movge	r2, fp
 800109c:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8001158 <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj+0x228>
 80010a0:	1252      	asrs	r2, r2, #9
 80010a2:	f83b 2012 	ldrh.w	r2, [fp, r2, lsl #1]
 80010a6:	9804      	ldr	r0, [sp, #16]
 80010a8:	4353      	muls	r3, r2
 80010aa:	13db      	asrs	r3, r3, #15
 80010ac:	1a5a      	subs	r2, r3, r1
 80010ae:	1bdf      	subs	r7, r3, r7
 80010b0:	f641 1399 	movw	r3, #6553	; 0x1999
 80010b4:	4373      	muls	r3, r6
 80010b6:	f641 3624 	movw	r6, #6948	; 0x1b24
 80010ba:	fb06 f609 	mul.w	r6, r6, r9
 80010be:	1336      	asrs	r6, r6, #12
 80010c0:	eb06 36e3 	add.w	r6, r6, r3, asr #15
 80010c4:	4b21      	ldr	r3, [pc, #132]	; (800114c <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj+0x21c>)
 80010c6:	1212      	asrs	r2, r2, #8
 80010c8:	fb03 f30c 	mul.w	r3, r3, ip
 80010cc:	eb06 3623 	add.w	r6, r6, r3, asr #12
 80010d0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80010d4:	eba6 0c0c 	sub.w	ip, r6, ip
 80010d8:	459c      	cmp	ip, r3
 80010da:	bfa8      	it	ge
 80010dc:	469c      	movge	ip, r3
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj+0x220>)
 80010e0:	542a      	strb	r2, [r5, r0]
 80010e2:	459c      	cmp	ip, r3
 80010e4:	bfb8      	it	lt
 80010e6:	469c      	movlt	ip, r3
 80010e8:	9b01      	ldr	r3, [sp, #4]
 80010ea:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80010ee:	4463      	add	r3, ip
 80010f0:	1058      	asrs	r0, r3, #1
 80010f2:	9b05      	ldr	r3, [sp, #20]
 80010f4:	123f      	asrs	r7, r7, #8
 80010f6:	f80a 700e 	strb.w	r7, [sl, lr]
 80010fa:	f823 0028 	strh.w	r0, [r3, r8, lsl #2]
 80010fe:	fa0f f38c 	sxth.w	r3, ip
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	9b05      	ldr	r3, [sp, #20]
 8001106:	9a01      	ldr	r2, [sp, #4]
 8001108:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800110c:	805a      	strh	r2, [r3, #2]
 800110e:	9b03      	ldr	r3, [sp, #12]
 8001110:	46cc      	mov	ip, r9
 8001112:	3b02      	subs	r3, #2
 8001114:	9303      	str	r3, [sp, #12]
 8001116:	f108 0801 	add.w	r8, r8, #1
 800111a:	46b1      	mov	r9, r6
 800111c:	e765      	b.n	8000fea <_ZN6braids17DigitalOscillator11RenderBowedEPKhPsj+0xba>
 800111e:	f5bb 7f34 	cmp.w	fp, #720	; 0x2d0
 8001122:	bfa8      	it	ge
 8001124:	f44f 62b4 	movge.w	r2, #1440	; 0x5a0
 8001128:	9b04      	ldr	r3, [sp, #16]
 800112a:	8462      	strh	r2, [r4, #34]	; 0x22
 800112c:	8423      	strh	r3, [r4, #32]
 800112e:	9b01      	ldr	r3, [sp, #4]
 8001130:	e9c4 1909 	strd	r1, r9, [r4, #36]	; 0x24
 8001134:	f8c4 c02c 	str.w	ip, [r4, #44]	; 0x2c
 8001138:	8623      	strh	r3, [r4, #48]	; 0x30
 800113a:	b00f      	add	sp, #60	; 0x3c
 800113c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001140:	0fff0000 	.word	0x0fff0000
 8001144:	03ff0000 	.word	0x03ff0000
 8001148:	0800880a 	.word	0x0800880a
 800114c:	fffff471 	.word	0xfffff471
 8001150:	ffff8001 	.word	0xffff8001
 8001154:	0001ffff 	.word	0x0001ffff
 8001158:	08008dea 	.word	0x08008dea

0800115c <_ZN6braids10Excitation7ProcessEv>:
 800115c:	68c2      	ldr	r2, [r0, #12]
 800115e:	6843      	ldr	r3, [r0, #4]
 8001160:	6901      	ldr	r1, [r0, #16]
 8001162:	4353      	muls	r3, r2
 8001164:	6882      	ldr	r2, [r0, #8]
 8001166:	0b1b      	lsrs	r3, r3, #12
 8001168:	2a00      	cmp	r2, #0
 800116a:	60c3      	str	r3, [r0, #12]
 800116c:	dd08      	ble.n	8001180 <_ZN6braids10Excitation7ProcessEv+0x24>
 800116e:	3a01      	subs	r2, #1
 8001170:	6082      	str	r2, [r0, #8]
 8001172:	b92a      	cbnz	r2, 8001180 <_ZN6braids10Excitation7ProcessEv+0x24>
 8001174:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 8001178:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 800117c:	4413      	add	r3, r2
 800117e:	60c3      	str	r3, [r0, #12]
 8001180:	68c0      	ldr	r0, [r0, #12]
 8001182:	2900      	cmp	r1, #0
 8001184:	bfb8      	it	lt
 8001186:	4240      	neglt	r0, r0
 8001188:	4770      	bx	lr

0800118a <_ZN6braids3Svf4InitEv>:
 800118a:	f44f 5284 	mov.w	r2, #4224	; 0x1080
 800118e:	8042      	strh	r2, [r0, #2]
 8001190:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001194:	2300      	movs	r3, #0
 8001196:	8082      	strh	r2, [r0, #4]
 8001198:	2201      	movs	r2, #1
 800119a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800119e:	7002      	strb	r2, [r0, #0]
 80011a0:	6083      	str	r3, [r0, #8]
 80011a2:	7702      	strb	r2, [r0, #28]
 80011a4:	4770      	bx	lr

080011a6 <_ZN6braids3Svf13set_frequencyEs>:
 80011a6:	7803      	ldrb	r3, [r0, #0]
 80011a8:	b923      	cbnz	r3, 80011b4 <_ZN6braids3Svf13set_frequencyEs+0xe>
 80011aa:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80011ae:	1a5b      	subs	r3, r3, r1
 80011b0:	bf18      	it	ne
 80011b2:	2301      	movne	r3, #1
 80011b4:	7003      	strb	r3, [r0, #0]
 80011b6:	8041      	strh	r1, [r0, #2]
 80011b8:	4770      	bx	lr
	...

080011bc <_ZN6braids3Svf7ProcessEl>:
 80011bc:	7802      	ldrb	r2, [r0, #0]
 80011be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c0:	4603      	mov	r3, r0
 80011c2:	b32a      	cbz	r2, 8001210 <_ZN6braids3Svf7ProcessEl+0x54>
 80011c4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80011c8:	4c31      	ldr	r4, [pc, #196]	; (8001290 <_ZN6braids3Svf7ProcessEl+0xd4>)
 80011ca:	0452      	lsls	r2, r2, #17
 80011cc:	0e15      	lsrs	r5, r2, #24
 80011ce:	f834 0015 	ldrh.w	r0, [r4, r5, lsl #1]
 80011d2:	3402      	adds	r4, #2
 80011d4:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 80011d8:	0a12      	lsrs	r2, r2, #8
 80011da:	1a24      	subs	r4, r4, r0
 80011dc:	b292      	uxth	r2, r2
 80011de:	4362      	muls	r2, r4
 80011e0:	eb00 4212 	add.w	r2, r0, r2, lsr #16
 80011e4:	b292      	uxth	r2, r2
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80011ec:	4c29      	ldr	r4, [pc, #164]	; (8001294 <_ZN6braids3Svf7ProcessEl+0xd8>)
 80011ee:	0452      	lsls	r2, r2, #17
 80011f0:	0e15      	lsrs	r5, r2, #24
 80011f2:	f834 0015 	ldrh.w	r0, [r4, r5, lsl #1]
 80011f6:	3402      	adds	r4, #2
 80011f8:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 80011fc:	0a12      	lsrs	r2, r2, #8
 80011fe:	1a24      	subs	r4, r4, r0
 8001200:	b292      	uxth	r2, r2
 8001202:	4362      	muls	r2, r4
 8001204:	eb00 4212 	add.w	r2, r0, r2, lsr #16
 8001208:	b292      	uxth	r2, r2
 800120a:	611a      	str	r2, [r3, #16]
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
 8001210:	689e      	ldr	r6, [r3, #8]
 8001212:	e9d3 4503 	ldrd	r4, r5, [r3, #12]
 8001216:	6958      	ldr	r0, [r3, #20]
 8001218:	b16e      	cbz	r6, 8001236 <_ZN6braids3Svf7ProcessEl+0x7a>
 800121a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800121e:	bfcc      	ite	gt
 8001220:	4602      	movgt	r2, r0
 8001222:	f44f 6200 	movle.w	r2, #2048	; 0x800
 8001226:	1117      	asrs	r7, r2, #4
 8001228:	437e      	muls	r6, r7
 800122a:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800122e:	eb04 2466 	add.w	r4, r4, r6, asr #9
 8001232:	eb05 05e2 	add.w	r5, r5, r2, asr #3
 8001236:	699a      	ldr	r2, [r3, #24]
 8001238:	4355      	muls	r5, r2
 800123a:	eba1 31e5 	sub.w	r1, r1, r5, asr #15
 800123e:	fb04 f502 	mul.w	r5, r4, r2
 8001242:	eb00 30e5 	add.w	r0, r0, r5, asr #15
 8001246:	4d14      	ldr	r5, [pc, #80]	; (8001298 <_ZN6braids3Svf7ProcessEl+0xdc>)
 8001248:	42a8      	cmp	r0, r5
 800124a:	bfb8      	it	lt
 800124c:	4628      	movlt	r0, r5
 800124e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001252:	6158      	str	r0, [r3, #20]
 8001254:	bfa4      	itt	ge
 8001256:	f647 70ff 	movwge	r0, #32767	; 0x7fff
 800125a:	6158      	strge	r0, [r3, #20]
 800125c:	6958      	ldr	r0, [r3, #20]
 800125e:	1a09      	subs	r1, r1, r0
 8001260:	434c      	muls	r4, r1
 8001262:	eb02 32e4 	add.w	r2, r2, r4, asr #15
 8001266:	4c0c      	ldr	r4, [pc, #48]	; (8001298 <_ZN6braids3Svf7ProcessEl+0xdc>)
 8001268:	42a2      	cmp	r2, r4
 800126a:	bfb8      	it	lt
 800126c:	4622      	movlt	r2, r4
 800126e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001272:	619a      	str	r2, [r3, #24]
 8001274:	bfa4      	itt	ge
 8001276:	f647 72ff 	movwge	r2, #32767	; 0x7fff
 800127a:	619a      	strge	r2, [r3, #24]
 800127c:	7f1a      	ldrb	r2, [r3, #28]
 800127e:	2a01      	cmp	r2, #1
 8001280:	d101      	bne.n	8001286 <_ZN6braids3Svf7ProcessEl+0xca>
 8001282:	6998      	ldr	r0, [r3, #24]
 8001284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001286:	2a02      	cmp	r2, #2
 8001288:	bf08      	it	eq
 800128a:	4608      	moveq	r0, r1
 800128c:	e7fa      	b.n	8001284 <_ZN6braids3Svf7ProcessEl+0xc8>
 800128e:	bf00      	nop
 8001290:	08007e04 	.word	0x08007e04
 8001294:	08007a00 	.word	0x08007a00
 8001298:	ffff8001 	.word	0xffff8001

0800129c <_ZN6braids17DigitalOscillator10RenderKickEPKhPsj>:
 800129c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012a0:	4691      	mov	r9, r2
 80012a2:	7ec2      	ldrb	r2, [r0, #27]
 80012a4:	b085      	sub	sp, #20
 80012a6:	4604      	mov	r4, r0
 80012a8:	461f      	mov	r7, r3
 80012aa:	f500 7a9a 	add.w	sl, r0, #308	; 0x134
 80012ae:	b332      	cbz	r2, 80012fe <_ZN6braids17DigitalOscillator10RenderKickEPKhPsj+0x62>
 80012b0:	f640 520c 	movw	r2, #3340	; 0xd0c
 80012b4:	2330      	movs	r3, #48	; 0x30
 80012b6:	f8c0 20e8 	str.w	r2, [r0, #232]	; 0xe8
 80012ba:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80012be:	e9c0 323e 	strd	r3, r2, [r0, #248]	; 0xf8
 80012c2:	f640 72fd 	movw	r2, #4093	; 0xffd
 80012c6:	2500      	movs	r5, #0
 80012c8:	f8c0 2110 	str.w	r2, [r0, #272]	; 0x110
 80012cc:	22c0      	movs	r2, #192	; 0xc0
 80012ce:	f8c0 50e4 	str.w	r5, [r0, #228]	; 0xe4
 80012d2:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
 80012d6:	e9c0 553b 	strd	r5, r5, [r0, #236]	; 0xec
 80012da:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
 80012de:	f8c0 5104 	str.w	r5, [r0, #260]	; 0x104
 80012e2:	f8c0 5114 	str.w	r5, [r0, #276]	; 0x114
 80012e6:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
 80012ea:	4650      	mov	r0, sl
 80012ec:	f7ff ff4d 	bl	800118a <_ZN6braids3Svf4InitEv>
 80012f0:	2240      	movs	r2, #64	; 0x40
 80012f2:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
 80012f6:	2201      	movs	r2, #1
 80012f8:	76e5      	strb	r5, [r4, #27]
 80012fa:	f884 2150 	strb.w	r2, [r4, #336]	; 0x150
 80012fe:	7f22      	ldrb	r2, [r4, #28]
 8001300:	b1ea      	cbz	r2, 800133e <_ZN6braids17DigitalOscillator10RenderKickEPKhPsj+0xa2>
 8001302:	2200      	movs	r2, #0
 8001304:	7722      	strb	r2, [r4, #28]
 8001306:	4a4a      	ldr	r2, [pc, #296]	; (8001430 <_ZN6braids17DigitalOscillator10RenderKickEPKhPsj+0x194>)
 8001308:	f8c4 20f4 	str.w	r2, [r4, #244]	; 0xf4
 800130c:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 8001310:	3201      	adds	r2, #1
 8001312:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
 8001316:	4a47      	ldr	r2, [pc, #284]	; (8001434 <_ZN6braids17DigitalOscillator10RenderKickEPKhPsj+0x198>)
 8001318:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
 800131c:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 8001320:	3201      	adds	r2, #1
 8001322:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8001326:	f244 6250 	movw	r2, #18000	; 0x4650
 800132a:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
 800132e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001332:	3201      	adds	r2, #1
 8001334:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8001338:	2222      	movs	r2, #34	; 0x22
 800133a:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
 800133e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001342:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8001346:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 800134a:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
 800134e:	fb02 f102 	mul.w	r1, r2, r2
 8001352:	0c09      	lsrs	r1, r1, #16
 8001354:	434a      	muls	r2, r1
 8001356:	0c92      	lsrs	r2, r2, #18
 8001358:	f5c2 42ff 	rsb	r2, r2, #32640	; 0x7f80
 800135c:	f8a4 2138 	strh.w	r2, [r4, #312]	; 0x138
 8001360:	2201      	movs	r2, #1
 8001362:	436d      	muls	r5, r5
 8001364:	0bed      	lsrs	r5, r5, #15
 8001366:	436d      	muls	r5, r5
 8001368:	f104 03e4 	add.w	r3, r4, #228	; 0xe4
 800136c:	0c2d      	lsrs	r5, r5, #16
 800136e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8001376:	f104 03f8 	add.w	r3, r4, #248	; 0xf8
 800137a:	f884 2134 	strb.w	r2, [r4, #308]	; 0x134
 800137e:	3580      	adds	r5, #128	; 0x80
 8001380:	f109 0904 	add.w	r9, r9, #4
 8001384:	9302      	str	r3, [sp, #8]
 8001386:	2f00      	cmp	r7, #0
 8001388:	d04e      	beq.n	8001428 <_ZN6braids17DigitalOscillator10RenderKickEPKhPsj+0x18c>
 800138a:	9801      	ldr	r0, [sp, #4]
 800138c:	f7ff fee6 	bl	800115c <_ZN6braids10Excitation7ProcessEv>
 8001390:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 8001394:	3f02      	subs	r7, #2
 8001396:	2a00      	cmp	r2, #0
 8001398:	bf0c      	ite	eq
 800139a:	f04f 0800 	moveq.w	r8, #0
 800139e:	f44f 4880 	movne.w	r8, #16384	; 0x4000
 80013a2:	4480      	add	r8, r0
 80013a4:	9802      	ldr	r0, [sp, #8]
 80013a6:	f7ff fed9 	bl	800115c <_ZN6braids10Excitation7ProcessEv>
 80013aa:	4480      	add	r8, r0
 80013ac:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 80013b0:	f7ff fed4 	bl	800115c <_ZN6braids10Excitation7ProcessEv>
 80013b4:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
 80013b8:	8b21      	ldrh	r1, [r4, #24]
 80013ba:	2a00      	cmp	r2, #0
 80013bc:	bf14      	ite	ne
 80013be:	f44f 6208 	movne.w	r2, #2176	; 0x880
 80013c2:	2200      	moveq	r2, #0
 80013c4:	4411      	add	r1, r2
 80013c6:	b209      	sxth	r1, r1
 80013c8:	4650      	mov	r0, sl
 80013ca:	f7ff feec 	bl	80011a6 <_ZN6braids3Svf13set_frequencyEs>
 80013ce:	4641      	mov	r1, r8
 80013d0:	4650      	mov	r0, sl
 80013d2:	f7ff fef3 	bl	80011bc <_ZN6braids3Svf7ProcessEl>
 80013d6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80013da:	ea4f 1b28 	mov.w	fp, r8, asr #4
 80013de:	4458      	add	r0, fp
 80013e0:	1b80      	subs	r0, r0, r6
 80013e2:	4368      	muls	r0, r5
 80013e4:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 80013e8:	4296      	cmp	r6, r2
 80013ea:	bfa8      	it	ge
 80013ec:	4616      	movge	r6, r2
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <_ZN6braids17DigitalOscillator10RenderKickEPKhPsj+0x19c>)
 80013f0:	4641      	mov	r1, r8
 80013f2:	429e      	cmp	r6, r3
 80013f4:	bfb8      	it	lt
 80013f6:	461e      	movlt	r6, r3
 80013f8:	4650      	mov	r0, sl
 80013fa:	f829 6c04 	strh.w	r6, [r9, #-4]
 80013fe:	9203      	str	r2, [sp, #12]
 8001400:	f7ff fedc 	bl	80011bc <_ZN6braids3Svf7ProcessEl>
 8001404:	4458      	add	r0, fp
 8001406:	1b80      	subs	r0, r0, r6
 8001408:	4368      	muls	r0, r5
 800140a:	9a03      	ldr	r2, [sp, #12]
 800140c:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 8001410:	4296      	cmp	r6, r2
 8001412:	bfa8      	it	ge
 8001414:	4616      	movge	r6, r2
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <_ZN6braids17DigitalOscillator10RenderKickEPKhPsj+0x19c>)
 8001418:	f109 0904 	add.w	r9, r9, #4
 800141c:	429e      	cmp	r6, r3
 800141e:	bfb8      	it	lt
 8001420:	461e      	movlt	r6, r3
 8001422:	f829 6c06 	strh.w	r6, [r9, #-6]
 8001426:	e7ae      	b.n	8001386 <_ZN6braids17DigitalOscillator10RenderKickEPKhPsj+0xea>
 8001428:	6266      	str	r6, [r4, #36]	; 0x24
 800142a:	b005      	add	sp, #20
 800142c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001430:	00043333 	.word	0x00043333
 8001434:	ffffca3d 	.word	0xffffca3d
 8001438:	ffff8001 	.word	0xffff8001

0800143c <_ZN6stmlib6Random7GetWordEv>:
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <_ZN6stmlib6Random7GetWordEv+0x10>)
 800143e:	4904      	ldr	r1, [pc, #16]	; (8001450 <_ZN6stmlib6Random7GetWordEv+0x14>)
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	4a04      	ldr	r2, [pc, #16]	; (8001454 <_ZN6stmlib6Random7GetWordEv+0x18>)
 8001444:	fb01 2000 	mla	r0, r1, r0, r2
 8001448:	6018      	str	r0, [r3, #0]
 800144a:	4770      	bx	lr
 800144c:	20000330 	.word	0x20000330
 8001450:	0019660d 	.word	0x0019660d
 8001454:	3c6ef35f 	.word	0x3c6ef35f

08001458 <_ZN6braids17DigitalOscillator19RenderParticleNoiseEPKhPsj>:
 8001458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800145c:	4604      	mov	r4, r0
 800145e:	b08d      	sub	sp, #52	; 0x34
 8001460:	930a      	str	r3, [sp, #40]	; 0x28
 8001462:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8001466:	f8b0 a020 	ldrh.w	sl, [r0, #32]
 800146a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800146e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001470:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001472:	6c87      	ldr	r7, [r0, #72]	; 0x48
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001478:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 800147a:	9307      	str	r3, [sp, #28]
 800147c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800147e:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8001480:	9301      	str	r3, [sp, #4]
 8001482:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001484:	f8d0 9050 	ldr.w	r9, [r0, #80]	; 0x50
 8001488:	9302      	str	r3, [sp, #8]
 800148a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800148c:	f8df 8290 	ldr.w	r8, [pc, #656]	; 8001720 <_ZN6braids17DigitalOscillator19RenderParticleNoiseEPKhPsj+0x2c8>
 8001490:	9308      	str	r3, [sp, #32]
 8001492:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001494:	9303      	str	r3, [sp, #12]
 8001496:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001498:	9304      	str	r3, [sp, #16]
 800149a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800149c:	9309      	str	r3, [sp, #36]	; 0x24
 800149e:	1d13      	adds	r3, r2, #4
 80014a0:	9306      	str	r3, [sp, #24]
 80014a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 811d 	beq.w	80016e4 <_ZN6braids17DigitalOscillator19RenderParticleNoiseEPKhPsj+0x28c>
 80014aa:	f7ff ffc7 	bl	800143c <_ZN6stmlib6Random7GetWordEv>
 80014ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80014b0:	f3c0 0316 	ubfx	r3, r0, #0, #23
 80014b4:	4293      	cmp	r3, r2
 80014b6:	9005      	str	r0, [sp, #20]
 80014b8:	f080 809b 	bcs.w	80015f2 <_ZN6braids17DigitalOscillator19RenderParticleNoiseEPKhPsj+0x19a>
 80014bc:	f643 7aff 	movw	sl, #16383	; 0x3fff
 80014c0:	f3c0 020b 	ubfx	r2, r0, #0, #12
 80014c4:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80014c8:	b212      	sxth	r2, r2
 80014ca:	f9b4 b00e 	ldrsh.w	fp, [r4, #14]
 80014ce:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 80014d2:	fb0b f505 	mul.w	r5, fp, r5
 80014d6:	8b23      	ldrh	r3, [r4, #24]
 80014d8:	4e8f      	ldr	r6, [pc, #572]	; (8001718 <_ZN6braids17DigitalOscillator19RenderParticleNoiseEPKhPsj+0x2c0>)
 80014da:	f503 61c0 	add.w	r1, r3, #1536	; 0x600
 80014de:	eb01 4165 	add.w	r1, r1, r5, asr #17
 80014e2:	b209      	sxth	r1, r1
 80014e4:	4551      	cmp	r1, sl
 80014e6:	bfa8      	it	ge
 80014e8:	4651      	movge	r1, sl
 80014ea:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80014ee:	0449      	lsls	r1, r1, #17
 80014f0:	0e0d      	lsrs	r5, r1, #24
 80014f2:	ea4f 0945 	mov.w	r9, r5, lsl #1
 80014f6:	f109 0902 	add.w	r9, r9, #2
 80014fa:	f836 7015 	ldrh.w	r7, [r6, r5, lsl #1]
 80014fe:	f838 6015 	ldrh.w	r6, [r8, r5, lsl #1]
 8001502:	f839 5008 	ldrh.w	r5, [r9, r8]
 8001506:	0a09      	lsrs	r1, r1, #8
 8001508:	b289      	uxth	r1, r1
 800150a:	1bad      	subs	r5, r5, r6
 800150c:	434d      	muls	r5, r1
 800150e:	eb06 4515 	add.w	r5, r6, r5, lsr #16
 8001512:	b2a8      	uxth	r0, r5
 8001514:	fb0b f502 	mul.w	r5, fp, r2
 8001518:	f503 6218 	add.w	r2, r3, #2432	; 0x980
 800151c:	eb02 32e5 	add.w	r2, r2, r5, asr #15
 8001520:	b212      	sxth	r2, r2
 8001522:	4552      	cmp	r2, sl
 8001524:	bfa8      	it	ge
 8001526:	4652      	movge	r2, sl
 8001528:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800152c:	0452      	lsls	r2, r2, #17
 800152e:	0e16      	lsrs	r6, r2, #24
 8001530:	ea4f 0e46 	mov.w	lr, r6, lsl #1
 8001534:	4d78      	ldr	r5, [pc, #480]	; (8001718 <_ZN6braids17DigitalOscillator19RenderParticleNoiseEPKhPsj+0x2c0>)
 8001536:	f10e 0e02 	add.w	lr, lr, #2
 800153a:	f838 c016 	ldrh.w	ip, [r8, r6, lsl #1]
 800153e:	9001      	str	r0, [sp, #4]
 8001540:	4628      	mov	r0, r5
 8001542:	f835 5016 	ldrh.w	r5, [r5, r6, lsl #1]
 8001546:	f83e 6008 	ldrh.w	r6, [lr, r8]
 800154a:	0a12      	lsrs	r2, r2, #8
 800154c:	b292      	uxth	r2, r2
 800154e:	eba6 060c 	sub.w	r6, r6, ip
 8001552:	4356      	muls	r6, r2
 8001554:	eb0c 4616 	add.w	r6, ip, r6, lsr #16
 8001558:	b2b6      	uxth	r6, r6
 800155a:	9603      	str	r6, [sp, #12]
 800155c:	9e05      	ldr	r6, [sp, #20]
 800155e:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8001562:	f3c6 36cc 	ubfx	r6, r6, #15, #13
 8001566:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 800156a:	fb0b fb06 	mul.w	fp, fp, r6
 800156e:	eb03 432b 	add.w	r3, r3, fp, asr #16
 8001572:	b21b      	sxth	r3, r3
 8001574:	4553      	cmp	r3, sl
 8001576:	bfa8      	it	ge
 8001578:	4653      	movge	r3, sl
 800157a:	f839 9000 	ldrh.w	r9, [r9, r0]
 800157e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001582:	eba9 0907 	sub.w	r9, r9, r7
 8001586:	fb01 f109 	mul.w	r1, r1, r9
 800158a:	eb07 4711 	add.w	r7, r7, r1, lsr #16
 800158e:	f83e 1000 	ldrh.w	r1, [lr, r0]
 8001592:	f647 797c 	movw	r9, #32636	; 0x7f7c
 8001596:	1b49      	subs	r1, r1, r5
 8001598:	045b      	lsls	r3, r3, #17
 800159a:	434a      	muls	r2, r1
 800159c:	0e1e      	lsrs	r6, r3, #24
 800159e:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 80015a2:	f10a 0a02 	add.w	sl, sl, #2
 80015a6:	f830 c016 	ldrh.w	ip, [r0, r6, lsl #1]
 80015aa:	f838 b016 	ldrh.w	fp, [r8, r6, lsl #1]
 80015ae:	eb05 4512 	add.w	r5, r5, r2, lsr #16
 80015b2:	f83a 6008 	ldrh.w	r6, [sl, r8]
 80015b6:	f83a 2000 	ldrh.w	r2, [sl, r0]
 80015ba:	f64f 7aff 	movw	sl, #65535	; 0xffff
 80015be:	0a1b      	lsrs	r3, r3, #8
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	eba6 060b 	sub.w	r6, r6, fp
 80015c6:	eba2 020c 	sub.w	r2, r2, ip
 80015ca:	435e      	muls	r6, r3
 80015cc:	4353      	muls	r3, r2
 80015ce:	eb0c 4313 	add.w	r3, ip, r3, lsr #16
 80015d2:	b2bf      	uxth	r7, r7
 80015d4:	b2ad      	uxth	r5, r5
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	fb09 f707 	mul.w	r7, r9, r7
 80015dc:	fb09 f505 	mul.w	r5, r9, r5
 80015e0:	fb09 f903 	mul.w	r9, r9, r3
 80015e4:	eb0b 4616 	add.w	r6, fp, r6, lsr #16
 80015e8:	b2b6      	uxth	r6, r6
 80015ea:	13ff      	asrs	r7, r7, #15
 80015ec:	13ed      	asrs	r5, r5, #15
 80015ee:	ea4f 39e9 	mov.w	r9, r9, asr #15
 80015f2:	f64f 42fb 	movw	r2, #64763	; 0xfcfb
 80015f6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80015fa:	fb0a f303 	mul.w	r3, sl, r3
 80015fe:	fb02 fa0a 	mul.w	sl, r2, sl
 8001602:	141b      	asrs	r3, r3, #16
 8001604:	2b00      	cmp	r3, #0
 8001606:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
 800160a:	dd5d      	ble.n	80016c8 <_ZN6braids17DigitalOscillator19RenderParticleNoiseEPKhPsj+0x270>
 800160c:	9a01      	ldr	r2, [sp, #4]
 800160e:	435a      	muls	r2, r3
 8001610:	1411      	asrs	r1, r2, #16
 8001612:	9a03      	ldr	r2, [sp, #12]
 8001614:	435a      	muls	r2, r3
 8001616:	4373      	muls	r3, r6
 8001618:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800161c:	141b      	asrs	r3, r3, #16
 800161e:	f647 6bfa 	movw	fp, #32506	; 0x7efa
 8001622:	f647 7cff 	movw	ip, #32767	; 0x7fff
 8001626:	9a00      	ldr	r2, [sp, #0]
 8001628:	9808      	ldr	r0, [sp, #32]
 800162a:	437a      	muls	r2, r7
 800162c:	eb01 32e2 	add.w	r2, r1, r2, asr #15
 8001630:	9907      	ldr	r1, [sp, #28]
 8001632:	fb0b f101 	mul.w	r1, fp, r1
 8001636:	eba2 31e1 	sub.w	r1, r2, r1, asr #15
 800163a:	4561      	cmp	r1, ip
 800163c:	bfa8      	it	ge
 800163e:	4661      	movge	r1, ip
 8001640:	4a36      	ldr	r2, [pc, #216]	; (800171c <_ZN6braids17DigitalOscillator19RenderParticleNoiseEPKhPsj+0x2c4>)
 8001642:	4291      	cmp	r1, r2
 8001644:	bfb8      	it	lt
 8001646:	4611      	movlt	r1, r2
 8001648:	9a02      	ldr	r2, [sp, #8]
 800164a:	436a      	muls	r2, r5
 800164c:	eb0e 32e2 	add.w	r2, lr, r2, asr #15
 8001650:	fb0b fe00 	mul.w	lr, fp, r0
 8001654:	eba2 32ee 	sub.w	r2, r2, lr, asr #15
 8001658:	4562      	cmp	r2, ip
 800165a:	bfa8      	it	ge
 800165c:	4662      	movge	r2, ip
 800165e:	482f      	ldr	r0, [pc, #188]	; (800171c <_ZN6braids17DigitalOscillator19RenderParticleNoiseEPKhPsj+0x2c4>)
 8001660:	4282      	cmp	r2, r0
 8001662:	bfb8      	it	lt
 8001664:	4602      	movlt	r2, r0
 8001666:	9804      	ldr	r0, [sp, #16]
 8001668:	fb09 fe00 	mul.w	lr, r9, r0
 800166c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800166e:	eb03 33ee 	add.w	r3, r3, lr, asr #15
 8001672:	fb0b f000 	mul.w	r0, fp, r0
 8001676:	eba3 33e0 	sub.w	r3, r3, r0, asr #15
 800167a:	4563      	cmp	r3, ip
 800167c:	bfa8      	it	ge
 800167e:	4663      	movge	r3, ip
 8001680:	4826      	ldr	r0, [pc, #152]	; (800171c <_ZN6braids17DigitalOscillator19RenderParticleNoiseEPKhPsj+0x2c4>)
 8001682:	4283      	cmp	r3, r0
 8001684:	bfb8      	it	lt
 8001686:	4603      	movlt	r3, r0
 8001688:	eb02 0b03 	add.w	fp, r2, r3
 800168c:	448b      	add	fp, r1
 800168e:	45e3      	cmp	fp, ip
 8001690:	bfa8      	it	ge
 8001692:	46e3      	movge	fp, ip
 8001694:	4583      	cmp	fp, r0
 8001696:	bfb8      	it	lt
 8001698:	4683      	movlt	fp, r0
 800169a:	9806      	ldr	r0, [sp, #24]
 800169c:	fa0f fb8b 	sxth.w	fp, fp
 80016a0:	f820 bc04 	strh.w	fp, [r0, #-4]
 80016a4:	f820 bc02 	strh.w	fp, [r0, #-2]
 80016a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80016aa:	3802      	subs	r0, #2
 80016ac:	900a      	str	r0, [sp, #40]	; 0x28
 80016ae:	9806      	ldr	r0, [sp, #24]
 80016b0:	3004      	adds	r0, #4
 80016b2:	9006      	str	r0, [sp, #24]
 80016b4:	9804      	ldr	r0, [sp, #16]
 80016b6:	9304      	str	r3, [sp, #16]
 80016b8:	9b02      	ldr	r3, [sp, #8]
 80016ba:	9009      	str	r0, [sp, #36]	; 0x24
 80016bc:	9308      	str	r3, [sp, #32]
 80016be:	9b00      	ldr	r3, [sp, #0]
 80016c0:	9202      	str	r2, [sp, #8]
 80016c2:	9307      	str	r3, [sp, #28]
 80016c4:	9100      	str	r1, [sp, #0]
 80016c6:	e6ec      	b.n	80014a2 <_ZN6braids17DigitalOscillator19RenderParticleNoiseEPKhPsj+0x4a>
 80016c8:	9a01      	ldr	r2, [sp, #4]
 80016ca:	425b      	negs	r3, r3
 80016cc:	435a      	muls	r2, r3
 80016ce:	1412      	asrs	r2, r2, #16
 80016d0:	4251      	negs	r1, r2
 80016d2:	9a03      	ldr	r2, [sp, #12]
 80016d4:	435a      	muls	r2, r3
 80016d6:	4373      	muls	r3, r6
 80016d8:	1412      	asrs	r2, r2, #16
 80016da:	141b      	asrs	r3, r3, #16
 80016dc:	f1c2 0e00 	rsb	lr, r2, #0
 80016e0:	425b      	negs	r3, r3
 80016e2:	e79c      	b.n	800161e <_ZN6braids17DigitalOscillator19RenderParticleNoiseEPKhPsj+0x1c6>
 80016e4:	9b00      	ldr	r3, [sp, #0]
 80016e6:	f8a4 a020 	strh.w	sl, [r4, #32]
 80016ea:	6263      	str	r3, [r4, #36]	; 0x24
 80016ec:	9b07      	ldr	r3, [sp, #28]
 80016ee:	64a7      	str	r7, [r4, #72]	; 0x48
 80016f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80016f2:	9b01      	ldr	r3, [sp, #4]
 80016f4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80016f6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80016f8:	9b02      	ldr	r3, [sp, #8]
 80016fa:	6466      	str	r6, [r4, #68]	; 0x44
 80016fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80016fe:	9b08      	ldr	r3, [sp, #32]
 8001700:	f8c4 9050 	str.w	r9, [r4, #80]	; 0x50
 8001704:	6323      	str	r3, [r4, #48]	; 0x30
 8001706:	9b03      	ldr	r3, [sp, #12]
 8001708:	6423      	str	r3, [r4, #64]	; 0x40
 800170a:	9b04      	ldr	r3, [sp, #16]
 800170c:	6363      	str	r3, [r4, #52]	; 0x34
 800170e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001710:	63a3      	str	r3, [r4, #56]	; 0x38
 8001712:	b00d      	add	sp, #52	; 0x34
 8001714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001718:	0800be2c 	.word	0x0800be2c
 800171c:	ffff8001 	.word	0xffff8001
 8001720:	08008fec 	.word	0x08008fec

08001724 <_ZN6stmlib6Random9GetSampleEv>:
 8001724:	b508      	push	{r3, lr}
 8001726:	f7ff fe89 	bl	800143c <_ZN6stmlib6Random7GetWordEv>
 800172a:	1400      	asrs	r0, r0, #16
 800172c:	bd08      	pop	{r3, pc}
	...

08001730 <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj>:
 8001730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001734:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
 8001738:	461e      	mov	r6, r3
 800173a:	11ad      	asrs	r5, r5, #6
 800173c:	7f03      	ldrb	r3, [r0, #28]
 800173e:	35c8      	adds	r5, #200	; 0xc8
 8001740:	4604      	mov	r4, r0
 8001742:	4617      	mov	r7, r2
 8001744:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8001748:	b2ad      	uxth	r5, r5
 800174a:	b32b      	cbz	r3, 8001798 <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x68>
 800174c:	2300      	movs	r3, #0
 800174e:	7703      	strb	r3, [r0, #28]
 8001750:	23a0      	movs	r3, #160	; 0xa0
 8001752:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8001756:	f7ff ffe5 	bl	8001724 <_ZN6stmlib6Random9GetSampleEv>
 800175a:	2306      	movs	r3, #6
 800175c:	4a55      	ldr	r2, [pc, #340]	; (80018b4 <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x184>)
 800175e:	3001      	adds	r0, #1
 8001760:	f000 0007 	and.w	r0, r0, #7
 8001764:	fb03 2300 	mla	r3, r3, r0, r2
 8001768:	ea4f 3e05 	mov.w	lr, r5, lsl #12
 800176c:	3b01      	subs	r3, #1
 800176e:	f104 0220 	add.w	r2, r4, #32
 8001772:	f104 0c2c 	add.w	ip, r4, #44	; 0x2c
 8001776:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800177a:	fb0e f101 	mul.w	r1, lr, r1
 800177e:	f842 1b04 	str.w	r1, [r2], #4
 8001782:	78d9      	ldrb	r1, [r3, #3]
 8001784:	4594      	cmp	ip, r2
 8001786:	6151      	str	r1, [r2, #20]
 8001788:	d1f5      	bne.n	8001776 <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x46>
 800178a:	2805      	cmp	r0, #5
 800178c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001790:	bf98      	it	ls
 8001792:	2300      	movls	r3, #0
 8001794:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8001798:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 800179c:	2b00      	cmp	r3, #0
 800179e:	d055      	beq.n	800184c <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x11c>
 80017a0:	3b01      	subs	r3, #1
 80017a2:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
 80017a6:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80017aa:	f8df 9118 	ldr.w	r9, [pc, #280]	; 80018c4 <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x194>
 80017ae:	f8df 8118 	ldr.w	r8, [pc, #280]	; 80018c8 <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x198>
 80017b2:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 80017b6:	9101      	str	r1, [sp, #4]
 80017b8:	d379      	bcc.n	80018ae <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x17e>
 80017ba:	e9d4 5300 	ldrd	r5, r3, [r4]
 80017be:	6a22      	ldr	r2, [r4, #32]
 80017c0:	441d      	add	r5, r3
 80017c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80017c4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80017c6:	4413      	add	r3, r2
 80017c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80017ca:	0e1b      	lsrs	r3, r3, #24
 80017cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017d0:	6025      	str	r5, [r4, #0]
 80017d2:	4303      	orrs	r3, r0
 80017d4:	f939 a013 	ldrsh.w	sl, [r9, r3, lsl #1]
 80017d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80017da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017dc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80017de:	441a      	add	r2, r3
 80017e0:	6322      	str	r2, [r4, #48]	; 0x30
 80017e2:	0e12      	lsrs	r2, r2, #24
 80017e4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80017e8:	4302      	orrs	r2, r0
 80017ea:	f939 b012 	ldrsh.w	fp, [r9, r2, lsl #1]
 80017ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017f0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80017f2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80017f4:	441a      	add	r2, r3
 80017f6:	6362      	str	r2, [r4, #52]	; 0x34
 80017f8:	0e12      	lsrs	r2, r2, #24
 80017fa:	4b2f      	ldr	r3, [pc, #188]	; (80018b8 <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x188>)
 80017fc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001800:	4302      	orrs	r2, r0
 8001802:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8001806:	9200      	str	r2, [sp, #0]
 8001808:	f7ff ff8c 	bl	8001724 <_ZN6stmlib6Random9GetSampleEv>
 800180c:	6823      	ldr	r3, [r4, #0]
 800180e:	9901      	ldr	r1, [sp, #4]
 8001810:	fb01 3000 	mla	r0, r1, r0, r3
 8001814:	6863      	ldr	r3, [r4, #4]
 8001816:	4298      	cmp	r0, r3
 8001818:	d344      	bcc.n	80018a4 <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x174>
 800181a:	9a00      	ldr	r2, [sp, #0]
 800181c:	0e2d      	lsrs	r5, r5, #24
 800181e:	445a      	add	r2, fp
 8001820:	4452      	add	r2, sl
 8001822:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
 8001826:	436a      	muls	r2, r5
 8001828:	b212      	sxth	r2, r2
 800182a:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 800182e:	b292      	uxth	r2, r2
 8001830:	4d22      	ldr	r5, [pc, #136]	; (80018bc <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x18c>)
 8001832:	1210      	asrs	r0, r2, #8
 8001834:	f938 3010 	ldrsh.w	r3, [r8, r0, lsl #1]
 8001838:	f935 0010 	ldrsh.w	r0, [r5, r0, lsl #1]
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	1ac0      	subs	r0, r0, r3
 8001840:	4342      	muls	r2, r0
 8001842:	eb03 2222 	add.w	r2, r3, r2, asr #8
 8001846:	f827 2b02 	strh.w	r2, [r7], #2
 800184a:	e7b2      	b.n	80017b2 <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x82>
 800184c:	2206      	movs	r2, #6
 800184e:	ea4f 3328 	mov.w	r3, r8, asr #12
 8001852:	435a      	muls	r2, r3
 8001854:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x190>)
 8001856:	1e51      	subs	r1, r2, #1
 8001858:	f3c8 080b 	ubfx	r8, r8, #0, #12
 800185c:	3205      	adds	r2, #5
 800185e:	4419      	add	r1, r3
 8001860:	f104 0020 	add.w	r0, r4, #32
 8001864:	4413      	add	r3, r2
 8001866:	f104 0c2c 	add.w	ip, r4, #44	; 0x2c
 800186a:	f5c8 5e80 	rsb	lr, r8, #4096	; 0x1000
 800186e:	f813 9f01 	ldrb.w	r9, [r3, #1]!
 8001872:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001876:	fb08 f909 	mul.w	r9, r8, r9
 800187a:	fb0e 9202 	mla	r2, lr, r2, r9
 800187e:	436a      	muls	r2, r5
 8001880:	f840 2b04 	str.w	r2, [r0], #4
 8001884:	f893 9003 	ldrb.w	r9, [r3, #3]
 8001888:	78ca      	ldrb	r2, [r1, #3]
 800188a:	fb08 f909 	mul.w	r9, r8, r9
 800188e:	fb0e 9202 	mla	r2, lr, r2, r9
 8001892:	4584      	cmp	ip, r0
 8001894:	ea4f 3222 	mov.w	r2, r2, asr #12
 8001898:	6142      	str	r2, [r0, #20]
 800189a:	d1e8      	bne.n	800186e <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x13e>
 800189c:	2300      	movs	r3, #0
 800189e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80018a2:	e780      	b.n	80017a6 <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0x76>
 80018a4:	2200      	movs	r2, #0
 80018a6:	e9c4 220b 	strd	r2, r2, [r4, #44]	; 0x2c
 80018aa:	6362      	str	r2, [r4, #52]	; 0x34
 80018ac:	e7bd      	b.n	800182a <_ZN6braids17DigitalOscillator11RenderVowelEPKhPsj+0xfa>
 80018ae:	b003      	add	sp, #12
 80018b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018b4:	080072dc 	.word	0x080072dc
 80018b8:	0800860a 	.word	0x0800860a
 80018bc:	08009c8a 	.word	0x08009c8a
 80018c0:	08007284 	.word	0x08007284
 80018c4:	0800840a 	.word	0x0800840a
 80018c8:	08009c88 	.word	0x08009c88

080018cc <_ZN6braids17DigitalOscillator11RenderBlownEPKhPsj>:
 80018cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018d0:	461e      	mov	r6, r3
 80018d2:	7f03      	ldrb	r3, [r0, #28]
 80018d4:	b087      	sub	sp, #28
 80018d6:	4604      	mov	r4, r0
 80018d8:	4690      	mov	r8, r2
 80018da:	f8b0 9020 	ldrh.w	r9, [r0, #32]
 80018de:	6a47      	ldr	r7, [r0, #36]	; 0x24
 80018e0:	f500 7aca 	add.w	sl, r0, #404	; 0x194
 80018e4:	b13b      	cbz	r3, 80018f6 <_ZN6braids17DigitalOscillator11RenderBlownEPKhPsj+0x2a>
 80018e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018ea:	2100      	movs	r1, #0
 80018ec:	4650      	mov	r0, sl
 80018ee:	f005 fca2 	bl	8007236 <memset>
 80018f2:	2300      	movs	r3, #0
 80018f4:	7723      	strb	r3, [r4, #28]
 80018f6:	68a5      	ldr	r5, [r4, #8]
 80018f8:	4b49      	ldr	r3, [pc, #292]	; (8001a20 <_ZN6braids17DigitalOscillator11RenderBlownEPKhPsj+0x154>)
 80018fa:	086d      	lsrs	r5, r5, #1
 80018fc:	f5a5 3580 	sub.w	r5, r5, #65536	; 0x10000
 8001900:	429d      	cmp	r5, r3
 8001902:	d901      	bls.n	8001908 <_ZN6braids17DigitalOscillator11RenderBlownEPKhPsj+0x3c>
 8001904:	086d      	lsrs	r5, r5, #1
 8001906:	e7fb      	b.n	8001900 <_ZN6braids17DigitalOscillator11RenderBlownEPKhPsj+0x34>
 8001908:	0c2b      	lsrs	r3, r5, #16
 800190a:	9302      	str	r3, [sp, #8]
 800190c:	f646 5360 	movw	r3, #28000	; 0x6d60
 8001910:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001914:	f9b4 1028 	ldrsh.w	r1, [r4, #40]	; 0x28
 8001918:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 800191c:	b29b      	uxth	r3, r3
 800191e:	9303      	str	r3, [sp, #12]
 8001920:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 8001924:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 8001928:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800192c:	eb03 0362 	add.w	r3, r3, r2, asr #1
 8001930:	11db      	asrs	r3, r3, #7
 8001932:	d46c      	bmi.n	8001a0e <_ZN6braids17DigitalOscillator11RenderBlownEPKhPsj+0x142>
 8001934:	2b7f      	cmp	r3, #127	; 0x7f
 8001936:	bfa8      	it	ge
 8001938:	237f      	movge	r3, #127	; 0x7f
 800193a:	4a3a      	ldr	r2, [pc, #232]	; (8001a24 <_ZN6braids17DigitalOscillator11RenderBlownEPKhPsj+0x158>)
 800193c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001940:	9301      	str	r3, [sp, #4]
 8001942:	b2b3      	uxth	r3, r6
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800194a:	444b      	add	r3, r9
 800194c:	9304      	str	r3, [sp, #16]
 800194e:	9b00      	ldr	r3, [sp, #0]
 8001950:	eb03 0b09 	add.w	fp, r3, r9
 8001954:	ebab 0b06 	sub.w	fp, fp, r6
 8001958:	3e01      	subs	r6, #1
 800195a:	1c73      	adds	r3, r6, #1
 800195c:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 8001960:	d057      	beq.n	8001a12 <_ZN6braids17DigitalOscillator11RenderBlownEPKhPsj+0x146>
 8001962:	e9d4 3200 	ldrd	r3, r2, [r4]
 8001966:	4413      	add	r3, r2
 8001968:	6023      	str	r3, [r4, #0]
 800196a:	9105      	str	r1, [sp, #20]
 800196c:	f7ff feda 	bl	8001724 <_ZN6stmlib6Random9GetSampleEv>
 8001970:	9b03      	ldr	r3, [sp, #12]
 8001972:	9a02      	ldr	r2, [sp, #8]
 8001974:	4358      	muls	r0, r3
 8001976:	f246 6366 	movw	r3, #26214	; 0x6666
 800197a:	13c0      	asrs	r0, r0, #15
 800197c:	4358      	muls	r0, r3
 800197e:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 8001982:	9b04      	ldr	r3, [sp, #16]
 8001984:	fa1f fc85 	uxth.w	ip, r5
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	1b9b      	subs	r3, r3, r6
 800198c:	b29b      	uxth	r3, r3
 800198e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001992:	3b01      	subs	r3, #1
 8001994:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001998:	f93a 3013 	ldrsh.w	r3, [sl, r3, lsl #1]
 800199c:	f5cc 4e7f 	rsb	lr, ip, #65280	; 0xff00
 80019a0:	fb0c fc03 	mul.w	ip, ip, r3
 80019a4:	f93a 2012 	ldrsh.w	r2, [sl, r2, lsl #1]
 80019a8:	f10e 0eff 	add.w	lr, lr, #255	; 0xff
 80019ac:	fb0e c202 	mla	r2, lr, r2, ip
 80019b0:	f645 1c9a 	movw	ip, #22938	; 0x599a
 80019b4:	f647 7eff 	movw	lr, #32767	; 0x7fff
 80019b8:	1452      	asrs	r2, r2, #17
 80019ba:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <_ZN6braids17DigitalOscillator11RenderBlownEPKhPsj+0x15c>)
 80019bc:	4417      	add	r7, r2
 80019be:	435f      	muls	r7, r3
 80019c0:	f603 2366 	addw	r3, r3, #2662	; 0xa66
 80019c4:	ebc0 3727 	rsb	r7, r0, r7, asr #12
 80019c8:	437b      	muls	r3, r7
 80019ca:	eb0c 3323 	add.w	r3, ip, r3, asr #12
 80019ce:	4573      	cmp	r3, lr
 80019d0:	bfa8      	it	ge
 80019d2:	4673      	movge	r3, lr
 80019d4:	f8df c054 	ldr.w	ip, [pc, #84]	; 8001a2c <_ZN6braids17DigitalOscillator11RenderBlownEPKhPsj+0x160>
 80019d8:	9901      	ldr	r1, [sp, #4]
 80019da:	4563      	cmp	r3, ip
 80019dc:	bfb8      	it	lt
 80019de:	4663      	movlt	r3, ip
 80019e0:	437b      	muls	r3, r7
 80019e2:	eb00 33e3 	add.w	r3, r0, r3, asr #15
 80019e6:	4573      	cmp	r3, lr
 80019e8:	bfa8      	it	ge
 80019ea:	4673      	movge	r3, lr
 80019ec:	4563      	cmp	r3, ip
 80019ee:	bfb8      	it	lt
 80019f0:	4663      	movlt	r3, ip
 80019f2:	f82a 301b 	strh.w	r3, [sl, fp, lsl #1]
 80019f6:	434b      	muls	r3, r1
 80019f8:	f5c1 5e80 	rsb	lr, r1, #4096	; 0x1000
 80019fc:	9905      	ldr	r1, [sp, #20]
 80019fe:	4617      	mov	r7, r2
 8001a00:	fb01 330e 	mla	r3, r1, lr, r3
 8001a04:	f343 310f 	sbfx	r1, r3, #12, #16
 8001a08:	f828 1b02 	strh.w	r1, [r8], #2
 8001a0c:	e79f      	b.n	800194e <_ZN6braids17DigitalOscillator11RenderBlownEPKhPsj+0x82>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e793      	b.n	800193a <_ZN6braids17DigitalOscillator11RenderBlownEPKhPsj+0x6e>
 8001a12:	62a1      	str	r1, [r4, #40]	; 0x28
 8001a14:	f8a4 b020 	strh.w	fp, [r4, #32]
 8001a18:	6267      	str	r7, [r4, #36]	; 0x24
 8001a1a:	b007      	add	sp, #28
 8001a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a20:	07ff0000 	.word	0x07ff0000
 8001a24:	08009600 	.word	0x08009600
 8001a28:	fffff0cd 	.word	0xfffff0cd
 8001a2c:	ffff8001 	.word	0xffff8001

08001a30 <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj>:
 8001a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a34:	b08f      	sub	sp, #60	; 0x3c
 8001a36:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001a3a:	e9d0 a90a 	ldrd	sl, r9, [r0, #40]	; 0x28
 8001a3e:	8c03      	ldrh	r3, [r0, #32]
 8001a40:	4604      	mov	r4, r0
 8001a42:	9302      	str	r3, [sp, #8]
 8001a44:	f200 5394 	addw	r3, r0, #1428	; 0x594
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	f500 73ca 	add.w	r3, r0, #404	; 0x194
 8001a4e:	9301      	str	r3, [sp, #4]
 8001a50:	7f03      	ldrb	r3, [r0, #28]
 8001a52:	b9db      	cbnz	r3, 8001a8c <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0x5c>
 8001a54:	8c47      	ldrh	r7, [r0, #34]	; 0x22
 8001a56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8001a58:	68a3      	ldr	r3, [r4, #8]
 8001a5a:	f9b4 b00e 	ldrsh.w	fp, [r4, #14]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
 8001a64:	ea4f 2bab 	mov.w	fp, fp, asr #10
 8001a68:	f10b 0230 	add.w	r2, fp, #48	; 0x30
 8001a6c:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8001a70:	fb0b fb02 	mul.w	fp, fp, r2
 8001a74:	496a      	ldr	r1, [pc, #424]	; (8001c20 <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0x1f0>)
 8001a76:	4a6b      	ldr	r2, [pc, #428]	; (8001c24 <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0x1f4>)
 8001a78:	eba3 030b 	sub.w	r3, r3, fp
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d801      	bhi.n	8001a84 <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0x54>
 8001a80:	458b      	cmp	fp, r1
 8001a82:	d913      	bls.n	8001aac <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0x7c>
 8001a84:	085b      	lsrs	r3, r3, #1
 8001a86:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8001a8a:	e7f7      	b.n	8001a7c <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0x4c>
 8001a8c:	2600      	movs	r6, #0
 8001a8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a92:	2100      	movs	r1, #0
 8001a94:	9800      	ldr	r0, [sp, #0]
 8001a96:	f005 fbce 	bl	8007236 <memset>
 8001a9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	9801      	ldr	r0, [sp, #4]
 8001aa2:	f005 fbc8 	bl	8007236 <memset>
 8001aa6:	4637      	mov	r7, r6
 8001aa8:	7726      	strb	r6, [r4, #28]
 8001aaa:	e7d5      	b.n	8001a58 <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0x28>
 8001aac:	0c1a      	lsrs	r2, r3, #16
 8001aae:	9207      	str	r2, [sp, #28]
 8001ab0:	ea4f 421b 	mov.w	r2, fp, lsr #16
 8001ab4:	9208      	str	r2, [sp, #32]
 8001ab6:	f640 0234 	movw	r2, #2100	; 0x834
 8001aba:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	eba2 1221 	sub.w	r2, r2, r1, asr #4
 8001ac4:	b292      	uxth	r2, r2
 8001ac6:	9209      	str	r2, [sp, #36]	; 0x24
 8001ac8:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8001acc:	4956      	ldr	r1, [pc, #344]	; (8001c28 <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0x1f8>)
 8001ace:	11d2      	asrs	r2, r2, #7
 8001ad0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001ad4:	9306      	str	r3, [sp, #24]
 8001ad6:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001ada:	33ff      	adds	r3, #255	; 0xff
 8001adc:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8001ae0:	9905      	ldr	r1, [sp, #20]
 8001ae2:	9203      	str	r2, [sp, #12]
 8001ae4:	930a      	str	r3, [sp, #40]	; 0x28
 8001ae6:	3901      	subs	r1, #1
 8001ae8:	1c4a      	adds	r2, r1, #1
 8001aea:	910d      	str	r1, [sp, #52]	; 0x34
 8001aec:	f000 8086 	beq.w	8001bfc <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0x1cc>
 8001af0:	e9d4 3200 	ldrd	r3, r2, [r4]
 8001af4:	4413      	add	r3, r2
 8001af6:	6023      	str	r3, [r4, #0]
 8001af8:	9b07      	ldr	r3, [sp, #28]
 8001afa:	9900      	ldr	r1, [sp, #0]
 8001afc:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 8001b00:	4443      	add	r3, r8
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	f3c3 000b 	ubfx	r0, r3, #0, #12
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b0e:	560d      	ldrsb	r5, [r1, r0]
 8001b10:	56cb      	ldrsb	r3, [r1, r3]
 8001b12:	9906      	ldr	r1, [sp, #24]
 8001b14:	9a08      	ldr	r2, [sp, #32]
 8001b16:	434b      	muls	r3, r1
 8001b18:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
 8001b1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001b1e:	4442      	add	r2, r8
 8001b20:	b292      	uxth	r2, r2
 8001b22:	fb01 3505 	mla	r5, r1, r5, r3
 8001b26:	9901      	ldr	r1, [sp, #4]
 8001b28:	f3c2 0309 	ubfx	r3, r2, #0, #10
 8001b2c:	3a01      	subs	r2, #1
 8001b2e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001b32:	568a      	ldrsb	r2, [r1, r2]
 8001b34:	fa1f f08b 	uxth.w	r0, fp
 8001b38:	f5c0 4c7f 	rsb	ip, r0, #65280	; 0xff00
 8001b3c:	4350      	muls	r0, r2
 8001b3e:	56cb      	ldrsb	r3, [r1, r3]
 8001b40:	f10c 0cff 	add.w	ip, ip, #255	; 0xff
 8001b44:	fb0c 0303 	mla	r3, ip, r3, r0
 8001b48:	4a38      	ldr	r2, [pc, #224]	; (8001c2c <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0x1fc>)
 8001b4a:	141b      	asrs	r3, r3, #16
 8001b4c:	f832 2017 	ldrh.w	r2, [r2, r7, lsl #1]
 8001b50:	025b      	lsls	r3, r3, #9
 8001b52:	0052      	lsls	r2, r2, #1
 8001b54:	930c      	str	r3, [sp, #48]	; 0x30
 8001b56:	920b      	str	r2, [sp, #44]	; 0x2c
 8001b58:	f7ff fde4 	bl	8001724 <_ZN6stmlib6Random9GetSampleEv>
 8001b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b62:	4358      	muls	r0, r3
 8001b64:	9b03      	ldr	r3, [sp, #12]
 8001b66:	142d      	asrs	r5, r5, #16
 8001b68:	f5c3 5c80 	rsb	ip, r3, #4096	; 0x1000
 8001b6c:	fb06 f60c 	mul.w	r6, r6, ip
 8001b70:	f640 7cd7 	movw	ip, #4055	; 0xfd7
 8001b74:	026d      	lsls	r5, r5, #9
 8001b76:	fb03 6615 	mls	r6, r3, r5, r6
 8001b7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001b7c:	fb0c f909 	mul.w	r9, ip, r9
 8001b80:	1300      	asrs	r0, r0, #12
 8001b82:	4350      	muls	r0, r2
 8001b84:	1336      	asrs	r6, r6, #12
 8001b86:	eba6 0a0a 	sub.w	sl, r6, sl
 8001b8a:	eb0a 3929 	add.w	r9, sl, r9, asr #12
 8001b8e:	ea4f 0c69 	mov.w	ip, r9, asr #1
 8001b92:	eb02 32e0 	add.w	r2, r2, r0, asr #15
 8001b96:	eba2 020c 	sub.w	r2, r2, ip
 8001b9a:	9b01      	ldr	r3, [sp, #4]
 8001b9c:	f3c8 0e09 	ubfx	lr, r8, #0, #10
 8001ba0:	1252      	asrs	r2, r2, #9
 8001ba2:	f803 200e 	strb.w	r2, [r3, lr]
 8001ba6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001ba8:	4821      	ldr	r0, [pc, #132]	; (8001c30 <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0x200>)
 8001baa:	428b      	cmp	r3, r1
 8001bac:	bfa8      	it	ge
 8001bae:	460b      	movge	r3, r1
 8001bb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001bb4:	121b      	asrs	r3, r3, #8
 8001bb6:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8001bba:	f3c8 020b 	ubfx	r2, r8, #0, #12
 8001bbe:	449c      	add	ip, r3
 8001bc0:	9b00      	ldr	r3, [sp, #0]
 8001bc2:	ea4f 2c6c 	mov.w	ip, ip, asr #9
 8001bc6:	f803 c002 	strb.w	ip, [r3, r2]
 8001bca:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001bce:	106d      	asrs	r5, r5, #1
 8001bd0:	429d      	cmp	r5, r3
 8001bd2:	bfa8      	it	ge
 8001bd4:	461d      	movge	r5, r3
 8001bd6:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0x204>)
 8001bd8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001bda:	429d      	cmp	r5, r3
 8001bdc:	bfb8      	it	lt
 8001bde:	461d      	movlt	r5, r3
 8001be0:	9b04      	ldr	r3, [sp, #16]
 8001be2:	f108 0801 	add.w	r8, r8, #1
 8001be6:	f823 5b02 	strh.w	r5, [r3], #2
 8001bea:	9304      	str	r3, [sp, #16]
 8001bec:	078b      	lsls	r3, r1, #30
 8001bee:	fa1f f888 	uxth.w	r8, r8
 8001bf2:	d001      	beq.n	8001bf8 <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0x1c8>
 8001bf4:	3701      	adds	r7, #1
 8001bf6:	b2bf      	uxth	r7, r7
 8001bf8:	46b2      	mov	sl, r6
 8001bfa:	e774      	b.n	8001ae6 <_ZN6braids17DigitalOscillator12RenderFlutedEPKhPsj+0xb6>
 8001bfc:	f5b7 7fb4 	cmp.w	r7, #360	; 0x168
 8001c00:	bf28      	it	cs
 8001c02:	f44f 77b4 	movcs.w	r7, #360	; 0x168
 8001c06:	9b02      	ldr	r3, [sp, #8]
 8001c08:	9a05      	ldr	r2, [sp, #20]
 8001c0a:	8467      	strh	r7, [r4, #34]	; 0x22
 8001c0c:	4413      	add	r3, r2
 8001c0e:	8423      	strh	r3, [r4, #32]
 8001c10:	e9c4 6a09 	strd	r6, sl, [r4, #36]	; 0x24
 8001c14:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 8001c18:	b00f      	add	sp, #60	; 0x3c
 8001c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c1e:	bf00      	nop
 8001c20:	03ff0000 	.word	0x03ff0000
 8001c24:	0fff0000 	.word	0x0fff0000
 8001c28:	08009600 	.word	0x08009600
 8001c2c:	080090ee 	.word	0x080090ee
 8001c30:	08008208 	.word	0x08008208
 8001c34:	ffff8001 	.word	0xffff8001

08001c38 <_ZN6braids17DigitalOscillator19RenderGranularCloudEPKhPsj>:
 8001c38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c3c:	4604      	mov	r4, r0
 8001c3e:	4693      	mov	fp, r2
 8001c40:	461e      	mov	r6, r3
 8001c42:	4682      	mov	sl, r0
 8001c44:	2700      	movs	r7, #0
 8001c46:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8001dd4 <_ZN6braids17DigitalOscillator19RenderGranularCloudEPKhPsj+0x19c>
 8001c4a:	f100 0840 	add.w	r8, r0, #64	; 0x40
 8001c4e:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 8001c52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c56:	d802      	bhi.n	8001c5e <_ZN6braids17DigitalOscillator19RenderGranularCloudEPKhPsj+0x26>
 8001c58:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 8001c5c:	bb1b      	cbnz	r3, 8001ca6 <_ZN6braids17DigitalOscillator19RenderGranularCloudEPKhPsj+0x6e>
 8001c5e:	f8ca 702c 	str.w	r7, [sl, #44]	; 0x2c
 8001c62:	f7ff fbeb 	bl	800143c <_ZN6stmlib6Random7GetWordEv>
 8001c66:	b280      	uxth	r0, r0
 8001c68:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8001c6c:	d21b      	bcs.n	8001ca6 <_ZN6braids17DigitalOscillator19RenderGranularCloudEPKhPsj+0x6e>
 8001c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c72:	11db      	asrs	r3, r3, #7
 8001c74:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	e9ca 730a 	strd	r7, r3, [sl, #40]	; 0x28
 8001c7e:	6863      	ldr	r3, [r4, #4]
 8001c80:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
 8001c84:	f7ff fd4e 	bl	8001724 <_ZN6stmlib6Random9GetSampleEv>
 8001c88:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8001c8c:	6862      	ldr	r2, [r4, #4]
 8001c8e:	4358      	muls	r0, r3
 8001c90:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8001c94:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8001c98:	bf4c      	ite	mi
 8001c9a:	1600      	asrmi	r0, r0, #24
 8001c9c:	15c0      	asrpl	r0, r0, #23
 8001c9e:	fb02 3000 	mla	r0, r2, r0, r3
 8001ca2:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8001ca6:	f10a 0a10 	add.w	sl, sl, #16
 8001caa:	45c2      	cmp	sl, r8
 8001cac:	d1cf      	bne.n	8001c4e <_ZN6braids17DigitalOscillator19RenderGranularCloudEPKhPsj+0x16>
 8001cae:	f647 7cff 	movw	ip, #32767	; 0x7fff
 8001cb2:	4b46      	ldr	r3, [pc, #280]	; (8001dcc <_ZN6braids17DigitalOscillator19RenderGranularCloudEPKhPsj+0x194>)
 8001cb4:	4846      	ldr	r0, [pc, #280]	; (8001dd0 <_ZN6braids17DigitalOscillator19RenderGranularCloudEPKhPsj+0x198>)
 8001cb6:	f8df e120 	ldr.w	lr, [pc, #288]	; 8001dd8 <_ZN6braids17DigitalOscillator19RenderGranularCloudEPKhPsj+0x1a0>
 8001cba:	1c9f      	adds	r7, r3, #2
 8001cbc:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 8001cc0:	f0c0 8081 	bcc.w	8001dc6 <_ZN6braids17DigitalOscillator19RenderGranularCloudEPKhPsj+0x18e>
 8001cc4:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 8001cc8:	440a      	add	r2, r1
 8001cca:	e9d4 510a 	ldrd	r5, r1, [r4, #40]	; 0x28
 8001cce:	4429      	add	r1, r5
 8001cd0:	6222      	str	r2, [r4, #32]
 8001cd2:	62a1      	str	r1, [r4, #40]	; 0x28
 8001cd4:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8001cd8:	f933 8019 	ldrsh.w	r8, [r3, r9, lsl #1]
 8001cdc:	f937 9019 	ldrsh.w	r9, [r7, r9, lsl #1]
 8001ce0:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8001ce4:	eba9 0908 	sub.w	r9, r9, r8
 8001ce8:	fb02 f209 	mul.w	r2, r2, r9
 8001cec:	0c09      	lsrs	r1, r1, #16
 8001cee:	eb08 4222 	add.w	r2, r8, r2, asr #16
 8001cf2:	f830 8011 	ldrh.w	r8, [r0, r1, lsl #1]
 8001cf6:	b212      	sxth	r2, r2
 8001cf8:	fb08 f902 	mul.w	r9, r8, r2
 8001cfc:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8001d00:	440a      	add	r2, r1
 8001d02:	e9d4 510e 	ldrd	r5, r1, [r4, #56]	; 0x38
 8001d06:	4429      	add	r1, r5
 8001d08:	6322      	str	r2, [r4, #48]	; 0x30
 8001d0a:	63a1      	str	r1, [r4, #56]	; 0x38
 8001d0c:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8001d10:	f933 801a 	ldrsh.w	r8, [r3, sl, lsl #1]
 8001d14:	f937 a01a 	ldrsh.w	sl, [r7, sl, lsl #1]
 8001d18:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8001d1c:	ebaa 0a08 	sub.w	sl, sl, r8
 8001d20:	fb02 f20a 	mul.w	r2, r2, sl
 8001d24:	0c09      	lsrs	r1, r1, #16
 8001d26:	eb08 4222 	add.w	r2, r8, r2, asr #16
 8001d2a:	f830 8011 	ldrh.w	r8, [r0, r1, lsl #1]
 8001d2e:	b212      	sxth	r2, r2
 8001d30:	fb08 f802 	mul.w	r8, r8, r2
 8001d34:	e9d4 1210 	ldrd	r1, r2, [r4, #64]	; 0x40
 8001d38:	440a      	add	r2, r1
 8001d3a:	e9d4 5112 	ldrd	r5, r1, [r4, #72]	; 0x48
 8001d3e:	4429      	add	r1, r5
 8001d40:	6422      	str	r2, [r4, #64]	; 0x40
 8001d42:	64a1      	str	r1, [r4, #72]	; 0x48
 8001d44:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8001d48:	ea4f 4868 	mov.w	r8, r8, asr #17
 8001d4c:	eb08 4869 	add.w	r8, r8, r9, asr #17
 8001d50:	f933 901a 	ldrsh.w	r9, [r3, sl, lsl #1]
 8001d54:	f937 a01a 	ldrsh.w	sl, [r7, sl, lsl #1]
 8001d58:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8001d5c:	ebaa 0a09 	sub.w	sl, sl, r9
 8001d60:	fb02 f20a 	mul.w	r2, r2, sl
 8001d64:	0c09      	lsrs	r1, r1, #16
 8001d66:	eb09 4222 	add.w	r2, r9, r2, asr #16
 8001d6a:	f830 9011 	ldrh.w	r9, [r0, r1, lsl #1]
 8001d6e:	b212      	sxth	r2, r2
 8001d70:	fb09 f202 	mul.w	r2, r9, r2
 8001d74:	eb08 4862 	add.w	r8, r8, r2, asr #17
 8001d78:	e9d4 1214 	ldrd	r1, r2, [r4, #80]	; 0x50
 8001d7c:	440a      	add	r2, r1
 8001d7e:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8001d82:	e9d4 5116 	ldrd	r5, r1, [r4, #88]	; 0x58
 8001d86:	4429      	add	r1, r5
 8001d88:	6522      	str	r2, [r4, #80]	; 0x50
 8001d8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8001d8c:	f933 901a 	ldrsh.w	r9, [r3, sl, lsl #1]
 8001d90:	f937 a01a 	ldrsh.w	sl, [r7, sl, lsl #1]
 8001d94:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8001d98:	ebaa 0a09 	sub.w	sl, sl, r9
 8001d9c:	fb02 f20a 	mul.w	r2, r2, sl
 8001da0:	0c09      	lsrs	r1, r1, #16
 8001da2:	eb09 4222 	add.w	r2, r9, r2, asr #16
 8001da6:	f830 9011 	ldrh.w	r9, [r0, r1, lsl #1]
 8001daa:	b212      	sxth	r2, r2
 8001dac:	fb09 f202 	mul.w	r2, r9, r2
 8001db0:	eb08 4262 	add.w	r2, r8, r2, asr #17
 8001db4:	4562      	cmp	r2, ip
 8001db6:	bfa8      	it	ge
 8001db8:	4662      	movge	r2, ip
 8001dba:	4572      	cmp	r2, lr
 8001dbc:	bfb8      	it	lt
 8001dbe:	4672      	movlt	r2, lr
 8001dc0:	f82b 2b02 	strh.w	r2, [fp], #2
 8001dc4:	e77a      	b.n	8001cbc <_ZN6braids17DigitalOscillator19RenderGranularCloudEPKhPsj+0x84>
 8001dc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dca:	bf00      	nop
 8001dcc:	0800ca5e 	.word	0x0800ca5e
 8001dd0:	08009700 	.word	0x08009700
 8001dd4:	0800c030 	.word	0x0800c030
 8001dd8:	ffff8000 	.word	0xffff8000

08001ddc <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj>:
 8001ddc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001de0:	4690      	mov	r8, r2
 8001de2:	7f02      	ldrb	r2, [r0, #28]
 8001de4:	4604      	mov	r4, r0
 8001de6:	4699      	mov	r9, r3
 8001de8:	b15a      	cbz	r2, 8001e02 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x26>
 8001dea:	210a      	movs	r1, #10
 8001dec:	8601      	strh	r1, [r0, #48]	; 0x30
 8001dee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001df2:	2200      	movs	r2, #0
 8001df4:	6241      	str	r1, [r0, #36]	; 0x24
 8001df6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001dfa:	6282      	str	r2, [r0, #40]	; 0x28
 8001dfc:	6202      	str	r2, [r0, #32]
 8001dfe:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001e00:	7702      	strb	r2, [r0, #28]
 8001e02:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8001e06:	f9b4 700e 	ldrsh.w	r7, [r4, #14]
 8001e0a:	f5c6 46ff 	rsb	r6, r6, #32640	; 0x7f80
 8001e0e:	367f      	adds	r6, #127	; 0x7f
 8001e10:	10b6      	asrs	r6, r6, #2
 8001e12:	10ff      	asrs	r7, r7, #3
 8001e14:	f8df a138 	ldr.w	sl, [pc, #312]	; 8001f50 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x174>
 8001e18:	e9d4 b300 	ldrd	fp, r3, [r4]
 8001e1c:	f506 6661 	add.w	r6, r6, #3600	; 0xe10
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001e26:	f119 39ff 	adds.w	r9, r9, #4294967295	; 0xffffffff
 8001e2a:	f0c0 8085 	bcc.w	8001f38 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x15c>
 8001e2e:	9b00      	ldr	r3, [sp, #0]
 8001e30:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001e32:	449b      	add	fp, r3
 8001e34:	2800      	cmp	r0, #0
 8001e36:	d07b      	beq.n	8001f30 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x154>
 8001e38:	4b42      	ldr	r3, [pc, #264]	; (8001f44 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x168>)
 8001e3a:	ea4f 621b 	mov.w	r2, fp, lsr #24
 8001e3e:	f93a 5012 	ldrsh.w	r5, [sl, r2, lsl #1]
 8001e42:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8001e46:	eba2 0c05 	sub.w	ip, r2, r5
 8001e4a:	f3cb 220f 	ubfx	r2, fp, #8, #16
 8001e4e:	fb02 f20c 	mul.w	r2, r2, ip
 8001e52:	eb05 4522 	add.w	r5, r5, r2, asr #16
 8001e56:	b22d      	sxth	r5, r5
 8001e58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001e5c:	10ad      	asrs	r5, r5, #2
 8001e5e:	6a22      	ldr	r2, [r4, #32]
 8001e60:	3201      	adds	r2, #1
 8001e62:	42b2      	cmp	r2, r6
 8001e64:	6222      	str	r2, [r4, #32]
 8001e66:	d92a      	bls.n	8001ebe <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0xe2>
 8001e68:	f8b4 c030 	ldrh.w	ip, [r4, #48]	; 0x30
 8001e6c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8001e70:	fa0f f38c 	sxth.w	r3, ip
 8001e74:	8623      	strh	r3, [r4, #48]	; 0x30
 8001e76:	bb03      	cbnz	r3, 8001eba <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0xde>
 8001e78:	fab0 f080 	clz	r0, r0
 8001e7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e7e:	0940      	lsrs	r0, r0, #5
 8001e80:	3201      	adds	r2, #1
 8001e82:	4931      	ldr	r1, [pc, #196]	; (8001f48 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x16c>)
 8001e84:	6262      	str	r2, [r4, #36]	; 0x24
 8001e86:	62a0      	str	r0, [r4, #40]	; 0x28
 8001e88:	0890      	lsrs	r0, r2, #2
 8001e8a:	5c08      	ldrb	r0, [r1, r0]
 8001e8c:	0052      	lsls	r2, r2, #1
 8001e8e:	f002 0206 	and.w	r2, r2, #6
 8001e92:	fa40 f202 	asr.w	r2, r0, r2
 8001e96:	f002 0003 	and.w	r0, r2, #3
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	4082      	lsls	r2, r0
 8001e9e:	3a01      	subs	r2, #1
 8001ea0:	b292      	uxth	r2, r2
 8001ea2:	2a0f      	cmp	r2, #15
 8001ea4:	bf02      	ittt	eq
 8001ea6:	2264      	moveq	r2, #100	; 0x64
 8001ea8:	8622      	strheq	r2, [r4, #48]	; 0x30
 8001eaa:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
 8001eae:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
 8001eb2:	bf12      	itee	ne
 8001eb4:	8622      	strhne	r2, [r4, #48]	; 0x30
 8001eb6:	62a3      	streq	r3, [r4, #40]	; 0x28
 8001eb8:	6262      	streq	r2, [r4, #36]	; 0x24
 8001eba:	2200      	movs	r2, #0
 8001ebc:	6222      	str	r2, [r4, #32]
 8001ebe:	f7ff fc31 	bl	8001724 <_ZN6stmlib6Random9GetSampleEv>
 8001ec2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ec4:	eb02 02a0 	add.w	r2, r2, r0, asr #2
 8001ec8:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001eca:	1212      	asrs	r2, r2, #8
 8001ecc:	2a00      	cmp	r2, #0
 8001ece:	bfb8      	it	lt
 8001ed0:	4252      	neglt	r2, r2
 8001ed2:	4297      	cmp	r7, r2
 8001ed4:	dc2e      	bgt.n	8001f34 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x158>
 8001ed6:	f5b2 5f7a 	cmp.w	r2, #16000	; 0x3e80
 8001eda:	bfa8      	it	ge
 8001edc:	f44f 527a 	movge.w	r2, #16000	; 0x3e80
 8001ee0:	9201      	str	r2, [sp, #4]
 8001ee2:	f7ff fc1f 	bl	8001724 <_ZN6stmlib6Random9GetSampleEv>
 8001ee6:	f647 7eff 	movw	lr, #32767	; 0x7fff
 8001eea:	9a01      	ldr	r2, [sp, #4]
 8001eec:	f3cb 5c87 	ubfx	ip, fp, #22, #8
 8001ef0:	4342      	muls	r2, r0
 8001ef2:	f93a c01c 	ldrsh.w	ip, [sl, ip, lsl #1]
 8001ef6:	13d2      	asrs	r2, r2, #15
 8001ef8:	fb02 f20c 	mul.w	r2, r2, ip
 8001efc:	eb05 35e2 	add.w	r5, r5, r2, asr #15
 8001f00:	4575      	cmp	r5, lr
 8001f02:	bfa8      	it	ge
 8001f04:	4675      	movge	r5, lr
 8001f06:	4911      	ldr	r1, [pc, #68]	; (8001f4c <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x170>)
 8001f08:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 8001f0c:	428d      	cmp	r5, r1
 8001f0e:	bfb8      	it	lt
 8001f10:	460d      	movlt	r5, r1
 8001f12:	fb05 f005 	mul.w	r0, r5, r5
 8001f16:	1380      	asrs	r0, r0, #14
 8001f18:	4342      	muls	r2, r0
 8001f1a:	eb05 35e2 	add.w	r5, r5, r2, asr #15
 8001f1e:	4575      	cmp	r5, lr
 8001f20:	bfa8      	it	ge
 8001f22:	4675      	movge	r5, lr
 8001f24:	428d      	cmp	r5, r1
 8001f26:	bfb8      	it	lt
 8001f28:	460d      	movlt	r5, r1
 8001f2a:	f828 5b02 	strh.w	r5, [r8], #2
 8001f2e:	e77a      	b.n	8001e26 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x4a>
 8001f30:	4605      	mov	r5, r0
 8001f32:	e794      	b.n	8001e5e <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x82>
 8001f34:	463a      	mov	r2, r7
 8001f36:	e7d3      	b.n	8001ee0 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x104>
 8001f38:	f8c4 b000 	str.w	fp, [r4]
 8001f3c:	b003      	add	sp, #12
 8001f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f42:	bf00      	nop
 8001f44:	0800ca60 	.word	0x0800ca60
 8001f48:	0800c434 	.word	0x0800c434
 8001f4c:	ffff8001 	.word	0xffff8001
 8001f50:	0800ca5e 	.word	0x0800ca5e

08001f54 <_ZN6braids17DigitalOscillator11RenderSnareEPKhPsj>:
 8001f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f58:	4698      	mov	r8, r3
 8001f5a:	7ec3      	ldrb	r3, [r0, #27]
 8001f5c:	b089      	sub	sp, #36	; 0x24
 8001f5e:	4604      	mov	r4, r0
 8001f60:	4616      	mov	r6, r2
 8001f62:	f500 7b9a 	add.w	fp, r0, #308	; 0x134
 8001f66:	f500 7aaa 	add.w	sl, r0, #340	; 0x154
 8001f6a:	f500 79ba 	add.w	r9, r0, #372	; 0x174
 8001f6e:	b3c3      	cbz	r3, 8001fe2 <_ZN6braids17DigitalOscillator11RenderSnareEPKhPsj+0x8e>
 8001f70:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f74:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001f78:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
 8001f7c:	2330      	movs	r3, #48	; 0x30
 8001f7e:	e9c0 323e 	strd	r3, r2, [r0, #248]	; 0xf8
 8001f82:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8001f86:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001f8a:	2500      	movs	r5, #0
 8001f8c:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 8001f90:	f640 73fd 	movw	r3, #4093	; 0xffd
 8001f94:	f8c0 50e4 	str.w	r5, [r0, #228]	; 0xe4
 8001f98:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 8001f9c:	e9c0 553b 	strd	r5, r5, [r0, #236]	; 0xec
 8001fa0:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
 8001fa4:	f8c0 5104 	str.w	r5, [r0, #260]	; 0x104
 8001fa8:	f8c0 5114 	str.w	r5, [r0, #276]	; 0x114
 8001fac:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
 8001fb0:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
 8001fb4:	f8c0 5128 	str.w	r5, [r0, #296]	; 0x128
 8001fb8:	f8c0 512c 	str.w	r5, [r0, #300]	; 0x12c
 8001fbc:	4658      	mov	r0, fp
 8001fbe:	f7ff f8e4 	bl	800118a <_ZN6braids3Svf4InitEv>
 8001fc2:	4650      	mov	r0, sl
 8001fc4:	f7ff f8e1 	bl	800118a <_ZN6braids3Svf4InitEv>
 8001fc8:	4648      	mov	r0, r9
 8001fca:	f7ff f8de 	bl	800118a <_ZN6braids3Svf4InitEv>
 8001fce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001fd2:	f8a4 3178 	strh.w	r3, [r4, #376]	; 0x178
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	76e5      	strb	r5, [r4, #27]
 8001fda:	f884 3174 	strb.w	r3, [r4, #372]	; 0x174
 8001fde:	f884 3190 	strb.w	r3, [r4, #400]	; 0x190
 8001fe2:	7f23      	ldrb	r3, [r4, #28]
 8001fe4:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d051      	beq.n	8002090 <_ZN6braids17DigitalOscillator11RenderSnareEPKhPsj+0x13c>
 8001fec:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 8001ff0:	f5c1 4040 	rsb	r0, r1, #49152	; 0xc000
 8001ff4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001ff8:	bfb4      	ite	lt
 8001ffa:	2300      	movlt	r3, #0
 8001ffc:	f5a2 4380 	subge.w	r3, r2, #16384	; 0x4000
 8002000:	4403      	add	r3, r0
 8002002:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002006:	4283      	cmp	r3, r0
 8002008:	bfa8      	it	ge
 800200a:	4603      	movge	r3, r0
 800200c:	f3c3 104f 	ubfx	r0, r3, #5, #16
 8002010:	139b      	asrs	r3, r3, #14
 8002012:	f603 73fc 	addw	r3, r3, #4092	; 0xffc
 8002016:	b29b      	uxth	r3, r3
 8002018:	f500 45e2 	add.w	r5, r0, #28928	; 0x7100
 800201c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002020:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
 8002024:	3548      	adds	r5, #72	; 0x48
 8002026:	f8a4 5138 	strh.w	r5, [r4, #312]	; 0x138
 800202a:	2501      	movs	r5, #1
 800202c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8002030:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 8002034:	f5b2 5f60 	cmp.w	r2, #14336	; 0x3800
 8002038:	442b      	add	r3, r5
 800203a:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 800203e:	4b53      	ldr	r3, [pc, #332]	; (800218c <_ZN6braids17DigitalOscillator11RenderSnareEPKhPsj+0x238>)
 8002040:	bfa8      	it	ge
 8002042:	f44f 5260 	movge.w	r2, #14336	; 0x3800
 8002046:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 800204a:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 800204e:	f500 40cf 	add.w	r0, r0, #26496	; 0x6780
 8002052:	442b      	add	r3, r5
 8002054:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002058:	f243 3333 	movw	r3, #13107	; 0x3333
 800205c:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 8002060:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8002064:	40aa      	lsls	r2, r5
 8002066:	442b      	add	r3, r5
 8002068:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 800206c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002070:	3004      	adds	r0, #4
 8002072:	442b      	add	r3, r5
 8002074:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8002078:	2300      	movs	r3, #0
 800207a:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800207e:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8002082:	f8a4 0158 	strh.w	r0, [r4, #344]	; 0x158
 8002086:	f884 5154 	strb.w	r5, [r4, #340]	; 0x154
 800208a:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
 800208e:	7723      	strb	r3, [r4, #28]
 8002090:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
 8002094:	b209      	sxth	r1, r1
 8002096:	4658      	mov	r0, fp
 8002098:	f7ff f885 	bl	80011a6 <_ZN6braids3Svf13set_frequencyEs>
 800209c:	8b21      	ldrh	r1, [r4, #24]
 800209e:	4650      	mov	r0, sl
 80020a0:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 80020a4:	b209      	sxth	r1, r1
 80020a6:	f7ff f87e 	bl	80011a6 <_ZN6braids3Svf13set_frequencyEs>
 80020aa:	8b21      	ldrh	r1, [r4, #24]
 80020ac:	4648      	mov	r0, r9
 80020ae:	f501 51f0 	add.w	r1, r1, #7680	; 0x1e00
 80020b2:	b209      	sxth	r1, r1
 80020b4:	f7ff f877 	bl	80011a6 <_ZN6braids3Svf13set_frequencyEs>
 80020b8:	f245 52f0 	movw	r2, #22000	; 0x55f0
 80020bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020c0:	3604      	adds	r6, #4
 80020c2:	105b      	asrs	r3, r3, #1
 80020c4:	1ad1      	subs	r1, r2, r3
 80020c6:	4413      	add	r3, r2
 80020c8:	9302      	str	r3, [sp, #8]
 80020ca:	f104 03e4 	add.w	r3, r4, #228	; 0xe4
 80020ce:	9304      	str	r3, [sp, #16]
 80020d0:	f104 03f8 	add.w	r3, r4, #248	; 0xf8
 80020d4:	9101      	str	r1, [sp, #4]
 80020d6:	9305      	str	r3, [sp, #20]
 80020d8:	f1b8 0f00 	cmp.w	r8, #0
 80020dc:	d052      	beq.n	8002184 <_ZN6braids17DigitalOscillator11RenderSnareEPKhPsj+0x230>
 80020de:	9804      	ldr	r0, [sp, #16]
 80020e0:	f7ff f83c 	bl	800115c <_ZN6braids10Excitation7ProcessEv>
 80020e4:	4607      	mov	r7, r0
 80020e6:	9805      	ldr	r0, [sp, #20]
 80020e8:	f7ff f838 	bl	800115c <_ZN6braids10Excitation7ProcessEv>
 80020ec:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80020f0:	4438      	add	r0, r7
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f640 273d 	movw	r7, #2621	; 0xa3d
 80020f8:	bf08      	it	eq
 80020fa:	2700      	moveq	r7, #0
 80020fc:	4407      	add	r7, r0
 80020fe:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 8002102:	f7ff f82b 	bl	800115c <_ZN6braids10Excitation7ProcessEv>
 8002106:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800210a:	f243 3533 	movw	r5, #13107	; 0x3333
 800210e:	2b00      	cmp	r3, #0
 8002110:	bf08      	it	eq
 8002112:	2500      	moveq	r5, #0
 8002114:	4405      	add	r5, r0
 8002116:	f7ff fb05 	bl	8001724 <_ZN6stmlib6Random9GetSampleEv>
 800211a:	9003      	str	r0, [sp, #12]
 800211c:	f504 7090 	add.w	r0, r4, #288	; 0x120
 8002120:	f7ff f81c 	bl	800115c <_ZN6braids10Excitation7ProcessEv>
 8002124:	4639      	mov	r1, r7
 8002126:	9007      	str	r0, [sp, #28]
 8002128:	4658      	mov	r0, fp
 800212a:	f7ff f847 	bl	80011bc <_ZN6braids3Svf7ProcessEl>
 800212e:	4629      	mov	r1, r5
 8002130:	9006      	str	r0, [sp, #24]
 8002132:	4650      	mov	r0, sl
 8002134:	f7ff f842 	bl	80011bc <_ZN6braids3Svf7ProcessEl>
 8002138:	9b06      	ldr	r3, [sp, #24]
 800213a:	9a02      	ldr	r2, [sp, #8]
 800213c:	eb03 1727 	add.w	r7, r3, r7, asr #4
 8002140:	9b01      	ldr	r3, [sp, #4]
 8002142:	9903      	ldr	r1, [sp, #12]
 8002144:	437b      	muls	r3, r7
 8002146:	eb00 1725 	add.w	r7, r0, r5, asr #4
 800214a:	4357      	muls	r7, r2
 800214c:	9a07      	ldr	r2, [sp, #28]
 800214e:	13ff      	asrs	r7, r7, #15
 8002150:	4351      	muls	r1, r2
 8002152:	4648      	mov	r0, r9
 8002154:	13c9      	asrs	r1, r1, #15
 8002156:	eb07 37e3 	add.w	r7, r7, r3, asr #15
 800215a:	f7ff f82f 	bl	80011bc <_ZN6braids3Svf7ProcessEl>
 800215e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002162:	4407      	add	r7, r0
 8002164:	429f      	cmp	r7, r3
 8002166:	bfa8      	it	ge
 8002168:	461f      	movge	r7, r3
 800216a:	4b09      	ldr	r3, [pc, #36]	; (8002190 <_ZN6braids17DigitalOscillator11RenderSnareEPKhPsj+0x23c>)
 800216c:	f1a8 0802 	sub.w	r8, r8, #2
 8002170:	429f      	cmp	r7, r3
 8002172:	bfb8      	it	lt
 8002174:	461f      	movlt	r7, r3
 8002176:	b23f      	sxth	r7, r7
 8002178:	f826 7c04 	strh.w	r7, [r6, #-4]
 800217c:	f826 7c02 	strh.w	r7, [r6, #-2]
 8002180:	3604      	adds	r6, #4
 8002182:	e7a9      	b.n	80020d8 <_ZN6braids17DigitalOscillator11RenderSnareEPKhPsj+0x184>
 8002184:	b009      	add	sp, #36	; 0x24
 8002186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800218a:	bf00      	nop
 800218c:	ffff8000 	.word	0xffff8000
 8002190:	ffff8001 	.word	0xffff8001

08002194 <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj>:
 8002194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002198:	6846      	ldr	r6, [r0, #4]
 800219a:	7f01      	ldrb	r1, [r0, #28]
 800219c:	469b      	mov	fp, r3
 800219e:	0073      	lsls	r3, r6, #1
 80021a0:	b08b      	sub	sp, #44	; 0x2c
 80021a2:	4604      	mov	r4, r0
 80021a4:	6043      	str	r3, [r0, #4]
 80021a6:	b381      	cbz	r1, 800220a <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0x76>
 80021a8:	7e81      	ldrb	r1, [r0, #26]
 80021aa:	2500      	movs	r5, #0
 80021ac:	3101      	adds	r1, #1
 80021ae:	b2c9      	uxtb	r1, r1
 80021b0:	2902      	cmp	r1, #2
 80021b2:	bf88      	it	hi
 80021b4:	2100      	movhi	r1, #0
 80021b6:	7681      	strb	r1, [r0, #26]
 80021b8:	7e81      	ldrb	r1, [r0, #26]
 80021ba:	2028      	movs	r0, #40	; 0x28
 80021bc:	469c      	mov	ip, r3
 80021be:	fb00 4001 	mla	r0, r0, r1, r4
 80021c2:	6285      	str	r5, [r0, #40]	; 0x28
 80021c4:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
 80021c8:	6a87      	ldr	r7, [r0, #40]	; 0x28
 80021ca:	dd04      	ble.n	80021d6 <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0x42>
 80021cc:	3701      	adds	r7, #1
 80021ce:	ea4f 0c6c 	mov.w	ip, ip, asr #1
 80021d2:	6287      	str	r7, [r0, #40]	; 0x28
 80021d4:	e7f6      	b.n	80021c4 <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0x30>
 80021d6:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80021da:	413d      	asrs	r5, r7
 80021dc:	2728      	movs	r7, #40	; 0x28
 80021de:	fb07 4101 	mla	r1, r7, r1, r4
 80021e2:	2700      	movs	r7, #0
 80021e4:	620d      	str	r5, [r1, #32]
 80021e6:	00b6      	lsls	r6, r6, #2
 80021e8:	3d01      	subs	r5, #1
 80021ea:	62c5      	str	r5, [r0, #44]	; 0x2c
 80021ec:	e9c1 360f 	strd	r3, r6, [r1, #60]	; 0x3c
 80021f0:	624f      	str	r7, [r1, #36]	; 0x24
 80021f2:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 80021f6:	6a0d      	ldr	r5, [r1, #32]
 80021f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80021fc:	1040      	asrs	r0, r0, #1
 80021fe:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
 8002202:	4368      	muls	r0, r5
 8002204:	0c00      	lsrs	r0, r0, #16
 8002206:	6348      	str	r0, [r1, #52]	; 0x34
 8002208:	7727      	strb	r7, [r4, #28]
 800220a:	2028      	movs	r0, #40	; 0x28
 800220c:	7ea1      	ldrb	r1, [r4, #26]
 800220e:	fb00 4101 	mla	r1, r0, r1, r4
 8002212:	6c08      	ldr	r0, [r1, #64]	; 0x40
 8002214:	4298      	cmp	r0, r3
 8002216:	bf94      	ite	ls
 8002218:	63c8      	strls	r0, [r1, #60]	; 0x3c
 800221a:	63cb      	strhi	r3, [r1, #60]	; 0x3c
 800221c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8002220:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8002224:	f2c0 80a1 	blt.w	800236a <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0x1d6>
 8002228:	10c9      	asrs	r1, r1, #3
 800222a:	eba1 1141 	sub.w	r1, r1, r1, lsl #5
 800222e:	f501 3300 	add.w	r3, r1, #131072	; 0x20000
 8002232:	9302      	str	r3, [sp, #8]
 8002234:	2300      	movs	r3, #0
 8002236:	9301      	str	r3, [sp, #4]
 8002238:	9b01      	ldr	r3, [sp, #4]
 800223a:	f9b4 8044 	ldrsh.w	r8, [r4, #68]	; 0x44
 800223e:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
 8002242:	f102 0904 	add.w	r9, r2, #4
 8002246:	9306      	str	r3, [sp, #24]
 8002248:	f1bb 0f00 	cmp.w	fp, #0
 800224c:	f000 8088 	beq.w	8002360 <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0x1cc>
 8002250:	4625      	mov	r5, r4
 8002252:	f44f 7aca 	mov.w	sl, #404	; 0x194
 8002256:	2600      	movs	r6, #0
 8002258:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800225a:	eb04 070a 	add.w	r7, r4, sl
 800225e:	b373      	cbz	r3, 80022be <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0x12a>
 8002260:	3b01      	subs	r3, #1
 8002262:	636b      	str	r3, [r5, #52]	; 0x34
 8002264:	f937 3013 	ldrsh.w	r3, [r7, r3, lsl #1]
 8002268:	9303      	str	r3, [sp, #12]
 800226a:	f7ff fa5b 	bl	8001724 <_ZN6stmlib6Random9GetSampleEv>
 800226e:	9b03      	ldr	r3, [sp, #12]
 8002270:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002274:	4403      	add	r3, r0
 8002276:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002278:	109b      	asrs	r3, r3, #2
 800227a:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 800227e:	441e      	add	r6, r3
 8002280:	f641 139a 	movw	r3, #6554	; 0x199a
 8002284:	f60a 0a02 	addw	sl, sl, #2050	; 0x802
 8002288:	459a      	cmp	sl, r3
 800228a:	f105 0528 	add.w	r5, r5, #40	; 0x28
 800228e:	d1e3      	bne.n	8002258 <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0xc4>
 8002290:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002294:	429e      	cmp	r6, r3
 8002296:	bfa8      	it	ge
 8002298:	461e      	movge	r6, r3
 800229a:	4b3d      	ldr	r3, [pc, #244]	; (8002390 <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0x1fc>)
 800229c:	f1ab 0b02 	sub.w	fp, fp, #2
 80022a0:	429e      	cmp	r6, r3
 80022a2:	bfb8      	it	lt
 80022a4:	461e      	movlt	r6, r3
 80022a6:	44b0      	add	r8, r6
 80022a8:	ea4f 0868 	mov.w	r8, r8, asr #1
 80022ac:	f829 8c04 	strh.w	r8, [r9, #-4]
 80022b0:	fa0f f886 	sxth.w	r8, r6
 80022b4:	f829 8c02 	strh.w	r8, [r9, #-2]
 80022b8:	f109 0904 	add.w	r9, r9, #4
 80022bc:	e7c4      	b.n	8002248 <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0xb4>
 80022be:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80022c0:	e9d5 320e 	ldrd	r3, r2, [r5, #56]	; 0x38
 80022c4:	3116      	adds	r1, #22
 80022c6:	4413      	add	r3, r2
 80022c8:	63ab      	str	r3, [r5, #56]	; 0x38
 80022ca:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80022cc:	40cb      	lsrs	r3, r1
 80022ce:	3302      	adds	r3, #2
 80022d0:	4003      	ands	r3, r0
 80022d2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80022d4:	9304      	str	r3, [sp, #16]
 80022d6:	9b04      	ldr	r3, [sp, #16]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d02c      	beq.n	8002336 <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0x1a2>
 80022dc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80022de:	1c51      	adds	r1, r2, #1
 80022e0:	4019      	ands	r1, r3
 80022e2:	0053      	lsls	r3, r2, #1
 80022e4:	9305      	str	r3, [sp, #20]
 80022e6:	f937 3012 	ldrsh.w	r3, [r7, r2, lsl #1]
 80022ea:	9107      	str	r1, [sp, #28]
 80022ec:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80022f0:	f937 3011 	ldrsh.w	r3, [r7, r1, lsl #1]
 80022f4:	9303      	str	r3, [sp, #12]
 80022f6:	f7ff f8a1 	bl	800143c <_ZN6stmlib6Random7GetWordEv>
 80022fa:	9b02      	ldr	r3, [sp, #8]
 80022fc:	b280      	uxth	r0, r0
 80022fe:	4298      	cmp	r0, r3
 8002300:	9907      	ldr	r1, [sp, #28]
 8002302:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002304:	d80f      	bhi.n	8002326 <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0x192>
 8002306:	9803      	ldr	r0, [sp, #12]
 8002308:	9b08      	ldr	r3, [sp, #32]
 800230a:	181b      	adds	r3, r3, r0
 800230c:	bf48      	it	mi
 800230e:	425b      	negmi	r3, r3
 8002310:	9801      	ldr	r0, [sp, #4]
 8002312:	bf46      	itte	mi
 8002314:	105b      	asrmi	r3, r3, #1
 8002316:	425b      	negmi	r3, r3
 8002318:	105b      	asrpl	r3, r3, #1
 800231a:	b110      	cbz	r0, 8002322 <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0x18e>
 800231c:	9806      	ldr	r0, [sp, #24]
 800231e:	4343      	muls	r3, r0
 8002320:	13db      	asrs	r3, r3, #15
 8002322:	9805      	ldr	r0, [sp, #20]
 8002324:	523b      	strh	r3, [r7, r0]
 8002326:	b922      	cbnz	r2, 8002332 <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0x19e>
 8002328:	f934 200a 	ldrsh.w	r2, [r4, sl]
 800232c:	6a2b      	ldr	r3, [r5, #32]
 800232e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8002332:	460a      	mov	r2, r1
 8002334:	e7cf      	b.n	80022d6 <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0x142>
 8002336:	626a      	str	r2, [r5, #36]	; 0x24
 8002338:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800233a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
 8002340:	0d9a      	lsrs	r2, r3, #22
 8002342:	f937 1012 	ldrsh.w	r1, [r7, r2, lsl #1]
 8002346:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 800234a:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800234e:	f3c3 138f 	ubfx	r3, r3, #6, #16
 8002352:	1a40      	subs	r0, r0, r1
 8002354:	4343      	muls	r3, r0
 8002356:	eb01 4123 	add.w	r1, r1, r3, asr #16
 800235a:	b209      	sxth	r1, r1
 800235c:	440e      	add	r6, r1
 800235e:	e78f      	b.n	8002280 <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0xec>
 8002360:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
 8002364:	b00b      	add	sp, #44	; 0x2c
 8002366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800236a:	0b9b      	lsrs	r3, r3, #14
 800236c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002370:	b21b      	sxth	r3, r3
 8002372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002376:	bfb8      	it	lt
 8002378:	f44f 7380 	movlt.w	r3, #256	; 0x100
 800237c:	f5c1 4180 	rsb	r1, r1, #16384	; 0x4000
 8002380:	434b      	muls	r3, r1
 8002382:	f343 338f 	sbfx	r3, r3, #14, #16
 8002386:	9301      	str	r3, [sp, #4]
 8002388:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800238c:	9302      	str	r3, [sp, #8]
 800238e:	e753      	b.n	8002238 <_ZN6braids17DigitalOscillator13RenderPluckedEPKhPsj+0xa4>
 8002390:	ffff8001 	.word	0xffff8001

08002394 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>:
 8002394:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8002398:	4299      	cmp	r1, r3
 800239a:	bfa8      	it	ge
 800239c:	4619      	movge	r1, r3
 800239e:	2000      	movs	r0, #0
 80023a0:	b510      	push	{r4, lr}
 80023a2:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
 80023a6:	f511 61c0 	adds.w	r1, r1, #1536	; 0x600
 80023aa:	f100 0001 	add.w	r0, r0, #1
 80023ae:	d4fa      	bmi.n	80023a6 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs+0x12>
 80023b0:	4c07      	ldr	r4, [pc, #28]	; (80023d0 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs+0x3c>)
 80023b2:	110a      	asrs	r2, r1, #4
 80023b4:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 80023b8:	3201      	adds	r2, #1
 80023ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80023be:	f001 010f 	and.w	r1, r1, #15
 80023c2:	1ad2      	subs	r2, r2, r3
 80023c4:	4351      	muls	r1, r2
 80023c6:	eb03 1121 	add.w	r1, r3, r1, asr #4
 80023ca:	fa21 f000 	lsr.w	r0, r1, r0
 80023ce:	bd10      	pop	{r4, pc}
 80023d0:	0800bca8 	.word	0x0800bca8

080023d4 <_ZN6braids17DigitalOscillator19RenderTripleRingModEPKhPsj>:
 80023d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023d8:	4688      	mov	r8, r1
 80023da:	e9d0 760b 	ldrd	r7, r6, [r0, #44]	; 0x2c
 80023de:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 80023e2:	4604      	mov	r4, r0
 80023e4:	f8b0 a018 	ldrh.w	sl, [r0, #24]
 80023e8:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
 80023ec:	4699      	mov	r9, r3
 80023ee:	eb0a 01a1 	add.w	r1, sl, r1, asr #2
 80023f2:	6843      	ldr	r3, [r0, #4]
 80023f4:	b087      	sub	sp, #28
 80023f6:	b209      	sxth	r1, r1
 80023f8:	9302      	str	r3, [sp, #8]
 80023fa:	9201      	str	r2, [sp, #4]
 80023fc:	6805      	ldr	r5, [r0, #0]
 80023fe:	f7ff ffc9 	bl	8002394 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
 8002402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002406:	9003      	str	r0, [sp, #12]
 8002408:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
 800240c:	eb0a 01a1 	add.w	r1, sl, r1, asr #2
 8002410:	b209      	sxth	r1, r1
 8002412:	4620      	mov	r0, r4
 8002414:	f7ff ffbe 	bl	8002394 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
 8002418:	9004      	str	r0, [sp, #16]
 800241a:	4834      	ldr	r0, [pc, #208]	; (80024ec <_ZN6braids17DigitalOscillator19RenderTripleRingModEPKhPsj+0x118>)
 800241c:	eb08 0309 	add.w	r3, r8, r9
 8002420:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8002424:	9305      	str	r3, [sp, #20]
 8002426:	f100 0c02 	add.w	ip, r0, #2
 800242a:	9b05      	ldr	r3, [sp, #20]
 800242c:	4598      	cmp	r8, r3
 800242e:	d054      	beq.n	80024da <_ZN6braids17DigitalOscillator19RenderTripleRingModEPKhPsj+0x106>
 8002430:	f818 3b01 	ldrb.w	r3, [r8], #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d14c      	bne.n	80024d2 <_ZN6braids17DigitalOscillator19RenderTripleRingModEPKhPsj+0xfe>
 8002438:	9b02      	ldr	r3, [sp, #8]
 800243a:	441d      	add	r5, r3
 800243c:	ea4f 6e15 	mov.w	lr, r5, lsr #24
 8002440:	f930 101e 	ldrsh.w	r1, [r0, lr, lsl #1]
 8002444:	f93c 901e 	ldrsh.w	r9, [ip, lr, lsl #1]
 8002448:	9b03      	ldr	r3, [sp, #12]
 800244a:	eba9 0901 	sub.w	r9, r9, r1
 800244e:	f3c5 2e0f 	ubfx	lr, r5, #8, #16
 8002452:	441f      	add	r7, r3
 8002454:	fb0e fe09 	mul.w	lr, lr, r9
 8002458:	ea4f 6b17 	mov.w	fp, r7, lsr #24
 800245c:	f930 201b 	ldrsh.w	r2, [r0, fp, lsl #1]
 8002460:	f93c 901b 	ldrsh.w	r9, [ip, fp, lsl #1]
 8002464:	eb01 412e 	add.w	r1, r1, lr, asr #16
 8002468:	eba9 0902 	sub.w	r9, r9, r2
 800246c:	f3c7 2e0f 	ubfx	lr, r7, #8, #16
 8002470:	fb0e fe09 	mul.w	lr, lr, r9
 8002474:	9b04      	ldr	r3, [sp, #16]
 8002476:	eb02 4e2e 	add.w	lr, r2, lr, asr #16
 800247a:	441e      	add	r6, r3
 800247c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8002480:	fa0f fe8e 	sxth.w	lr, lr
 8002484:	b209      	sxth	r1, r1
 8002486:	f930 301a 	ldrsh.w	r3, [r0, sl, lsl #1]
 800248a:	fb0e f101 	mul.w	r1, lr, r1
 800248e:	f93c e01a 	ldrsh.w	lr, [ip, sl, lsl #1]
 8002492:	f3c6 220f 	ubfx	r2, r6, #8, #16
 8002496:	ebae 0e03 	sub.w	lr, lr, r3
 800249a:	fb02 f20e 	mul.w	r2, r2, lr
 800249e:	eb03 4222 	add.w	r2, r3, r2, asr #16
 80024a2:	b212      	sxth	r2, r2
 80024a4:	1409      	asrs	r1, r1, #16
 80024a6:	4351      	muls	r1, r2
 80024a8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80024ac:	0c09      	lsrs	r1, r1, #16
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <_ZN6braids17DigitalOscillator19RenderTripleRingModEPKhPsj+0x11c>)
 80024b0:	120a      	asrs	r2, r1, #8
 80024b2:	f933 e012 	ldrsh.w	lr, [r3, r2, lsl #1]
 80024b6:	3302      	adds	r3, #2
 80024b8:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 80024bc:	b2c9      	uxtb	r1, r1
 80024be:	eba2 020e 	sub.w	r2, r2, lr
 80024c2:	4351      	muls	r1, r2
 80024c4:	9b01      	ldr	r3, [sp, #4]
 80024c6:	eb0e 2121 	add.w	r1, lr, r1, asr #8
 80024ca:	f823 1b02 	strh.w	r1, [r3], #2
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	e7ab      	b.n	800242a <_ZN6braids17DigitalOscillator19RenderTripleRingModEPKhPsj+0x56>
 80024d2:	2600      	movs	r6, #0
 80024d4:	4637      	mov	r7, r6
 80024d6:	4635      	mov	r5, r6
 80024d8:	e7b0      	b.n	800243c <_ZN6braids17DigitalOscillator19RenderTripleRingModEPKhPsj+0x68>
 80024da:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80024de:	6025      	str	r5, [r4, #0]
 80024e0:	e9c4 760b 	strd	r7, r6, [r4, #44]	; 0x2c
 80024e4:	b007      	add	sp, #28
 80024e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024ea:	bf00      	nop
 80024ec:	0800ca5e 	.word	0x0800ca5e
 80024f0:	08009c88 	.word	0x08009c88

080024f4 <_ZN6braids17DigitalOscillator14RenderSawSwarmEPKhPsj>:
 80024f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024f8:	4604      	mov	r4, r0
 80024fa:	f04f 0900 	mov.w	r9, #0
 80024fe:	f9b0 500c 	ldrsh.w	r5, [r0, #12]
 8002502:	b095      	sub	sp, #84	; 0x54
 8002504:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002508:	436d      	muls	r5, r5
 800250a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800250e:	126d      	asrs	r5, r5, #9
 8002510:	8b02      	ldrh	r2, [r0, #24]
 8002512:	4698      	mov	r8, r3
 8002514:	eba5 0a85 	sub.w	sl, r5, r5, lsl #2
 8002518:	ab0d      	add	r3, sp, #52	; 0x34
 800251a:	eb02 472a 	add.w	r7, r2, sl, asr #16
 800251e:	b2bf      	uxth	r7, r7
 8002520:	b239      	sxth	r1, r7
 8002522:	4620      	mov	r0, r4
 8002524:	9304      	str	r3, [sp, #16]
 8002526:	9203      	str	r2, [sp, #12]
 8002528:	f7ff ff34 	bl	8002394 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
 800252c:	1c79      	adds	r1, r7, #1
 800252e:	4683      	mov	fp, r0
 8002530:	b209      	sxth	r1, r1
 8002532:	4620      	mov	r0, r4
 8002534:	f7ff ff2e 	bl	8002394 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
 8002538:	eba0 010b 	sub.w	r1, r0, fp
 800253c:	fa1f f08a 	uxth.w	r0, sl
 8002540:	4348      	muls	r0, r1
 8002542:	9b04      	ldr	r3, [sp, #16]
 8002544:	eb0b 4020 	add.w	r0, fp, r0, asr #16
 8002548:	f843 0029 	str.w	r0, [r3, r9, lsl #2]
 800254c:	f109 0901 	add.w	r9, r9, #1
 8002550:	f1b9 0f07 	cmp.w	r9, #7
 8002554:	44aa      	add	sl, r5
 8002556:	9a03      	ldr	r2, [sp, #12]
 8002558:	d1df      	bne.n	800251a <_ZN6braids17DigitalOscillator14RenderSawSwarmEPKhPsj+0x26>
 800255a:	7f23      	ldrb	r3, [r4, #28]
 800255c:	b15b      	cbz	r3, 8002576 <_ZN6braids17DigitalOscillator14RenderSawSwarmEPKhPsj+0x82>
 800255e:	f104 0520 	add.w	r5, r4, #32
 8002562:	f104 0738 	add.w	r7, r4, #56	; 0x38
 8002566:	f7fe ff69 	bl	800143c <_ZN6stmlib6Random7GetWordEv>
 800256a:	f845 0b04 	str.w	r0, [r5], #4
 800256e:	42af      	cmp	r7, r5
 8002570:	d1f9      	bne.n	8002566 <_ZN6braids17DigitalOscillator14RenderSawSwarmEPKhPsj+0x72>
 8002572:	2300      	movs	r3, #0
 8002574:	7723      	strb	r3, [r4, #28]
 8002576:	f642 20a9 	movw	r0, #10921	; 0x2aa9
 800257a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800257e:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 8002582:	4281      	cmp	r1, r0
 8002584:	f5a1 522a 	sub.w	r2, r1, #10880	; 0x2a80
 8002588:	bfd4      	ite	le
 800258a:	2118      	movle	r1, #24
 800258c:	210c      	movgt	r1, #12
 800258e:	f1a2 022a 	sub.w	r2, r2, #42	; 0x2a
 8002592:	bfd5      	itete	le
 8002594:	434a      	mulle	r2, r1
 8002596:	434a      	mulgt	r2, r1
 8002598:	eb03 1362 	addle.w	r3, r3, r2, asr #5
 800259c:	eb03 1362 	addgt.w	r3, r3, r2, asr #5
 80025a0:	bfd4      	ite	le
 80025a2:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 80025a6:	f383 030f 	usatgt	r3, #15, r3
 80025aa:	045b      	lsls	r3, r3, #17
 80025ac:	494f      	ldr	r1, [pc, #316]	; (80026ec <_ZN6braids17DigitalOscillator14RenderSawSwarmEPKhPsj+0x1f8>)
 80025ae:	0e18      	lsrs	r0, r3, #24
 80025b0:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
 80025b4:	3102      	adds	r1, #2
 80025b6:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 80025ba:	0a1b      	lsrs	r3, r3, #8
 80025bc:	1a89      	subs	r1, r1, r2
 80025be:	b29b      	uxth	r3, r3
 80025c0:	434b      	muls	r3, r1
 80025c2:	e9d4 0113 	ldrd	r0, r1, [r4, #76]	; 0x4c
 80025c6:	eb02 4313 	add.w	r3, r2, r3, lsr #16
 80025ca:	f647 7eff 	movw	lr, #32767	; 0x7fff
 80025ce:	2200      	movs	r2, #0
 80025d0:	fa1f fc83 	uxth.w	ip, r3
 80025d4:	4b46      	ldr	r3, [pc, #280]	; (80026f0 <_ZN6braids17DigitalOscillator14RenderSawSwarmEPKhPsj+0x1fc>)
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	930a      	str	r3, [sp, #40]	; 0x28
 80025da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80025dc:	9303      	str	r3, [sp, #12]
 80025de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80025e0:	9304      	str	r3, [sp, #16]
 80025e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80025e4:	9305      	str	r3, [sp, #20]
 80025e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80025e8:	9306      	str	r3, [sp, #24]
 80025ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80025ec:	9307      	str	r3, [sp, #28]
 80025ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80025f0:	9308      	str	r3, [sp, #32]
 80025f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80025f4:	9309      	str	r3, [sp, #36]	; 0x24
 80025f6:	9b01      	ldr	r3, [sp, #4]
 80025f8:	4443      	add	r3, r8
 80025fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80025fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80025fe:	9d01      	ldr	r5, [sp, #4]
 8002600:	429d      	cmp	r5, r3
 8002602:	d06d      	beq.n	80026e0 <_ZN6braids17DigitalOscillator14RenderSawSwarmEPKhPsj+0x1ec>
 8002604:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002608:	9501      	str	r5, [sp, #4]
 800260a:	b12b      	cbz	r3, 8002618 <_ZN6braids17DigitalOscillator14RenderSawSwarmEPKhPsj+0x124>
 800260c:	e9c4 2208 	strd	r2, r2, [r4, #32]
 8002610:	e9c4 220a 	strd	r2, r2, [r4, #40]	; 0x28
 8002614:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
 8002618:	6827      	ldr	r7, [r4, #0]
 800261a:	9b03      	ldr	r3, [sp, #12]
 800261c:	9d04      	ldr	r5, [sp, #16]
 800261e:	441f      	add	r7, r3
 8002620:	6a23      	ldr	r3, [r4, #32]
 8002622:	6027      	str	r7, [r4, #0]
 8002624:	442b      	add	r3, r5
 8002626:	6223      	str	r3, [r4, #32]
 8002628:	0cdb      	lsrs	r3, r3, #19
 800262a:	eb03 43d7 	add.w	r3, r3, r7, lsr #19
 800262e:	fb0c f701 	mul.w	r7, ip, r1
 8002632:	eb00 30e7 	add.w	r0, r0, r7, asr #15
 8002636:	4570      	cmp	r0, lr
 8002638:	bfa8      	it	ge
 800263a:	4670      	movge	r0, lr
 800263c:	4f2d      	ldr	r7, [pc, #180]	; (80026f4 <_ZN6braids17DigitalOscillator14RenderSawSwarmEPKhPsj+0x200>)
 800263e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002640:	42b8      	cmp	r0, r7
 8002642:	bfb8      	it	lt
 8002644:	4638      	movlt	r0, r7
 8002646:	9e05      	ldr	r6, [sp, #20]
 8002648:	f5a3 43e0 	sub.w	r3, r3, #28672	; 0x7000
 800264c:	eb06 0805 	add.w	r8, r6, r5
 8002650:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8002652:	9e06      	ldr	r6, [sp, #24]
 8002654:	eb03 43d8 	add.w	r3, r3, r8, lsr #19
 8002658:	eb06 0905 	add.w	r9, r6, r5
 800265c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800265e:	9e07      	ldr	r6, [sp, #28]
 8002660:	eb03 43d9 	add.w	r3, r3, r9, lsr #19
 8002664:	eb06 0a05 	add.w	sl, r6, r5
 8002668:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800266a:	9e08      	ldr	r6, [sp, #32]
 800266c:	eb03 43da 	add.w	r3, r3, sl, lsr #19
 8002670:	eb06 0b05 	add.w	fp, r6, r5
 8002674:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8002676:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002678:	eb03 43db 	add.w	r3, r3, fp, lsr #19
 800267c:	4435      	add	r5, r6
 800267e:	6365      	str	r5, [r4, #52]	; 0x34
 8002680:	eb03 45d5 	add.w	r5, r3, r5, lsr #19
 8002684:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
 8002688:	b2ad      	uxth	r5, r5
 800268a:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <_ZN6braids17DigitalOscillator14RenderSawSwarmEPKhPsj+0x204>)
 800268c:	4e1b      	ldr	r6, [pc, #108]	; (80026fc <_ZN6braids17DigitalOscillator14RenderSawSwarmEPKhPsj+0x208>)
 800268e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
 8002692:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
 8002696:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
 800269a:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
 800269e:	ea4f 2825 	mov.w	r8, r5, asr #8
 80026a2:	f933 3018 	ldrsh.w	r3, [r3, r8, lsl #1]
 80026a6:	f936 7018 	ldrsh.w	r7, [r6, r8, lsl #1]
 80026aa:	b2ed      	uxtb	r5, r5
 80026ac:	1aff      	subs	r7, r7, r3
 80026ae:	437d      	muls	r5, r7
 80026b0:	eb03 2325 	add.w	r3, r3, r5, asr #8
 80026b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80026b6:	b21b      	sxth	r3, r3
 80026b8:	434d      	muls	r5, r1
 80026ba:	eba3 33e5 	sub.w	r3, r3, r5, asr #15
 80026be:	1a1b      	subs	r3, r3, r0
 80026c0:	4573      	cmp	r3, lr
 80026c2:	fb03 f50c 	mul.w	r5, r3, ip
 80026c6:	bfa8      	it	ge
 80026c8:	4673      	movge	r3, lr
 80026ca:	4f0a      	ldr	r7, [pc, #40]	; (80026f4 <_ZN6braids17DigitalOscillator14RenderSawSwarmEPKhPsj+0x200>)
 80026cc:	eb01 31e5 	add.w	r1, r1, r5, asr #15
 80026d0:	42bb      	cmp	r3, r7
 80026d2:	bfb8      	it	lt
 80026d4:	463b      	movlt	r3, r7
 80026d6:	9d02      	ldr	r5, [sp, #8]
 80026d8:	f825 3b02 	strh.w	r3, [r5], #2
 80026dc:	9502      	str	r5, [sp, #8]
 80026de:	e78d      	b.n	80025fc <_ZN6braids17DigitalOscillator14RenderSawSwarmEPKhPsj+0x108>
 80026e0:	e9c4 0113 	strd	r0, r1, [r4, #76]	; 0x4c
 80026e4:	b015      	add	sp, #84	; 0x54
 80026e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026ea:	bf00      	nop
 80026ec:	08007e04 	.word	0x08007e04
 80026f0:	08007a00 	.word	0x08007a00
 80026f4:	ffff8001 	.word	0xffff8001
 80026f8:	08009c88 	.word	0x08009c88
 80026fc:	08009c8a 	.word	0x08009c8a

08002700 <_ZN6braids17DigitalOscillator19RenderDigitalFilterEPKhPsj>:
 8002700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002704:	469b      	mov	fp, r3
 8002706:	e9d0 9709 	ldrd	r9, r7, [r0, #36]	; 0x24
 800270a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 800270e:	4688      	mov	r8, r1
 8002710:	f5a3 6100 	sub.w	r1, r3, #2048	; 0x800
 8002714:	8b03      	ldrh	r3, [r0, #24]
 8002716:	b087      	sub	sp, #28
 8002718:	eb03 0361 	add.w	r3, r3, r1, asr #1
 800271c:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8002720:	b21b      	sxth	r3, r3
 8002722:	4299      	cmp	r1, r3
 8002724:	bfa8      	it	ge
 8002726:	4619      	movge	r1, r3
 8002728:	f8d0 a020 	ldr.w	sl, [r0, #32]
 800272c:	9202      	str	r2, [sp, #8]
 800272e:	7f46      	ldrb	r6, [r0, #29]
 8002730:	4604      	mov	r4, r0
 8002732:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8002734:	f7ff fe2e 	bl	8002394 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
 8002738:	4582      	cmp	sl, r0
 800273a:	bf27      	ittee	cs
 800273c:	ebaa 0000 	subcs.w	r0, sl, r0
 8002740:	fbb0 f0fb 	udivcs	r0, r0, fp
 8002744:	eba0 000a 	subcc.w	r0, r0, sl
 8002748:	fbb0 f3fb 	udivcc	r3, r0, fp
 800274c:	bf28      	it	cs
 800274e:	43c3      	mvncs	r3, r0
 8002750:	3e04      	subs	r6, #4
 8002752:	b2f6      	uxtb	r6, r6
 8002754:	9301      	str	r3, [sp, #4]
 8002756:	f006 0201 	and.w	r2, r6, #1
 800275a:	eb08 030b 	add.w	r3, r8, fp
 800275e:	9304      	str	r3, [sp, #16]
 8002760:	1c93      	adds	r3, r2, #2
 8002762:	f8cd a000 	str.w	sl, [sp]
 8002766:	9305      	str	r3, [sp, #20]
 8002768:	9b04      	ldr	r3, [sp, #16]
 800276a:	4598      	cmp	r8, r3
 800276c:	f000 80b0 	beq.w	80028d0 <_ZN6braids17DigitalOscillator19RenderDigitalFilterEPKhPsj+0x1d0>
 8002770:	e9d4 2100 	ldrd	r2, r1, [r4]
 8002774:	440a      	add	r2, r1
 8002776:	6022      	str	r2, [r4, #0]
 8002778:	e9dd 2300 	ldrd	r2, r3, [sp]
 800277c:	441a      	add	r2, r3
 800277e:	0b93      	lsrs	r3, r2, #14
 8002780:	9200      	str	r2, [sp, #0]
 8002782:	f818 2b01 	ldrb.w	r2, [r8], #1
 8002786:	9303      	str	r3, [sp, #12]
 8002788:	2a00      	cmp	r2, #0
 800278a:	f040 8086 	bne.w	800289a <_ZN6braids17DigitalOscillator19RenderDigitalFilterEPKhPsj+0x19a>
 800278e:	9b00      	ldr	r3, [sp, #0]
 8002790:	4499      	add	r9, r3
 8002792:	f8d4 c000 	ldr.w	ip, [r4]
 8002796:	4561      	cmp	r1, ip
 8002798:	bf88      	it	hi
 800279a:	4b52      	ldrhi	r3, [pc, #328]	; (80028e4 <_ZN6braids17DigitalOscillator19RenderDigitalFilterEPKhPsj+0x1e4>)
 800279c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80027a0:	bf88      	it	hi
 80027a2:	f853 9026 	ldrhi.w	r9, [r3, r6, lsl #2]
 80027a6:	ebb1 0f4c 	cmp.w	r1, ip, lsl #1
 80027aa:	bf81      	itttt	hi
 80027ac:	f894 2030 	ldrbhi.w	r2, [r4, #48]	; 0x30
 80027b0:	4b4c      	ldrhi	r3, [pc, #304]	; (80028e4 <_ZN6braids17DigitalOscillator19RenderDigitalFilterEPKhPsj+0x1e4>)
 80027b2:	f082 0201 	eorhi.w	r2, r2, #1
 80027b6:	f884 2030 	strbhi.w	r2, [r4, #48]	; 0x30
 80027ba:	bf88      	it	hi
 80027bc:	9a05      	ldrhi	r2, [sp, #20]
 80027be:	494a      	ldr	r1, [pc, #296]	; (80028e8 <_ZN6braids17DigitalOscillator19RenderDigitalFilterEPKhPsj+0x1e8>)
 80027c0:	bf8c      	ite	hi
 80027c2:	f853 7022 	ldrhi.w	r7, [r3, r2, lsl #2]
 80027c6:	9b00      	ldrls	r3, [sp, #0]
 80027c8:	ea4f 6219 	mov.w	r2, r9, lsr #24
 80027cc:	f931 0012 	ldrsh.w	r0, [r1, r2, lsl #1]
 80027d0:	f101 0102 	add.w	r1, r1, #2
 80027d4:	bf98      	it	ls
 80027d6:	18ff      	addls	r7, r7, r3
 80027d8:	460b      	mov	r3, r1
 80027da:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80027de:	f3c9 220f 	ubfx	r2, r9, #8, #16
 80027e2:	1a09      	subs	r1, r1, r0
 80027e4:	434a      	muls	r2, r1
 80027e6:	1e99      	subs	r1, r3, #2
 80027e8:	eb00 4022 	add.w	r0, r0, r2, asr #16
 80027ec:	0e3a      	lsrs	r2, r7, #24
 80027ee:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80027f2:	f933 e012 	ldrsh.w	lr, [r3, r2, lsl #1]
 80027f6:	f3c7 220f 	ubfx	r2, r7, #8, #16
 80027fa:	ebae 0e01 	sub.w	lr, lr, r1
 80027fe:	fb02 f20e 	mul.w	r2, r2, lr
 8002802:	eb01 4122 	add.w	r1, r1, r2, asr #16
 8002806:	f3cc 32cf 	ubfx	r2, ip, #15, #16
 800280a:	ea6f 0e02 	mvn.w	lr, r2
 800280e:	fa1f f38e 	uxth.w	r3, lr
 8002812:	f9b4 e00e 	ldrsh.w	lr, [r4, #14]
 8002816:	b209      	sxth	r1, r1
 8002818:	f5be 4f80 	cmp.w	lr, #16384	; 0x4000
 800281c:	bfb8      	it	lt
 800281e:	ea6f 4c1c 	mvnlt.w	ip, ip, lsr #16
 8002822:	fb01 f103 	mul.w	r1, r1, r3
 8002826:	bfa8      	it	ge
 8002828:	ea82 7cec 	eorge.w	ip, r2, ip, asr #31
 800282c:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8002830:	b200      	sxth	r0, r0
 8002832:	fa1f fc8c 	uxth.w	ip, ip
 8002836:	1409      	asrs	r1, r1, #16
 8002838:	b102      	cbz	r2, 800283c <_ZN6braids17DigitalOscillator19RenderDigitalFilterEPKhPsj+0x13c>
 800283a:	4249      	negs	r1, r1
 800283c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8002840:	4b2a      	ldr	r3, [pc, #168]	; (80028ec <_ZN6braids17DigitalOscillator19RenderDigitalFilterEPKhPsj+0x1ec>)
 8002842:	434a      	muls	r2, r1
 8002844:	eb05 4522 	add.w	r5, r5, r2, asr #16
 8002848:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800284c:	4295      	cmp	r5, r2
 800284e:	bfa8      	it	ge
 8002850:	4615      	movge	r5, r2
 8002852:	429d      	cmp	r5, r3
 8002854:	bfb8      	it	lt
 8002856:	461d      	movlt	r5, r3
 8002858:	07b3      	lsls	r3, r6, #30
 800285a:	d527      	bpl.n	80028ac <_ZN6braids17DigitalOscillator19RenderDigitalFilterEPKhPsj+0x1ac>
 800285c:	fb0c fc00 	mul.w	ip, ip, r0
 8002860:	b209      	sxth	r1, r1
 8002862:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8002866:	fa1f f28e 	uxth.w	r2, lr
 800286a:	f5be 4f80 	cmp.w	lr, #16384	; 0x4000
 800286e:	bfaa      	itet	ge
 8002870:	ea6f 0e02 	mvnge.w	lr, r2
 8002874:	ea4f 0e82 	movlt.w	lr, r2, lsl #2
 8002878:	ea4f 0e8e 	movge.w	lr, lr, lsl #2
 800287c:	fa1f fe8e 	uxth.w	lr, lr
 8002880:	fb0e f101 	mul.w	r1, lr, r1
 8002884:	f5ce 407f 	rsb	r0, lr, #65280	; 0xff00
 8002888:	30ff      	adds	r0, #255	; 0xff
 800288a:	fb0c 1100 	mla	r1, ip, r0, r1
 800288e:	9b02      	ldr	r3, [sp, #8]
 8002890:	1409      	asrs	r1, r1, #16
 8002892:	f823 1b02 	strh.w	r1, [r3], #2
 8002896:	9302      	str	r3, [sp, #8]
 8002898:	e766      	b.n	8002768 <_ZN6braids17DigitalOscillator19RenderDigitalFilterEPKhPsj+0x68>
 800289a:	2300      	movs	r3, #0
 800289c:	2201      	movs	r2, #1
 800289e:	6023      	str	r3, [r4, #0]
 80028a0:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 80028a4:	461d      	mov	r5, r3
 80028a6:	461f      	mov	r7, r3
 80028a8:	4699      	mov	r9, r3
 80028aa:	e772      	b.n	8002792 <_ZN6braids17DigitalOscillator19RenderDigitalFilterEPKhPsj+0x92>
 80028ac:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 80028b0:	fb0c fc00 	mul.w	ip, ip, r0
 80028b4:	2e01      	cmp	r6, #1
 80028b6:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 80028ba:	f5ac 4c00 	sub.w	ip, ip, #32768	; 0x8000
 80028be:	bf08      	it	eq
 80028c0:	1949      	addeq	r1, r1, r5
 80028c2:	fa0f fc8c 	sxth.w	ip, ip
 80028c6:	bf14      	ite	ne
 80028c8:	b229      	sxthne	r1, r5
 80028ca:	f341 014f 	sbfxeq	r1, r1, #1, #16
 80028ce:	e7ca      	b.n	8002866 <_ZN6braids17DigitalOscillator19RenderDigitalFilterEPKhPsj+0x166>
 80028d0:	9b01      	ldr	r3, [sp, #4]
 80028d2:	e9c4 9709 	strd	r9, r7, [r4, #36]	; 0x24
 80028d6:	fb0b a303 	mla	r3, fp, r3, sl
 80028da:	62e5      	str	r5, [r4, #44]	; 0x2c
 80028dc:	6223      	str	r3, [r4, #32]
 80028de:	b007      	add	sp, #28
 80028e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028e4:	08007274 	.word	0x08007274
 80028e8:	0800ca5e 	.word	0x0800ca5e
 80028ec:	ffff8001 	.word	0xffff8001

080028f0 <_ZN6braids17DigitalOscillator11RenderVosimEPKhPsj>:
 80028f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028f4:	460e      	mov	r6, r1
 80028f6:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 80028fa:	4604      	mov	r4, r0
 80028fc:	1049      	asrs	r1, r1, #1
 80028fe:	461d      	mov	r5, r3
 8002900:	4691      	mov	r9, r2
 8002902:	f7ff fd47 	bl	8002394 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
 8002906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800290a:	6220      	str	r0, [r4, #32]
 800290c:	1049      	asrs	r1, r1, #1
 800290e:	4620      	mov	r0, r4
 8002910:	f7ff fd40 	bl	8002394 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
 8002914:	f04f 0e00 	mov.w	lr, #0
 8002918:	1973      	adds	r3, r6, r5
 800291a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80029dc <_ZN6braids17DigitalOscillator11RenderVosimEPKhPsj+0xec>
 800291e:	6260      	str	r0, [r4, #36]	; 0x24
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	9b01      	ldr	r3, [sp, #4]
 8002924:	429e      	cmp	r6, r3
 8002926:	d050      	beq.n	80029ca <_ZN6braids17DigitalOscillator11RenderVosimEPKhPsj+0xda>
 8002928:	e9d4 2300 	ldrd	r2, r3, [r4]
 800292c:	441a      	add	r2, r3
 800292e:	6022      	str	r2, [r4, #0]
 8002930:	f816 2b01 	ldrb.w	r2, [r6], #1
 8002934:	b10a      	cbz	r2, 800293a <_ZN6braids17DigitalOscillator11RenderVosimEPKhPsj+0x4a>
 8002936:	f8c4 e000 	str.w	lr, [r4]
 800293a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800293c:	6a22      	ldr	r2, [r4, #32]
 800293e:	4824      	ldr	r0, [pc, #144]	; (80029d0 <_ZN6braids17DigitalOscillator11RenderVosimEPKhPsj+0xe0>)
 8002940:	4417      	add	r7, r2
 8002942:	0e3a      	lsrs	r2, r7, #24
 8002944:	62e7      	str	r7, [r4, #44]	; 0x2c
 8002946:	f930 c012 	ldrsh.w	ip, [r0, r2, lsl #1]
 800294a:	f938 1012 	ldrsh.w	r1, [r8, r2, lsl #1]
 800294e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002950:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002952:	6820      	ldr	r0, [r4, #0]
 8002954:	4415      	add	r5, r2
 8002956:	4283      	cmp	r3, r0
 8002958:	6325      	str	r5, [r4, #48]	; 0x30
 800295a:	d832      	bhi.n	80029c2 <_ZN6braids17DigitalOscillator11RenderVosimEPKhPsj+0xd2>
 800295c:	ebac 0c01 	sub.w	ip, ip, r1
 8002960:	f3c7 270f 	ubfx	r7, r7, #8, #16
 8002964:	fb0c f707 	mul.w	r7, ip, r7
 8002968:	eb01 4727 	add.w	r7, r1, r7, asr #16
 800296c:	4918      	ldr	r1, [pc, #96]	; (80029d0 <_ZN6braids17DigitalOscillator11RenderVosimEPKhPsj+0xe0>)
 800296e:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8002972:	f938 201b 	ldrsh.w	r2, [r8, fp, lsl #1]
 8002976:	f931 101b 	ldrsh.w	r1, [r1, fp, lsl #1]
 800297a:	f3c5 250f 	ubfx	r5, r5, #8, #16
 800297e:	1a89      	subs	r1, r1, r2
 8002980:	434d      	muls	r5, r1
 8002982:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <_ZN6braids17DigitalOscillator11RenderVosimEPKhPsj+0xe4>)
 8002984:	eb02 4525 	add.w	r5, r2, r5, asr #16
 8002988:	f347 074e 	sbfx	r7, r7, #1, #15
 800298c:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <_ZN6braids17DigitalOscillator11RenderVosimEPKhPsj+0xe8>)
 800298e:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8002992:	f507 47c0 	add.w	r7, r7, #24576	; 0x6000
 8002996:	f345 058d 	sbfx	r5, r5, #2, #14
 800299a:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
 800299e:	443d      	add	r5, r7
 80029a0:	f832 701a 	ldrh.w	r7, [r2, sl, lsl #1]
 80029a4:	1afa      	subs	r2, r7, r3
 80029a6:	f3c0 270f 	ubfx	r7, r0, #8, #16
 80029aa:	4357      	muls	r7, r2
 80029ac:	eb03 4717 	add.w	r7, r3, r7, lsr #16
 80029b0:	f3c7 074e 	ubfx	r7, r7, #1, #15
 80029b4:	436f      	muls	r7, r5
 80029b6:	13ff      	asrs	r7, r7, #15
 80029b8:	f5a7 47c0 	sub.w	r7, r7, #24576	; 0x6000
 80029bc:	f829 7b02 	strh.w	r7, [r9], #2
 80029c0:	e7af      	b.n	8002922 <_ZN6braids17DigitalOscillator11RenderVosimEPKhPsj+0x32>
 80029c2:	e9c4 ee0b 	strd	lr, lr, [r4, #44]	; 0x2c
 80029c6:	2700      	movs	r7, #0
 80029c8:	e7f6      	b.n	80029b8 <_ZN6braids17DigitalOscillator11RenderVosimEPKhPsj+0xc8>
 80029ca:	b003      	add	sp, #12
 80029cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029d0:	0800ca60 	.word	0x0800ca60
 80029d4:	0800c85c 	.word	0x0800c85c
 80029d8:	0800c85e 	.word	0x0800c85e
 80029dc:	0800ca5e 	.word	0x0800ca5e

080029e0 <_ZN6braids17DigitalOscillator8RenderFmEPKhPsj>:
 80029e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029e4:	460e      	mov	r6, r1
 80029e6:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 80029ea:	461f      	mov	r7, r3
 80029ec:	f5a1 4380 	sub.w	r3, r1, #16384	; 0x4000
 80029f0:	8b01      	ldrh	r1, [r0, #24]
 80029f2:	4604      	mov	r4, r0
 80029f4:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
 80029f8:	eb01 0163 	add.w	r1, r1, r3, asr #1
 80029fc:	b209      	sxth	r1, r1
 80029fe:	4690      	mov	r8, r2
 8002a00:	6a05      	ldr	r5, [r0, #32]
 8002a02:	f7ff fcc7 	bl	8002394 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
 8002a06:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8002a0a:	f9b4 e010 	ldrsh.w	lr, [r4, #16]
 8002a0e:	0843      	lsrs	r3, r0, #1
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	eba1 030e 	sub.w	r3, r1, lr
 8002a16:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002a1a:	fbb1 f1f7 	udiv	r1, r1, r7
 8002a1e:	4359      	muls	r1, r3
 8002a20:	19f3      	adds	r3, r6, r7
 8002a22:	460f      	mov	r7, r1
 8002a24:	4a22      	ldr	r2, [pc, #136]	; (8002ab0 <_ZN6braids17DigitalOscillator8RenderFmEPKhPsj+0xd0>)
 8002a26:	9301      	str	r3, [sp, #4]
 8002a28:	f102 0c02 	add.w	ip, r2, #2
 8002a2c:	9b01      	ldr	r3, [sp, #4]
 8002a2e:	429e      	cmp	r6, r3
 8002a30:	d038      	beq.n	8002aa4 <_ZN6braids17DigitalOscillator8RenderFmEPKhPsj+0xc4>
 8002a32:	6820      	ldr	r0, [r4, #0]
 8002a34:	eb0e 33e7 	add.w	r3, lr, r7, asr #15
 8002a38:	4681      	mov	r9, r0
 8002a3a:	6860      	ldr	r0, [r4, #4]
 8002a3c:	4481      	add	r9, r0
 8002a3e:	f8c4 9000 	str.w	r9, [r4]
 8002a42:	f816 9b01 	ldrb.w	r9, [r6], #1
 8002a46:	f1b9 0f00 	cmp.w	r9, #0
 8002a4a:	d002      	beq.n	8002a52 <_ZN6braids17DigitalOscillator8RenderFmEPKhPsj+0x72>
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	4605      	mov	r5, r0
 8002a50:	6020      	str	r0, [r4, #0]
 8002a52:	9800      	ldr	r0, [sp, #0]
 8002a54:	440f      	add	r7, r1
 8002a56:	4405      	add	r5, r0
 8002a58:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8002a5c:	f932 901a 	ldrsh.w	r9, [r2, sl, lsl #1]
 8002a60:	f93c b01a 	ldrsh.w	fp, [ip, sl, lsl #1]
 8002a64:	f3c5 2a0f 	ubfx	sl, r5, #8, #16
 8002a68:	ebab 0b09 	sub.w	fp, fp, r9
 8002a6c:	fb0a fa0b 	mul.w	sl, sl, fp
 8002a70:	eb09 4a2a 	add.w	sl, r9, sl, asr #16
 8002a74:	fa0f fa8a 	sxth.w	sl, sl
 8002a78:	fb03 f30a 	mul.w	r3, r3, sl
 8002a7c:	6820      	ldr	r0, [r4, #0]
 8002a7e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002a82:	ea4f 6913 	mov.w	r9, r3, lsr #24
 8002a86:	f932 a019 	ldrsh.w	sl, [r2, r9, lsl #1]
 8002a8a:	f93c b019 	ldrsh.w	fp, [ip, r9, lsl #1]
 8002a8e:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8002a92:	ebab 0b0a 	sub.w	fp, fp, sl
 8002a96:	fb03 f30b 	mul.w	r3, r3, fp
 8002a9a:	eb0a 4a23 	add.w	sl, sl, r3, asr #16
 8002a9e:	f828 ab02 	strh.w	sl, [r8], #2
 8002aa2:	e7c3      	b.n	8002a2c <_ZN6braids17DigitalOscillator8RenderFmEPKhPsj+0x4c>
 8002aa4:	89a3      	ldrh	r3, [r4, #12]
 8002aa6:	6225      	str	r5, [r4, #32]
 8002aa8:	8223      	strh	r3, [r4, #16]
 8002aaa:	b003      	add	sp, #12
 8002aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ab0:	0800ca5e 	.word	0x0800ca5e

08002ab4 <_ZN6braids17DigitalOscillator16RenderFeedbackFmEPKhPsj>:
 8002ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ab8:	f647 7aff 	movw	sl, #32767	; 0x7fff
 8002abc:	460f      	mov	r7, r1
 8002abe:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 8002ac2:	4690      	mov	r8, r2
 8002ac4:	f9b0 2018 	ldrsh.w	r2, [r0, #24]
 8002ac8:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
 8002acc:	4699      	mov	r9, r3
 8002ace:	1049      	asrs	r1, r1, #1
 8002ad0:	f5a2 5310 	sub.w	r3, r2, #9216	; 0x2400
 8002ad4:	440b      	add	r3, r1
 8002ad6:	ebaa 0383 	sub.w	r3, sl, r3, lsl #2
 8002ada:	4553      	cmp	r3, sl
 8002adc:	bfa8      	it	ge
 8002ade:	4653      	movge	r3, sl
 8002ae0:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 8002ae4:	4411      	add	r1, r2
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	4605      	mov	r5, r0
 8002aea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002aee:	b209      	sxth	r1, r1
 8002af0:	9302      	str	r3, [sp, #8]
 8002af2:	f9b0 4024 	ldrsh.w	r4, [r0, #36]	; 0x24
 8002af6:	6a06      	ldr	r6, [r0, #32]
 8002af8:	f7ff fc4c 	bl	8002394 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
 8002afc:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
 8002b00:	f9b5 e010 	ldrsh.w	lr, [r5, #16]
 8002b04:	0843      	lsrs	r3, r0, #1
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	eba1 030e 	sub.w	r3, r1, lr
 8002b0c:	fbba f1f9 	udiv	r1, sl, r9
 8002b10:	4359      	muls	r1, r3
 8002b12:	eb07 0309 	add.w	r3, r7, r9
 8002b16:	9303      	str	r3, [sp, #12]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4a26      	ldr	r2, [pc, #152]	; (8002bb4 <_ZN6braids17DigitalOscillator16RenderFeedbackFmEPKhPsj+0x100>)
 8002b1c:	f102 0c02 	add.w	ip, r2, #2
 8002b20:	9803      	ldr	r0, [sp, #12]
 8002b22:	4287      	cmp	r7, r0
 8002b24:	d03f      	beq.n	8002ba6 <_ZN6braids17DigitalOscillator16RenderFeedbackFmEPKhPsj+0xf2>
 8002b26:	6828      	ldr	r0, [r5, #0]
 8002b28:	eb0e 39e3 	add.w	r9, lr, r3, asr #15
 8002b2c:	4682      	mov	sl, r0
 8002b2e:	6868      	ldr	r0, [r5, #4]
 8002b30:	4482      	add	sl, r0
 8002b32:	f8c5 a000 	str.w	sl, [r5]
 8002b36:	f817 ab01 	ldrb.w	sl, [r7], #1
 8002b3a:	f1ba 0f00 	cmp.w	sl, #0
 8002b3e:	d002      	beq.n	8002b46 <_ZN6braids17DigitalOscillator16RenderFeedbackFmEPKhPsj+0x92>
 8002b40:	2000      	movs	r0, #0
 8002b42:	4606      	mov	r6, r0
 8002b44:	6028      	str	r0, [r5, #0]
 8002b46:	9801      	ldr	r0, [sp, #4]
 8002b48:	440b      	add	r3, r1
 8002b4a:	4406      	add	r6, r0
 8002b4c:	eb06 3484 	add.w	r4, r6, r4, lsl #14
 8002b50:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 8002b54:	f932 a01b 	ldrsh.w	sl, [r2, fp, lsl #1]
 8002b58:	f93c b01b 	ldrsh.w	fp, [ip, fp, lsl #1]
 8002b5c:	f3c4 240f 	ubfx	r4, r4, #8, #16
 8002b60:	ebab 0b0a 	sub.w	fp, fp, sl
 8002b64:	fb04 f40b 	mul.w	r4, r4, fp
 8002b68:	9802      	ldr	r0, [sp, #8]
 8002b6a:	eb0a 4424 	add.w	r4, sl, r4, asr #16
 8002b6e:	fb00 fa09 	mul.w	sl, r0, r9
 8002b72:	b224      	sxth	r4, r4
 8002b74:	ea4f 3aea 	mov.w	sl, sl, asr #15
 8002b78:	fb0a fa04 	mul.w	sl, sl, r4
 8002b7c:	682c      	ldr	r4, [r5, #0]
 8002b7e:	eb04 044a 	add.w	r4, r4, sl, lsl #1
 8002b82:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8002b86:	f932 b019 	ldrsh.w	fp, [r2, r9, lsl #1]
 8002b8a:	f93c 9019 	ldrsh.w	r9, [ip, r9, lsl #1]
 8002b8e:	f3c4 240f 	ubfx	r4, r4, #8, #16
 8002b92:	eba9 090b 	sub.w	r9, r9, fp
 8002b96:	fb04 f409 	mul.w	r4, r4, r9
 8002b9a:	eb0b 4424 	add.w	r4, fp, r4, asr #16
 8002b9e:	b224      	sxth	r4, r4
 8002ba0:	f828 4b02 	strh.w	r4, [r8], #2
 8002ba4:	e7bc      	b.n	8002b20 <_ZN6braids17DigitalOscillator16RenderFeedbackFmEPKhPsj+0x6c>
 8002ba6:	89ab      	ldrh	r3, [r5, #12]
 8002ba8:	84ac      	strh	r4, [r5, #36]	; 0x24
 8002baa:	822b      	strh	r3, [r5, #16]
 8002bac:	622e      	str	r6, [r5, #32]
 8002bae:	b005      	add	sp, #20
 8002bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bb4:	0800ca5e 	.word	0x0800ca5e

08002bb8 <_ZN6braids17DigitalOscillator23RenderChaoticFeedbackFmEPKhPsj>:
 8002bb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bbc:	460e      	mov	r6, r1
 8002bbe:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 8002bc2:	461f      	mov	r7, r3
 8002bc4:	f5a1 4380 	sub.w	r3, r1, #16384	; 0x4000
 8002bc8:	8b01      	ldrh	r1, [r0, #24]
 8002bca:	4604      	mov	r4, r0
 8002bcc:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
 8002bd0:	eb01 0163 	add.w	r1, r1, r3, asr #1
 8002bd4:	b209      	sxth	r1, r1
 8002bd6:	4690      	mov	r8, r2
 8002bd8:	f7ff fbdc 	bl	8002394 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
 8002bdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002be0:	f9b4 e010 	ldrsh.w	lr, [r4, #16]
 8002be4:	0a43      	lsrs	r3, r0, #9
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	eba5 030e 	sub.w	r3, r5, lr
 8002bec:	f647 75ff 	movw	r5, #32767	; 0x7fff
 8002bf0:	fbb5 f5f7 	udiv	r5, r5, r7
 8002bf4:	435d      	muls	r5, r3
 8002bf6:	19f3      	adds	r3, r6, r7
 8002bf8:	462f      	mov	r7, r5
 8002bfa:	4a28      	ldr	r2, [pc, #160]	; (8002c9c <_ZN6braids17DigitalOscillator23RenderChaoticFeedbackFmEPKhPsj+0xe4>)
 8002bfc:	f9b4 a024 	ldrsh.w	sl, [r4, #36]	; 0x24
 8002c00:	6a21      	ldr	r1, [r4, #32]
 8002c02:	9301      	str	r3, [sp, #4]
 8002c04:	f102 0c02 	add.w	ip, r2, #2
 8002c08:	9b01      	ldr	r3, [sp, #4]
 8002c0a:	429e      	cmp	r6, r3
 8002c0c:	d03d      	beq.n	8002c8a <_ZN6braids17DigitalOscillator23RenderChaoticFeedbackFmEPKhPsj+0xd2>
 8002c0e:	6820      	ldr	r0, [r4, #0]
 8002c10:	eb0e 33e7 	add.w	r3, lr, r7, asr #15
 8002c14:	4681      	mov	r9, r0
 8002c16:	6860      	ldr	r0, [r4, #4]
 8002c18:	4481      	add	r9, r0
 8002c1a:	f8c4 9000 	str.w	r9, [r4]
 8002c1e:	f816 9b01 	ldrb.w	r9, [r6], #1
 8002c22:	f1b9 0f00 	cmp.w	r9, #0
 8002c26:	d001      	beq.n	8002c2c <_ZN6braids17DigitalOscillator23RenderChaoticFeedbackFmEPKhPsj+0x74>
 8002c28:	2100      	movs	r1, #0
 8002c2a:	6021      	str	r1, [r4, #0]
 8002c2c:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8002c30:	f932 901a 	ldrsh.w	r9, [r2, sl, lsl #1]
 8002c34:	f93c b01a 	ldrsh.w	fp, [ip, sl, lsl #1]
 8002c38:	f3c1 2a0f 	ubfx	sl, r1, #8, #16
 8002c3c:	ebab 0b09 	sub.w	fp, fp, r9
 8002c40:	fb0a fa0b 	mul.w	sl, sl, fp
 8002c44:	eb09 4a2a 	add.w	sl, r9, sl, asr #16
 8002c48:	fa0f fa8a 	sxth.w	sl, sl
 8002c4c:	fb03 f30a 	mul.w	r3, r3, sl
 8002c50:	6820      	ldr	r0, [r4, #0]
 8002c52:	442f      	add	r7, r5
 8002c54:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002c58:	ea4f 6913 	mov.w	r9, r3, lsr #24
 8002c5c:	f932 a019 	ldrsh.w	sl, [r2, r9, lsl #1]
 8002c60:	f93c b019 	ldrsh.w	fp, [ip, r9, lsl #1]
 8002c64:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8002c68:	ebab 0b0a 	sub.w	fp, fp, sl
 8002c6c:	fb03 f30b 	mul.w	r3, r3, fp
 8002c70:	eb0a 4a23 	add.w	sl, sl, r3, asr #16
 8002c74:	fa0f fa8a 	sxth.w	sl, sl
 8002c78:	ea4f 236a 	mov.w	r3, sl, asr #9
 8002c7c:	9800      	ldr	r0, [sp, #0]
 8002c7e:	3381      	adds	r3, #129	; 0x81
 8002c80:	f828 ab02 	strh.w	sl, [r8], #2
 8002c84:	fb00 1103 	mla	r1, r0, r3, r1
 8002c88:	e7be      	b.n	8002c08 <_ZN6braids17DigitalOscillator23RenderChaoticFeedbackFmEPKhPsj+0x50>
 8002c8a:	89a3      	ldrh	r3, [r4, #12]
 8002c8c:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
 8002c90:	8223      	strh	r3, [r4, #16]
 8002c92:	6221      	str	r1, [r4, #32]
 8002c94:	b003      	add	sp, #12
 8002c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c9a:	bf00      	nop
 8002c9c:	0800ca5e 	.word	0x0800ca5e

08002ca0 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj>:
 8002ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ca4:	4617      	mov	r7, r2
 8002ca6:	7f02      	ldrb	r2, [r0, #28]
 8002ca8:	b08d      	sub	sp, #52	; 0x34
 8002caa:	4604      	mov	r4, r0
 8002cac:	469a      	mov	sl, r3
 8002cae:	2a00      	cmp	r2, #0
 8002cb0:	d052      	beq.n	8002d58 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0xb8>
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8002cb8:	6f81      	ldr	r1, [r0, #120]	; 0x78
 8002cba:	f100 02a4 	add.w	r2, r0, #164	; 0xa4
 8002cbe:	488c      	ldr	r0, [pc, #560]	; (8002ef0 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x250>)
 8002cc0:	f930 6013 	ldrsh.w	r6, [r0, r3, lsl #1]
 8002cc4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8002cc8:	f842 6b04 	str.w	r6, [r2], #4
 8002ccc:	f103 0301 	add.w	r3, r3, #1
 8002cd0:	bfb8      	it	lt
 8002cd2:	f842 5c88 	strlt.w	r5, [r2, #-136]
 8002cd6:	2b06      	cmp	r3, #6
 8002cd8:	d1f2      	bne.n	8002cc0 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x20>
 8002cda:	2300      	movs	r3, #0
 8002cdc:	7723      	strb	r3, [r4, #28]
 8002cde:	2500      	movs	r5, #0
 8002ce0:	f9b4 6018 	ldrsh.w	r6, [r4, #24]
 8002ce4:	f8df b224 	ldr.w	fp, [pc, #548]	; 8002f0c <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x26c>
 8002ce8:	fa1f f986 	uxth.w	r9, r6
 8002cec:	f104 084c 	add.w	r8, r4, #76	; 0x4c
 8002cf0:	f83b 1015 	ldrh.w	r1, [fp, r5, lsl #1]
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	4449      	add	r1, r9
 8002cf8:	b209      	sxth	r1, r1
 8002cfa:	f7ff fb4b 	bl	8002394 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
 8002cfe:	3501      	adds	r5, #1
 8002d00:	0040      	lsls	r0, r0, #1
 8002d02:	2d06      	cmp	r5, #6
 8002d04:	f848 0b04 	str.w	r0, [r8], #4
 8002d08:	d1f2      	bne.n	8002cf0 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x50>
 8002d0a:	e9d4 9836 	ldrd	r9, r8, [r4, #216]	; 0xd8
 8002d0e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8002d12:	f5a6 66c0 	sub.w	r6, r6, #1536	; 0x600
 8002d16:	eb06 06a3 	add.w	r6, r6, r3, asr #2
 8002d1a:	f386 060f 	usat	r6, #15, r6
 8002d1e:	0436      	lsls	r6, r6, #16
 8002d20:	4974      	ldr	r1, [pc, #464]	; (8002ef4 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x254>)
 8002d22:	0e30      	lsrs	r0, r6, #24
 8002d24:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
 8002d28:	3102      	adds	r1, #2
 8002d2a:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 8002d2e:	0a36      	lsrs	r6, r6, #8
 8002d30:	1a89      	subs	r1, r1, r2
 8002d32:	b2b6      	uxth	r6, r6
 8002d34:	434e      	muls	r6, r1
 8002d36:	eb02 4616 	add.w	r6, r2, r6, lsr #16
 8002d3a:	b2b2      	uxth	r2, r6
 8002d3c:	9201      	str	r2, [sp, #4]
 8002d3e:	f243 2257 	movw	r2, #12887	; 0x3257
 8002d42:	4293      	cmp	r3, r2
 8002d44:	f9b4 50d0 	ldrsh.w	r5, [r4, #208]	; 0xd0
 8002d48:	f8d4 60e0 	ldr.w	r6, [r4, #224]	; 0xe0
 8002d4c:	dc26      	bgt.n	8002d9c <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0xfc>
 8002d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d52:	9302      	str	r3, [sp, #8]
 8002d54:	2300      	movs	r3, #0
 8002d56:	e02a      	b.n	8002dae <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x10e>
 8002d58:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8002d5c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002d60:	dabd      	bge.n	8002cde <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x3e>
 8002d62:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 8002d66:	337f      	adds	r3, #127	; 0x7f
 8002d68:	121b      	asrs	r3, r3, #8
 8002d6a:	435b      	muls	r3, r3
 8002d6c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8002f10 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x270>
 8002d70:	4e61      	ldr	r6, [pc, #388]	; (8002ef8 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x258>)
 8002d72:	11db      	asrs	r3, r3, #7
 8002d74:	f100 0578 	add.w	r5, r0, #120	; 0x78
 8002d78:	f83c e012 	ldrh.w	lr, [ip, r2, lsl #1]
 8002d7c:	f836 0012 	ldrh.w	r0, [r6, r2, lsl #1]
 8002d80:	f855 1b04 	ldr.w	r1, [r5], #4
 8002d84:	ebae 0000 	sub.w	r0, lr, r0
 8002d88:	4358      	muls	r0, r3
 8002d8a:	ebae 10e0 	sub.w	r0, lr, r0, asr #7
 8002d8e:	4341      	muls	r1, r0
 8002d90:	3201      	adds	r2, #1
 8002d92:	1409      	asrs	r1, r1, #16
 8002d94:	2a06      	cmp	r2, #6
 8002d96:	62a9      	str	r1, [r5, #40]	; 0x28
 8002d98:	d1ee      	bne.n	8002d78 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0xd8>
 8002d9a:	e7a0      	b.n	8002cde <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x3e>
 8002d9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002da0:	f2c0 8092 	blt.w	8002ec8 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x228>
 8002da4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002da8:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8002dac:	9202      	str	r2, [sp, #8]
 8002dae:	f243 2258 	movw	r2, #12888	; 0x3258
 8002db2:	4353      	muls	r3, r2
 8002db4:	139b      	asrs	r3, r3, #14
 8002db6:	9304      	str	r3, [sp, #16]
 8002db8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dbc:	fbb3 f3fa 	udiv	r3, r3, sl
 8002dc0:	9305      	str	r3, [sp, #20]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	3704      	adds	r7, #4
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	f1ba 0f00 	cmp.w	sl, #0
 8002dcc:	d07f      	beq.n	8002ece <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x22e>
 8002dce:	9b00      	ldr	r3, [sp, #0]
 8002dd0:	9a05      	ldr	r2, [sp, #20]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	f7fe fca5 	bl	8001724 <_ZN6stmlib6Random9GetSampleEv>
 8002dda:	4b48      	ldr	r3, [pc, #288]	; (8002efc <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x25c>)
 8002ddc:	f04f 0e00 	mov.w	lr, #0
 8002de0:	4298      	cmp	r0, r3
 8002de2:	bfb8      	it	lt
 8002de4:	4618      	movlt	r0, r3
 8002de6:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8002dea:	bfd4      	ite	le
 8002dec:	ebc9 0000 	rsble	r0, r9, r0
 8002df0:	f5c9 4080 	rsbgt	r0, r9, #16384	; 0x4000
 8002df4:	9b01      	ldr	r3, [sp, #4]
 8002df6:	9a01      	ldr	r2, [sp, #4]
 8002df8:	4358      	muls	r0, r3
 8002dfa:	eb09 39e0 	add.w	r9, r9, r0, asr #15
 8002dfe:	4670      	mov	r0, lr
 8002e00:	eba9 0308 	sub.w	r3, r9, r8
 8002e04:	4353      	muls	r3, r2
 8002e06:	eb08 38e3 	add.w	r8, r8, r3, asr #15
 8002e0a:	eba8 0306 	sub.w	r3, r8, r6
 8002e0e:	4353      	muls	r3, r2
 8002e10:	f104 0c20 	add.w	ip, r4, #32
 8002e14:	eb06 36e3 	add.w	r6, r6, r3, asr #15
 8002e18:	f85c 2b04 	ldr.w	r2, [ip], #4
 8002e1c:	f8dc 1054 	ldr.w	r1, [ip, #84]	; 0x54
 8002e20:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
 8002e24:	9103      	str	r1, [sp, #12]
 8002e26:	4413      	add	r3, r2
 8002e28:	4935      	ldr	r1, [pc, #212]	; (8002f00 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x260>)
 8002e2a:	4a36      	ldr	r2, [pc, #216]	; (8002f04 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x264>)
 8002e2c:	ea4f 6b13 	mov.w	fp, r3, lsr #24
 8002e30:	f932 201b 	ldrsh.w	r2, [r2, fp, lsl #1]
 8002e34:	f931 b01b 	ldrsh.w	fp, [r1, fp, lsl #1]
 8002e38:	f84c 3c04 	str.w	r3, [ip, #-4]
 8002e3c:	ebab 0b02 	sub.w	fp, fp, r2
 8002e40:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8002e44:	fb03 f30b 	mul.w	r3, r3, fp
 8002e48:	9903      	ldr	r1, [sp, #12]
 8002e4a:	eb02 4323 	add.w	r3, r2, r3, asr #16
 8002e4e:	f8dc 2080 	ldr.w	r2, [ip, #128]	; 0x80
 8002e52:	b21b      	sxth	r3, r3
 8002e54:	1a52      	subs	r2, r2, r1
 8002e56:	9900      	ldr	r1, [sp, #0]
 8002e58:	434a      	muls	r2, r1
 8002e5a:	9903      	ldr	r1, [sp, #12]
 8002e5c:	eb01 32e2 	add.w	r2, r1, r2, asr #15
 8002e60:	435a      	muls	r2, r3
 8002e62:	ab06      	add	r3, sp, #24
 8002e64:	1412      	asrs	r2, r2, #16
 8002e66:	f843 202e 	str.w	r2, [r3, lr, lsl #2]
 8002e6a:	f10e 0e01 	add.w	lr, lr, #1
 8002e6e:	f1be 0f06 	cmp.w	lr, #6
 8002e72:	4410      	add	r0, r2
 8002e74:	d1d0      	bne.n	8002e18 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x178>
 8002e76:	9b07      	ldr	r3, [sp, #28]
 8002e78:	9a04      	ldr	r2, [sp, #16]
 8002e7a:	4373      	muls	r3, r6
 8002e7c:	f5c2 5240 	rsb	r2, r2, #12288	; 0x3000
 8002e80:	121b      	asrs	r3, r3, #8
 8002e82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002e84:	4353      	muls	r3, r2
 8002e86:	4371      	muls	r1, r6
 8002e88:	9a06      	ldr	r2, [sp, #24]
 8002e8a:	1249      	asrs	r1, r1, #9
 8002e8c:	eb02 32a3 	add.w	r2, r2, r3, asr #14
 8002e90:	9b04      	ldr	r3, [sp, #16]
 8002e92:	f1aa 0a02 	sub.w	sl, sl, #2
 8002e96:	4359      	muls	r1, r3
 8002e98:	9b02      	ldr	r3, [sp, #8]
 8002e9a:	eb02 32a1 	add.w	r2, r2, r1, asr #14
 8002e9e:	4358      	muls	r0, r3
 8002ea0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002ea4:	eb02 30a0 	add.w	r0, r2, r0, asr #14
 8002ea8:	4298      	cmp	r0, r3
 8002eaa:	bfa8      	it	ge
 8002eac:	4618      	movge	r0, r3
 8002eae:	4a16      	ldr	r2, [pc, #88]	; (8002f08 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x268>)
 8002eb0:	3704      	adds	r7, #4
 8002eb2:	4290      	cmp	r0, r2
 8002eb4:	bfb8      	it	lt
 8002eb6:	4610      	movlt	r0, r2
 8002eb8:	4405      	add	r5, r0
 8002eba:	106d      	asrs	r5, r5, #1
 8002ebc:	f827 5c08 	strh.w	r5, [r7, #-8]
 8002ec0:	b205      	sxth	r5, r0
 8002ec2:	f827 5c06 	strh.w	r5, [r7, #-6]
 8002ec6:	e77f      	b.n	8002dc8 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x128>
 8002ec8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ecc:	e741      	b.n	8002d52 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0xb2>
 8002ece:	f8a4 50d0 	strh.w	r5, [r4, #208]	; 0xd0
 8002ed2:	e9c4 9836 	strd	r9, r8, [r4, #216]	; 0xd8
 8002ed6:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
 8002eda:	f104 0378 	add.w	r3, r4, #120	; 0x78
 8002ede:	34a4      	adds	r4, #164	; 0xa4
 8002ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee2:	f843 2b04 	str.w	r2, [r3], #4
 8002ee6:	429c      	cmp	r4, r3
 8002ee8:	d1fa      	bne.n	8002ee0 <_ZN6braids17DigitalOscillator16RenderStruckDrumEPKhPsj+0x240>
 8002eea:	b00d      	add	sp, #52	; 0x34
 8002eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ef0:	08007526 	.word	0x08007526
 8002ef4:	08007e04 	.word	0x08007e04
 8002ef8:	0800756a 	.word	0x0800756a
 8002efc:	ffffc000 	.word	0xffffc000
 8002f00:	0800ca60 	.word	0x0800ca60
 8002f04:	0800ca5e 	.word	0x0800ca5e
 8002f08:	ffff8001 	.word	0xffff8001
 8002f0c:	080072d0 	.word	0x080072d0
 8002f10:	08007532 	.word	0x08007532

08002f14 <_ZN6braids17DigitalOscillator12RenderCymbalEPKhPsj>:
 8002f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f18:	461f      	mov	r7, r3
 8002f1a:	7ec3      	ldrb	r3, [r0, #27]
 8002f1c:	b089      	sub	sp, #36	; 0x24
 8002f1e:	4604      	mov	r4, r0
 8002f20:	4690      	mov	r8, r2
 8002f22:	f500 769a 	add.w	r6, r0, #308	; 0x134
 8002f26:	f500 75aa 	add.w	r5, r0, #340	; 0x154
 8002f2a:	b1d3      	cbz	r3, 8002f62 <_ZN6braids17DigitalOscillator12RenderCymbalEPKhPsj+0x4e>
 8002f2c:	4630      	mov	r0, r6
 8002f2e:	f7fe f92c 	bl	800118a <_ZN6braids3Svf4InitEv>
 8002f32:	f04f 0901 	mov.w	r9, #1
 8002f36:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8002f3a:	f884 9150 	strb.w	r9, [r4, #336]	; 0x150
 8002f3e:	f8a4 3138 	strh.w	r3, [r4, #312]	; 0x138
 8002f42:	f884 9134 	strb.w	r9, [r4, #308]	; 0x134
 8002f46:	4628      	mov	r0, r5
 8002f48:	f7fe f91f 	bl	800118a <_ZN6braids3Svf4InitEv>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
 8002f52:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002f56:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f884 9154 	strb.w	r9, [r4, #340]	; 0x154
 8002f60:	76e3      	strb	r3, [r4, #27]
 8002f62:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8002f66:	4620      	mov	r0, r4
 8002f68:	1049      	asrs	r1, r1, #1
 8002f6a:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 8002f6e:	f7ff fa11 	bl	8002394 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
 8002f72:	f645 62d1 	movw	r2, #24273	; 0x5ed1
 8002f76:	0a83      	lsrs	r3, r0, #10
 8002f78:	435a      	muls	r2, r3
 8002f7a:	0912      	lsrs	r2, r2, #4
 8002f7c:	9200      	str	r2, [sp, #0]
 8002f7e:	f243 1211 	movw	r2, #12561	; 0x3111
 8002f82:	435a      	muls	r2, r3
 8002f84:	0912      	lsrs	r2, r2, #4
 8002f86:	9201      	str	r2, [sp, #4]
 8002f88:	f244 72f1 	movw	r2, #18417	; 0x47f1
 8002f8c:	435a      	muls	r2, r3
 8002f8e:	0912      	lsrs	r2, r2, #4
 8002f90:	9202      	str	r2, [sp, #8]
 8002f92:	f245 72b4 	movw	r2, #22452	; 0x57b4
 8002f96:	435a      	muls	r2, r3
 8002f98:	0912      	lsrs	r2, r2, #4
 8002f9a:	9203      	str	r2, [sp, #12]
 8002f9c:	f647 4272 	movw	r2, #31858	; 0x7c72
 8002fa0:	4353      	muls	r3, r2
 8002fa2:	091b      	lsrs	r3, r3, #4
 8002fa4:	9304      	str	r3, [sp, #16]
 8002fa6:	2318      	movs	r3, #24
 8002fa8:	4343      	muls	r3, r0
 8002faa:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8002fae:	9305      	str	r3, [sp, #20]
 8002fb0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8002fb4:	1049      	asrs	r1, r1, #1
 8002fb6:	4682      	mov	sl, r0
 8002fb8:	4630      	mov	r0, r6
 8002fba:	9306      	str	r3, [sp, #24]
 8002fbc:	f7fe f8f3 	bl	80011a6 <_ZN6braids3Svf13set_frequencyEs>
 8002fc0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8002fc4:	4628      	mov	r0, r5
 8002fc6:	1049      	asrs	r1, r1, #1
 8002fc8:	f7fe f8ed 	bl	80011a6 <_ZN6braids3Svf13set_frequencyEs>
 8002fcc:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80030a8 <_ZN6braids17DigitalOscillator12RenderCymbalEPKhPsj+0x194>
 8002fd0:	f117 37ff 	adds.w	r7, r7, #4294967295	; 0xffffffff
 8002fd4:	d360      	bcc.n	8003098 <_ZN6braids17DigitalOscillator12RenderCymbalEPKhPsj+0x184>
 8002fd6:	6823      	ldr	r3, [r4, #0]
 8002fd8:	9905      	ldr	r1, [sp, #20]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	18cb      	adds	r3, r1, r3
 8002fde:	bf28      	it	cs
 8002fe0:	2201      	movcs	r2, #1
 8002fe2:	6023      	str	r3, [r4, #0]
 8002fe4:	b12a      	cbz	r2, 8002ff2 <_ZN6braids17DigitalOscillator12RenderCymbalEPKhPsj+0xde>
 8002fe6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002fe8:	4a2d      	ldr	r2, [pc, #180]	; (80030a0 <_ZN6braids17DigitalOscillator12RenderCymbalEPKhPsj+0x18c>)
 8002fea:	492e      	ldr	r1, [pc, #184]	; (80030a4 <_ZN6braids17DigitalOscillator12RenderCymbalEPKhPsj+0x190>)
 8002fec:	fb02 1303 	mla	r3, r2, r3, r1
 8002ff0:	63a3      	str	r3, [r4, #56]	; 0x38
 8002ff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ff4:	9a00      	ldr	r2, [sp, #0]
 8002ff6:	9902      	ldr	r1, [sp, #8]
 8002ff8:	eb02 0c03 	add.w	ip, r2, r3
 8002ffc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ffe:	9a01      	ldr	r2, [sp, #4]
 8003000:	6a20      	ldr	r0, [r4, #32]
 8003002:	eb03 0b02 	add.w	fp, r3, r2
 8003006:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003008:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800300a:	eb01 0e02 	add.w	lr, r1, r2
 800300e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003010:	9903      	ldr	r1, [sp, #12]
 8003012:	4450      	add	r0, sl
 8003014:	440a      	add	r2, r1
 8003016:	9904      	ldr	r1, [sp, #16]
 8003018:	f8c4 e02c 	str.w	lr, [r4, #44]	; 0x2c
 800301c:	440b      	add	r3, r1
 800301e:	4619      	mov	r1, r3
 8003020:	6363      	str	r3, [r4, #52]	; 0x34
 8003022:	ea4f 73db 	mov.w	r3, fp, lsr #31
 8003026:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
 800302a:	eb03 73d0 	add.w	r3, r3, r0, lsr #31
 800302e:	eb03 7ede 	add.w	lr, r3, lr, lsr #31
 8003032:	f241 5355 	movw	r3, #5461	; 0x1555
 8003036:	6322      	str	r2, [r4, #48]	; 0x30
 8003038:	eb0e 72d2 	add.w	r2, lr, r2, lsr #31
 800303c:	eb02 71d1 	add.w	r1, r2, r1, lsr #31
 8003040:	3903      	subs	r1, #3
 8003042:	4359      	muls	r1, r3
 8003044:	6220      	str	r0, [r4, #32]
 8003046:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
 800304a:	f8c4 b028 	str.w	fp, [r4, #40]	; 0x28
 800304e:	4630      	mov	r0, r6
 8003050:	f7fe f8b4 	bl	80011bc <_ZN6braids3Svf7ProcessEl>
 8003054:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8003058:	4298      	cmp	r0, r3
 800305a:	bfa8      	it	ge
 800305c:	4618      	movge	r0, r3
 800305e:	4548      	cmp	r0, r9
 8003060:	bfb8      	it	lt
 8003062:	4648      	movlt	r0, r9
 8003064:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8003066:	4683      	mov	fp, r0
 8003068:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 800306c:	1049      	asrs	r1, r1, #1
 800306e:	4628      	mov	r0, r5
 8003070:	9307      	str	r3, [sp, #28]
 8003072:	f7fe f8a3 	bl	80011bc <_ZN6braids3Svf7ProcessEl>
 8003076:	9b07      	ldr	r3, [sp, #28]
 8003078:	4298      	cmp	r0, r3
 800307a:	bfa8      	it	ge
 800307c:	4618      	movge	r0, r3
 800307e:	4548      	cmp	r0, r9
 8003080:	bfac      	ite	ge
 8003082:	ebcb 0000 	rsbge	r0, fp, r0
 8003086:	ebcb 0009 	rsblt	r0, fp, r9
 800308a:	9b06      	ldr	r3, [sp, #24]
 800308c:	4358      	muls	r0, r3
 800308e:	eb0b 30e0 	add.w	r0, fp, r0, asr #15
 8003092:	f828 0b02 	strh.w	r0, [r8], #2
 8003096:	e79b      	b.n	8002fd0 <_ZN6braids17DigitalOscillator12RenderCymbalEPKhPsj+0xbc>
 8003098:	b009      	add	sp, #36	; 0x24
 800309a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800309e:	bf00      	nop
 80030a0:	0019660d 	.word	0x0019660d
 80030a4:	3c6ef35f 	.word	0x3c6ef35f
 80030a8:	ffff8001 	.word	0xffff8001

080030ac <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj>:
 80030ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030b0:	4617      	mov	r7, r2
 80030b2:	220b      	movs	r2, #11
 80030b4:	f8d0 50d4 	ldr.w	r5, [r0, #212]	; 0xd4
 80030b8:	4698      	mov	r8, r3
 80030ba:	1cee      	adds	r6, r5, #3
 80030bc:	fbb6 f3f2 	udiv	r3, r6, r2
 80030c0:	fb02 6313 	mls	r3, r2, r3, r6
 80030c4:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
 80030c8:	7f03      	ldrb	r3, [r0, #28]
 80030ca:	4604      	mov	r4, r0
 80030cc:	b9eb      	cbnz	r3, 800310a <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0x5e>
 80030ce:	4296      	cmp	r6, r2
 80030d0:	bf28      	it	cs
 80030d2:	4616      	movcs	r6, r2
 80030d4:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8003208 <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0x15c>
 80030d8:	42ae      	cmp	r6, r5
 80030da:	d927      	bls.n	800312c <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0x80>
 80030dc:	8b23      	ldrh	r3, [r4, #24]
 80030de:	f839 1015 	ldrh.w	r1, [r9, r5, lsl #1]
 80030e2:	07ea      	lsls	r2, r5, #31
 80030e4:	4419      	add	r1, r3
 80030e6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80030ea:	b289      	uxth	r1, r1
 80030ec:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 80030f0:	bf4c      	ite	mi
 80030f2:	18c9      	addmi	r1, r1, r3
 80030f4:	1ac9      	subpl	r1, r1, r3
 80030f6:	b209      	sxth	r1, r1
 80030f8:	4620      	mov	r0, r4
 80030fa:	f7ff f94b 	bl	8002394 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
 80030fe:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003102:	0040      	lsls	r0, r0, #1
 8003104:	64d8      	str	r0, [r3, #76]	; 0x4c
 8003106:	3501      	adds	r5, #1
 8003108:	e7e6      	b.n	80030d8 <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0x2c>
 800310a:	2600      	movs	r6, #0
 800310c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003110:	f100 0320 	add.w	r3, r0, #32
 8003114:	4838      	ldr	r0, [pc, #224]	; (80031f8 <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0x14c>)
 8003116:	f930 1016 	ldrsh.w	r1, [r0, r6, lsl #1]
 800311a:	3601      	adds	r6, #1
 800311c:	2e0b      	cmp	r6, #11
 800311e:	6599      	str	r1, [r3, #88]	; 0x58
 8003120:	f843 2b04 	str.w	r2, [r3], #4
 8003124:	d1f7      	bne.n	8003116 <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0x6a>
 8003126:	2500      	movs	r5, #0
 8003128:	7725      	strb	r5, [r4, #28]
 800312a:	e7d3      	b.n	80030d4 <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0x28>
 800312c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003130:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8003134:	da1c      	bge.n	8003170 <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0xc4>
 8003136:	2200      	movs	r2, #0
 8003138:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 800313c:	337f      	adds	r3, #127	; 0x7f
 800313e:	121b      	asrs	r3, r3, #8
 8003140:	435b      	muls	r3, r3
 8003142:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 800320c <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0x160>
 8003146:	4e2d      	ldr	r6, [pc, #180]	; (80031fc <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0x150>)
 8003148:	11db      	asrs	r3, r3, #7
 800314a:	f104 0578 	add.w	r5, r4, #120	; 0x78
 800314e:	f83c e012 	ldrh.w	lr, [ip, r2, lsl #1]
 8003152:	f836 0012 	ldrh.w	r0, [r6, r2, lsl #1]
 8003156:	6829      	ldr	r1, [r5, #0]
 8003158:	ebae 0000 	sub.w	r0, lr, r0
 800315c:	4358      	muls	r0, r3
 800315e:	ebae 10e0 	sub.w	r0, lr, r0, asr #7
 8003162:	4341      	muls	r1, r0
 8003164:	3201      	adds	r2, #1
 8003166:	1409      	asrs	r1, r1, #16
 8003168:	2a0b      	cmp	r2, #11
 800316a:	f845 1b04 	str.w	r1, [r5], #4
 800316e:	d1ee      	bne.n	800314e <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0xa2>
 8003170:	f647 7cff 	movw	ip, #32767	; 0x7fff
 8003174:	4d22      	ldr	r5, [pc, #136]	; (8003200 <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0x154>)
 8003176:	f9b4 10d0 	ldrsh.w	r1, [r4, #208]	; 0xd0
 800317a:	4e22      	ldr	r6, [pc, #136]	; (8003204 <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0x158>)
 800317c:	3704      	adds	r7, #4
 800317e:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 8003182:	f105 0902 	add.w	r9, r5, #2
 8003186:	f1b8 0f00 	cmp.w	r8, #0
 800318a:	d031      	beq.n	80031f0 <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0x144>
 800318c:	2000      	movs	r0, #0
 800318e:	f104 0a20 	add.w	sl, r4, #32
 8003192:	f85a 2b04 	ldr.w	r2, [sl], #4
 8003196:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 800319a:	45d6      	cmp	lr, sl
 800319c:	4413      	add	r3, r2
 800319e:	f84a 3c04 	str.w	r3, [sl, #-4]
 80031a2:	ea4f 6b13 	mov.w	fp, r3, lsr #24
 80031a6:	f935 201b 	ldrsh.w	r2, [r5, fp, lsl #1]
 80031aa:	f939 b01b 	ldrsh.w	fp, [r9, fp, lsl #1]
 80031ae:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80031b2:	ebab 0b02 	sub.w	fp, fp, r2
 80031b6:	fb03 f30b 	mul.w	r3, r3, fp
 80031ba:	eb02 4323 	add.w	r3, r2, r3, asr #16
 80031be:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 80031c2:	b21b      	sxth	r3, r3
 80031c4:	fb02 f203 	mul.w	r2, r2, r3
 80031c8:	eb00 4062 	add.w	r0, r0, r2, asr #17
 80031cc:	d1e1      	bne.n	8003192 <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0xe6>
 80031ce:	4560      	cmp	r0, ip
 80031d0:	bfa8      	it	ge
 80031d2:	4660      	movge	r0, ip
 80031d4:	42b0      	cmp	r0, r6
 80031d6:	bfb8      	it	lt
 80031d8:	4630      	movlt	r0, r6
 80031da:	4401      	add	r1, r0
 80031dc:	1049      	asrs	r1, r1, #1
 80031de:	f827 1c04 	strh.w	r1, [r7, #-4]
 80031e2:	b201      	sxth	r1, r0
 80031e4:	f827 1c02 	strh.w	r1, [r7, #-2]
 80031e8:	f1a8 0802 	sub.w	r8, r8, #2
 80031ec:	3704      	adds	r7, #4
 80031ee:	e7ca      	b.n	8003186 <_ZN6braids17DigitalOscillator16RenderStruckBellEPKhPsj+0xda>
 80031f0:	f8a4 10d0 	strh.w	r1, [r4, #208]	; 0xd0
 80031f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031f8:	0800753e 	.word	0x0800753e
 80031fc:	08007554 	.word	0x08007554
 8003200:	0800ca5e 	.word	0x0800ca5e
 8003204:	ffff8001 	.word	0xffff8001
 8003208:	080072ba 	.word	0x080072ba
 800320c:	08007510 	.word	0x08007510

08003210 <_ZN6braids17DigitalOscillator12ComputeDelayEs>:
 8003210:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8003214:	bfa8      	it	ge
 8003216:	f44f 4180 	movge.w	r1, #16384	; 0x4000
 800321a:	2300      	movs	r3, #0
 800321c:	b510      	push	{r4, lr}
 800321e:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
 8003222:	2900      	cmp	r1, #0
 8003224:	da03      	bge.n	800322e <_ZN6braids17DigitalOscillator12ComputeDelayEs+0x1e>
 8003226:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
 800322a:	3301      	adds	r3, #1
 800322c:	e7f9      	b.n	8003222 <_ZN6braids17DigitalOscillator12ComputeDelayEs+0x12>
 800322e:	4c08      	ldr	r4, [pc, #32]	; (8003250 <_ZN6braids17DigitalOscillator12ComputeDelayEs+0x40>)
 8003230:	110a      	asrs	r2, r1, #4
 8003232:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 8003236:	3201      	adds	r2, #1
 8003238:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800323c:	f001 010f 	and.w	r1, r1, #15
 8003240:	1a12      	subs	r2, r2, r0
 8003242:	4351      	muls	r1, r2
 8003244:	f1c3 030c 	rsb	r3, r3, #12
 8003248:	eb00 1021 	add.w	r0, r0, r1, asr #4
 800324c:	40d8      	lsrs	r0, r3
 800324e:	bd10      	pop	{r4, pc}
 8003250:	08009b04 	.word	0x08009b04

08003254 <_ZN6braids17DigitalOscillator10RenderCombEPKhPsj>:
 8003254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003258:	4605      	mov	r5, r0
 800325a:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 800325e:	469a      	mov	sl, r3
 8003260:	f5a1 4380 	sub.w	r3, r1, #16384	; 0x4000
 8003264:	f9b0 1018 	ldrsh.w	r1, [r0, #24]
 8003268:	4690      	mov	r8, r2
 800326a:	eb01 0163 	add.w	r1, r1, r3, asr #1
 800326e:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	; 0x24
 8003272:	f500 79ca 	add.w	r9, r0, #404	; 0x194
 8003276:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800327a:	4419      	add	r1, r3
 800327c:	f341 110f 	sbfx	r1, r1, #4, #16
 8003280:	8481      	strh	r1, [r0, #36]	; 0x24
 8003282:	f7ff ffc5 	bl	8003210 <_ZN6braids17DigitalOscillator12ComputeDelayEs>
 8003286:	89eb      	ldrh	r3, [r5, #14]
 8003288:	492b      	ldr	r1, [pc, #172]	; (8003338 <_ZN6braids17DigitalOscillator10RenderCombEPKhPsj+0xe4>)
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	b29b      	uxth	r3, r3
 800328e:	121c      	asrs	r4, r3, #8
 8003290:	f931 2014 	ldrsh.w	r2, [r1, r4, lsl #1]
 8003294:	3102      	adds	r1, #2
 8003296:	f931 1014 	ldrsh.w	r1, [r1, r4, lsl #1]
 800329a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800329e:	1a89      	subs	r1, r1, r2
 80032a0:	434b      	muls	r3, r1
 80032a2:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 80032a6:	bf28      	it	cs
 80032a8:	f04f 5000 	movcs.w	r0, #536870912	; 0x20000000
 80032ac:	eb02 2323 	add.w	r3, r2, r3, asr #8
 80032b0:	f643 7eff 	movw	lr, #16383	; 0x3fff
 80032b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80032b8:	b21b      	sxth	r3, r3
 80032ba:	682c      	ldr	r4, [r5, #0]
 80032bc:	9301      	str	r3, [sp, #4]
 80032be:	4b1f      	ldr	r3, [pc, #124]	; (800333c <_ZN6braids17DigitalOscillator10RenderCombEPKhPsj+0xe8>)
 80032c0:	ea4f 4b10 	mov.w	fp, r0, lsr #16
 80032c4:	f3c4 040c 	ubfx	r4, r4, #0, #13
 80032c8:	f3c0 004e 	ubfx	r0, r0, #1, #15
 80032cc:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
 80032d0:	d32d      	bcc.n	800332e <_ZN6braids17DigitalOscillator10RenderCombEPKhPsj+0xda>
 80032d2:	eba4 060b 	sub.w	r6, r4, fp
 80032d6:	f3c6 070c 	ubfx	r7, r6, #0, #13
 80032da:	4476      	add	r6, lr
 80032dc:	f3c6 060c 	ubfx	r6, r6, #0, #13
 80032e0:	f939 7017 	ldrsh.w	r7, [r9, r7, lsl #1]
 80032e4:	f939 6016 	ldrsh.w	r6, [r9, r6, lsl #1]
 80032e8:	f9b8 1000 	ldrsh.w	r1, [r8]
 80032ec:	1bf6      	subs	r6, r6, r7
 80032ee:	4346      	muls	r6, r0
 80032f0:	eb07 37e6 	add.w	r7, r7, r6, asr #15
 80032f4:	9e01      	ldr	r6, [sp, #4]
 80032f6:	fb07 fc06 	mul.w	ip, r7, r6
 80032fa:	104e      	asrs	r6, r1, #1
 80032fc:	eb06 36ec 	add.w	r6, r6, ip, asr #15
 8003300:	4296      	cmp	r6, r2
 8003302:	bfa8      	it	ge
 8003304:	4616      	movge	r6, r2
 8003306:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 800330a:	1049      	asrs	r1, r1, #1
 800330c:	429e      	cmp	r6, r3
 800330e:	bfb8      	it	lt
 8003310:	461e      	movlt	r6, r3
 8003312:	4291      	cmp	r1, r2
 8003314:	bfa8      	it	ge
 8003316:	4611      	movge	r1, r2
 8003318:	4299      	cmp	r1, r3
 800331a:	bfb8      	it	lt
 800331c:	4619      	movlt	r1, r3
 800331e:	f829 6014 	strh.w	r6, [r9, r4, lsl #1]
 8003322:	3401      	adds	r4, #1
 8003324:	f828 1b02 	strh.w	r1, [r8], #2
 8003328:	f3c4 040c 	ubfx	r4, r4, #0, #13
 800332c:	e7ce      	b.n	80032cc <_ZN6braids17DigitalOscillator10RenderCombEPKhPsj+0x78>
 800332e:	602c      	str	r4, [r5, #0]
 8003330:	b003      	add	sp, #12
 8003332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003336:	bf00      	nop
 8003338:	08009c88 	.word	0x08009c88
 800333c:	ffff8001 	.word	0xffff8001

08003340 <_ZN6braids17DigitalOscillator6RenderEPKhPsj>:
 8003340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003344:	4617      	mov	r7, r2
 8003346:	7f42      	ldrb	r2, [r0, #29]
 8003348:	4698      	mov	r8, r3
 800334a:	f1a2 030c 	sub.w	r3, r2, #12
 800334e:	2b02      	cmp	r3, #2
 8003350:	4604      	mov	r4, r0
 8003352:	460e      	mov	r6, r1
 8003354:	d810      	bhi.n	8003378 <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0x38>
 8003356:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800335a:	4d3b      	ldr	r5, [pc, #236]	; (8003448 <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0x108>)
 800335c:	f3c3 200f 	ubfx	r0, r3, #8, #16
 8003360:	f835 1010 	ldrh.w	r1, [r5, r0, lsl #1]
 8003364:	3001      	adds	r0, #1
 8003366:	f935 0010 	ldrsh.w	r0, [r5, r0, lsl #1]
 800336a:	b20d      	sxth	r5, r1
 800336c:	1b40      	subs	r0, r0, r5
 800336e:	b2db      	uxtb	r3, r3
 8003370:	4343      	muls	r3, r0
 8003372:	eb01 2323 	add.w	r3, r1, r3, asr #8
 8003376:	81e3      	strh	r3, [r4, #14]
 8003378:	4b34      	ldr	r3, [pc, #208]	; (800344c <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0x10c>)
 800337a:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800337e:	f853 9032 	ldr.w	r9, [r3, r2, lsl #3]
 8003382:	7fa3      	ldrb	r3, [r4, #30]
 8003384:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8003388:	4293      	cmp	r3, r2
 800338a:	d034      	beq.n	80033f6 <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0xb6>
 800338c:	22c4      	movs	r2, #196	; 0xc4
 800338e:	2100      	movs	r1, #0
 8003390:	f104 0020 	add.w	r0, r4, #32
 8003394:	f003 ff4f 	bl	8007236 <memset>
 8003398:	2500      	movs	r5, #0
 800339a:	f640 73fd 	movw	r3, #4093	; 0xffd
 800339e:	f504 709a 	add.w	r0, r4, #308	; 0x134
 80033a2:	e9c4 5339 	strd	r5, r3, [r4, #228]	; 0xe4
 80033a6:	e9c4 533e 	strd	r5, r3, [r4, #248]	; 0xf8
 80033aa:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80033ae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80033b2:	e9c4 553b 	strd	r5, r5, [r4, #236]	; 0xec
 80033b6:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 80033ba:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
 80033be:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
 80033c2:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 80033c6:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
 80033ca:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
 80033ce:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
 80033d2:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 80033d6:	f7fd fed8 	bl	800118a <_ZN6braids3Svf4InitEv>
 80033da:	f504 70aa 	add.w	r0, r4, #340	; 0x154
 80033de:	f7fd fed4 	bl	800118a <_ZN6braids3Svf4InitEv>
 80033e2:	f504 70ba 	add.w	r0, r4, #372	; 0x174
 80033e6:	f7fd fed0 	bl	800118a <_ZN6braids3Svf4InitEv>
 80033ea:	2301      	movs	r3, #1
 80033ec:	7723      	strb	r3, [r4, #28]
 80033ee:	76e3      	strb	r3, [r4, #27]
 80033f0:	7f63      	ldrb	r3, [r4, #29]
 80033f2:	6025      	str	r5, [r4, #0]
 80033f4:	77a3      	strb	r3, [r4, #30]
 80033f6:	f9b4 5018 	ldrsh.w	r5, [r4, #24]
 80033fa:	4620      	mov	r0, r4
 80033fc:	4629      	mov	r1, r5
 80033fe:	f7fe ffc9 	bl	8002394 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
 8003402:	4629      	mov	r1, r5
 8003404:	6060      	str	r0, [r4, #4]
 8003406:	4620      	mov	r0, r4
 8003408:	f7ff ff02 	bl	8003210 <_ZN6braids17DigitalOscillator12ComputeDelayEs>
 800340c:	f5b5 4f8c 	cmp.w	r5, #17920	; 0x4600
 8003410:	60a0      	str	r0, [r4, #8]
 8003412:	dd14      	ble.n	800343e <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0xfe>
 8003414:	f44f 438c 	mov.w	r3, #17920	; 0x4600
 8003418:	8323      	strh	r3, [r4, #24]
 800341a:	ea4f 036a 	mov.w	r3, sl, asr #1
 800341e:	f01a 0f01 	tst.w	sl, #1
 8003422:	eb04 0003 	add.w	r0, r4, r3
 8003426:	bf18      	it	ne
 8003428:	58e3      	ldrne	r3, [r4, r3]
 800342a:	463a      	mov	r2, r7
 800342c:	bf18      	it	ne
 800342e:	f853 9009 	ldrne.w	r9, [r3, r9]
 8003432:	4631      	mov	r1, r6
 8003434:	4643      	mov	r3, r8
 8003436:	46cc      	mov	ip, r9
 8003438:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800343c:	4760      	bx	ip
 800343e:	2d00      	cmp	r5, #0
 8003440:	daeb      	bge.n	800341a <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0xda>
 8003442:	2300      	movs	r3, #0
 8003444:	e7e8      	b.n	8003418 <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0xd8>
 8003446:	bf00      	nop
 8003448:	0800bf2e 	.word	0x0800bf2e
 800344c:	20000048 	.word	0x20000048

08003450 <_ZN6braids17DigitalOscillator27InterpolateFormantParameterEPA5_A5_Ksssh>:
 8003450:	2032      	movs	r0, #50	; 0x32
 8003452:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003454:	f3c2 344f 	ubfx	r4, r2, #13, #16
 8003458:	4360      	muls	r0, r4
 800345a:	f89d c014 	ldrb.w	ip, [sp, #20]
 800345e:	f3c3 344f 	ubfx	r4, r3, #13, #16
 8003462:	180f      	adds	r7, r1, r0
 8003464:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 8003468:	3032      	adds	r0, #50	; 0x32
 800346a:	3401      	adds	r4, #1
 800346c:	4466      	add	r6, ip
 800346e:	4408      	add	r0, r1
 8003470:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003474:	f937 5016 	ldrsh.w	r5, [r7, r6, lsl #1]
 8003478:	4464      	add	r4, ip
 800347a:	f930 6016 	ldrsh.w	r6, [r0, r6, lsl #1]
 800347e:	f937 1014 	ldrsh.w	r1, [r7, r4, lsl #1]
 8003482:	f930 0014 	ldrsh.w	r0, [r0, r4, lsl #1]
 8003486:	00d2      	lsls	r2, r2, #3
 8003488:	b292      	uxth	r2, r2
 800348a:	1b76      	subs	r6, r6, r5
 800348c:	4356      	muls	r6, r2
 800348e:	1a40      	subs	r0, r0, r1
 8003490:	4342      	muls	r2, r0
 8003492:	eb05 4526 	add.w	r5, r5, r6, asr #16
 8003496:	b2ad      	uxth	r5, r5
 8003498:	eb01 4222 	add.w	r2, r1, r2, asr #16
 800349c:	b228      	sxth	r0, r5
 800349e:	b212      	sxth	r2, r2
 80034a0:	1a12      	subs	r2, r2, r0
 80034a2:	00d8      	lsls	r0, r3, #3
 80034a4:	b280      	uxth	r0, r0
 80034a6:	4350      	muls	r0, r2
 80034a8:	eb05 4020 	add.w	r0, r5, r0, asr #16
 80034ac:	b200      	sxth	r0, r0
 80034ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034b0 <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj>:
 80034b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034b4:	4604      	mov	r4, r0
 80034b6:	2600      	movs	r6, #0
 80034b8:	461d      	mov	r5, r3
 80034ba:	7ec3      	ldrb	r3, [r0, #27]
 80034bc:	b09b      	sub	sp, #108	; 0x6c
 80034be:	f9b0 a00e 	ldrsh.w	sl, [r0, #14]
 80034c2:	f9b0 b00c 	ldrsh.w	fp, [r0, #12]
 80034c6:	4f6a      	ldr	r7, [pc, #424]	; (8003670 <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0x1c0>)
 80034c8:	9208      	str	r2, [sp, #32]
 80034ca:	9304      	str	r3, [sp, #16]
 80034cc:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 80034d0:	f10d 0954 	add.w	r9, sp, #84	; 0x54
 80034d4:	b2f3      	uxtb	r3, r6
 80034d6:	9303      	str	r3, [sp, #12]
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	4652      	mov	r2, sl
 80034dc:	465b      	mov	r3, fp
 80034de:	4965      	ldr	r1, [pc, #404]	; (8003674 <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0x1c4>)
 80034e0:	4620      	mov	r0, r4
 80034e2:	f7ff ffb5 	bl	8003450 <_ZN6braids17DigitalOscillator27InterpolateFormantParameterEPA5_A5_Ksssh>
 80034e6:	f500 60c0 	add.w	r0, r0, #1536	; 0x600
 80034ea:	0440      	lsls	r0, r0, #17
 80034ec:	4962      	ldr	r1, [pc, #392]	; (8003678 <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0x1c8>)
 80034ee:	0e02      	lsrs	r2, r0, #24
 80034f0:	f837 3012 	ldrh.w	r3, [r7, r2, lsl #1]
 80034f4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80034f8:	0a00      	lsrs	r0, r0, #8
 80034fa:	1ad2      	subs	r2, r2, r3
 80034fc:	b280      	uxth	r0, r0
 80034fe:	4350      	muls	r0, r2
 8003500:	eb03 4010 	add.w	r0, r3, r0, lsr #16
 8003504:	ab0d      	add	r3, sp, #52	; 0x34
 8003506:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
 800350a:	9b03      	ldr	r3, [sp, #12]
 800350c:	4652      	mov	r2, sl
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	495a      	ldr	r1, [pc, #360]	; (800367c <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0x1cc>)
 8003512:	465b      	mov	r3, fp
 8003514:	4620      	mov	r0, r4
 8003516:	f7ff ff9b 	bl	8003450 <_ZN6braids17DigitalOscillator27InterpolateFormantParameterEPA5_A5_Ksssh>
 800351a:	ab0a      	add	r3, sp, #40	; 0x28
 800351c:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
 8003520:	9b04      	ldr	r3, [sp, #16]
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 8088 	beq.w	8003638 <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0x188>
 8003528:	2300      	movs	r3, #0
 800352a:	f848 3026 	str.w	r3, [r8, r6, lsl #2]
 800352e:	f849 3026 	str.w	r3, [r9, r6, lsl #2]
 8003532:	3601      	adds	r6, #1
 8003534:	2e05      	cmp	r6, #5
 8003536:	d1cd      	bne.n	80034d4 <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0x24>
 8003538:	9b04      	ldr	r3, [sp, #16]
 800353a:	b10b      	cbz	r3, 8003540 <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0x90>
 800353c:	2300      	movs	r3, #0
 800353e:	76e3      	strb	r3, [r4, #27]
 8003540:	f647 79ff 	movw	r9, #32767	; 0x7fff
 8003544:	6863      	ldr	r3, [r4, #4]
 8003546:	6820      	ldr	r0, [r4, #0]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	9305      	str	r3, [sp, #20]
 800354c:	0c1b      	lsrs	r3, r3, #16
 800354e:	9306      	str	r3, [sp, #24]
 8003550:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8003554:	f9b4 a024 	ldrsh.w	sl, [r4, #36]	; 0x24
 8003558:	9307      	str	r3, [sp, #28]
 800355a:	9b08      	ldr	r3, [sp, #32]
 800355c:	6a26      	ldr	r6, [r4, #32]
 800355e:	f8df b120 	ldr.w	fp, [pc, #288]	; 8003680 <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0x1d0>
 8003562:	f103 0804 	add.w	r8, r3, #4
 8003566:	2d00      	cmp	r5, #0
 8003568:	d06d      	beq.n	8003646 <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0x196>
 800356a:	9b05      	ldr	r3, [sp, #20]
 800356c:	18c2      	adds	r2, r0, r3
 800356e:	bf2c      	ite	cs
 8003570:	2301      	movcs	r3, #1
 8003572:	2300      	movcc	r3, #0
 8003574:	4610      	mov	r0, r2
 8003576:	b183      	cbz	r3, 800359a <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0xea>
 8003578:	9b06      	ldr	r3, [sp, #24]
 800357a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800357e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003582:	428b      	cmp	r3, r1
 8003584:	bf28      	it	cs
 8003586:	460b      	movcs	r3, r1
 8003588:	fb03 f103 	mul.w	r1, r3, r3
 800358c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003590:	33ff      	adds	r3, #255	; 0xff
 8003592:	435b      	muls	r3, r3
 8003594:	eba6 4691 	sub.w	r6, r6, r1, lsr #18
 8003598:	0c9b      	lsrs	r3, r3, #18
 800359a:	2700      	movs	r7, #0
 800359c:	eb03 4352 	add.w	r3, r3, r2, lsr #17
 80035a0:	9308      	str	r3, [sp, #32]
 80035a2:	f10d 0c50 	add.w	ip, sp, #80	; 0x50
 80035a6:	f10d 0e3c 	add.w	lr, sp, #60	; 0x3c
 80035aa:	9703      	str	r7, [sp, #12]
 80035ac:	f85c 3f04 	ldr.w	r3, [ip, #4]!
 80035b0:	eba6 12a3 	sub.w	r2, r6, r3, asr #6
 80035b4:	9209      	str	r2, [sp, #36]	; 0x24
 80035b6:	aa0d      	add	r2, sp, #52	; 0x34
 80035b8:	f932 2017 	ldrsh.w	r2, [r2, r7, lsl #1]
 80035bc:	3701      	adds	r7, #1
 80035be:	9204      	str	r2, [sp, #16]
 80035c0:	435a      	muls	r2, r3
 80035c2:	4611      	mov	r1, r2
 80035c4:	f85e 2f04 	ldr.w	r2, [lr, #4]!
 80035c8:	eb02 32e1 	add.w	r2, r2, r1, asr #15
 80035cc:	455a      	cmp	r2, fp
 80035ce:	bfb8      	it	lt
 80035d0:	465a      	movlt	r2, fp
 80035d2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80035d6:	bfa8      	it	ge
 80035d8:	464a      	movge	r2, r9
 80035da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80035dc:	f8ce 2000 	str.w	r2, [lr]
 80035e0:	1a8a      	subs	r2, r1, r2
 80035e2:	9904      	ldr	r1, [sp, #16]
 80035e4:	434a      	muls	r2, r1
 80035e6:	eb03 32e2 	add.w	r2, r3, r2, asr #15
 80035ea:	455a      	cmp	r2, fp
 80035ec:	bfb8      	it	lt
 80035ee:	465a      	movlt	r2, fp
 80035f0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80035f4:	bfa8      	it	ge
 80035f6:	464a      	movge	r2, r9
 80035f8:	4613      	mov	r3, r2
 80035fa:	f8cc 2000 	str.w	r2, [ip]
 80035fe:	9a07      	ldr	r2, [sp, #28]
 8003600:	2f05      	cmp	r7, #5
 8003602:	fb03 f302 	mul.w	r3, r3, r2
 8003606:	9a03      	ldr	r2, [sp, #12]
 8003608:	eb02 4363 	add.w	r3, r2, r3, asr #17
 800360c:	9303      	str	r3, [sp, #12]
 800360e:	d1cd      	bne.n	80035ac <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0xfc>
 8003610:	454b      	cmp	r3, r9
 8003612:	bfa8      	it	ge
 8003614:	464b      	movge	r3, r9
 8003616:	455b      	cmp	r3, fp
 8003618:	4619      	mov	r1, r3
 800361a:	bfb8      	it	lt
 800361c:	4659      	movlt	r1, fp
 800361e:	eb01 030a 	add.w	r3, r1, sl
 8003622:	105b      	asrs	r3, r3, #1
 8003624:	f828 3c04 	strh.w	r3, [r8, #-4]
 8003628:	f828 1c02 	strh.w	r1, [r8, #-2]
 800362c:	3d02      	subs	r5, #2
 800362e:	f108 0804 	add.w	r8, r8, #4
 8003632:	9e08      	ldr	r6, [sp, #32]
 8003634:	468a      	mov	sl, r1
 8003636:	e796      	b.n	8003566 <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0xb6>
 8003638:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800363c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800363e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003640:	f848 2026 	str.w	r2, [r8, r6, lsl #2]
 8003644:	e773      	b.n	800352e <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0x7e>
 8003646:	6020      	str	r0, [r4, #0]
 8003648:	6226      	str	r6, [r4, #32]
 800364a:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
 800364e:	a910      	add	r1, sp, #64	; 0x40
 8003650:	3428      	adds	r4, #40	; 0x28
 8003652:	aa15      	add	r2, sp, #84	; 0x54
 8003654:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 8003658:	f844 3b04 	str.w	r3, [r4], #4
 800365c:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 8003660:	3501      	adds	r5, #1
 8003662:	2d05      	cmp	r5, #5
 8003664:	6123      	str	r3, [r4, #16]
 8003666:	d1f5      	bne.n	8003654 <_ZN6braids17DigitalOscillator14RenderVowelFofEPKhPsj+0x1a4>
 8003668:	b01b      	add	sp, #108	; 0x6c
 800366a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800366e:	bf00      	nop
 8003670:	08007e04 	.word	0x08007e04
 8003674:	08007406 	.word	0x08007406
 8003678:	08007e06 	.word	0x08007e06
 800367c:	0800730c 	.word	0x0800730c
 8003680:	ffff8001 	.word	0xffff8001

08003684 <_ZN6braids15MacroOscillator10RenderBuzzEPKhPsj>:
 8003684:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003688:	f9b0 7000 	ldrsh.w	r7, [r0]
 800368c:	4604      	mov	r4, r0
 800368e:	f8a0 7066 	strh.w	r7, [r0, #102]	; 0x66
 8003692:	2008      	movs	r0, #8
 8003694:	461e      	mov	r6, r3
 8003696:	4688      	mov	r8, r1
 8003698:	4615      	mov	r5, r2
 800369a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800369e:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
 80036a2:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
 80036a6:	f994 0003 	ldrsb.w	r0, [r4, #3]
 80036aa:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 80036ae:	4403      	add	r3, r0
 80036b0:	f8a4 7086 	strh.w	r7, [r4, #134]	; 0x86
 80036b4:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
 80036b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80036bc:	2300      	movs	r3, #0
 80036be:	9600      	str	r6, [sp, #0]
 80036c0:	f104 0722 	add.w	r7, r4, #34	; 0x22
 80036c4:	f7fd fab8 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
 80036c8:	463a      	mov	r2, r7
 80036ca:	9600      	str	r6, [sp, #0]
 80036cc:	2300      	movs	r3, #0
 80036ce:	4641      	mov	r1, r8
 80036d0:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80036d4:	f7fd fab0 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
 80036d8:	1eaa      	subs	r2, r5, #2
 80036da:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 80036de:	d309      	bcc.n	80036f4 <_ZN6braids15MacroOscillator10RenderBuzzEPKhPsj+0x70>
 80036e0:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 80036e4:	105b      	asrs	r3, r3, #1
 80036e6:	8013      	strh	r3, [r2, #0]
 80036e8:	f937 1b02 	ldrsh.w	r1, [r7], #2
 80036ec:	eb03 0361 	add.w	r3, r3, r1, asr #1
 80036f0:	8013      	strh	r3, [r2, #0]
 80036f2:	e7f2      	b.n	80036da <_ZN6braids15MacroOscillator10RenderBuzzEPKhPsj+0x56>
 80036f4:	b002      	add	sp, #8
 80036f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080036fa <_ZN6braids15MacroOscillator10RenderCSawEPKhPsj>:
 80036fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036fc:	461d      	mov	r5, r3
 80036fe:	8903      	ldrh	r3, [r0, #8]
 8003700:	4604      	mov	r4, r0
 8003702:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
 8003706:	2302      	movs	r3, #2
 8003708:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
 800370c:	8803      	ldrh	r3, [r0, #0]
 800370e:	3058      	adds	r0, #88	; 0x58
 8003710:	81c3      	strh	r3, [r0, #14]
 8003712:	f830 3c56 	ldrh.w	r3, [r0, #-86]
 8003716:	4616      	mov	r6, r2
 8003718:	8243      	strh	r3, [r0, #18]
 800371a:	2300      	movs	r3, #0
 800371c:	9500      	str	r5, [sp, #0]
 800371e:	f7fd fa8b 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
 8003722:	210d      	movs	r1, #13
 8003724:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8003728:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 800372c:	337f      	adds	r3, #127	; 0x7f
 800372e:	111a      	asrs	r2, r3, #4
 8003730:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 8003734:	d307      	bcc.n	8003746 <_ZN6braids15MacroOscillator10RenderCSawEPKhPsj+0x4c>
 8003736:	f9b6 3000 	ldrsh.w	r3, [r6]
 800373a:	4413      	add	r3, r2
 800373c:	434b      	muls	r3, r1
 800373e:	10db      	asrs	r3, r3, #3
 8003740:	f826 3b02 	strh.w	r3, [r6], #2
 8003744:	e7f4      	b.n	8003730 <_ZN6braids15MacroOscillator10RenderCSawEPKhPsj+0x36>
 8003746:	b002      	add	sp, #8
 8003748:	bd70      	pop	{r4, r5, r6, pc}

0800374a <_ZN6braids15MacroOscillator15RenderSawSquareEPKhPsj>:
 800374a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800374e:	461d      	mov	r5, r3
 8003750:	f9b0 3000 	ldrsh.w	r3, [r0]
 8003754:	4604      	mov	r4, r0
 8003756:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
 800375a:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 800375e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8003762:	4688      	mov	r8, r1
 8003764:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
 8003768:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
 800376c:	2301      	movs	r3, #1
 800376e:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
 8003772:	2303      	movs	r3, #3
 8003774:	f100 0722 	add.w	r7, r0, #34	; 0x22
 8003778:	f880 3094 	strb.w	r3, [r0, #148]	; 0x94
 800377c:	2300      	movs	r3, #0
 800377e:	3058      	adds	r0, #88	; 0x58
 8003780:	9500      	str	r5, [sp, #0]
 8003782:	4616      	mov	r6, r2
 8003784:	f7fd fa58 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
 8003788:	2300      	movs	r3, #0
 800378a:	463a      	mov	r2, r7
 800378c:	4641      	mov	r1, r8
 800378e:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8003792:	9500      	str	r5, [sp, #0]
 8003794:	f7fd fa50 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
 8003798:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800379c:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 80037a0:	f04f 0e94 	mov.w	lr, #148	; 0x94
 80037a4:	1a13      	subs	r3, r2, r0
 80037a6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80037aa:	fbb2 f2f5 	udiv	r2, r2, r5
 80037ae:	435a      	muls	r2, r3
 80037b0:	f64f 7cff 	movw	ip, #65535	; 0xffff
 80037b4:	4611      	mov	r1, r2
 80037b6:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 80037ba:	d316      	bcc.n	80037ea <_ZN6braids15MacroOscillator15RenderSawSquareEPKhPsj+0xa0>
 80037bc:	eb00 33e1 	add.w	r3, r0, r1, asr #15
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	fa1f f883 	uxth.w	r8, r3
 80037c6:	f937 3b02 	ldrsh.w	r3, [r7], #2
 80037ca:	f936 ab02 	ldrsh.w	sl, [r6], #2
 80037ce:	fb0e f303 	mul.w	r3, lr, r3
 80037d2:	ebac 0908 	sub.w	r9, ip, r8
 80037d6:	fb09 f90a 	mul.w	r9, r9, sl
 80037da:	121b      	asrs	r3, r3, #8
 80037dc:	fb08 9303 	mla	r3, r8, r3, r9
 80037e0:	141b      	asrs	r3, r3, #16
 80037e2:	f826 3c02 	strh.w	r3, [r6, #-2]
 80037e6:	4411      	add	r1, r2
 80037e8:	e7e5      	b.n	80037b6 <_ZN6braids15MacroOscillator15RenderSawSquareEPKhPsj+0x6c>
 80037ea:	8863      	ldrh	r3, [r4, #2]
 80037ec:	80e3      	strh	r3, [r4, #6]
 80037ee:	b002      	add	sp, #8
 80037f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080037f4 <_ZN6braids15MacroOscillator9RenderSubEPKhPsj>:
 80037f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80037f8:	461d      	mov	r5, r3
 80037fa:	f244 234c 	movw	r3, #16972	; 0x424c
 80037fe:	4604      	mov	r4, r0
 8003800:	5cc3      	ldrb	r3, [r0, r3]
 8003802:	8800      	ldrh	r0, [r0, #0]
 8003804:	2b05      	cmp	r3, #5
 8003806:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
 800380a:	f04f 0003 	mov.w	r0, #3
 800380e:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
 8003812:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8003816:	bf14      	ite	ne
 8003818:	2301      	movne	r3, #1
 800381a:	2303      	moveq	r3, #3
 800381c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8003820:	bfac      	ite	ge
 8003822:	f44f 60c0 	movge.w	r0, #1536	; 0x600
 8003826:	f44f 6040 	movlt.w	r0, #3072	; 0xc00
 800382a:	2700      	movs	r7, #0
 800382c:	4689      	mov	r9, r1
 800382e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
 8003832:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8003836:	f8a4 7086 	strh.w	r7, [r4, #134]	; 0x86
 800383a:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800383e:	1a1b      	subs	r3, r3, r0
 8003840:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
 8003844:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003848:	463b      	mov	r3, r7
 800384a:	9500      	str	r5, [sp, #0]
 800384c:	f104 0622 	add.w	r6, r4, #34	; 0x22
 8003850:	4690      	mov	r8, r2
 8003852:	f7fd f9f1 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
 8003856:	463b      	mov	r3, r7
 8003858:	4632      	mov	r2, r6
 800385a:	4649      	mov	r1, r9
 800385c:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8003860:	9500      	str	r5, [sp, #0]
 8003862:	f7fd f9e9 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
 8003866:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800386a:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
 800386e:	f643 7eff 	movw	lr, #16383	; 0x3fff
 8003872:	1bcb      	subs	r3, r1, r7
 8003874:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8003878:	fbb1 f1f5 	udiv	r1, r1, r5
 800387c:	4359      	muls	r1, r3
 800387e:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8003882:	4608      	mov	r0, r1
 8003884:	f1a8 0202 	sub.w	r2, r8, #2
 8003888:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 800388c:	d31a      	bcc.n	80038c4 <_ZN6braids15MacroOscillator9RenderSubEPKhPsj+0xd0>
 800388e:	eb07 38e0 	add.w	r8, r7, r0, asr #15
 8003892:	fa1f f388 	uxth.w	r3, r8
 8003896:	f5b8 4f80 	cmp.w	r8, #16384	; 0x4000
 800389a:	bfb4      	ite	lt
 800389c:	ebae 0303 	sublt.w	r3, lr, r3
 80038a0:	f5a3 4380 	subge.w	r3, r3, #16384	; 0x4000
 80038a4:	f936 ab02 	ldrsh.w	sl, [r6], #2
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	ebac 0903 	sub.w	r9, ip, r3
 80038b0:	fb03 f30a 	mul.w	r3, r3, sl
 80038b4:	f932 8f02 	ldrsh.w	r8, [r2, #2]!
 80038b8:	4408      	add	r0, r1
 80038ba:	fb09 3308 	mla	r3, r9, r8, r3
 80038be:	141b      	asrs	r3, r3, #16
 80038c0:	8013      	strh	r3, [r2, #0]
 80038c2:	e7e1      	b.n	8003888 <_ZN6braids15MacroOscillator9RenderSubEPKhPsj+0x94>
 80038c4:	8863      	ldrh	r3, [r4, #2]
 80038c6:	80e3      	strh	r3, [r4, #6]
 80038c8:	b002      	add	sp, #8
 80038ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080038ce <_ZN6braids15MacroOscillator14RenderDualSyncEPKhPsj>:
 80038ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80038d2:	461d      	mov	r5, r3
 80038d4:	f244 234c 	movw	r3, #16972	; 0x424c
 80038d8:	f04f 0800 	mov.w	r8, #0
 80038dc:	5cc3      	ldrb	r3, [r0, r3]
 80038de:	4604      	mov	r4, r0
 80038e0:	2b07      	cmp	r3, #7
 80038e2:	bf0c      	ite	eq
 80038e4:	2003      	moveq	r0, #3
 80038e6:	4640      	movne	r0, r8
 80038e8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80038ec:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
 80038f0:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
 80038f4:	f9b4 0000 	ldrsh.w	r0, [r4]
 80038f8:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 80038fc:	f104 090a 	add.w	r9, r4, #10
 8003900:	eb03 03a0 	add.w	r3, r3, r0, asr #2
 8003904:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
 8003908:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800390c:	464b      	mov	r3, r9
 800390e:	f8a4 8066 	strh.w	r8, [r4, #102]	; 0x66
 8003912:	f8a4 8086 	strh.w	r8, [r4, #134]	; 0x86
 8003916:	9500      	str	r5, [sp, #0]
 8003918:	f104 0622 	add.w	r6, r4, #34	; 0x22
 800391c:	4617      	mov	r7, r2
 800391e:	f7fd f98b 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
 8003922:	4643      	mov	r3, r8
 8003924:	4632      	mov	r2, r6
 8003926:	f104 0078 	add.w	r0, r4, #120	; 0x78
 800392a:	9500      	str	r5, [sp, #0]
 800392c:	4649      	mov	r1, r9
 800392e:	f7fd f983 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
 8003932:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8003936:	f9b4 c006 	ldrsh.w	ip, [r4, #6]
 800393a:	1eba      	subs	r2, r7, #2
 800393c:	eba0 030c 	sub.w	r3, r0, ip
 8003940:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8003944:	fbb0 f0f5 	udiv	r0, r0, r5
 8003948:	4358      	muls	r0, r3
 800394a:	f64f 7eff 	movw	lr, #65535	; 0xffff
 800394e:	4607      	mov	r7, r0
 8003950:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 8003954:	d313      	bcc.n	800397e <_ZN6braids15MacroOscillator14RenderDualSyncEPKhPsj+0xb0>
 8003956:	eb0c 31e7 	add.w	r1, ip, r7, asr #15
 800395a:	f936 9b02 	ldrsh.w	r9, [r6], #2
 800395e:	0049      	lsls	r1, r1, #1
 8003960:	b289      	uxth	r1, r1
 8003962:	ebae 0801 	sub.w	r8, lr, r1
 8003966:	fb01 f109 	mul.w	r1, r1, r9
 800396a:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 800396e:	4407      	add	r7, r0
 8003970:	fb08 1303 	mla	r3, r8, r3, r1
 8003974:	149b      	asrs	r3, r3, #18
 8003976:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800397a:	8013      	strh	r3, [r2, #0]
 800397c:	e7e8      	b.n	8003950 <_ZN6braids15MacroOscillator14RenderDualSyncEPKhPsj+0x82>
 800397e:	8863      	ldrh	r3, [r4, #2]
 8003980:	80e3      	strh	r3, [r4, #6]
 8003982:	b003      	add	sp, #12
 8003984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003988 <_ZN6braids15MacroOscillator18RenderSineTriangleEPKhPsj>:
 8003988:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800398c:	f06f 0c05 	mvn.w	ip, #5
 8003990:	f647 75ff 	movw	r5, #32767	; 0x7fff
 8003994:	4604      	mov	r4, r0
 8003996:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800399a:	461e      	mov	r6, r3
 800399c:	f5a0 5338 	sub.w	r3, r0, #11776	; 0x2e00
 80039a0:	fb0c 5303 	mla	r3, ip, r3, r5
 80039a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80039a8:	42ab      	cmp	r3, r5
 80039aa:	bfa8      	it	ge
 80039ac:	462b      	movge	r3, r5
 80039ae:	f9b4 e000 	ldrsh.w	lr, [r4]
 80039b2:	f5a0 5c20 	sub.w	ip, r0, #10240	; 0x2800
 80039b6:	fb0e f303 	mul.w	r3, lr, r3
 80039ba:	13db      	asrs	r3, r3, #15
 80039bc:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
 80039c0:	2307      	movs	r3, #7
 80039c2:	ebac 0ccc 	sub.w	ip, ip, ip, lsl #3
 80039c6:	44ac      	add	ip, r5
 80039c8:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
 80039cc:	45ac      	cmp	ip, r5
 80039ce:	bfa8      	it	ge
 80039d0:	46ac      	movge	ip, r5
 80039d2:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
 80039d6:	2306      	movs	r3, #6
 80039d8:	4688      	mov	r8, r1
 80039da:	fb0e fe0c 	mul.w	lr, lr, ip
 80039de:	ea4f 3eee 	mov.w	lr, lr, asr #15
 80039e2:	f8a4 e086 	strh.w	lr, [r4, #134]	; 0x86
 80039e6:	f8a4 006e 	strh.w	r0, [r4, #110]	; 0x6e
 80039ea:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
 80039ee:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
 80039f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80039f6:	2300      	movs	r3, #0
 80039f8:	9600      	str	r6, [sp, #0]
 80039fa:	f104 0922 	add.w	r9, r4, #34	; 0x22
 80039fe:	4617      	mov	r7, r2
 8003a00:	f7fd f91a 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
 8003a04:	2300      	movs	r3, #0
 8003a06:	464a      	mov	r2, r9
 8003a08:	4641      	mov	r1, r8
 8003a0a:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8003a0e:	9600      	str	r6, [sp, #0]
 8003a10:	f7fd f912 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
 8003a14:	fbb5 f5f6 	udiv	r5, r5, r6
 8003a18:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8003a1c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8003a20:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	435d      	muls	r5, r3
 8003a28:	4629      	mov	r1, r5
 8003a2a:	3f02      	subs	r7, #2
 8003a2c:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 8003a30:	d311      	bcc.n	8003a56 <_ZN6braids15MacroOscillator18RenderSineTriangleEPKhPsj+0xce>
 8003a32:	eb02 33e1 	add.w	r3, r2, r1, asr #15
 8003a36:	f939 8b02 	ldrsh.w	r8, [r9], #2
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	eba0 0e03 	sub.w	lr, r0, r3
 8003a42:	fb03 f308 	mul.w	r3, r3, r8
 8003a46:	f937 cf02 	ldrsh.w	ip, [r7, #2]!
 8003a4a:	4429      	add	r1, r5
 8003a4c:	fb0e 330c 	mla	r3, lr, ip, r3
 8003a50:	141b      	asrs	r3, r3, #16
 8003a52:	803b      	strh	r3, [r7, #0]
 8003a54:	e7ea      	b.n	8003a2c <_ZN6braids15MacroOscillator18RenderSineTriangleEPKhPsj+0xa4>
 8003a56:	8863      	ldrh	r3, [r4, #2]
 8003a58:	80e3      	strh	r3, [r4, #6]
 8003a5a:	b003      	add	sp, #12
 8003a5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003a60 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj>:
 8003a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a64:	4617      	mov	r7, r2
 8003a66:	f642 22aa 	movw	r2, #10922	; 0x2aaa
 8003a6a:	461e      	mov	r6, r3
 8003a6c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8003a70:	b087      	sub	sp, #28
 8003a72:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
 8003a76:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
 8003a7a:	f9b0 3000 	ldrsh.w	r3, [r0]
 8003a7e:	4604      	mov	r4, r0
 8003a80:	4293      	cmp	r3, r2
 8003a82:	4689      	mov	r9, r1
 8003a84:	f04f 0500 	mov.w	r5, #0
 8003a88:	f300 808b 	bgt.w	8003ba2 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x142>
 8003a8c:	2204      	movs	r2, #4
 8003a8e:	f8a0 5066 	strh.w	r5, [r0, #102]	; 0x66
 8003a92:	f8a0 5086 	strh.w	r5, [r0, #134]	; 0x86
 8003a96:	f880 5094 	strb.w	r5, [r0, #148]	; 0x94
 8003a9a:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8003a9e:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
 8003aa2:	006d      	lsls	r5, r5, #1
 8003aa4:	b2ad      	uxth	r5, r5
 8003aa6:	4649      	mov	r1, r9
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	463a      	mov	r2, r7
 8003aac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003ab0:	f104 0822 	add.w	r8, r4, #34	; 0x22
 8003ab4:	9600      	str	r6, [sp, #0]
 8003ab6:	f7fd f8bf 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
 8003aba:	4649      	mov	r1, r9
 8003abc:	2300      	movs	r3, #0
 8003abe:	4642      	mov	r2, r8
 8003ac0:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8003ac4:	9600      	str	r6, [sp, #0]
 8003ac6:	f7fd f8b7 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
 8003aca:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8003ace:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8003ad2:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8003c00 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x1a0>
 8003ad6:	eba2 0361 	sub.w	r3, r2, r1, asr #1
 8003ada:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003ade:	f383 030f 	usat	r3, #15, r3
 8003ae2:	045b      	lsls	r3, r3, #17
 8003ae4:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8003ae8:	f83c 001e 	ldrh.w	r0, [ip, lr, lsl #1]
 8003aec:	f10c 0c02 	add.w	ip, ip, #2
 8003af0:	f83c c01e 	ldrh.w	ip, [ip, lr, lsl #1]
 8003af4:	0a1b      	lsrs	r3, r3, #8
 8003af6:	ebac 0c00 	sub.w	ip, ip, r0
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	fb03 f30c 	mul.w	r3, r3, ip
 8003b00:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8003b04:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8003b08:	b283      	uxth	r3, r0
 8003b0a:	bfc8      	it	gt
 8003b0c:	f5a2 5220 	subgt.w	r2, r2, #10240	; 0x2800
 8003b10:	9303      	str	r3, [sp, #12]
 8003b12:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8003b16:	bfc4      	itt	gt
 8003b18:	eba3 1302 	subgt.w	r3, r3, r2, lsl #4
 8003b1c:	ea23 73e3 	bicgt.w	r3, r3, r3, asr #31
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	43db      	mvns	r3, r3
 8003b24:	f647 7bff 	movw	fp, #32767	; 0x7fff
 8003b28:	f5c5 497f 	rsb	r9, r5, #65280	; 0xff00
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	f8d4 c054 	ldr.w	ip, [r4, #84]	; 0x54
 8003b32:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8003c04 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x1a4>
 8003b36:	f109 09ff 	add.w	r9, r9, #255	; 0xff
 8003b3a:	9204      	str	r2, [sp, #16]
 8003b3c:	9305      	str	r3, [sp, #20]
 8003b3e:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 8003b42:	d353      	bcc.n	8003bec <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x18c>
 8003b44:	f938 3b02 	ldrsh.w	r3, [r8], #2
 8003b48:	f937 2b02 	ldrsh.w	r2, [r7], #2
 8003b4c:	436b      	muls	r3, r5
 8003b4e:	fb09 3202 	mla	r2, r9, r2, r3
 8003b52:	9903      	ldr	r1, [sp, #12]
 8003b54:	1412      	asrs	r2, r2, #16
 8003b56:	eba2 030c 	sub.w	r3, r2, ip
 8003b5a:	434b      	muls	r3, r1
 8003b5c:	eb0c 3ce3 	add.w	ip, ip, r3, asr #15
 8003b60:	45dc      	cmp	ip, fp
 8003b62:	bfa8      	it	ge
 8003b64:	46dc      	movge	ip, fp
 8003b66:	4b24      	ldr	r3, [pc, #144]	; (8003bf8 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x198>)
 8003b68:	4824      	ldr	r0, [pc, #144]	; (8003bfc <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x19c>)
 8003b6a:	459c      	cmp	ip, r3
 8003b6c:	bfb8      	it	lt
 8003b6e:	469c      	movlt	ip, r3
 8003b70:	f50c 4100 	add.w	r1, ip, #32768	; 0x8000
 8003b74:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8003b78:	f93a 301e 	ldrsh.w	r3, [sl, lr, lsl #1]
 8003b7c:	f930 e01e 	ldrsh.w	lr, [r0, lr, lsl #1]
 8003b80:	b2c9      	uxtb	r1, r1
 8003b82:	ebae 0e03 	sub.w	lr, lr, r3
 8003b86:	fb01 f10e 	mul.w	r1, r1, lr
 8003b8a:	eb03 2121 	add.w	r1, r3, r1, asr #8
 8003b8e:	9b05      	ldr	r3, [sp, #20]
 8003b90:	b209      	sxth	r1, r1
 8003b92:	435a      	muls	r2, r3
 8003b94:	9b04      	ldr	r3, [sp, #16]
 8003b96:	fb03 2101 	mla	r1, r3, r1, r2
 8003b9a:	1409      	asrs	r1, r1, #16
 8003b9c:	f827 1c02 	strh.w	r1, [r7, #-2]
 8003ba0:	e7cd      	b.n	8003b3e <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0xde>
 8003ba2:	f245 5255 	movw	r2, #21845	; 0x5555
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	dc10      	bgt.n	8003bcc <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x16c>
 8003baa:	2203      	movs	r2, #3
 8003bac:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 8003bb0:	3b2b      	subs	r3, #43	; 0x2b
 8003bb2:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 8003bb6:	f8a0 5066 	strh.w	r5, [r0, #102]	; 0x66
 8003bba:	f8a0 5086 	strh.w	r5, [r0, #134]	; 0x86
 8003bbe:	f880 5094 	strb.w	r5, [r0, #148]	; 0x94
 8003bc2:	005d      	lsls	r5, r3, #1
 8003bc4:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
 8003bc8:	3d01      	subs	r5, #1
 8003bca:	e76b      	b.n	8003aa4 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x44>
 8003bcc:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 8003bd0:	3b56      	subs	r3, #86	; 0x56
 8003bd2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003bd6:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
 8003bda:	2303      	movs	r3, #3
 8003bdc:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
 8003be0:	2305      	movs	r3, #5
 8003be2:	f8a0 5086 	strh.w	r5, [r0, #134]	; 0x86
 8003be6:	f880 3094 	strb.w	r3, [r0, #148]	; 0x94
 8003bea:	e75c      	b.n	8003aa6 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x46>
 8003bec:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
 8003bf0:	b007      	add	sp, #28
 8003bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bf6:	bf00      	nop
 8003bf8:	ffff8001 	.word	0xffff8001
 8003bfc:	08009400 	.word	0x08009400
 8003c00:	08007e04 	.word	0x08007e04
 8003c04:	080093fe 	.word	0x080093fe

08003c08 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj>:
 8003c08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c0c:	461d      	mov	r5, r3
 8003c0e:	f244 234c 	movw	r3, #16972	; 0x424c
 8003c12:	5cc3      	ldrb	r3, [r0, r3]
 8003c14:	4614      	mov	r4, r2
 8003c16:	3b09      	subs	r3, #9
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	bf98      	it	ls
 8003c1e:	4a3c      	ldrls	r2, [pc, #240]	; (8003d10 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0x108>)
 8003c20:	460e      	mov	r6, r1
 8003c22:	bf98      	it	ls
 8003c24:	5cd1      	ldrbls	r1, [r2, r3]
 8003c26:	f9b0 3000 	ldrsh.w	r3, [r0]
 8003c2a:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8003d14 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0x10c>
 8003c2e:	ea4f 2e63 	mov.w	lr, r3, asr #9
 8003c32:	f93c 801e 	ldrsh.w	r8, [ip, lr, lsl #1]
 8003c36:	ea4f 2e23 	mov.w	lr, r3, asr #8
 8003c3a:	f10e 0e01 	add.w	lr, lr, #1
 8003c3e:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 8003c42:	f93c e01e 	ldrsh.w	lr, [ip, lr, lsl #1]
 8003c46:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003c4a:	ebae 0e08 	sub.w	lr, lr, r8
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	fb03 f30e 	mul.w	r3, r3, lr
 8003c54:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8003c58:	bf88      	it	hi
 8003c5a:	2105      	movhi	r1, #5
 8003c5c:	f8a0 706e 	strh.w	r7, [r0, #110]	; 0x6e
 8003c60:	4447      	add	r7, r8
 8003c62:	eb07 4323 	add.w	r3, r7, r3, asr #16
 8003c66:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
 8003c6a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	ea4f 2e23 	mov.w	lr, r3, asr #8
 8003c74:	f10e 0e01 	add.w	lr, lr, #1
 8003c78:	125f      	asrs	r7, r3, #9
 8003c7a:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 8003c7e:	f93c 7017 	ldrsh.w	r7, [ip, r7, lsl #1]
 8003c82:	f93c c01e 	ldrsh.w	ip, [ip, lr, lsl #1]
 8003c86:	021b      	lsls	r3, r3, #8
 8003c88:	ebac 0c07 	sub.w	ip, ip, r7
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	fb03 f30c 	mul.w	r3, r3, ip
 8003c92:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8003c96:	f8a0 2066 	strh.w	r2, [r0, #102]	; 0x66
 8003c9a:	4467      	add	r7, ip
 8003c9c:	eb07 4323 	add.w	r3, r7, r3, asr #16
 8003ca0:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
 8003ca4:	4623      	mov	r3, r4
 8003ca6:	f8a0 2086 	strh.w	r2, [r0, #134]	; 0x86
 8003caa:	f8a0 20a6 	strh.w	r2, [r0, #166]	; 0xa6
 8003cae:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 8003cb2:	f880 1094 	strb.w	r1, [r0, #148]	; 0x94
 8003cb6:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
 8003cba:	eb04 0845 	add.w	r8, r4, r5, lsl #1
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 8003cbe:	4598      	cmp	r8, r3
 8003cc0:	d002      	beq.n	8003cc8 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xc0>
	*__first = __tmp;
 8003cc2:	f823 2b02 	strh.w	r2, [r3], #2
 8003cc6:	e7fa      	b.n	8003cbe <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xb6>
 8003cc8:	f04f 0b15 	mov.w	fp, #21
 8003ccc:	f100 0758 	add.w	r7, r0, #88	; 0x58
 8003cd0:	f100 0ab8 	add.w	sl, r0, #184	; 0xb8
 8003cd4:	f100 0922 	add.w	r9, r0, #34	; 0x22
 8003cd8:	2300      	movs	r3, #0
 8003cda:	4638      	mov	r0, r7
 8003cdc:	9500      	str	r5, [sp, #0]
 8003cde:	464a      	mov	r2, r9
 8003ce0:	4631      	mov	r1, r6
 8003ce2:	f7fc ffa9 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
 8003ce6:	4648      	mov	r0, r9
 8003ce8:	4623      	mov	r3, r4
 8003cea:	4598      	cmp	r8, r3
 8003cec:	d00a      	beq.n	8003d04 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xfc>
 8003cee:	f930 1b02 	ldrsh.w	r1, [r0], #2
 8003cf2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003cf6:	fb0b f101 	mul.w	r1, fp, r1
 8003cfa:	eb02 12a1 	add.w	r2, r2, r1, asr #6
 8003cfe:	f823 2b02 	strh.w	r2, [r3], #2
 8003d02:	e7f2      	b.n	8003cea <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xe2>
 8003d04:	3720      	adds	r7, #32
 8003d06:	4557      	cmp	r7, sl
 8003d08:	d1e6      	bne.n	8003cd8 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xd0>
 8003d0a:	b003      	add	sp, #12
 8003d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d10:	08007576 	.word	0x08007576
 8003d14:	0800757a 	.word	0x0800757a

08003d18 <_ZN6braids15MacroOscillator13RenderSawCombEPKhPsj>:
 8003d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d1a:	461d      	mov	r5, r3
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	4604      	mov	r4, r0
 8003d20:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
 8003d24:	8900      	ldrh	r0, [r0, #8]
 8003d26:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
 8003d2a:	f8a4 006e 	strh.w	r0, [r4, #110]	; 0x6e
 8003d2e:	9500      	str	r5, [sp, #0]
 8003d30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003d34:	4617      	mov	r7, r2
 8003d36:	460e      	mov	r6, r1
 8003d38:	f7fc ff7e 	bl	8000c38 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
 8003d3c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8003d40:	8822      	ldrh	r2, [r4, #0]
 8003d42:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8003d46:	f9b4 30d0 	ldrsh.w	r3, [r4, #208]	; 0xd0
 8003d4a:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
 8003d4e:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8003d52:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8003d56:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8003d5a:	dd11      	ble.n	8003d80 <_ZN6braids15MacroOscillator13RenderSawCombEPKhPsj+0x68>
 8003d5c:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 8003d60:	dd0e      	ble.n	8003d80 <_ZN6braids15MacroOscillator13RenderSawCombEPKhPsj+0x68>
 8003d62:	4413      	add	r3, r2
 8003d64:	105b      	asrs	r3, r3, #1
 8003d66:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	463a      	mov	r2, r7
 8003d6e:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
 8003d72:	4631      	mov	r1, r6
 8003d74:	462b      	mov	r3, r5
 8003d76:	b003      	add	sp, #12
 8003d78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003d7c:	f7ff bae0 	b.w	8003340 <_ZN6braids17DigitalOscillator6RenderEPKhPsj>
 8003d80:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
 8003d84:	e7f1      	b.n	8003d6a <_ZN6braids15MacroOscillator13RenderSawCombEPKhPsj+0x52>

08003d86 <_ZN6braids15MacroOscillator13RenderDigitalEPKhPsj>:
 8003d86:	b470      	push	{r4, r5, r6}
 8003d88:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8003d8c:	8805      	ldrh	r5, [r0, #0]
 8003d8e:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
 8003d92:	f9b0 40d0 	ldrsh.w	r4, [r0, #208]	; 0xd0
 8003d96:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
 8003d9a:	f5b4 5f34 	cmp.w	r4, #11520	; 0x2d00
 8003d9e:	f100 06b8 	add.w	r6, r0, #184	; 0xb8
 8003da2:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8003da6:	dd10      	ble.n	8003dca <_ZN6braids15MacroOscillator13RenderDigitalEPKhPsj+0x44>
 8003da8:	f5b5 5f34 	cmp.w	r5, #11520	; 0x2d00
 8003dac:	dd0d      	ble.n	8003dca <_ZN6braids15MacroOscillator13RenderDigitalEPKhPsj+0x44>
 8003dae:	442c      	add	r4, r5
 8003db0:	1064      	asrs	r4, r4, #1
 8003db2:	f8a0 40d0 	strh.w	r4, [r0, #208]	; 0xd0
 8003db6:	f244 244c 	movw	r4, #16972	; 0x424c
 8003dba:	5d04      	ldrb	r4, [r0, r4]
 8003dbc:	3c0d      	subs	r4, #13
 8003dbe:	f880 40d5 	strb.w	r4, [r0, #213]	; 0xd5
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	bc70      	pop	{r4, r5, r6}
 8003dc6:	f7ff babb 	b.w	8003340 <_ZN6braids17DigitalOscillator6RenderEPKhPsj>
 8003dca:	f8a0 50d0 	strh.w	r5, [r0, #208]	; 0xd0
 8003dce:	e7f2      	b.n	8003db6 <_ZN6braids15MacroOscillator13RenderDigitalEPKhPsj+0x30>

08003dd0 <_ZN6braids15MacroOscillator6RenderEPKhPsj>:
 8003dd0:	b4f0      	push	{r4, r5, r6, r7}
 8003dd2:	f244 254c 	movw	r5, #16972	; 0x424c
 8003dd6:	4c09      	ldr	r4, [pc, #36]	; (8003dfc <_ZN6braids15MacroOscillator6RenderEPKhPsj+0x2c>)
 8003dd8:	5d45      	ldrb	r5, [r0, r5]
 8003dda:	eb04 06c5 	add.w	r6, r4, r5, lsl #3
 8003dde:	6876      	ldr	r6, [r6, #4]
 8003de0:	f854 4035 	ldr.w	r4, [r4, r5, lsl #3]
 8003de4:	1075      	asrs	r5, r6, #1
 8003de6:	07f6      	lsls	r6, r6, #31
 8003de8:	eb00 0705 	add.w	r7, r0, r5
 8003dec:	bf44      	itt	mi
 8003dee:	5940      	ldrmi	r0, [r0, r5]
 8003df0:	5904      	ldrmi	r4, [r0, r4]
 8003df2:	4638      	mov	r0, r7
 8003df4:	46a4      	mov	ip, r4
 8003df6:	bcf0      	pop	{r4, r5, r6, r7}
 8003df8:	4760      	bx	ip
 8003dfa:	bf00      	nop
 8003dfc:	20000160 	.word	0x20000160

08003e00 <_ZN6braids9Quantizer4InitEv>:
 8003e00:	2301      	movs	r3, #1
 8003e02:	7003      	strb	r3, [r0, #0]
 8003e04:	2300      	movs	r3, #0
 8003e06:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8003e0a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8003e0e:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8003e12:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003e16:	3002      	adds	r0, #2
 8003e18:	f820 3b02 	strh.w	r3, [r0], #2
 8003e1c:	3380      	adds	r3, #128	; 0x80
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e24:	d1f8      	bne.n	8003e18 <_ZN6braids9Quantizer4InitEv+0x18>
 8003e26:	4770      	bx	lr

08003e28 <_ZN6braids9Quantizer9ConfigureEPKssj>:
 8003e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e2c:	b3a1      	cbz	r1, 8003e98 <_ZN6braids9Quantizer9ConfigureEPKssj+0x70>
 8003e2e:	b39b      	cbz	r3, 8003e98 <_ZN6braids9Quantizer9ConfigureEPKssj+0x70>
 8003e30:	b392      	cbz	r2, 8003e98 <_ZN6braids9Quantizer9ConfigureEPKssj+0x70>
 8003e32:	2401      	movs	r4, #1
 8003e34:	4607      	mov	r7, r0
 8003e36:	f807 4b82 	strb.w	r4, [r7], #130
 8003e3a:	2400      	movs	r4, #0
 8003e3c:	f647 78ff 	movw	r8, #32767	; 0x7fff
 8003e40:	4626      	mov	r6, r4
 8003e42:	f103 4e00 	add.w	lr, r3, #2147483648	; 0x80000000
 8003e46:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8003ea0 <_ZN6braids9Quantizer9ConfigureEPKssj+0x78>
 8003e4a:	f100 0c80 	add.w	ip, r0, #128	; 0x80
 8003e4e:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8003e52:	ebae 0504 	sub.w	r5, lr, r4
 8003e56:	f931 b015 	ldrsh.w	fp, [r1, r5, lsl #1]
 8003e5a:	43f5      	mvns	r5, r6
 8003e5c:	f931 a014 	ldrsh.w	sl, [r1, r4, lsl #1]
 8003e60:	fb02 b505 	mla	r5, r2, r5, fp
 8003e64:	fb06 aa02 	mla	sl, r6, r2, sl
 8003e68:	45c2      	cmp	sl, r8
 8003e6a:	bfa8      	it	ge
 8003e6c:	46c2      	movge	sl, r8
 8003e6e:	4545      	cmp	r5, r8
 8003e70:	bfa8      	it	ge
 8003e72:	4645      	movge	r5, r8
 8003e74:	45ca      	cmp	sl, r9
 8003e76:	bfb8      	it	lt
 8003e78:	46ca      	movlt	sl, r9
 8003e7a:	454d      	cmp	r5, r9
 8003e7c:	bfb8      	it	lt
 8003e7e:	464d      	movlt	r5, r9
 8003e80:	3401      	adds	r4, #1
 8003e82:	42a3      	cmp	r3, r4
 8003e84:	f827 ab02 	strh.w	sl, [r7], #2
 8003e88:	f82c 5902 	strh.w	r5, [ip], #-2
 8003e8c:	bf9c      	itt	ls
 8003e8e:	3601      	addls	r6, #1
 8003e90:	2400      	movls	r4, #0
 8003e92:	4560      	cmp	r0, ip
 8003e94:	d1dd      	bne.n	8003e52 <_ZN6braids9Quantizer9ConfigureEPKssj+0x2a>
 8003e96:	e001      	b.n	8003e9c <_ZN6braids9Quantizer9ConfigureEPKssj+0x74>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	7003      	strb	r3, [r0, #0]
 8003e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ea0:	ffff8001 	.word	0xffff8001

08003ea4 <_ZN6braids9Quantizer7ProcessEll>:
 8003ea4:	7803      	ldrb	r3, [r0, #0]
 8003ea6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ea8:	b15b      	cbz	r3, 8003ec2 <_ZN6braids9Quantizer7ProcessEll+0x1e>
 8003eaa:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8003eae:	1a89      	subs	r1, r1, r2
 8003eb0:	428b      	cmp	r3, r1
 8003eb2:	dc08      	bgt.n	8003ec6 <_ZN6braids9Quantizer7ProcessEll+0x22>
 8003eb4:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8003eb8:	428b      	cmp	r3, r1
 8003eba:	db04      	blt.n	8003ec6 <_ZN6braids9Quantizer7ProcessEll+0x22>
 8003ebc:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
 8003ec0:	4411      	add	r1, r2
 8003ec2:	4608      	mov	r0, r1
 8003ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 8003ec6:	247b      	movs	r4, #123	; 0x7b
 8003ec8:	b20f      	sxth	r7, r1
 8003eca:	f100 0308 	add.w	r3, r0, #8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 8003ece:	2c00      	cmp	r4, #0
 8003ed0:	dd0c      	ble.n	8003eec <_ZN6braids9Quantizer7ProcessEll+0x48>
	{
	  _DistanceType __half = __len >> 1;
 8003ed2:	1065      	asrs	r5, r4, #1
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__val, __middle))
 8003ed4:	f933 c015 	ldrsh.w	ip, [r3, r5, lsl #1]
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
 8003ed8:	eb03 0645 	add.w	r6, r3, r5, lsl #1
 8003edc:	45bc      	cmp	ip, r7
 8003ede:	dc03      	bgt.n	8003ee8 <_ZN6braids9Quantizer7ProcessEll+0x44>
	    __len = __half;
	  else
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 8003ee0:	1b64      	subs	r4, r4, r5
	      ++__first;
 8003ee2:	1cb3      	adds	r3, r6, #2
	      __len = __len - __half - 1;
 8003ee4:	3c01      	subs	r4, #1
 8003ee6:	e7f2      	b.n	8003ece <_ZN6braids9Quantizer7ProcessEll+0x2a>
	  _DistanceType __half = __len >> 1;
 8003ee8:	462c      	mov	r4, r5
 8003eea:	e7f0      	b.n	8003ece <_ZN6braids9Quantizer7ProcessEll+0x2a>
 8003eec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003ef0:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 8003ef4:	1c84      	adds	r4, r0, #2
 8003ef6:	1b1b      	subs	r3, r3, r4
 8003ef8:	105b      	asrs	r3, r3, #1
 8003efa:	b21f      	sxth	r7, r3
 8003efc:	3b02      	subs	r3, #2
 8003efe:	b21b      	sxth	r3, r3
 8003f00:	42bb      	cmp	r3, r7
 8003f02:	dc11      	bgt.n	8003f28 <_ZN6braids9Quantizer7ProcessEll+0x84>
 8003f04:	eb00 0443 	add.w	r4, r0, r3, lsl #1
 8003f08:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 8003f0c:	1b0c      	subs	r4, r1, r4
 8003f0e:	2c00      	cmp	r4, #0
 8003f10:	bfb8      	it	lt
 8003f12:	4264      	neglt	r4, r4
 8003f14:	b224      	sxth	r4, r4
 8003f16:	42a6      	cmp	r6, r4
 8003f18:	bfc8      	it	gt
 8003f1a:	461d      	movgt	r5, r3
 8003f1c:	f103 0301 	add.w	r3, r3, #1
 8003f20:	bfc8      	it	gt
 8003f22:	4626      	movgt	r6, r4
 8003f24:	b21b      	sxth	r3, r3
 8003f26:	e7eb      	b.n	8003f00 <_ZN6braids9Quantizer7ProcessEll+0x5c>
 8003f28:	eb00 0345 	add.w	r3, r0, r5, lsl #1
 8003f2c:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8003f30:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
 8003f34:	f930 4015 	ldrsh.w	r4, [r0, r5, lsl #1]
 8003f38:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 8003f3c:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8003f40:	4434      	add	r4, r6
 8003f42:	1124      	asrs	r4, r4, #4
 8003f44:	f8c0 4108 	str.w	r4, [r0, #264]	; 0x108
 8003f48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003f4c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8003f50:	4433      	add	r3, r6
 8003f52:	111b      	asrs	r3, r3, #4
 8003f54:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8003f58:	e7b2      	b.n	8003ec0 <_ZN6braids9Quantizer7ProcessEll+0x1c>
	...

08003f5c <_ZN6braids8Settings5ResetEv>:
  }
  CheckPaques();
}

void Settings::Reset() {
  memcpy(&data_, &kInitSettings, sizeof(SettingsData));
 8003f5c:	2260      	movs	r2, #96	; 0x60
void Settings::Reset() {
 8003f5e:	b508      	push	{r3, lr}
  memcpy(&data_, &kInitSettings, sizeof(SettingsData));
 8003f60:	4903      	ldr	r1, [pc, #12]	; (8003f70 <_ZN6braids8Settings5ResetEv+0x14>)
 8003f62:	f003 f95d 	bl	8007220 <memcpy>
  data_.magic_byte = 'M';
 8003f66:	224d      	movs	r2, #77	; 0x4d
 8003f68:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
}
 8003f6c:	bd08      	pop	{r3, pc}
 8003f6e:	bf00      	nop
 8003f70:	0800cea8 	.word	0x0800cea8

08003f74 <_ZN6braids8Settings11CheckPaquesEv>:
  data_.magic_byte = 'M';
  //storage.ParsimoniousSave(data_, &version_token_);
  CheckPaques();
}

void Settings::CheckPaques() {
 8003f74:	b510      	push	{r4, lr}
  paques_ = !strcmp(data_.marquee_text, "49");
 8003f76:	4905      	ldr	r1, [pc, #20]	; (8003f8c <_ZN6braids8Settings11CheckPaquesEv+0x18>)
void Settings::CheckPaques() {
 8003f78:	4604      	mov	r4, r0
  paques_ = !strcmp(data_.marquee_text, "49");
 8003f7a:	3028      	adds	r0, #40	; 0x28
 8003f7c:	f7fc f8e6 	bl	800014c <strcmp>
 8003f80:	fab0 f080 	clz	r0, r0
 8003f84:	0940      	lsrs	r0, r0, #5
 8003f86:	f884 0062 	strb.w	r0, [r4, #98]	; 0x62
}
 8003f8a:	bd10      	pop	{r4, pc}
 8003f8c:	0800cc60 	.word	0x0800cc60

08003f90 <_ZN6braids8Settings4InitEv>:
void Settings::Init() {
 8003f90:	b570      	push	{r4, r5, r6, lr}
 8003f92:	4604      	mov	r4, r0
 8003f94:	260c      	movs	r6, #12
    Reset();
 8003f96:	f7ff ffe1 	bl	8003f5c <_ZN6braids8Settings5ResetEv>
  for (int32_t i = 0; i <= SETTING_LAST_EDITABLE_SETTING; ++i) {
 8003f9a:	2200      	movs	r2, #0
  bool settings_within_range = true;
 8003f9c:	2301      	movs	r3, #1
        value >= setting_metadata.min_value && \
 8003f9e:	481b      	ldr	r0, [pc, #108]	; (800400c <_ZN6braids8Settings4InitEv+0x7c>)
 8003fa0:	b15b      	cbz	r3, 8003fba <_ZN6braids8Settings4InitEv+0x2a>
 8003fa2:	fb06 f102 	mul.w	r1, r6, r2
  }
  
  uint8_t GetValue(Setting setting) const {
    const uint8_t* data = static_cast<const uint8_t*>(
        static_cast<const void*>(&data_));
    return data[setting];
 8003fa6:	5ca5      	ldrb	r5, [r4, r2]
    settings_within_range = settings_within_range && \
 8003fa8:	5c0b      	ldrb	r3, [r1, r0]
 8003faa:	42ab      	cmp	r3, r5
 8003fac:	d82b      	bhi.n	8004006 <_ZN6braids8Settings4InitEv+0x76>
        value <= setting_metadata.max_value;
 8003fae:	4401      	add	r1, r0
        value >= setting_metadata.min_value && \
 8003fb0:	784b      	ldrb	r3, [r1, #1]
 8003fb2:	42ab      	cmp	r3, r5
 8003fb4:	bf34      	ite	cc
 8003fb6:	2300      	movcc	r3, #0
 8003fb8:	2301      	movcs	r3, #1
  for (int32_t i = 0; i <= SETTING_LAST_EDITABLE_SETTING; ++i) {
 8003fba:	3201      	adds	r2, #1
 8003fbc:	2a14      	cmp	r2, #20
 8003fbe:	d1ef      	bne.n	8003fa0 <_ZN6braids8Settings4InitEv+0x10>
  settings_within_range = settings_within_range && data_.magic_byte == 'M';
 8003fc0:	b1cb      	cbz	r3, 8003ff6 <_ZN6braids8Settings4InitEv+0x66>
 8003fc2:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
 8003fc6:	2b4d      	cmp	r3, #77	; 0x4d
 8003fc8:	d115      	bne.n	8003ff6 <_ZN6braids8Settings4InitEv+0x66>
    settings_within_range = settings_within_range && \
 8003fca:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8003fcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fd0:	d911      	bls.n	8003ff6 <_ZN6braids8Settings4InitEv+0x66>
    settings_within_range = settings_within_range && \
 8003fd2:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8003fd6:	f643 617e 	movw	r1, #15998	; 0x3e7e
 8003fda:	8c22      	ldrh	r2, [r4, #32]
 8003fdc:	441a      	add	r2, r3
 8003fde:	b292      	uxth	r2, r2
 8003fe0:	428a      	cmp	r2, r1
 8003fe2:	d808      	bhi.n	8003ff6 <_ZN6braids8Settings4InitEv+0x66>
    settings_within_range = settings_within_range && \
 8003fe4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003fe6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003fea:	d904      	bls.n	8003ff6 <_ZN6braids8Settings4InitEv+0x66>
    settings_within_range = settings_within_range && \
 8003fec:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8003fee:	4413      	add	r3, r2
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	428b      	cmp	r3, r1
 8003ff4:	d902      	bls.n	8003ffc <_ZN6braids8Settings4InitEv+0x6c>
    Reset();
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	f7ff ffb0 	bl	8003f5c <_ZN6braids8Settings5ResetEv>
  CheckPaques();
 8003ffc:	4620      	mov	r0, r4
}
 8003ffe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  CheckPaques();
 8004002:	f7ff bfb7 	b.w	8003f74 <_ZN6braids8Settings11CheckPaquesEv>
        value >= setting_metadata.min_value && \
 8004006:	2300      	movs	r3, #0
 8004008:	e7d7      	b.n	8003fba <_ZN6braids8Settings4InitEv+0x2a>
 800400a:	bf00      	nop
 800400c:	0800cc64 	.word	0x0800cc64

08004010 <_ZN6braids8Settings4SaveEv>:
  data_.magic_byte = 'M';
 8004010:	234d      	movs	r3, #77	; 0x4d
 8004012:	f880 305f 	strb.w	r3, [r0, #95]	; 0x5f
  CheckPaques();
 8004016:	f7ff bfad 	b.w	8003f74 <_ZN6braids8Settings11CheckPaquesEv>

0800401a <_ZN6braids3Adc4InitEv>:
namespace braids {
  

void Adc::Init(void) {

}
 800401a:	4770      	bx	lr

0800401c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800401c:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800401e:	2414      	movs	r4, #20
{
 8004020:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004022:	4622      	mov	r2, r4
 8004024:	2100      	movs	r1, #0
 8004026:	a808      	add	r0, sp, #32
 8004028:	f003 f905 	bl	8007236 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800402c:	4622      	mov	r2, r4
 800402e:	2100      	movs	r1, #0
 8004030:	a801      	add	r0, sp, #4
 8004032:	f003 f900 	bl	8007236 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004036:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004038:	2201      	movs	r2, #1
 800403a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800403e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004042:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004046:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800404a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800404c:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800404e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004050:	f002 fcba 	bl	80069c8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004054:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004056:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800405a:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800405e:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004060:	4621      	mov	r1, r4
 8004062:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004064:	e9cd 3203 	strd	r3, r2, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004068:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800406a:	f002 ff2d 	bl	8006ec8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800406e:	b010      	add	sp, #64	; 0x40
 8004070:	bd10      	pop	{r4, pc}
	...

08004074 <main>:
{
 8004074:	b500      	push	{lr}
 8004076:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8004078:	f001 fa0e 	bl	8005498 <HAL_Init>
  SystemClock_Config();
 800407c:	f7ff ffce 	bl	800401c <_Z18SystemClock_Configv>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004080:	2210      	movs	r2, #16
 8004082:	2100      	movs	r1, #0
 8004084:	eb0d 0002 	add.w	r0, sp, r2
 8004088:	f003 f8d5 	bl	8007236 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800408c:	4b1a      	ldr	r3, [pc, #104]	; (80040f8 <main+0x84>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800408e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004092:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004094:	4819      	ldr	r0, [pc, #100]	; (80040fc <main+0x88>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004096:	f042 0210 	orr.w	r2, r2, #16
 800409a:	619a      	str	r2, [r3, #24]
 800409c:	699a      	ldr	r2, [r3, #24]
 800409e:	f002 0210 	and.w	r2, r2, #16
 80040a2:	9201      	str	r2, [sp, #4]
 80040a4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80040a6:	699a      	ldr	r2, [r3, #24]
 80040a8:	f042 0220 	orr.w	r2, r2, #32
 80040ac:	619a      	str	r2, [r3, #24]
 80040ae:	699a      	ldr	r2, [r3, #24]
 80040b0:	f002 0220 	and.w	r2, r2, #32
 80040b4:	9202      	str	r2, [sp, #8]
 80040b6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040b8:	699a      	ldr	r2, [r3, #24]
 80040ba:	f042 0204 	orr.w	r2, r2, #4
 80040be:	619a      	str	r2, [r3, #24]
 80040c0:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80040c2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	9303      	str	r3, [sp, #12]
 80040ca:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80040cc:	f001 fcbd 	bl	8005a4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040d4:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040d6:	2100      	movs	r1, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040dc:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040de:	4807      	ldr	r0, [pc, #28]	; (80040fc <main+0x88>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040e0:	e9cd 1306 	strd	r1, r3, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040e4:	a904      	add	r1, sp, #16
 80040e6:	f001 fb3f 	bl	8005768 <HAL_GPIO_Init>
  ml.init();
 80040ea:	a804      	add	r0, sp, #16
 80040ec:	f000 f97c 	bl	80043e8 <_ZN8MainLoop4initEv>
	  ml.loop();
 80040f0:	a804      	add	r0, sp, #16
 80040f2:	f000 fba1 	bl	8004838 <_ZN8MainLoop4loopEv>
 80040f6:	e7fb      	b.n	80040f0 <main+0x7c>
 80040f8:	40021000 	.word	0x40021000
 80040fc:	40011000 	.word	0x40011000

08004100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004106:	4b15      	ldr	r3, [pc, #84]	; (800415c <HAL_MspInit+0x5c>)
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	4a14      	ldr	r2, [pc, #80]	; (800415c <HAL_MspInit+0x5c>)
 800410c:	f043 0301 	orr.w	r3, r3, #1
 8004110:	6193      	str	r3, [r2, #24]
 8004112:	4b12      	ldr	r3, [pc, #72]	; (800415c <HAL_MspInit+0x5c>)
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	60bb      	str	r3, [r7, #8]
 800411c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800411e:	4b0f      	ldr	r3, [pc, #60]	; (800415c <HAL_MspInit+0x5c>)
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	4a0e      	ldr	r2, [pc, #56]	; (800415c <HAL_MspInit+0x5c>)
 8004124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004128:	61d3      	str	r3, [r2, #28]
 800412a:	4b0c      	ldr	r3, [pc, #48]	; (800415c <HAL_MspInit+0x5c>)
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004132:	607b      	str	r3, [r7, #4]
 8004134:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004136:	4b0a      	ldr	r3, [pc, #40]	; (8004160 <HAL_MspInit+0x60>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	4a04      	ldr	r2, [pc, #16]	; (8004160 <HAL_MspInit+0x60>)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004152:	bf00      	nop
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr
 800415c:	40021000 	.word	0x40021000
 8004160:	40010000 	.word	0x40010000

08004164 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800416c:	f107 0310 	add.w	r3, r7, #16
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	605a      	str	r2, [r3, #4]
 8004176:	609a      	str	r2, [r3, #8]
 8004178:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a15      	ldr	r2, [pc, #84]	; (80041d4 <HAL_I2C_MspInit+0x70>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d123      	bne.n	80041cc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004184:	4b14      	ldr	r3, [pc, #80]	; (80041d8 <HAL_I2C_MspInit+0x74>)
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	4a13      	ldr	r2, [pc, #76]	; (80041d8 <HAL_I2C_MspInit+0x74>)
 800418a:	f043 0308 	orr.w	r3, r3, #8
 800418e:	6193      	str	r3, [r2, #24]
 8004190:	4b11      	ldr	r3, [pc, #68]	; (80041d8 <HAL_I2C_MspInit+0x74>)
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800419c:	23c0      	movs	r3, #192	; 0xc0
 800419e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041a0:	2312      	movs	r3, #18
 80041a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041a4:	2303      	movs	r3, #3
 80041a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041a8:	f107 0310 	add.w	r3, r7, #16
 80041ac:	4619      	mov	r1, r3
 80041ae:	480b      	ldr	r0, [pc, #44]	; (80041dc <HAL_I2C_MspInit+0x78>)
 80041b0:	f001 fada 	bl	8005768 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80041b4:	4b08      	ldr	r3, [pc, #32]	; (80041d8 <HAL_I2C_MspInit+0x74>)
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	4a07      	ldr	r2, [pc, #28]	; (80041d8 <HAL_I2C_MspInit+0x74>)
 80041ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041be:	61d3      	str	r3, [r2, #28]
 80041c0:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <HAL_I2C_MspInit+0x74>)
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041c8:	60bb      	str	r3, [r7, #8]
 80041ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80041cc:	bf00      	nop
 80041ce:	3720      	adds	r7, #32
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40005400 	.word	0x40005400
 80041d8:	40021000 	.word	0x40021000
 80041dc:	40010c00 	.word	0x40010c00

080041e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80041e4:	bf00      	nop
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bc80      	pop	{r7}
 80041ea:	4770      	bx	lr

080041ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041f0:	e7fe      	b.n	80041f0 <HardFault_Handler+0x4>

080041f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041f2:	b480      	push	{r7}
 80041f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041f6:	e7fe      	b.n	80041f6 <MemManage_Handler+0x4>

080041f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041fc:	e7fe      	b.n	80041fc <BusFault_Handler+0x4>

080041fe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041fe:	b480      	push	{r7}
 8004200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004202:	e7fe      	b.n	8004202 <UsageFault_Handler+0x4>

08004204 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004208:	bf00      	nop
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr

08004210 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004214:	bf00      	nop
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr

0800421c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004220:	bf00      	nop
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr

08004228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800422c:	f001 f97a 	bl	8005524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004230:	bf00      	nop
 8004232:	bd80      	pop	{r7, pc}

08004234 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004238:	4b15      	ldr	r3, [pc, #84]	; (8004290 <SystemInit+0x5c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a14      	ldr	r2, [pc, #80]	; (8004290 <SystemInit+0x5c>)
 800423e:	f043 0301 	orr.w	r3, r3, #1
 8004242:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004244:	4b12      	ldr	r3, [pc, #72]	; (8004290 <SystemInit+0x5c>)
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	4911      	ldr	r1, [pc, #68]	; (8004290 <SystemInit+0x5c>)
 800424a:	4b12      	ldr	r3, [pc, #72]	; (8004294 <SystemInit+0x60>)
 800424c:	4013      	ands	r3, r2
 800424e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004250:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <SystemInit+0x5c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a0e      	ldr	r2, [pc, #56]	; (8004290 <SystemInit+0x5c>)
 8004256:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800425a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800425e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004260:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <SystemInit+0x5c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a0a      	ldr	r2, [pc, #40]	; (8004290 <SystemInit+0x5c>)
 8004266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800426a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800426c:	4b08      	ldr	r3, [pc, #32]	; (8004290 <SystemInit+0x5c>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	4a07      	ldr	r2, [pc, #28]	; (8004290 <SystemInit+0x5c>)
 8004272:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004276:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004278:	4b05      	ldr	r3, [pc, #20]	; (8004290 <SystemInit+0x5c>)
 800427a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800427e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004280:	4b05      	ldr	r3, [pc, #20]	; (8004298 <SystemInit+0x64>)
 8004282:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004286:	609a      	str	r2, [r3, #8]
#endif 
}
 8004288:	bf00      	nop
 800428a:	46bd      	mov	sp, r7
 800428c:	bc80      	pop	{r7}
 800428e:	4770      	bx	lr
 8004290:	40021000 	.word	0x40021000
 8004294:	f8ff0000 	.word	0xf8ff0000
 8004298:	e000ed00 	.word	0xe000ed00

0800429c <_ZL14callbackRenderi>:



static void callbackRender(int flagEndHalf)
{
	flagRender = 1;
 800429c:	2201      	movs	r2, #1
 800429e:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <_ZL14callbackRenderi+0x18>)
	if(flagEndHalf==1)
 80042a0:	4290      	cmp	r0, r2
	flagRender = 1;
 80042a2:	701a      	strb	r2, [r3, #0]
		indexBufferRender=1;
	}
	else
	{
		// transfer reach half, so I can start writing the first half
		indexBufferRender=0;
 80042a4:	bf18      	it	ne
 80042a6:	2200      	movne	r2, #0
 80042a8:	4b03      	ldr	r3, [pc, #12]	; (80042b8 <_ZL14callbackRenderi+0x1c>)
		indexBufferRender=1;
 80042aa:	bf0c      	ite	eq
 80042ac:	7018      	strbeq	r0, [r3, #0]
		indexBufferRender=0;
 80042ae:	701a      	strbne	r2, [r3, #0]
	}
}
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	200003bc 	.word	0x200003bc
 80042b8:	20000435 	.word	0x20000435

080042bc <_ZN6braids15MacroOscillator4InitEv>:
  typedef void (MacroOscillator::*RenderFn)(const uint8_t*, int16_t*, size_t);

  MacroOscillator() { }
  ~MacroOscillator() { }
  
  inline void Init() {
 80042bc:	b570      	push	{r4, r5, r6, lr}
    phase_increment_ = 1;
    high_ = false;
    parameter_ = previous_parameter_ = 0;
    aux_parameter_ = 0;
    discontinuity_depth_ = -16383;
    pitch_ = 60 << 7;
 80042be:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
    phase_increment_ = 1;
 80042c2:	2500      	movs	r5, #0
 80042c4:	2601      	movs	r6, #1
    discontinuity_depth_ = -16383;
 80042c6:	f24c 0201 	movw	r2, #49153	; 0xc001
 80042ca:	4604      	mov	r4, r0
 80042cc:	f8a0 206c 	strh.w	r2, [r0, #108]	; 0x6c
    pitch_ = 60 << 7;
 80042d0:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
    discontinuity_depth_ = -16383;
 80042d4:	f8a0 208c 	strh.w	r2, [r0, #140]	; 0x8c
    pitch_ = 60 << 7;
 80042d8:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
    discontinuity_depth_ = -16383;
 80042dc:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
    pitch_ = 60 << 7;
 80042e0:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
    phase_increment_ = 1;
 80042e4:	e9c0 5616 	strd	r5, r6, [r0, #88]	; 0x58
    high_ = false;
 80042e8:	f880 5064 	strb.w	r5, [r0, #100]	; 0x64
    parameter_ = previous_parameter_ = 0;
 80042ec:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
 80042f0:	f8a0 5066 	strh.w	r5, [r0, #102]	; 0x66
    aux_parameter_ = 0;
 80042f4:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
    next_sample_ = 0;
 80042f8:	6705      	str	r5, [r0, #112]	; 0x70
    phase_increment_ = 1;
 80042fa:	e9c0 561e 	strd	r5, r6, [r0, #120]	; 0x78
    high_ = false;
 80042fe:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    parameter_ = previous_parameter_ = 0;
 8004302:	f8a0 5088 	strh.w	r5, [r0, #136]	; 0x88
 8004306:	f8a0 5086 	strh.w	r5, [r0, #134]	; 0x86
    aux_parameter_ = 0;
 800430a:	f8a0 508a 	strh.w	r5, [r0, #138]	; 0x8a
    next_sample_ = 0;
 800430e:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    phase_increment_ = 1;
 8004312:	e9c0 5626 	strd	r5, r6, [r0, #152]	; 0x98
    high_ = false;
 8004316:	f880 50a4 	strb.w	r5, [r0, #164]	; 0xa4
    parameter_ = previous_parameter_ = 0;
 800431a:	f8a0 50a8 	strh.w	r5, [r0, #168]	; 0xa8
 800431e:	f8a0 50a6 	strh.w	r5, [r0, #166]	; 0xa6
    aux_parameter_ = 0;
 8004322:	f8a0 50aa 	strh.w	r5, [r0, #170]	; 0xaa
    next_sample_ = 0;
 8004326:	f8c0 50b0 	str.w	r5, [r0, #176]	; 0xb0

  DigitalOscillator() { }
  ~DigitalOscillator() { }
  
  inline void Init() {
    memset(&state_, 0, sizeof(state_));
 800432a:	22c4      	movs	r2, #196	; 0xc4
 800432c:	4629      	mov	r1, r5
 800432e:	30d8      	adds	r0, #216	; 0xd8
 8004330:	f002 ff81 	bl	8007236 <memset>
  Excitation() { }
  ~Excitation() { }

  void Init() {
    delay_ = 0;
    decay_ = 4093;
 8004334:	f640 73fd 	movw	r3, #4093	; 0xffd
  ~Svf() { }
  
  void Init() {
    lp_ = 0;
    bp_ = 0;
    frequency_ = 33 << 7;
 8004338:	f44f 5284 	mov.w	r2, #4224	; 0x1080
 800433c:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
 8004340:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
 8004344:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
 8004348:	f8c4 31dc 	str.w	r3, [r4, #476]	; 0x1dc
    resonance_ = 16384;
 800434c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    delay_ = 0;
 8004350:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
    counter_ = 0;
 8004354:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
    state_ = 0;
 8004358:	f8c4 51a8 	str.w	r5, [r4, #424]	; 0x1a8
    delay_ = 0;
 800435c:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
    counter_ = 0;
 8004360:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    state_ = 0;
 8004364:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
    delay_ = 0;
 8004368:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    counter_ = 0;
 800436c:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
    state_ = 0;
 8004370:	f8c4 51d0 	str.w	r5, [r4, #464]	; 0x1d0
    delay_ = 0;
 8004374:	f8c4 51d8 	str.w	r5, [r4, #472]	; 0x1d8
    counter_ = 0;
 8004378:	f8c4 51e0 	str.w	r5, [r4, #480]	; 0x1e0
    state_ = 0;
 800437c:	f8c4 51e4 	str.w	r5, [r4, #484]	; 0x1e4
    lp_ = 0;
 8004380:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    bp_ = 0;
 8004384:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
    frequency_ = 33 << 7;
 8004388:	f8a4 21ee 	strh.w	r2, [r4, #494]	; 0x1ee
    resonance_ = 16384;
 800438c:	f8a4 31f0 	strh.w	r3, [r4, #496]	; 0x1f0
    dirty_ = true;
 8004390:	f884 61ec 	strb.w	r6, [r4, #492]	; 0x1ec
    punch_ = 0;
 8004394:	f8c4 51f4 	str.w	r5, [r4, #500]	; 0x1f4
    mode_ = SVF_MODE_BP;
 8004398:	f884 6208 	strb.w	r6, [r4, #520]	; 0x208
    lp_ = 0;
 800439c:	f8c4 5220 	str.w	r5, [r4, #544]	; 0x220
    bp_ = 0;
 80043a0:	f8c4 5224 	str.w	r5, [r4, #548]	; 0x224
    frequency_ = 33 << 7;
 80043a4:	f8a4 220e 	strh.w	r2, [r4, #526]	; 0x20e
    resonance_ = 16384;
 80043a8:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
    dirty_ = true;
 80043ac:	f884 620c 	strb.w	r6, [r4, #524]	; 0x20c
    punch_ = 0;
 80043b0:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
    mode_ = SVF_MODE_BP;
 80043b4:	f884 6228 	strb.w	r6, [r4, #552]	; 0x228
    lp_ = 0;
 80043b8:	f8c4 5240 	str.w	r5, [r4, #576]	; 0x240
    bp_ = 0;
 80043bc:	f8c4 5244 	str.w	r5, [r4, #580]	; 0x244
    frequency_ = 33 << 7;
 80043c0:	f8a4 222e 	strh.w	r2, [r4, #558]	; 0x22e
    resonance_ = 16384;
 80043c4:	f8a4 3230 	strh.w	r3, [r4, #560]	; 0x230
    dirty_ = true;
 80043c8:	f884 622c 	strb.w	r6, [r4, #556]	; 0x22c
    punch_ = 0;
 80043cc:	f8c4 5234 	str.w	r5, [r4, #564]	; 0x234
    mode_ = SVF_MODE_BP;
 80043d0:	f884 6248 	strb.w	r6, [r4, #584]	; 0x248
    pulse_[2].Init();
    pulse_[3].Init();
    svf_[0].Init();
    svf_[1].Init();
    svf_[2].Init();
    phase_ = 0;
 80043d4:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
    strike_ = true;
 80043d8:	f884 60d4 	strb.w	r6, [r4, #212]	; 0xd4
    init_ = true;
 80043dc:	f884 60d3 	strb.w	r6, [r4, #211]	; 0xd3
    analog_oscillator_[0].Init();
    analog_oscillator_[1].Init();
    analog_oscillator_[2].Init();
    digital_oscillator_.Init();
    lp_state_ = 0;
 80043e0:	6565      	str	r5, [r4, #84]	; 0x54
    previous_parameter_[0] = 0;
 80043e2:	6065      	str	r5, [r4, #4]
    previous_parameter_[1] = 0;
  }
 80043e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080043e8 <_ZN8MainLoop4initEv>:
uint32_t debug_3=0;
uint32_t debug_4=0;


void MainLoop::init(void)
{
 80043e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;
	for(i=0; i<SAMPLES_BUFFER_SIZE; i++)
 80043ea:	2400      	movs	r4, #0
	{
		samplesBuffer[i] = 0;
 80043ec:	4625      	mov	r5, r4
 80043ee:	4b34      	ldr	r3, [pc, #208]	; (80044c0 <_ZN8MainLoop4initEv+0xd8>)
 80043f0:	54e5      	strb	r5, [r4, r3]
	for(i=0; i<SAMPLES_BUFFER_SIZE; i++)
 80043f2:	3401      	adds	r4, #1
 80043f4:	2c30      	cmp	r4, #48	; 0x30
 80043f6:	d1fb      	bne.n	80043f0 <_ZN8MainLoop4initEv+0x8>
	}
    memset(sync_samples, 0, SAMPLES_BUFFER_SIZE/2);
 80043f8:	2218      	movs	r2, #24
 80043fa:	2100      	movs	r1, #0
 80043fc:	4831      	ldr	r0, [pc, #196]	; (80044c4 <_ZN8MainLoop4initEv+0xdc>)
 80043fe:	f002 ff1a 	bl	8007236 <memset>

	mehal_init((uint32_t*)samplesBuffer,SAMPLES_BUFFER_SIZE,callbackRender);
 8004402:	4621      	mov	r1, r4
 8004404:	4a30      	ldr	r2, [pc, #192]	; (80044c8 <_ZN8MainLoop4initEv+0xe0>)
 8004406:	482e      	ldr	r0, [pc, #184]	; (80044c0 <_ZN8MainLoop4initEv+0xd8>)
 8004408:	f000 fdca 	bl	8004fa0 <mehal_init>

	settings.Init();
 800440c:	482f      	ldr	r0, [pc, #188]	; (80044cc <_ZN8MainLoop4initEv+0xe4>)
 800440e:	f7ff fdbf 	bl	8003f90 <_ZN6braids8Settings4InitEv>
	osc.Init();
 8004412:	482f      	ldr	r0, [pc, #188]	; (80044d0 <_ZN8MainLoop4initEv+0xe8>)
 8004414:	f7ff ff52 	bl	80042bc <_ZN6braids15MacroOscillator4InitEv>
	quantizer.Init();
 8004418:	482e      	ldr	r0, [pc, #184]	; (80044d4 <_ZN8MainLoop4initEv+0xec>)
 800441a:	f7ff fcf1 	bl	8003e00 <_ZN6braids9Quantizer4InitEv>

  void Init() {
    target_[ENV_SEGMENT_ATTACK] = 65535;
    target_[ENV_SEGMENT_DECAY] = 0;
    target_[ENV_SEGMENT_DEAD] = 0;
    increment_[ENV_SEGMENT_DEAD] = 0;
 800441e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004422:	4b2d      	ldr	r3, [pc, #180]	; (80044d8 <_ZN8MainLoop4initEv+0xf0>)
	envelope.Init();
	adc.Init();
 8004424:	482d      	ldr	r0, [pc, #180]	; (80044dc <_ZN8MainLoop4initEv+0xf4>)
 8004426:	609d      	str	r5, [r3, #8]
 8004428:	60da      	str	r2, [r3, #12]
    target_[ENV_SEGMENT_DECAY] = 0;
 800442a:	821d      	strh	r5, [r3, #16]
 800442c:	f7ff fdf5 	bl	800401a <_ZN6braids3Adc4InitEv>
	userInterface.init(&adc,&memory);
 8004430:	4a2b      	ldr	r2, [pc, #172]	; (80044e0 <_ZN8MainLoop4initEv+0xf8>)
 8004432:	492a      	ldr	r1, [pc, #168]	; (80044dc <_ZN8MainLoop4initEv+0xf4>)
 8004434:	482b      	ldr	r0, [pc, #172]	; (80044e4 <_ZN8MainLoop4initEv+0xfc>)
 8004436:	f000 faef 	bl	8004a18 <_ZN2Ui4initEPN6braids3AdcEP6Memory>
	//ws.Init(GetUniqueId(1));


	// calibracion
	int32_t adc_code_c2=memory.readUInt32(Memory::ADDR_ADC_CODE_C2);
 800443a:	2100      	movs	r1, #0
 800443c:	4828      	ldr	r0, [pc, #160]	; (80044e0 <_ZN8MainLoop4initEv+0xf8>)
 800443e:	f000 fd4f 	bl	8004ee0 <_ZN6Memory10readUInt32Et>
	if(adc_code_c2<0 || adc_code_c2>4095) adc_code_c2=82;

	int32_t adc_code_c4=memory.readUInt32(Memory::ADDR_ADC_CODE_C4);
 8004442:	2104      	movs	r1, #4
 8004444:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8004448:	bf34      	ite	cc
 800444a:	4604      	movcc	r4, r0
 800444c:	2452      	movcs	r4, #82	; 0x52
 800444e:	4824      	ldr	r0, [pc, #144]	; (80044e0 <_ZN8MainLoop4initEv+0xf8>)
 8004450:	f000 fd46 	bl	8004ee0 <_ZN6Memory10readUInt32Et>
 8004454:	f240 259f 	movw	r5, #671	; 0x29f
	if(adc_code_c4<0 || adc_code_c4>4095) adc_code_c4=671;

	int32_t adc_code_fm=memory.readUInt32(Memory::ADDR_ADC_CODE_FM);
 8004458:	2108      	movs	r1, #8
 800445a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800445e:	bf38      	it	cc
 8004460:	4605      	movcc	r5, r0
 8004462:	481f      	ldr	r0, [pc, #124]	; (80044e0 <_ZN8MainLoop4initEv+0xf8>)
 8004464:	f000 fd3c 	bl	8004ee0 <_ZN6Memory10readUInt32Et>
	if(adc_code_fm<0 || adc_code_fm>4095) adc_code_fm=0;

	int32_t adc_code_p0_min= memory.readUInt32(Memory::ADDR_ADC_CODE_P0_MIN);
 8004468:	210c      	movs	r1, #12
 800446a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800446e:	bf34      	ite	cc
 8004470:	4606      	movcc	r6, r0
 8004472:	2600      	movcs	r6, #0
 8004474:	481a      	ldr	r0, [pc, #104]	; (80044e0 <_ZN8MainLoop4initEv+0xf8>)
 8004476:	f000 fd33 	bl	8004ee0 <_ZN6Memory10readUInt32Et>
	if(adc_code_p0_min<0 || adc_code_p0_min>4095) adc_code_p0_min=0;

	int32_t adc_code_p0_max= memory.readUInt32(Memory::ADDR_ADC_CODE_P0_MAX);
 800447a:	2110      	movs	r1, #16
 800447c:	4818      	ldr	r0, [pc, #96]	; (80044e0 <_ZN8MainLoop4initEv+0xf8>)
 800447e:	f000 fd2f 	bl	8004ee0 <_ZN6Memory10readUInt32Et>
	if(adc_code_p0_max<0 || adc_code_p0_max>4095) adc_code_p0_max=4095;

	int32_t adc_code_p1_min= memory.readUInt32(Memory::ADDR_ADC_CODE_P1_MIN);
 8004482:	2114      	movs	r1, #20
 8004484:	4816      	ldr	r0, [pc, #88]	; (80044e0 <_ZN8MainLoop4initEv+0xf8>)
 8004486:	f000 fd2b 	bl	8004ee0 <_ZN6Memory10readUInt32Et>
	if(adc_code_p1_min<0 || adc_code_p1_min>4095) adc_code_p1_min=0;

	int32_t adc_code_p1_max= memory.readUInt32(Memory::ADDR_ADC_CODE_P1_MAX);
 800448a:	2118      	movs	r1, #24
 800448c:	4814      	ldr	r0, [pc, #80]	; (80044e0 <_ZN8MainLoop4initEv+0xf8>)
 800448e:	f000 fd27 	bl	8004ee0 <_ZN6Memory10readUInt32Et>
      int32_t adc_code_fm,
      int32_t adc_code_p0_min,
      int32_t adc_code_p0_max,
      int32_t adc_code_p1_min,
      int32_t adc_code_p1_max) {
    if (adc_code_c4 != adc_code_c2) {
 8004492:	42ac      	cmp	r4, r5
 8004494:	4f0d      	ldr	r7, [pc, #52]	; (80044cc <_ZN8MainLoop4initEv+0xe4>)
 8004496:	d00d      	beq.n	80044b4 <_ZN8MainLoop4initEv+0xcc>
      int32_t scale = (24 * 128 * 4096L) / (adc_code_c4 - adc_code_c2);
 8004498:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 800449c:	1b2a      	subs	r2, r5, r4
 800449e:	fb93 f3f2 	sdiv	r3, r3, r2
      data_.pitch_cv_scale = scale;
      data_.pitch_cv_offset = (60 << 7) - 
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 80044a2:	442c      	add	r4, r5
 80044a4:	1064      	asrs	r4, r4, #1
      data_.pitch_cv_scale = scale;
 80044a6:	61bb      	str	r3, [r7, #24]
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 80044a8:	4363      	muls	r3, r4
 80044aa:	131b      	asrs	r3, r3, #12
      data_.pitch_cv_offset = (60 << 7) - 
 80044ac:	f5c3 53f0 	rsb	r3, r3, #7680	; 0x1e00
 80044b0:	617b      	str	r3, [r7, #20]
      data_.fm_cv_offset = adc_code_fm;
 80044b2:	61fe      	str	r6, [r7, #28]
    //     int32_t offset = -(min_code[i] * scale >> 12) - 40;
    //     data_.parameter_cv_offset[i] = offset;
    //     data_.parameter_cv_scale[i] = scale;
    //   }
    // }
    Save();
 80044b4:	4805      	ldr	r0, [pc, #20]	; (80044cc <_ZN8MainLoop4initEv+0xe4>)
 80044b6:	f7ff fdab 	bl	8004010 <_ZN6braids8Settings4SaveEv>
    data[setting] = value;
 80044ba:	2304      	movs	r3, #4
 80044bc:	707b      	strb	r3, [r7, #1]
	settings.Calibrate(adc_code_c2,adc_code_c4,adc_code_fm,adc_code_p0_min,adc_code_p0_max,adc_code_p1_min,adc_code_p1_max);
	//________________________________

	settings.SetValue(SETTING_RESOLUTION,RESOLUTION_8_BIT);

}
 80044be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044c0:	200003d6 	.word	0x200003d6
 80044c4:	200003bd 	.word	0x200003bd
 80044c8:	0800429d 	.word	0x0800429d
 80044cc:	20000358 	.word	0x20000358
 80044d0:	20000448 	.word	0x20000448
 80044d4:	200046c0 	.word	0x200046c0
 80044d8:	2000469c 	.word	0x2000469c
 80044dc:	2000043c 	.word	0x2000043c
 80044e0:	20004698 	.word	0x20004698
 80044e4:	20000408 	.word	0x20000408

080044e8 <_ZN8MainLoop6renderEPhm>:
	}
	//______________
}

void MainLoop::render(uint8_t* out, uint32_t outSize)
{
 80044e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ec:	b083      	sub	sp, #12
    return data[setting];
 80044ee:	4cb4      	ldr	r4, [pc, #720]	; (80047c0 <_ZN8MainLoop6renderEPhm+0x2d8>)
 80044f0:	468b      	mov	fp, r1
	  static int16_t previous_shape = 0;
	  static uint16_t gain_lp;

	  envelope.Update(
	      settings.GetValue(SETTING_AD_ATTACK) * 8,
	      settings.GetValue(SETTING_AD_DECAY) * 8);
 80044f2:	7be3      	ldrb	r3, [r4, #15]
  inline EnvelopeSegment segment() const {
    return static_cast<EnvelopeSegment>(segment_);
  }

  inline void Update(int32_t a, int32_t d) {
    increment_[ENV_SEGMENT_ATTACK] = lut_env_portamento_increments[a];
 80044f4:	49b3      	ldr	r1, [pc, #716]	; (80047c4 <_ZN8MainLoop6renderEPhm+0x2dc>)
{
 80044f6:	4692      	mov	sl, r2
	      settings.GetValue(SETTING_AD_ATTACK) * 8,
 80044f8:	7ba2      	ldrb	r2, [r4, #14]
	      settings.GetValue(SETTING_AD_DECAY) * 8);
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	4db2      	ldr	r5, [pc, #712]	; (80047c8 <_ZN8MainLoop6renderEPhm+0x2e0>)
    increment_[ENV_SEGMENT_DECAY] = lut_env_portamento_increments[d];
 80044fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    increment_[ENV_SEGMENT_ATTACK] = lut_env_portamento_increments[a];
 8004502:	00d2      	lsls	r2, r2, #3
 8004504:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    increment_[ENV_SEGMENT_DECAY] = lut_env_portamento_increments[d];
 8004508:	606b      	str	r3, [r5, #4]
    segment_ = segment;
    phase_ = 0;
  }

  inline uint16_t Render() {
    uint32_t increment = increment_[segment_];
 800450a:	696b      	ldr	r3, [r5, #20]
    increment_[ENV_SEGMENT_ATTACK] = lut_env_portamento_increments[a];
 800450c:	602a      	str	r2, [r5, #0]
 800450e:	6a29      	ldr	r1, [r5, #32]
 8004510:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8004514:	2000      	movs	r0, #0
 8004516:	1852      	adds	r2, r2, r1
 8004518:	bf28      	it	cs
 800451a:	2001      	movcs	r0, #1
{
 800451c:	af00      	add	r7, sp, #0
    phase_ += increment;
 800451e:	622a      	str	r2, [r5, #32]
    if (phase_ < increment) {
 8004520:	b198      	cbz	r0, 800454a <_ZN8MainLoop6renderEPhm+0x62>
      value_ = Mix(a_, b_, 65535);
      Trigger(static_cast<EnvelopeSegment>(segment_ + 1));
 8004522:	3301      	adds	r3, #1
 8004524:	b2db      	uxtb	r3, r3
    if (segment == ENV_SEGMENT_DEAD) {
 8004526:	2b02      	cmp	r3, #2
      value_ = 0;
 8004528:	bf0c      	ite	eq
 800452a:	2200      	moveq	r2, #0
inline int16_t Mix(int16_t a, int16_t b, uint16_t balance) {
  return (a * (65535 - balance) + b * balance) >> 16;
}

inline uint16_t Mix(uint16_t a, uint16_t b, uint16_t balance) {
  return (a * (65535 - balance) + b * balance) >> 16;
 800452c:	8b6a      	ldrhne	r2, [r5, #26]
    segment_ = segment;
 800452e:	616b      	str	r3, [r5, #20]
 8004530:	bf1c      	itt	ne
 8004532:	ebc2 4202 	rsbne	r2, r2, r2, lsl #16
 8004536:	1412      	asrne	r2, r2, #16
      value_ = 0;
 8004538:	83aa      	strh	r2, [r5, #28]
    a_ = value_;
 800453a:	8baa      	ldrh	r2, [r5, #28]
 800453c:	832a      	strh	r2, [r5, #24]
    b_ = target_[segment];
 800453e:	eb05 0243 	add.w	r2, r5, r3, lsl #1
    phase_ = 0;
 8004542:	2300      	movs	r3, #0
    b_ = target_[segment];
 8004544:	8992      	ldrh	r2, [r2, #12]
    phase_ = 0;
 8004546:	622b      	str	r3, [r5, #32]
    b_ = target_[segment];
 8004548:	836a      	strh	r2, [r5, #26]
    }
    if (increment_[segment_]) {
 800454a:	696b      	ldr	r3, [r5, #20]
 800454c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8004550:	b1c3      	cbz	r3, 8004584 <_ZN8MainLoop6renderEPhm+0x9c>
      value_ = Mix(a_, b_, Interpolate824(lut_env_expo, phase_));
 8004552:	6a2a      	ldr	r2, [r5, #32]
  int32_t b = table[(phase >> 24) + 1];
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
}

inline uint16_t Interpolate824(const uint16_t* table, uint32_t phase) {
  uint32_t a = table[phase >> 24];
 8004554:	499d      	ldr	r1, [pc, #628]	; (80047cc <_ZN8MainLoop6renderEPhm+0x2e4>)
 8004556:	0e10      	lsrs	r0, r2, #24
 8004558:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
  uint32_t b = table[(phase >> 24) + 1];
 800455c:	3102      	adds	r1, #2
 800455e:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 8004562:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8004566:	1ac9      	subs	r1, r1, r3
 8004568:	434a      	muls	r2, r1
  return (a * (65535 - balance) + b * balance) >> 16;
 800456a:	8b68      	ldrh	r0, [r5, #26]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 800456c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  return (a * (65535 - balance) + b * balance) >> 16;
 8004570:	b29b      	uxth	r3, r3
 8004572:	f5c3 417f 	rsb	r1, r3, #65280	; 0xff00
 8004576:	4343      	muls	r3, r0
 8004578:	8b2a      	ldrh	r2, [r5, #24]
 800457a:	31ff      	adds	r1, #255	; 0xff
 800457c:	fb01 3302 	mla	r3, r1, r2, r3
 8004580:	141b      	asrs	r3, r3, #16
 8004582:	83ab      	strh	r3, [r5, #28]
  
  inline void set_shape(MacroOscillatorShape shape) {
    if (shape != shape_) {
 8004584:	f244 234c 	movw	r3, #16972	; 0x424c
 8004588:	4e91      	ldr	r6, [pc, #580]	; (80047d0 <_ZN8MainLoop6renderEPhm+0x2e8>)
	  uint32_t ad_value = envelope.Render();


	  // falta modulacion de shape
	  // TODO
	  osc.set_shape(settings.shape());
 800458a:	7822      	ldrb	r2, [r4, #0]
 800458c:	5cf1      	ldrb	r1, [r6, r3]
 800458e:	f647 7cff 	movw	ip, #32767	; 0x7fff
 8004592:	4291      	cmp	r1, r2
  inline uint32_t phase_increment() const {
    return phase_increment_;
  }
  
  inline void Strike() {
    strike_ = true;
 8004594:	bf18      	it	ne
 8004596:	2101      	movne	r1, #1
	  // 12 bit values

	  if(index==0)
	  {
		  // param 1
		  return this->currentValues[1];
 8004598:	488e      	ldr	r0, [pc, #568]	; (80047d4 <_ZN8MainLoop6renderEPhm+0x2ec>)
      Strike();
    }
    shape_ = shape;
 800459a:	54f2      	strb	r2, [r6, r3]


	  // Set timbre and color: CV + internal modulation.
	  uint16_t parameters[2];
	  for (uint16_t i = 0; i < 2; ++i) {
	    int32_t value = settings.adc_to_parameter(i, adc.channel(i));
 800459c:	8842      	ldrh	r2, [r0, #2]
    }
    return fm_adc_code;
  }
  
  inline int32_t adc_to_parameter(int index, int32_t adc_code) const {
    int32_t scale = static_cast<int32_t>(data_.parameter_cv_scale[index]);
 800459e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    }
    return value_;
 80045a0:	f8b5 901c 	ldrh.w	r9, [r5, #28]
    int32_t offset = static_cast<int32_t>(data_.parameter_cv_offset[index]);
    return (scale * adc_code >> 12) + offset;
 80045a4:	fb02 f303 	mul.w	r3, r2, r3
    int32_t offset = static_cast<int32_t>(data_.parameter_cv_offset[index]);
 80045a8:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
 80045ac:	bf18      	it	ne
 80045ae:	f886 10d4 	strbne.w	r1, [r6, #212]	; 0xd4
    return (scale * adc_code >> 12) + offset;
 80045b2:	eb02 3223 	add.w	r2, r2, r3, asr #12

	    Setting ad_mod_setting = i == 0 ? SETTING_AD_TIMBRE : SETTING_AD_COLOR;

	    value += ad_value * settings.GetValue(ad_mod_setting) >> 5;
 80045b6:	78e3      	ldrb	r3, [r4, #3]
	    int32_t value = settings.adc_to_parameter(i, adc.channel(i));
 80045b8:	8801      	ldrh	r1, [r0, #0]
	    value += ad_value * settings.GetValue(ad_mod_setting) >> 5;
 80045ba:	fb09 f303 	mul.w	r3, r9, r3
 80045be:	eb02 1253 	add.w	r2, r2, r3, lsr #5
    int32_t scale = static_cast<int32_t>(data_.parameter_cv_scale[index]);
 80045c2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80045c4:	4562      	cmp	r2, ip
    return (scale * adc_code >> 12) + offset;
 80045c6:	fb03 f101 	mul.w	r1, r3, r1
    int32_t offset = static_cast<int32_t>(data_.parameter_cv_offset[index]);
 80045ca:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 80045ce:	bfa8      	it	ge
 80045d0:	4662      	movge	r2, ip
    return (scale * adc_code >> 12) + offset;
 80045d2:	eb03 3321 	add.w	r3, r3, r1, asr #12
 80045d6:	7c61      	ldrb	r1, [r4, #17]

	    CONSTRAIN(value, 0, 32767);

	    parameters[i] = value;
	  }
	  osc.set_parameters(parameters[0], parameters[1]);
 80045d8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	    value += ad_value * settings.GetValue(ad_mod_setting) >> 5;
 80045dc:	fb09 f101 	mul.w	r1, r9, r1
 80045e0:	eb03 1351 	add.w	r3, r3, r1, lsr #5
 80045e4:	4563      	cmp	r3, ip
 80045e6:	bfa8      	it	ge
 80045e8:	4663      	movge	r3, ip
	  osc.set_parameters(parameters[0], parameters[1]);
 80045ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80045ee:	8073      	strh	r3, [r6, #2]
    if (data_.pitch_range == PITCH_RANGE_EXTERNAL ||
 80045f0:	79e3      	ldrb	r3, [r4, #7]
 80045f2:	8032      	strh	r2, [r6, #0]
 80045f4:	f013 0ffb 	tst.w	r3, #251	; 0xfb
	  //_________________________________________________


	  // Apply hysteresis to ADC reading to prevent a single bit error to move
	  // the quantized pitch up and down the quantization boundary.
	  int32_t pitch = quantizer.Process(
 80045f8:	8901      	ldrh	r1, [r0, #8]
 80045fa:	4680      	mov	r8, r0
 80045fc:	d174      	bne.n	80046e8 <_ZN8MainLoop6renderEPhm+0x200>
      pitch_adc_code = pitch_adc_code * data_.pitch_cv_scale >> 12;
 80045fe:	69a3      	ldr	r3, [r4, #24]
 8004600:	434b      	muls	r3, r1
      pitch_adc_code += data_.pitch_cv_offset;
 8004602:	6961      	ldr	r1, [r4, #20]
 8004604:	eb01 3123 	add.w	r1, r1, r3, asr #12
    return data_.quantizer_root;
 8004608:	7ce2      	ldrb	r2, [r4, #19]
	      settings.adc_to_pitch(adc.channel(ADC_CHANNEL_PITCH)),
	      (60 + settings.quantizer_root()) << 7);
 800460a:	4873      	ldr	r0, [pc, #460]	; (80047d8 <_ZN8MainLoop6renderEPhm+0x2f0>)
 800460c:	323c      	adds	r2, #60	; 0x3c
 800460e:	01d2      	lsls	r2, r2, #7
 8004610:	f7ff fc48 	bl	8003ea4 <_ZN6braids9Quantizer7ProcessEll>

	  if (!settings.meta_modulation()) {
 8004614:	79a3      	ldrb	r3, [r4, #6]
 8004616:	b973      	cbnz	r3, 8004636 <_ZN8MainLoop6renderEPhm+0x14e>
    if (data_.pitch_range == PITCH_RANGE_440) {
 8004618:	f894 c007 	ldrb.w	ip, [r4, #7]
		  return this->currentValues[4];
	  }
	  else if(index==3)
	  {
		  // FM
		  return this->currentValues[3];
 800461c:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8004620:	f1bc 0f03 	cmp.w	ip, #3
    fm_adc_code = fm_adc_code * 7680 >> 12;
 8004624:	bf18      	it	ne
 8004626:	f44f 53f0 	movne.w	r3, #7680	; 0x1e00
    fm_adc_code -= data_.fm_cv_offset;
 800462a:	69e1      	ldr	r1, [r4, #28]
 800462c:	bf1e      	ittt	ne
 800462e:	1a52      	subne	r2, r2, r1
    fm_adc_code = fm_adc_code * 7680 >> 12;
 8004630:	4353      	mulne	r3, r2
 8004632:	131b      	asrne	r3, r3, #12
	    pitch += settings.adc_to_fm(adc.channel(ADC_CHANNEL_FM));
 8004634:	4418      	add	r0, r3
	  int32_t pitch_delta = pitch - previous_pitch;
	  if (settings.data().auto_trig &&
	      (pitch_delta >= 0x40 || -pitch_delta >= 0x40)) {
	    trigger_detected_flag = true;
	  }
	  previous_pitch = pitch;
 8004636:	4b69      	ldr	r3, [pc, #420]	; (80047dc <_ZN8MainLoop6renderEPhm+0x2f4>)

	  // ver que es
	  //pitch += jitter_source.Render(settings.vco_drift());

	  // Fine tune adjust
	  pitch += adc.channel(ADC_CHANNEL_FINE_TUNE) >> 8; //pitch += internal_adc.value() >> 8;
 8004638:	f8b8 2004 	ldrh.w	r2, [r8, #4]
	  previous_pitch = pitch;
 800463c:	8018      	strh	r0, [r3, #0]
    return data[setting];
 800463e:	7c23      	ldrb	r3, [r4, #16]
	  pitch += adc.channel(ADC_CHANNEL_FINE_TUNE) >> 8; //pitch += internal_adc.value() >> 8;
 8004640:	eb00 2012 	add.w	r0, r0, r2, lsr #8
	  //___________

	  pitch += ad_value * settings.GetValue(SETTING_AD_FM) >> 7;
 8004644:	fb09 f203 	mul.w	r2, r9, r3
 8004648:	eb00 10d2 	add.w	r0, r0, r2, lsr #7
	    pitch = 16383;
	  } else if (pitch < 0) {
	    pitch = 0;
	  }

	  if (settings.vco_flatten()) {
 800464c:	7aa2      	ldrb	r2, [r4, #10]
 800464e:	f380 000e 	usat	r0, #14, r0
 8004652:	b182      	cbz	r2, 8004676 <_ZN8MainLoop6renderEPhm+0x18e>
	    pitch = Interpolate88(lut_vco_detune, pitch << 2);
 8004654:	0080      	lsls	r0, r0, #2
 8004656:	b280      	uxth	r0, r0
  return (a << 8) + \
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
}

inline uint16_t Interpolate88(const uint16_t* table, uint16_t index) {
  int32_t a = table[index >> 8];
 8004658:	4961      	ldr	r1, [pc, #388]	; (80047e0 <_ZN8MainLoop6renderEPhm+0x2f8>)
 800465a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 800465e:	f831 201c 	ldrh.w	r2, [r1, ip, lsl #1]
  int32_t b = table[(index >> 8) + 1];
 8004662:	3102      	adds	r1, #2
 8004664:	f831 101c 	ldrh.w	r1, [r1, ip, lsl #1]
  return a + ((b - a) * static_cast<int32_t>(index & 0xff) >> 8);
 8004668:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 800466c:	1a89      	subs	r1, r1, r2
 800466e:	4348      	muls	r0, r1
 8004670:	eb02 2020 	add.w	r0, r2, r0, asr #8
 8004674:	b280      	uxth	r0, r0
    int32_t t = data_.pitch_range == PITCH_RANGE_LFO ? -36 << 7 : 0;
 8004676:	79e1      	ldrb	r1, [r4, #7]
    t += (static_cast<int32_t>(data_.pitch_octave) - 2) * 12 * 128;
 8004678:	f44f 6cc0 	mov.w	ip, #1536	; 0x600
    int32_t t = data_.pitch_range == PITCH_RANGE_LFO ? -36 << 7 : 0;
 800467c:	2904      	cmp	r1, #4
 800467e:	4959      	ldr	r1, [pc, #356]	; (80047e4 <_ZN8MainLoop6renderEPhm+0x2fc>)
 8004680:	bf18      	it	ne
 8004682:	2100      	movne	r1, #0
	  }
	  osc.set_pitch(pitch + settings.pitch_transposition());
 8004684:	7a22      	ldrb	r2, [r4, #8]
    t += (static_cast<int32_t>(data_.pitch_octave) - 2) * 12 * 128;
 8004686:	3a02      	subs	r2, #2
 8004688:	fb0c 1202 	mla	r2, ip, r2, r1

	  if (trigger_flag) {
 800468c:	4956      	ldr	r1, [pc, #344]	; (80047e8 <_ZN8MainLoop6renderEPhm+0x300>)
	  osc.set_pitch(pitch + settings.pitch_transposition());
 800468e:	4410      	add	r0, r2
	  if (trigger_flag) {
 8004690:	780a      	ldrb	r2, [r1, #0]
  }

  inline void set_pitch(int16_t pitch) {
    pitch_ = pitch;
 8004692:	8130      	strh	r0, [r6, #8]
 8004694:	b152      	cbz	r2, 80046ac <_ZN8MainLoop6renderEPhm+0x1c4>
 8004696:	2201      	movs	r2, #1
 8004698:	f886 20d4 	strb.w	r2, [r6, #212]	; 0xd4
    a_ = value_;
 800469c:	8baa      	ldrh	r2, [r5, #28]
 800469e:	832a      	strh	r2, [r5, #24]
    b_ = target_[segment];
 80046a0:	89aa      	ldrh	r2, [r5, #12]
 80046a2:	836a      	strh	r2, [r5, #26]
    segment_ = segment;
 80046a4:	2200      	movs	r2, #0
 80046a6:	616a      	str	r2, [r5, #20]
    phase_ = 0;
 80046a8:	622a      	str	r2, [r5, #32]
	    osc.Strike();
	    envelope.Trigger(ENV_SEGMENT_ATTACK);
	    //ui.StepMarquee();
	    trigger_flag = false;
 80046aa:	700a      	strb	r2, [r1, #0]
	  }
	  //_________________________________________________________________


	  int16_t audio_samples[outSize];
 80046ac:	ea4f 024a 	mov.w	r2, sl, lsl #1
 80046b0:	3208      	adds	r2, #8
 80046b2:	f022 0207 	bic.w	r2, r2, #7
 80046b6:	ebad 0d02 	sub.w	sp, sp, r2
	  int16_t* render_buffer = audio_samples; //int16_t* render_buffer = audio_samples[render_block];

	  if (settings.GetValue(SETTING_AD_VCA) != 0
	    || settings.GetValue(SETTING_AD_TIMBRE) != 0
	    || settings.GetValue(SETTING_AD_COLOR) != 0
	    || settings.GetValue(SETTING_AD_FM) != 0) {
 80046ba:	7ca2      	ldrb	r2, [r4, #18]
	  int16_t audio_samples[outSize];
 80046bc:	466d      	mov	r5, sp
	    || settings.GetValue(SETTING_AD_FM) != 0) {
 80046be:	bb42      	cbnz	r2, 8004712 <_ZN8MainLoop6renderEPhm+0x22a>
	    || settings.GetValue(SETTING_AD_TIMBRE) != 0
 80046c0:	78e2      	ldrb	r2, [r4, #3]
 80046c2:	bb32      	cbnz	r2, 8004712 <_ZN8MainLoop6renderEPhm+0x22a>
	    || settings.GetValue(SETTING_AD_COLOR) != 0
 80046c4:	7c62      	ldrb	r2, [r4, #17]
 80046c6:	bb22      	cbnz	r2, 8004712 <_ZN8MainLoop6renderEPhm+0x22a>
	    || settings.GetValue(SETTING_AD_FM) != 0) {
 80046c8:	bb1b      	cbnz	r3, 8004712 <_ZN8MainLoop6renderEPhm+0x22a>
	    memset(sync_buffer, 0, outSize);
	  }
	  else
	  {
		  //Trigger in sync event (this is placed in sampler interrupt timer in braids)
		  memset(sync_buffer, 0, outSize);
 80046ca:	4e48      	ldr	r6, [pc, #288]	; (80047ec <_ZN8MainLoop6renderEPhm+0x304>)
 80046cc:	4619      	mov	r1, r3
 80046ce:	4652      	mov	r2, sl
 80046d0:	4630      	mov	r0, r6
 80046d2:	607b      	str	r3, [r7, #4]
 80046d4:	f002 fdaf 	bl	8007236 <memset>
		  if(flagTriggerInEvent==1)
 80046d8:	4945      	ldr	r1, [pc, #276]	; (80047f0 <_ZN8MainLoop6renderEPhm+0x308>)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	680a      	ldr	r2, [r1, #0]
 80046de:	2a01      	cmp	r2, #1
 80046e0:	d11c      	bne.n	800471c <_ZN8MainLoop6renderEPhm+0x234>
		  {
			  flagTriggerInEvent=0;
 80046e2:	600b      	str	r3, [r1, #0]
			  sync_buffer[0]=1;
 80046e4:	7032      	strb	r2, [r6, #0]
 80046e6:	e019      	b.n	800471c <_ZN8MainLoop6renderEPhm+0x234>
    } else if (data_.pitch_range == PITCH_RANGE_FREE) {
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d107      	bne.n	80046fc <_ZN8MainLoop6renderEPhm+0x214>
      pitch_adc_code = pitch_adc_code * data_.pitch_cv_scale >> 12;
 80046ec:	69a3      	ldr	r3, [r4, #24]
      pitch_adc_code = (pitch_adc_code - 1638);
 80046ee:	f2a1 6166 	subw	r1, r1, #1638	; 0x666
      pitch_adc_code = pitch_adc_code * data_.pitch_cv_scale >> 12;
 80046f2:	4359      	muls	r1, r3
 80046f4:	1309      	asrs	r1, r1, #12
      pitch_adc_code += 60 << 7;
 80046f6:	f501 51f0 	add.w	r1, r1, #7680	; 0x1e00
 80046fa:	e785      	b.n	8004608 <_ZN8MainLoop6renderEPhm+0x120>
    } else if (data_.pitch_range == PITCH_RANGE_440) {
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d005      	beq.n	800470c <_ZN8MainLoop6renderEPhm+0x224>
      pitch_adc_code = (pitch_adc_code - 1638) * 9 >> 1;
 8004700:	f2a1 6166 	subw	r1, r1, #1638	; 0x666
 8004704:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8004708:	1049      	asrs	r1, r1, #1
 800470a:	e7f4      	b.n	80046f6 <_ZN8MainLoop6renderEPhm+0x20e>
      pitch_adc_code = 69 << 7;
 800470c:	f44f 510a 	mov.w	r1, #8832	; 0x2280
 8004710:	e77a      	b.n	8004608 <_ZN8MainLoop6renderEPhm+0x120>
	    memset(sync_buffer, 0, outSize);
 8004712:	4652      	mov	r2, sl
 8004714:	2100      	movs	r1, #0
 8004716:	4835      	ldr	r0, [pc, #212]	; (80047ec <_ZN8MainLoop6renderEPhm+0x304>)
 8004718:	f002 fd8d 	bl	8007236 <memset>
		  }
		  //______________________
	  }

	  osc.Render(sync_buffer, render_buffer, outSize);
 800471c:	4653      	mov	r3, sl
 800471e:	462a      	mov	r2, r5
 8004720:	4932      	ldr	r1, [pc, #200]	; (80047ec <_ZN8MainLoop6renderEPhm+0x304>)
 8004722:	482b      	ldr	r0, [pc, #172]	; (80047d0 <_ZN8MainLoop6renderEPhm+0x2e8>)
 8004724:	f7ff fb54 	bl	8003dd0 <_ZN6braids15MacroOscillator6RenderEPKhPsj>

	  // Copy to DAC buffer with sample rate and bit reduction applied.
	    int16_t sample = 0;
	    size_t decimation_factor = decimation_factors[settings.data().sample_rate];
 8004728:	78a2      	ldrb	r2, [r4, #2]
 800472a:	4b32      	ldr	r3, [pc, #200]	; (80047f4 <_ZN8MainLoop6renderEPhm+0x30c>)
	    uint16_t bit_mask = bit_reduction_masks[settings.data().resolution];
	    int32_t gain = settings.GetValue(SETTING_AD_VCA) ? ad_value : 65535;
	    uint16_t signature = settings.signature() * settings.signature() * 4095;
 800472c:	f04f 0800 	mov.w	r8, #0
	    size_t decimation_factor = decimation_factors[settings.data().sample_rate];
 8004730:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
	    uint16_t bit_mask = bit_reduction_masks[settings.data().resolution];
 8004734:	7862      	ldrb	r2, [r4, #1]
 8004736:	4b30      	ldr	r3, [pc, #192]	; (80047f8 <_ZN8MainLoop6renderEPhm+0x310>)
	    for (size_t i = 0; i < outSize; ++i) {
 8004738:	4641      	mov	r1, r8
	    uint16_t bit_mask = bit_reduction_masks[settings.data().resolution];
 800473a:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
	    int32_t gain = settings.GetValue(SETTING_AD_VCA) ? ad_value : 65535;
 800473e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004742:	7ca3      	ldrb	r3, [r4, #18]
 8004744:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 80047fc <_ZN8MainLoop6renderEPhm+0x314>
 8004748:	2b00      	cmp	r3, #0
 800474a:	bf08      	it	eq
 800474c:	4691      	moveq	r9, r2
	    uint16_t signature = settings.signature() * settings.signature() * 4095;
 800474e:	7b23      	ldrb	r3, [r4, #12]
	    int16_t sample = 0;
 8004750:	4644      	mov	r4, r8
	    uint16_t signature = settings.signature() * settings.signature() * 4095;
 8004752:	435b      	muls	r3, r3
 8004754:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 8004758:	b29b      	uxth	r3, r3
 800475a:	f8be c000 	ldrh.w	ip, [lr]
  return (a * (65535 - balance) + b * balance) >> 16;
 800475e:	1ad3      	subs	r3, r2, r3
	    for (size_t i = 0; i < outSize; ++i) {
 8004760:	4551      	cmp	r1, sl
 8004762:	d111      	bne.n	8004788 <_ZN8MainLoop6renderEPhm+0x2a0>
 8004764:	f1b8 0f00 	cmp.w	r8, #0
 8004768:	d001      	beq.n	800476e <_ZN8MainLoop6renderEPhm+0x286>
 800476a:	f8ae c000 	strh.w	ip, [lr]
	      render_buffer[i] = Mix(sample, warped, signature);
	    }

	  // Copy rendered buffer to DMA buffer (8bits)
	  uint32_t i;
	  for(i=0; i<outSize; i++)
 800476e:	2300      	movs	r3, #0
 8004770:	4299      	cmp	r1, r3
 8004772:	d045      	beq.n	8004800 <_ZN8MainLoop6renderEPhm+0x318>
	  {
		  out[i] = (uint8_t) (((uint16_t)(  -(render_buffer[i]) + 32768U )) >>8)  ;
 8004774:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 8004778:	f5c2 4200 	rsb	r2, r2, #32768	; 0x8000
 800477c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004780:	f80b 2003 	strb.w	r2, [fp, r3]
	  for(i=0; i<outSize; i++)
 8004784:	3301      	adds	r3, #1
 8004786:	e7f3      	b.n	8004770 <_ZN8MainLoop6renderEPhm+0x288>
	      if ((i % decimation_factor) == 0) {
 8004788:	fbb1 f2f0 	udiv	r2, r1, r0
 800478c:	fb00 1212 	mls	r2, r0, r2, r1
 8004790:	b91a      	cbnz	r2, 800479a <_ZN8MainLoop6renderEPhm+0x2b2>
	        sample = render_buffer[i] & bit_mask;
 8004792:	f835 4011 	ldrh.w	r4, [r5, r1, lsl #1]
 8004796:	4034      	ands	r4, r6
 8004798:	b224      	sxth	r4, r4
	      sample = sample * gain_lp >> 16;
 800479a:	fb0c f204 	mul.w	r2, ip, r4
 800479e:	1412      	asrs	r2, r2, #16
 80047a0:	b214      	sxth	r4, r2
 80047a2:	435a      	muls	r2, r3
	      gain_lp += (gain - gain_lp) >> 4;
 80047a4:	eba9 080c 	sub.w	r8, r9, ip
 80047a8:	eb0c 1c28 	add.w	ip, ip, r8, asr #4
 80047ac:	1412      	asrs	r2, r2, #16
 80047ae:	f825 2011 	strh.w	r2, [r5, r1, lsl #1]
 80047b2:	fa1f fc8c 	uxth.w	ip, ip
	    for (size_t i = 0; i < outSize; ++i) {
 80047b6:	3101      	adds	r1, #1
 80047b8:	f04f 0801 	mov.w	r8, #1
 80047bc:	e7d0      	b.n	8004760 <_ZN8MainLoop6renderEPhm+0x278>
 80047be:	bf00      	nop
 80047c0:	20000358 	.word	0x20000358
 80047c4:	0800c234 	.word	0x0800c234
 80047c8:	2000469c 	.word	0x2000469c
 80047cc:	080077fe 	.word	0x080077fe
 80047d0:	20000448 	.word	0x20000448
 80047d4:	2000043c 	.word	0x2000043c
 80047d8:	200046c0 	.word	0x200046c0
 80047dc:	200047dc 	.word	0x200047dc
 80047e0:	08008006 	.word	0x08008006
 80047e4:	ffffee00 	.word	0xffffee00
 80047e8:	200003d5 	.word	0x200003d5
 80047ec:	200003bd 	.word	0x200003bd
 80047f0:	20000438 	.word	0x20000438
 80047f4:	0800d37c 	.word	0x0800d37c
 80047f8:	0800d38a 	.word	0x0800d38a
 80047fc:	200047de 	.word	0x200047de
	  }
	  //___________________________________________

}
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004808 <_ZN8MainLoop15adcStateMachineEv>:


void MainLoop::adcStateMachine(void)
{
 8004808:	b538      	push	{r3, r4, r5, lr}
	static uint8_t chn=0;

	adc.updateChannelValue(chn,mehal_readADC(chn));
 800480a:	4c09      	ldr	r4, [pc, #36]	; (8004830 <_ZN8MainLoop15adcStateMachineEv+0x28>)
 800480c:	7825      	ldrb	r5, [r4, #0]
 800480e:	4628      	mov	r0, r5
 8004810:	f000 fd52 	bl	80052b8 <mehal_readADC>

  }

  void updateChannelValue(uint8_t chn,uint16_t value)
  {
	  if(chn<ADC_CHANNELS)
 8004814:	2d04      	cmp	r5, #4
	  {
		  this->currentValues[chn] = value;
 8004816:	bf9c      	itt	ls
 8004818:	4a06      	ldrls	r2, [pc, #24]	; (8004834 <_ZN8MainLoop15adcStateMachineEv+0x2c>)
 800481a:	f822 0015 	strhls.w	r0, [r2, r5, lsl #1]

	chn++;
 800481e:	7822      	ldrb	r2, [r4, #0]
 8004820:	3201      	adds	r2, #1
 8004822:	b2d2      	uxtb	r2, r2
	if(chn>=ADC_CHANNELS)
 8004824:	2a04      	cmp	r2, #4
	{
		chn=0;
 8004826:	bf88      	it	hi
 8004828:	2200      	movhi	r2, #0
 800482a:	7022      	strb	r2, [r4, #0]
	}

}
 800482c:	bd38      	pop	{r3, r4, r5, pc}
 800482e:	bf00      	nop
 8004830:	200047d0 	.word	0x200047d0
 8004834:	2000043c 	.word	0x2000043c

08004838 <_ZN8MainLoop4loopEv>:
{
 8004838:	b570      	push	{r4, r5, r6, lr}
 800483a:	4605      	mov	r5, r0
	userInterface.loop();
 800483c:	482d      	ldr	r0, [pc, #180]	; (80048f4 <_ZN8MainLoop4loopEv+0xbc>)
 800483e:	f000 f927 	bl	8004a90 <_ZN2Ui4loopEv>
	if(debug>=60000)
 8004842:	f64e 215f 	movw	r1, #59999	; 0xea5f
	debug++;
 8004846:	4a2c      	ldr	r2, [pc, #176]	; (80048f8 <_ZN8MainLoop4loopEv+0xc0>)
 8004848:	6813      	ldr	r3, [r2, #0]
 800484a:	3301      	adds	r3, #1
	if(debug>=60000)
 800484c:	428b      	cmp	r3, r1
 800484e:	dc46      	bgt.n	80048de <_ZN8MainLoop4loopEv+0xa6>
		debug2++;
 8004850:	6013      	str	r3, [r2, #0]
	uint8_t currentGate = mehal_readGateInput();
 8004852:	f000 fd83 	bl	800535c <mehal_readGateInput>
 8004856:	4a29      	ldr	r2, [pc, #164]	; (80048fc <_ZN8MainLoop4loopEv+0xc4>)
	if(currentGate==0 && prevGate==1)
 8004858:	b930      	cbnz	r0, 8004868 <_ZN8MainLoop4loopEv+0x30>
 800485a:	7813      	ldrb	r3, [r2, #0]
 800485c:	2b01      	cmp	r3, #1
		trigger_flag=true;
 800485e:	bf01      	itttt	eq
 8004860:	4927      	ldreq	r1, [pc, #156]	; (8004900 <_ZN8MainLoop4loopEv+0xc8>)
 8004862:	700b      	strbeq	r3, [r1, #0]
		flagTriggerInEvent=1;
 8004864:	4927      	ldreq	r1, [pc, #156]	; (8004904 <_ZN8MainLoop4loopEv+0xcc>)
 8004866:	600b      	streq	r3, [r1, #0]
	prevGate = currentGate;
 8004868:	7010      	strb	r0, [r2, #0]
    return data[setting];
 800486a:	4b27      	ldr	r3, [pc, #156]	; (8004908 <_ZN8MainLoop4loopEv+0xd0>)
    if (current_scale != settings.GetValue(SETTING_QUANTIZER_SCALE)) {
 800486c:	4a27      	ldr	r2, [pc, #156]	; (800490c <_ZN8MainLoop4loopEv+0xd4>)
 800486e:	7a5b      	ldrb	r3, [r3, #9]
 8004870:	7811      	ldrb	r1, [r2, #0]
 8004872:	4299      	cmp	r1, r3
 8004874:	d00c      	beq.n	8004890 <_ZN8MainLoop4loopEv+0x58>
      current_scale = settings.GetValue(SETTING_QUANTIZER_SCALE);
 8004876:	7013      	strb	r3, [r2, #0]
  }
  
  int32_t Process(int32_t pitch, int32_t root);
  
  void Configure(const Scale& scale) {
    Configure(scale.notes, scale.span, scale.num_notes);
 8004878:	2228      	movs	r2, #40	; 0x28
 800487a:	435a      	muls	r2, r3
 800487c:	4924      	ldr	r1, [pc, #144]	; (8004910 <_ZN8MainLoop4loopEv+0xd8>)
 800487e:	f102 0008 	add.w	r0, r2, #8
 8004882:	188b      	adds	r3, r1, r2
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	5e8a      	ldrsh	r2, [r1, r2]
 8004888:	4401      	add	r1, r0
 800488a:	4822      	ldr	r0, [pc, #136]	; (8004914 <_ZN8MainLoop4loopEv+0xdc>)
 800488c:	f7ff facc 	bl	8003e28 <_ZN6braids9Quantizer9ConfigureEPKssj>
	if(flagRender==1)
 8004890:	4e21      	ldr	r6, [pc, #132]	; (8004918 <_ZN8MainLoop4loopEv+0xe0>)
    this->adcStateMachine();
 8004892:	4628      	mov	r0, r5
 8004894:	f7ff ffb8 	bl	8004808 <_ZN8MainLoop15adcStateMachineEv>
	if(flagRender==1)
 8004898:	7832      	ldrb	r2, [r6, #0]
 800489a:	2a01      	cmp	r2, #1
 800489c:	d11e      	bne.n	80048dc <_ZN8MainLoop4loopEv+0xa4>
		if(indexBufferRender==0)
 800489e:	4b1f      	ldr	r3, [pc, #124]	; (800491c <_ZN8MainLoop4loopEv+0xe4>)
 80048a0:	7819      	ldrb	r1, [r3, #0]
			out = samplesBuffer+(SAMPLES_BUFFER_SIZE/2);
 80048a2:	4b1f      	ldr	r3, [pc, #124]	; (8004920 <_ZN8MainLoop4loopEv+0xe8>)
 80048a4:	f103 0418 	add.w	r4, r3, #24
 80048a8:	2900      	cmp	r1, #0
 80048aa:	bf08      	it	eq
 80048ac:	461c      	moveq	r4, r3
		mehal_debugPinSet();
 80048ae:	f000 fd53 	bl	8005358 <mehal_debugPinSet>
		this->render(out,SAMPLES_BUFFER_SIZE/2);
 80048b2:	4621      	mov	r1, r4
		sysTickDivisor++;
 80048b4:	4c1b      	ldr	r4, [pc, #108]	; (8004924 <_ZN8MainLoop4loopEv+0xec>)
		this->render(out,SAMPLES_BUFFER_SIZE/2);
 80048b6:	2218      	movs	r2, #24
 80048b8:	4628      	mov	r0, r5
 80048ba:	f7ff fe15 	bl	80044e8 <_ZN8MainLoop6renderEPhm>
		mehal_debugPinReset();
 80048be:	f000 fd4c 	bl	800535a <mehal_debugPinReset>
		sysTickDivisor++;
 80048c2:	7823      	ldrb	r3, [r4, #0]
 80048c4:	3301      	adds	r3, #1
 80048c6:	b2db      	uxtb	r3, r3
		if(sysTickDivisor>=4)
 80048c8:	2b03      	cmp	r3, #3
		sysTickDivisor++;
 80048ca:	7023      	strb	r3, [r4, #0]
		if(sysTickDivisor>=4)
 80048cc:	d904      	bls.n	80048d8 <_ZN8MainLoop4loopEv+0xa0>
			userInterface.sysTick(); // 1ms
 80048ce:	4809      	ldr	r0, [pc, #36]	; (80048f4 <_ZN8MainLoop4loopEv+0xbc>)
 80048d0:	f000 f850 	bl	8004974 <_ZN2Ui7sysTickEv>
			sysTickDivisor=0;
 80048d4:	2300      	movs	r3, #0
 80048d6:	7023      	strb	r3, [r4, #0]
		flagRender=0;
 80048d8:	2300      	movs	r3, #0
 80048da:	7033      	strb	r3, [r6, #0]
}
 80048dc:	bd70      	pop	{r4, r5, r6, pc}
		debug=0;
 80048de:	2100      	movs	r1, #0
 80048e0:	6011      	str	r1, [r2, #0]
		debug2++;
 80048e2:	4a11      	ldr	r2, [pc, #68]	; (8004928 <_ZN8MainLoop4loopEv+0xf0>)
 80048e4:	6813      	ldr	r3, [r2, #0]
 80048e6:	3301      	adds	r3, #1
		if(debug2>=10)
 80048e8:	2b09      	cmp	r3, #9
 80048ea:	ddb1      	ble.n	8004850 <_ZN8MainLoop4loopEv+0x18>
			debug2=0;
 80048ec:	6011      	str	r1, [r2, #0]
			mehal_toogleBoardLed();
 80048ee:	f000 fd2b 	bl	8005348 <mehal_toogleBoardLed>
 80048f2:	e7ae      	b.n	8004852 <_ZN8MainLoop4loopEv+0x1a>
 80048f4:	20000408 	.word	0x20000408
 80048f8:	200047d4 	.word	0x200047d4
 80048fc:	2000032d 	.word	0x2000032d
 8004900:	200003d5 	.word	0x200003d5
 8004904:	20000438 	.word	0x20000438
 8004908:	20000358 	.word	0x20000358
 800490c:	2000032c 	.word	0x2000032c
 8004910:	0800d398 	.word	0x0800d398
 8004914:	200046c0 	.word	0x200046c0
 8004918:	200003bc 	.word	0x200003bc
 800491c:	20000435 	.word	0x20000435
 8004920:	200003d6 	.word	0x200003d6
 8004924:	20000434 	.word	0x20000434
 8004928:	200047d8 	.word	0x200047d8

0800492c <_GLOBAL__sub_I__ZN6stmlib11GetUniqueIdEh>:
  Adc() { }
 800492c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004930:	4b05      	ldr	r3, [pc, #20]	; (8004948 <_GLOBAL__sub_I__ZN6stmlib11GetUniqueIdEh+0x1c>)
 8004932:	2200      	movs	r2, #0
 8004934:	8019      	strh	r1, [r3, #0]
 8004936:	8059      	strh	r1, [r3, #2]
 8004938:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800493c:	f8c3 2006 	str.w	r2, [r3, #6]
 8004940:	8099      	strh	r1, [r3, #4]
#include "braids/drivers/adc.h"
#include "hal/Memory.h"

using namespace braids;

class Ui
 8004942:	4b02      	ldr	r3, [pc, #8]	; (800494c <_GLOBAL__sub_I__ZN6stmlib11GetUniqueIdEh+0x20>)
 8004944:	759a      	strb	r2, [r3, #22]
}
 8004946:	4770      	bx	lr
 8004948:	2000043c 	.word	0x2000043c
 800494c:	20000408 	.word	0x20000408

08004950 <_ZNK7Encoder9incrementEv.isra.0>:
  inline bool pressed_immediate() const {
    //return !GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13);
	  return !mehal_readEncoderSwitch();
  }
  
  inline int32_t increment() const {
 8004950:	f000 0003 	and.w	r0, r0, #3
    int32_t increment = 0;
    uint8_t a = quadrature_decoding_state_[0];
    uint8_t b = quadrature_decoding_state_[1];
    if ((a & 0x03) == 0x02 && (b & 0x03) == 0x00) {
 8004954:	2802      	cmp	r0, #2
 8004956:	f001 0103 	and.w	r1, r1, #3
 800495a:	d100      	bne.n	800495e <_ZNK7Encoder9incrementEv.isra.0+0xe>
 800495c:	b129      	cbz	r1, 800496a <_ZNK7Encoder9incrementEv.isra.0+0x1a>
      increment = -1;
    } else {
      if ((b & 0x03) == 0x02 && (a & 0x03) == 0x00) {
 800495e:	2902      	cmp	r1, #2
 8004960:	d106      	bne.n	8004970 <_ZNK7Encoder9incrementEv.isra.0+0x20>
 8004962:	fab0 f080 	clz	r0, r0
 8004966:	0940      	lsrs	r0, r0, #5
 8004968:	4770      	bx	lr
      increment = -1;
 800496a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800496e:	4770      	bx	lr
    int32_t increment = 0;
 8004970:	2000      	movs	r0, #0
        increment = 1;
      }
    }
    return increment;
  }
 8004972:	4770      	bx	lr

08004974 <_ZN2Ui7sysTickEv>:
	loadAllSettings();

}

void Ui::sysTick(void)
{
 8004974:	b510      	push	{r4, lr}
 8004976:	4604      	mov	r4, r0
	encoder.sysTick();
 8004978:	3004      	adds	r0, #4
 800497a:	f000 fa5f 	bl	8004e3c <_ZN7Encoder7sysTickEv>

	if(timeoutCalibCounter>0)
 800497e:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8004982:	2b00      	cmp	r3, #0
 8004984:	dd04      	ble.n	8004990 <_ZN2Ui7sysTickEv+0x1c>
	{
		timeoutCalibCounter--;
 8004986:	3b01      	subs	r3, #1
 8004988:	b29b      	uxth	r3, r3
 800498a:	82a3      	strh	r3, [r4, #20]
		if(timeoutCalibCounter==0)
 800498c:	b903      	cbnz	r3, 8004990 <_ZN2Ui7sysTickEv+0x1c>
		{
			enterCalibCounter=0;
 800498e:	75a3      	strb	r3, [r4, #22]
		}
	}

}
 8004990:	bd10      	pop	{r4, pc}
	...

08004994 <_ZN2Ui15saveAllSettingsEv>:

void Ui::saveAllSettings(void)
{
 8004994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004996:	4605      	mov	r5, r0
 8004998:	2400      	movs	r4, #0
	uint16_t i;
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
	{
		Setting setting_ = CONFIG_ITEMS[i].option;
 800499a:	4f07      	ldr	r7, [pc, #28]	; (80049b8 <_ZN2Ui15saveAllSettingsEv+0x24>)
 800499c:	4e07      	ldr	r6, [pc, #28]	; (80049bc <_ZN2Ui15saveAllSettingsEv+0x28>)
 800499e:	193b      	adds	r3, r7, r4
 80049a0:	785b      	ldrb	r3, [r3, #1]
		int16_t value = settings.GetValue(setting_);
		this->memory->writeUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))), (uint16_t)value);
 80049a2:	f104 0120 	add.w	r1, r4, #32
 80049a6:	5cf2      	ldrb	r2, [r6, r3]
 80049a8:	b289      	uxth	r1, r1
 80049aa:	69e8      	ldr	r0, [r5, #28]
 80049ac:	3402      	adds	r4, #2
 80049ae:	f000 fad0 	bl	8004f52 <_ZN6Memory11writeUInt16Ett>
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
 80049b2:	2c18      	cmp	r4, #24
 80049b4:	d1f3      	bne.n	800499e <_ZN2Ui15saveAllSettingsEv+0xa>
	}
}
 80049b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049b8:	0800db40 	.word	0x0800db40
 80049bc:	20000358 	.word	0x20000358

080049c0 <_ZN2Ui15loadAllSettingsEv>:
void Ui::loadAllSettings(void)
{
 80049c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049c4:	4680      	mov	r8, r0
 80049c6:	2400      	movs	r4, #0
	uint16_t i;
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
	{
		Setting setting_ = CONFIG_ITEMS[i].option;
 80049c8:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8004a14 <_ZN2Ui15loadAllSettingsEv+0x54>
  inline bool paques() const {
    return paques_;
  }
  
  static const SettingMetadata& metadata(Setting setting) {
    return metadata_[setting];
 80049cc:	4e0f      	ldr	r6, [pc, #60]	; (8004a0c <_ZN2Ui15loadAllSettingsEv+0x4c>)
    data[setting] = value;
 80049ce:	4f10      	ldr	r7, [pc, #64]	; (8004a10 <_ZN2Ui15loadAllSettingsEv+0x50>)

		int16_t valMem = (int16_t)this->memory->readUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))));
 80049d0:	f104 0120 	add.w	r1, r4, #32
		Setting setting_ = CONFIG_ITEMS[i].option;
 80049d4:	eb09 0304 	add.w	r3, r9, r4
		int16_t valMem = (int16_t)this->memory->readUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))));
 80049d8:	b289      	uxth	r1, r1
 80049da:	f8d8 001c 	ldr.w	r0, [r8, #28]
		Setting setting_ = CONFIG_ITEMS[i].option;
 80049de:	785d      	ldrb	r5, [r3, #1]
		int16_t valMem = (int16_t)this->memory->readUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))));
 80049e0:	f000 fa95 	bl	8004f0e <_ZN6Memory10readUInt16Et>
    return metadata_[setting];
 80049e4:	230c      	movs	r3, #12
 80049e6:	436b      	muls	r3, r5
 80049e8:	199a      	adds	r2, r3, r6

		int16_t value = settings.metadata(setting_).Clip(valMem);
 80049ea:	7852      	ldrb	r2, [r2, #1]
		int16_t valMem = (int16_t)this->memory->readUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))));
 80049ec:	b200      	sxth	r0, r0
    if (value > max_value) {
 80049ee:	4290      	cmp	r0, r2
		int16_t value = settings.metadata(setting_).Clip(valMem);
 80049f0:	5d9b      	ldrb	r3, [r3, r6]
 80049f2:	dd06      	ble.n	8004a02 <_ZN2Ui15loadAllSettingsEv+0x42>
      value = max_value;
 80049f4:	b210      	sxth	r0, r2
 80049f6:	3402      	adds	r4, #2
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
 80049f8:	2c18      	cmp	r4, #24
		settings.SetValue(setting_, value);
 80049fa:	55e8      	strb	r0, [r5, r7]
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
 80049fc:	d1e8      	bne.n	80049d0 <_ZN2Ui15loadAllSettingsEv+0x10>
	}
}
 80049fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    } else if (value < min_value) {
 8004a02:	4298      	cmp	r0, r3
      value = min_value;
 8004a04:	bfb8      	it	lt
 8004a06:	b218      	sxthlt	r0, r3
 8004a08:	e7f5      	b.n	80049f6 <_ZN2Ui15loadAllSettingsEv+0x36>
 8004a0a:	bf00      	nop
 8004a0c:	0800cc64 	.word	0x0800cc64
 8004a10:	20000358 	.word	0x20000358
 8004a14:	0800db40 	.word	0x0800db40

08004a18 <_ZN2Ui4initEPN6braids3AdcEP6Memory>:
void Ui::init(Adc* adc,Memory* memory) {
 8004a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	4616      	mov	r6, r2
 8004a1e:	460f      	mov	r7, r1
	state = UI_STATE_SELECT_OSCILLATOR;
 8004a20:	2500      	movs	r5, #0
	display.init();
 8004a22:	f000 f9a5 	bl	8004d70 <_ZN7Display4initEv>
	encoder.Init();
 8004a26:	1d20      	adds	r0, r4, #4
 8004a28:	f000 fa01 	bl	8004e2e <_ZN7Encoder4InitEv>
	state = UI_STATE_SELECT_OSCILLATOR;
 8004a2c:	7465      	strb	r5, [r4, #17]
	timeoutCalibCounter=0;
 8004a2e:	82a5      	strh	r5, [r4, #20]
	enterCalibCounter=0;
 8004a30:	75a5      	strb	r5, [r4, #22]
	this->memory = memory;
 8004a32:	e9c4 7606 	strd	r7, r6, [r4, #24]
	currentOscillator=(int8_t)memory->readUInt8(Memory::ADDR_CURRENT_OSCILLATOR);
 8004a36:	211c      	movs	r1, #28
 8004a38:	4630      	mov	r0, r6
 8004a3a:	f000 fa5c 	bl	8004ef6 <_ZN6Memory9readUInt8Et>
 8004a3e:	b240      	sxtb	r0, r0
	if(currentOscillator>=OSCILLATOR_INDEX_LEN)
 8004a40:	2826      	cmp	r0, #38	; 0x26
	currentOscillator=(int8_t)memory->readUInt8(Memory::ADDR_CURRENT_OSCILLATOR);
 8004a42:	bfd4      	ite	le
 8004a44:	7420      	strble	r0, [r4, #16]
		currentOscillator=0;
 8004a46:	7425      	strbgt	r5, [r4, #16]
	display.showChar(LIMITED_OSCILLATORS[currentOscillator].symbol);
 8004a48:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8004a4c:	4d0e      	ldr	r5, [pc, #56]	; (8004a88 <_ZN2Ui4initEPN6braids3AdcEP6Memory+0x70>)
 8004a4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004a52:	442b      	add	r3, r5
 8004a54:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8004a58:	4620      	mov	r0, r4
 8004a5a:	f000 f98b 	bl	8004d74 <_ZN7Display8showCharEa>
	display.showBank(LIMITED_OSCILLATORS[currentOscillator].bank);
 8004a5e:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8004a62:	4620      	mov	r0, r4
 8004a64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004a68:	442b      	add	r3, r5
 8004a6a:	7859      	ldrb	r1, [r3, #1]
 8004a6c:	f000 f998 	bl	8004da0 <_ZN7Display8showBankEh>
	settings.SetValue(SETTING_OSCILLATOR_SHAPE, LIMITED_OSCILLATORS[currentOscillator].osc);
 8004a70:	f994 3010 	ldrsb.w	r3, [r4, #16]
	loadAllSettings();
 8004a74:	4620      	mov	r0, r4
	settings.SetValue(SETTING_OSCILLATOR_SHAPE, LIMITED_OSCILLATORS[currentOscillator].osc);
 8004a76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    data[setting] = value;
 8004a7a:	5cea      	ldrb	r2, [r5, r3]
 8004a7c:	4b03      	ldr	r3, [pc, #12]	; (8004a8c <_ZN2Ui4initEPN6braids3AdcEP6Memory+0x74>)
 8004a7e:	701a      	strb	r2, [r3, #0]
}
 8004a80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	loadAllSettings();
 8004a84:	f7ff bf9c 	b.w	80049c0 <_ZN2Ui15loadAllSettingsEv>
 8004a88:	0800db58 	.word	0x0800db58
 8004a8c:	20000358 	.word	0x20000358

08004a90 <_ZN2Ui4loopEv>:

void Ui::loop(void) {
 8004a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a94:	4604      	mov	r4, r0

	encoder.loop();
 8004a96:	1d05      	adds	r5, r0, #4
 8004a98:	4628      	mov	r0, r5
 8004a9a:	f000 f9d4 	bl	8004e46 <_ZN7Encoder4loopEv>

	switch(state)
 8004a9e:	7c63      	ldrb	r3, [r4, #17]
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d85b      	bhi.n	8004b5c <_ZN2Ui4loopEv+0xcc>
 8004aa4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004aa8:	005c0005 	.word	0x005c0005
 8004aac:	00f200c0 	.word	0x00f200c0
 8004ab0:	0112      	.short	0x0112
	{
		case UI_STATE_SELECT_OSCILLATOR:
		{
			int32_t increment = encoder.increment();
 8004ab2:	79a1      	ldrb	r1, [r4, #6]
 8004ab4:	7960      	ldrb	r0, [r4, #5]
 8004ab6:	f7ff ff4b 	bl	8004950 <_ZNK7Encoder9incrementEv.isra.0>
			if (increment != 0)
 8004aba:	2800      	cmp	r0, #0
 8004abc:	d029      	beq.n	8004b12 <_ZN2Ui4loopEv+0x82>
 8004abe:	7c23      	ldrb	r3, [r4, #16]
				if(currentOscillator>=OSCILLATOR_INDEX_LEN)
					currentOscillator=(OSCILLATOR_INDEX_LEN-1);
				if(currentOscillator<0)
					currentOscillator=0;

				display.showChar(LIMITED_OSCILLATORS[currentOscillator].symbol);
 8004ac0:	4ea7      	ldr	r6, [pc, #668]	; (8004d60 <_ZN2Ui4loopEv+0x2d0>)
					currentOscillator++;
 8004ac2:	bfcc      	ite	gt
 8004ac4:	3301      	addgt	r3, #1
					currentOscillator--;
 8004ac6:	f103 33ff 	addle.w	r3, r3, #4294967295	; 0xffffffff
 8004aca:	7423      	strb	r3, [r4, #16]
				if(currentOscillator>=OSCILLATOR_INDEX_LEN)
 8004acc:	f994 3010 	ldrsb.w	r3, [r4, #16]
				display.showChar(LIMITED_OSCILLATORS[currentOscillator].symbol);
 8004ad0:	4620      	mov	r0, r4
				if(currentOscillator>=OSCILLATOR_INDEX_LEN)
 8004ad2:	2b26      	cmp	r3, #38	; 0x26
					currentOscillator=(OSCILLATOR_INDEX_LEN-1);
 8004ad4:	bfc4      	itt	gt
 8004ad6:	2326      	movgt	r3, #38	; 0x26
 8004ad8:	7423      	strbgt	r3, [r4, #16]
				if(currentOscillator<0)
 8004ada:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8004ade:	2b00      	cmp	r3, #0
					currentOscillator=0;
 8004ae0:	bfbc      	itt	lt
 8004ae2:	2300      	movlt	r3, #0
 8004ae4:	7423      	strblt	r3, [r4, #16]
				display.showChar(LIMITED_OSCILLATORS[currentOscillator].symbol);
 8004ae6:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8004aea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004aee:	4433      	add	r3, r6
 8004af0:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8004af4:	f000 f93e 	bl	8004d74 <_ZN7Display8showCharEa>
				display.showBank(LIMITED_OSCILLATORS[currentOscillator].bank);
 8004af8:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8004afc:	4620      	mov	r0, r4
 8004afe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004b02:	441e      	add	r6, r3
 8004b04:	7871      	ldrb	r1, [r6, #1]
 8004b06:	f000 f94b 	bl	8004da0 <_ZN7Display8showBankEh>
				display.showConfig(1);
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f000 f960 	bl	8004dd2 <_ZN7Display10showConfigEh>
			}
			if(encoder.pressed())
 8004b12:	4628      	mov	r0, r5
 8004b14:	f000 f9df 	bl	8004ed6 <_ZN7Encoder7pressedEv>
 8004b18:	b180      	cbz	r0, 8004b3c <_ZN2Ui4loopEv+0xac>
			{
				settings.SetValue(SETTING_OSCILLATOR_SHAPE, LIMITED_OSCILLATORS[currentOscillator].osc);
 8004b1a:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8004b1e:	4a90      	ldr	r2, [pc, #576]	; (8004d60 <_ZN2Ui4loopEv+0x2d0>)
 8004b20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004b24:	5cd2      	ldrb	r2, [r2, r3]
 8004b26:	4b8f      	ldr	r3, [pc, #572]	; (8004d64 <_ZN2Ui4loopEv+0x2d4>)
				display.showConfig(0);
 8004b28:	2100      	movs	r1, #0
 8004b2a:	701a      	strb	r2, [r3, #0]
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	f000 f950 	bl	8004dd2 <_ZN7Display10showConfigEh>
				memory->writeUInt8(Memory::ADDR_CURRENT_OSCILLATOR, (uint8_t)currentOscillator);
 8004b32:	7c22      	ldrb	r2, [r4, #16]
 8004b34:	211c      	movs	r1, #28
 8004b36:	69e0      	ldr	r0, [r4, #28]
 8004b38:	f000 fa00 	bl	8004f3c <_ZN6Memory10writeUInt8Eth>
			}

			if(encoder.pressedLong())
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	f000 f9c4 	bl	8004eca <_ZN7Encoder11pressedLongEv>
 8004b42:	b158      	cbz	r0, 8004b5c <_ZN2Ui4loopEv+0xcc>
			{
				state = UI_STATE_CONFIG_MENU;
 8004b44:	2101      	movs	r1, #1
				display.showConfig(1);
 8004b46:	4620      	mov	r0, r4
				state = UI_STATE_CONFIG_MENU;
 8004b48:	7461      	strb	r1, [r4, #17]
				display.showConfig(1);
 8004b4a:	f000 f942 	bl	8004dd2 <_ZN7Display10showConfigEh>
				display.showBank(2); // both off
 8004b4e:	2102      	movs	r1, #2
 8004b50:	4620      	mov	r0, r4
 8004b52:	f000 f925 	bl	8004da0 <_ZN7Display8showBankEh>
				configIndex=0;
 8004b56:	2300      	movs	r3, #0
 8004b58:	74a3      	strb	r3, [r4, #18]

				// Calibration mode detection
				if(enterCalibCounter==0)
					timeoutCalibCounter=2000;

				enterCalibCounter++;
 8004b5a:	75a3      	strb	r3, [r4, #22]
			}
			break;
		}
	}

}
 8004b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(encoder.pressedLong())
 8004b60:	4628      	mov	r0, r5
 8004b62:	f000 f9b2 	bl	8004eca <_ZN7Encoder11pressedLongEv>
 8004b66:	b1e8      	cbz	r0, 8004ba4 <_ZN2Ui4loopEv+0x114>
				state = UI_STATE_SELECT_OSCILLATOR;
 8004b68:	2100      	movs	r1, #0
				display.showConfig(0);
 8004b6a:	4620      	mov	r0, r4
				state = UI_STATE_SELECT_OSCILLATOR;
 8004b6c:	7461      	strb	r1, [r4, #17]
				display.showConfig(0);
 8004b6e:	f000 f930 	bl	8004dd2 <_ZN7Display10showConfigEh>
				display.showBank(LIMITED_OSCILLATORS[currentOscillator].bank);
 8004b72:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8004b76:	4d7a      	ldr	r5, [pc, #488]	; (8004d60 <_ZN2Ui4loopEv+0x2d0>)
 8004b78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004b7c:	442b      	add	r3, r5
 8004b7e:	7859      	ldrb	r1, [r3, #1]
 8004b80:	4620      	mov	r0, r4
 8004b82:	f000 f90d 	bl	8004da0 <_ZN7Display8showBankEh>
				display.showChar(LIMITED_OSCILLATORS[currentOscillator].symbol);
 8004b86:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004b90:	441d      	add	r5, r3
 8004b92:	f995 1002 	ldrsb.w	r1, [r5, #2]
 8004b96:	f000 f8ed 	bl	8004d74 <_ZN7Display8showCharEa>
				saveAllSettings();
 8004b9a:	4620      	mov	r0, r4
}
 8004b9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				saveAllSettings();
 8004ba0:	f7ff bef8 	b.w	8004994 <_ZN2Ui15saveAllSettingsEv>
			display.showChar(CONFIG_ITEMS[configIndex].symbol);
 8004ba4:	f994 2012 	ldrsb.w	r2, [r4, #18]
 8004ba8:	4b6f      	ldr	r3, [pc, #444]	; (8004d68 <_ZN2Ui4loopEv+0x2d8>)
 8004baa:	4620      	mov	r0, r4
 8004bac:	f913 1012 	ldrsb.w	r1, [r3, r2, lsl #1]
 8004bb0:	f000 f8e0 	bl	8004d74 <_ZN7Display8showCharEa>
			int32_t increment = encoder.increment();
 8004bb4:	79a1      	ldrb	r1, [r4, #6]
 8004bb6:	7960      	ldrb	r0, [r4, #5]
 8004bb8:	f7ff feca 	bl	8004950 <_ZNK7Encoder9incrementEv.isra.0>
			if (increment != 0)
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	d011      	beq.n	8004be4 <_ZN2Ui4loopEv+0x154>
 8004bc0:	7ca3      	ldrb	r3, [r4, #18]
					configIndex++;
 8004bc2:	bfcc      	ite	gt
 8004bc4:	3301      	addgt	r3, #1
					configIndex--;
 8004bc6:	f103 33ff 	addle.w	r3, r3, #4294967295	; 0xffffffff
 8004bca:	74a3      	strb	r3, [r4, #18]
				if(configIndex>=CONFIG_ITEMS_SYMBOLS_LEN)
 8004bcc:	f994 3012 	ldrsb.w	r3, [r4, #18]
 8004bd0:	2b0b      	cmp	r3, #11
					configIndex=CONFIG_ITEMS_SYMBOLS_LEN-1;
 8004bd2:	bfc4      	itt	gt
 8004bd4:	230b      	movgt	r3, #11
 8004bd6:	74a3      	strbgt	r3, [r4, #18]
				if(configIndex<0)
 8004bd8:	f994 3012 	ldrsb.w	r3, [r4, #18]
 8004bdc:	2b00      	cmp	r3, #0
					configIndex=0;
 8004bde:	bfbc      	itt	lt
 8004be0:	2300      	movlt	r3, #0
 8004be2:	74a3      	strblt	r3, [r4, #18]
			if(encoder.pressed())
 8004be4:	4628      	mov	r0, r5
 8004be6:	f000 f976 	bl	8004ed6 <_ZN7Encoder7pressedEv>
 8004bea:	2800      	cmp	r0, #0
 8004bec:	d0b6      	beq.n	8004b5c <_ZN2Ui4loopEv+0xcc>
				state = UI_STATE_SET_VALUE;
 8004bee:	2302      	movs	r3, #2
 8004bf0:	7463      	strb	r3, [r4, #17]
				if(enterCalibCounter==0)
 8004bf2:	7da3      	ldrb	r3, [r4, #22]
 8004bf4:	b913      	cbnz	r3, 8004bfc <_ZN2Ui4loopEv+0x16c>
					timeoutCalibCounter=2000;
 8004bf6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004bfa:	82a2      	strh	r2, [r4, #20]
				enterCalibCounter++;
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	b2db      	uxtb	r3, r3
				if(enterCalibCounter>=4)
 8004c00:	2b03      	cmp	r3, #3
 8004c02:	d9aa      	bls.n	8004b5a <_ZN2Ui4loopEv+0xca>
					enterCalibCounter=0;
 8004c04:	2300      	movs	r3, #0
					state = UI_STATE_CALIB;
 8004c06:	2503      	movs	r5, #3
					enterCalibCounter=0;
 8004c08:	75a3      	strb	r3, [r4, #22]
					display.showConfig(1);
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	4620      	mov	r0, r4
					state = UI_STATE_CALIB;
 8004c0e:	7465      	strb	r5, [r4, #17]
					display.showConfig(1);
 8004c10:	f000 f8df 	bl	8004dd2 <_ZN7Display10showConfigEh>
					display.showBank(3); // all leds ON
 8004c14:	4629      	mov	r1, r5
 8004c16:	4620      	mov	r0, r4
 8004c18:	f000 f8c2 	bl	8004da0 <_ZN7Display8showBankEh>
					display.showChar('2');
 8004c1c:	2132      	movs	r1, #50	; 0x32
				display.showChar('4');
 8004c1e:	4620      	mov	r0, r4
}
 8004c20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				display.showChar('4');
 8004c24:	f000 b8a6 	b.w	8004d74 <_ZN7Display8showCharEa>
			Setting setting_ = CONFIG_ITEMS[configIndex].option;
 8004c28:	f994 2012 	ldrsb.w	r2, [r4, #18]
 8004c2c:	4b4e      	ldr	r3, [pc, #312]	; (8004d68 <_ZN2Ui4loopEv+0x2d8>)
    return data[setting];
 8004c2e:	4f4d      	ldr	r7, [pc, #308]	; (8004d64 <_ZN2Ui4loopEv+0x2d4>)
 8004c30:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8004c34:	785b      	ldrb	r3, [r3, #1]
			int32_t increment = encoder.increment();
 8004c36:	79a1      	ldrb	r1, [r4, #6]
 8004c38:	7960      	ldrb	r0, [r4, #5]
 8004c3a:	5dda      	ldrb	r2, [r3, r7]
 8004c3c:	f7ff fe88 	bl	8004950 <_ZNK7Encoder9incrementEv.isra.0>
 8004c40:	4e4a      	ldr	r6, [pc, #296]	; (8004d6c <_ZN2Ui4loopEv+0x2dc>)
			if (increment != 0)
 8004c42:	b988      	cbnz	r0, 8004c68 <_ZN2Ui4loopEv+0x1d8>
			int16_t value = settings.GetValue(setting_);
 8004c44:	b212      	sxth	r2, r2
			display.showValue(settings.metadata(setting_).max_value,value);
 8004c46:	210c      	movs	r1, #12
 8004c48:	fb01 6303 	mla	r3, r1, r3, r6
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	7859      	ldrb	r1, [r3, #1]
 8004c52:	f000 f8c1 	bl	8004dd8 <_ZN7Display9showValueEhh>
			if(encoder.pressed())
 8004c56:	4628      	mov	r0, r5
 8004c58:	f000 f93d 	bl	8004ed6 <_ZN7Encoder7pressedEv>
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	f43f af7d 	beq.w	8004b5c <_ZN2Ui4loopEv+0xcc>
				state = UI_STATE_CONFIG_MENU;
 8004c62:	2301      	movs	r3, #1
 8004c64:	7463      	strb	r3, [r4, #17]
}
 8004c66:	e779      	b.n	8004b5c <_ZN2Ui4loopEv+0xcc>
    return metadata_[setting];
 8004c68:	210c      	movs	r1, #12
 8004c6a:	4359      	muls	r1, r3
 8004c6c:	eb06 0c01 	add.w	ip, r6, r1
				value = settings.metadata(setting_).Clip(value + increment);
 8004c70:	4402      	add	r2, r0
 8004c72:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8004c76:	b212      	sxth	r2, r2
    if (value > max_value) {
 8004c78:	4282      	cmp	r2, r0
 8004c7a:	5c71      	ldrb	r1, [r6, r1]
 8004c7c:	dd02      	ble.n	8004c84 <_ZN2Ui4loopEv+0x1f4>
      value = max_value;
 8004c7e:	b202      	sxth	r2, r0
				settings.SetValue(setting_, value);
 8004c80:	55da      	strb	r2, [r3, r7]
 8004c82:	e7e0      	b.n	8004c46 <_ZN2Ui4loopEv+0x1b6>
    } else if (value < min_value) {
 8004c84:	428a      	cmp	r2, r1
      value = min_value;
 8004c86:	bfb8      	it	lt
 8004c88:	b20a      	sxthlt	r2, r1
 8004c8a:	e7f9      	b.n	8004c80 <_ZN2Ui4loopEv+0x1f0>
			if(encoder.pressedLong())
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	f000 f91c 	bl	8004eca <_ZN7Encoder11pressedLongEv>
 8004c92:	b150      	cbz	r0, 8004caa <_ZN2Ui4loopEv+0x21a>
				state = UI_STATE_CONFIG_MENU;
 8004c94:	2101      	movs	r1, #1
				display.showConfig(1);
 8004c96:	4620      	mov	r0, r4
				state = UI_STATE_CONFIG_MENU;
 8004c98:	7461      	strb	r1, [r4, #17]
				display.showConfig(1);
 8004c9a:	f000 f89a 	bl	8004dd2 <_ZN7Display10showConfigEh>
				display.showBank(2); // all leds OFF
 8004c9e:	4620      	mov	r0, r4
}
 8004ca0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				display.showBank(2); // all leds OFF
 8004ca4:	2102      	movs	r1, #2
 8004ca6:	f000 b87b 	b.w	8004da0 <_ZN7Display8showBankEh>
			if(encoder.pressed())
 8004caa:	4628      	mov	r0, r5
 8004cac:	f000 f913 	bl	8004ed6 <_ZN7Encoder7pressedEv>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	f43f af53 	beq.w	8004b5c <_ZN2Ui4loopEv+0xcc>
				adc_code_c2 = adc->channel(ADC_CHANNEL_PITCH);
 8004cb6:	69a3      	ldr	r3, [r4, #24]
				display.showChar('4');
 8004cb8:	2134      	movs	r1, #52	; 0x34
				adc_code_c2 = adc->channel(ADC_CHANNEL_PITCH);
 8004cba:	891a      	ldrh	r2, [r3, #8]
 8004cbc:	6222      	str	r2, [r4, #32]
				adc_code_p0_min = adc->channel(ADC_CHANNEL_PARAM0);
 8004cbe:	885a      	ldrh	r2, [r3, #2]
 8004cc0:	6262      	str	r2, [r4, #36]	; 0x24
				adc_code_p1_min = adc->channel(ADC_CHANNEL_PARAM1);
 8004cc2:	881b      	ldrh	r3, [r3, #0]
 8004cc4:	62a3      	str	r3, [r4, #40]	; 0x28
				state = UI_STATE_CALIB_STEP_2;
 8004cc6:	2304      	movs	r3, #4
 8004cc8:	7463      	strb	r3, [r4, #17]
 8004cca:	e7a8      	b.n	8004c1e <_ZN2Ui4loopEv+0x18e>
			if(encoder.pressedLong())
 8004ccc:	4628      	mov	r0, r5
 8004cce:	f000 f8fc 	bl	8004eca <_ZN7Encoder11pressedLongEv>
 8004cd2:	4680      	mov	r8, r0
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	d1dd      	bne.n	8004c94 <_ZN2Ui4loopEv+0x204>
			if(encoder.pressed())
 8004cd8:	4628      	mov	r0, r5
 8004cda:	f000 f8fc 	bl	8004ed6 <_ZN7Encoder7pressedEv>
 8004cde:	2800      	cmp	r0, #0
 8004ce0:	f43f af3c 	beq.w	8004b5c <_ZN2Ui4loopEv+0xcc>
				int32_t adc_code_c4 = adc->channel(ADC_CHANNEL_PITCH);
 8004ce4:	69a3      	ldr	r3, [r4, #24]
				settings.Calibrate(adc_code_c2,
 8004ce6:	6a22      	ldr	r2, [r4, #32]
		  return this->currentValues[4];
 8004ce8:	891d      	ldrh	r5, [r3, #8]
		  return this->currentValues[1];
 8004cea:	885f      	ldrh	r7, [r3, #2]
    if (adc_code_c4 != adc_code_c2) {
 8004cec:	42aa      	cmp	r2, r5
		  return this->currentValues[0];
 8004cee:	881e      	ldrh	r6, [r3, #0]
 8004cf0:	d00f      	beq.n	8004d12 <_ZN2Ui4loopEv+0x282>
      int32_t scale = (24 * 128 * 4096L) / (adc_code_c4 - adc_code_c2);
 8004cf2:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8004cf6:	1aa9      	subs	r1, r5, r2
 8004cf8:	fb93 f3f1 	sdiv	r3, r3, r1
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 8004cfc:	442a      	add	r2, r5
      data_.pitch_cv_scale = scale;
 8004cfe:	4919      	ldr	r1, [pc, #100]	; (8004d64 <_ZN2Ui4loopEv+0x2d4>)
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 8004d00:	1052      	asrs	r2, r2, #1
      data_.pitch_cv_scale = scale;
 8004d02:	618b      	str	r3, [r1, #24]
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 8004d04:	4353      	muls	r3, r2
 8004d06:	131b      	asrs	r3, r3, #12
      data_.pitch_cv_offset = (60 << 7) - 
 8004d08:	f5c3 53f0 	rsb	r3, r3, #7680	; 0x1e00
 8004d0c:	614b      	str	r3, [r1, #20]
      data_.fm_cv_offset = adc_code_fm;
 8004d0e:	f8c1 801c 	str.w	r8, [r1, #28]
    Save();
 8004d12:	4814      	ldr	r0, [pc, #80]	; (8004d64 <_ZN2Ui4loopEv+0x2d4>)
 8004d14:	f7ff f97c 	bl	8004010 <_ZN6braids8Settings4SaveEv>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_C2, adc_code_c2);
 8004d18:	6a22      	ldr	r2, [r4, #32]
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	69e0      	ldr	r0, [r4, #28]
 8004d1e:	f000 f902 	bl	8004f26 <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_C4, adc_code_c4);
 8004d22:	462a      	mov	r2, r5
 8004d24:	2104      	movs	r1, #4
 8004d26:	69e0      	ldr	r0, [r4, #28]
 8004d28:	f000 f8fd 	bl	8004f26 <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_FM, adc_code_fm);
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	2108      	movs	r1, #8
 8004d30:	69e0      	ldr	r0, [r4, #28]
 8004d32:	f000 f8f8 	bl	8004f26 <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_P0_MIN, adc_code_p0_min);
 8004d36:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004d38:	210c      	movs	r1, #12
 8004d3a:	69e0      	ldr	r0, [r4, #28]
 8004d3c:	f000 f8f3 	bl	8004f26 <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_P0_MAX, adc_code_p0_max);
 8004d40:	463a      	mov	r2, r7
 8004d42:	2110      	movs	r1, #16
 8004d44:	69e0      	ldr	r0, [r4, #28]
 8004d46:	f000 f8ee 	bl	8004f26 <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_P1_MIN, adc_code_p1_min);
 8004d4a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004d4c:	2114      	movs	r1, #20
 8004d4e:	69e0      	ldr	r0, [r4, #28]
 8004d50:	f000 f8e9 	bl	8004f26 <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_P1_MAX, adc_code_p1_max);
 8004d54:	4632      	mov	r2, r6
 8004d56:	2118      	movs	r1, #24
 8004d58:	69e0      	ldr	r0, [r4, #28]
 8004d5a:	f000 f8e4 	bl	8004f26 <_ZN6Memory11writeUInt32Etm>
 8004d5e:	e780      	b.n	8004c62 <_ZN2Ui4loopEv+0x1d2>
 8004d60:	0800db58 	.word	0x0800db58
 8004d64:	20000358 	.word	0x20000358
 8004d68:	0800db40 	.word	0x0800db40
 8004d6c:	0800cc64 	.word	0x0800cc64

08004d70 <_ZN7Display4initEv>:
		0b00000000  // Z *
};

void Display::init(void) {

}
 8004d70:	4770      	bx	lr
	...

08004d74 <_ZN7Display8showCharEa>:

void Display::showChar(int8_t c) {

	uint8_t data;

	if(c>='A' && c<='Z')
 8004d74:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b19      	cmp	r3, #25
		data = CHARS_TABLE[c - 'A'];
 8004d7c:	bf95      	itete	ls
 8004d7e:	4b06      	ldrls	r3, [pc, #24]	; (8004d98 <_ZN7Display8showCharEa+0x24>)
	else
		data = NUMBERS_TABLE[c - '0'];
 8004d80:	4b06      	ldrhi	r3, [pc, #24]	; (8004d9c <_ZN7Display8showCharEa+0x28>)
		data = CHARS_TABLE[c - 'A'];
 8004d82:	18c9      	addls	r1, r1, r3
		data = NUMBERS_TABLE[c - '0'];
 8004d84:	18c9      	addhi	r1, r1, r3
		data = CHARS_TABLE[c - 'A'];
 8004d86:	bf94      	ite	ls
 8004d88:	f811 0c41 	ldrbls.w	r0, [r1, #-65]
		data = NUMBERS_TABLE[c - '0'];
 8004d8c:	f811 0c30 	ldrbhi.w	r0, [r1, #-48]

	data = ~data;
 8004d90:	43c0      	mvns	r0, r0

	mehal_sendDataTo595(data);
 8004d92:	b2c0      	uxtb	r0, r0
 8004d94:	f000 bb02 	b.w	800539c <mehal_sendDataTo595>
 8004d98:	0800dbcd 	.word	0x0800dbcd
 8004d9c:	0800dbe7 	.word	0x0800dbe7

08004da0 <_ZN7Display8showBankEh>:
}

void Display::showBank(uint8_t bankNumber) {
 8004da0:	b508      	push	{r3, lr}

	switch(bankNumber)
 8004da2:	2903      	cmp	r1, #3
 8004da4:	d814      	bhi.n	8004dd0 <_ZN7Display8showBankEh+0x30>
 8004da6:	e8df f001 	tbb	[pc, r1]
 8004daa:	0a02      	.short	0x0a02
 8004dac:	110f      	.short	0x110f
	{
		case 0:
			mehal_setBank0Led(1);
 8004dae:	2001      	movs	r0, #1
		case 1:
			mehal_setBank0Led(0);
			mehal_setBank1Led(1);
			break;
		case 2:
			mehal_setBank0Led(0);
 8004db0:	f000 fb40 	bl	8005434 <mehal_setBank0Led>
			mehal_setBank1Led(0);
 8004db4:	2000      	movs	r0, #0
		case 3:
			mehal_setBank0Led(1);
			mehal_setBank1Led(1);
			break;
	}
}
 8004db6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			mehal_setBank1Led(1);
 8004dba:	f000 bb2f 	b.w	800541c <mehal_setBank1Led>
			mehal_setBank0Led(0);
 8004dbe:	2000      	movs	r0, #0
			mehal_setBank0Led(1);
 8004dc0:	f000 fb38 	bl	8005434 <mehal_setBank0Led>
			mehal_setBank1Led(1);
 8004dc4:	2001      	movs	r0, #1
 8004dc6:	e7f6      	b.n	8004db6 <_ZN7Display8showBankEh+0x16>
			mehal_setBank0Led(0);
 8004dc8:	2000      	movs	r0, #0
 8004dca:	e7f1      	b.n	8004db0 <_ZN7Display8showBankEh+0x10>
			mehal_setBank0Led(1);
 8004dcc:	2001      	movs	r0, #1
 8004dce:	e7f7      	b.n	8004dc0 <_ZN7Display8showBankEh+0x20>
}
 8004dd0:	bd08      	pop	{r3, pc}

08004dd2 <_ZN7Display10showConfigEh>:

void Display::showConfig(uint8_t flagOnOff) {

	mehal_setConfigLed(flagOnOff);
 8004dd2:	4608      	mov	r0, r1
 8004dd4:	f000 bb16 	b.w	8005404 <mehal_setConfigLed>

08004dd8 <_ZN7Display9showValueEhh>:
}

void Display::showValue(uint8_t maxValue,uint8_t value)
{
	switch(maxValue)
 8004dd8:	3901      	subs	r1, #1
 8004dda:	2912      	cmp	r1, #18
 8004ddc:	d826      	bhi.n	8004e2c <_ZN7Display9showValueEhh+0x54>
 8004dde:	e8df f001 	tbb	[pc, r1]
 8004de2:	1812      	.short	0x1812
 8004de4:	25251e25 	.word	0x25251e25
 8004de8:	25252525 	.word	0x25252525
 8004dec:	2525251e 	.word	0x2525251e
 8004df0:	2525250a 	.word	0x2525250a
 8004df4:	1e          	.byte	0x1e
 8004df5:	00          	.byte	0x00
	{
		case 15:
		{
			// 0 to 15 scale
			uint16_t val = value*9/15;
 8004df6:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
 8004dfa:	220f      	movs	r2, #15
 8004dfc:	fb91 f1f2 	sdiv	r1, r1, r2
			showChar('0'+val);
 8004e00:	3130      	adds	r1, #48	; 0x30
		case 19:
		{
			if(value<=9)
				showChar('0'+value);
			else
				showChar('A'+(value-10));
 8004e02:	b249      	sxtb	r1, r1
 8004e04:	e001      	b.n	8004e0a <_ZN7Display9showValueEhh+0x32>
			if(value==0)
 8004e06:	b912      	cbnz	r2, 8004e0e <_ZN7Display9showValueEhh+0x36>
				showChar('0');
 8004e08:	2130      	movs	r1, #48	; 0x30
				showChar('A'+(value-10));
 8004e0a:	f7ff bfb3 	b.w	8004d74 <_ZN7Display8showCharEa>
				showChar('1');
 8004e0e:	2131      	movs	r1, #49	; 0x31
 8004e10:	e7fb      	b.n	8004e0a <_ZN7Display9showValueEhh+0x32>
			if(value==0)
 8004e12:	2a00      	cmp	r2, #0
 8004e14:	d0f8      	beq.n	8004e08 <_ZN7Display9showValueEhh+0x30>
			else if(value==1)
 8004e16:	2a01      	cmp	r2, #1
 8004e18:	d0f9      	beq.n	8004e0e <_ZN7Display9showValueEhh+0x36>
				showChar('2');
 8004e1a:	2132      	movs	r1, #50	; 0x32
 8004e1c:	e7f5      	b.n	8004e0a <_ZN7Display9showValueEhh+0x32>
			if(value<=9)
 8004e1e:	2a09      	cmp	r2, #9
				showChar('0'+value);
 8004e20:	bf94      	ite	ls
 8004e22:	f102 0130 	addls.w	r1, r2, #48	; 0x30
				showChar('A'+(value-10));
 8004e26:	f102 0137 	addhi.w	r1, r2, #55	; 0x37
 8004e2a:	e7ea      	b.n	8004e02 <_ZN7Display9showValueEhh+0x2a>

			break;
		}

	}
}
 8004e2c:	4770      	bx	lr

08004e2e <_ZN7Encoder4InitEv>:
#define ENCODER_SW_STATE_WAIT_RELEASE 	1
#define ENCODER_SW_STATE_DEBOUNCE		2


void Encoder::Init() {
  switch_state_ = 0xff;
 8004e2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e32:	8003      	strh	r3, [r0, #0]
  quadrature_decoding_state_[0] = quadrature_decoding_state_[1] = 0xff;
 8004e34:	7083      	strb	r3, [r0, #2]
  state = ENCODER_SW_STATE_IDLE;
 8004e36:	2300      	movs	r3, #0
 8004e38:	7203      	strb	r3, [r0, #8]
}
 8004e3a:	4770      	bx	lr

08004e3c <_ZN7Encoder7sysTickEv>:

void Encoder::sysTick(void) {
	if(swTimeout>0)
 8004e3c:	6843      	ldr	r3, [r0, #4]
 8004e3e:	b10b      	cbz	r3, 8004e44 <_ZN7Encoder7sysTickEv+0x8>
	{
		swTimeout--;
 8004e40:	3b01      	subs	r3, #1
 8004e42:	6043      	str	r3, [r0, #4]
	}
}
 8004e44:	4770      	bx	lr

08004e46 <_ZN7Encoder4loopEv>:


void Encoder::loop(void) {
 8004e46:	b538      	push	{r3, r4, r5, lr}
	switch(state)
 8004e48:	7a03      	ldrb	r3, [r0, #8]
void Encoder::loop(void) {
 8004e4a:	4604      	mov	r4, r0
	switch(state)
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d022      	beq.n	8004e96 <_ZN7Encoder4loopEv+0x50>
 8004e50:	d317      	bcc.n	8004e82 <_ZN7Encoder4loopEv+0x3c>
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d030      	beq.n	8004eb8 <_ZN7Encoder4loopEv+0x72>
			break;
		}
	}

	// encoder reading
	  switch_state_ = (switch_state_ << 1) | \
 8004e56:	7825      	ldrb	r5, [r4, #0]
			  mehal_readEncoderSwitch();
 8004e58:	f000 fa88 	bl	800536c <mehal_readEncoderSwitch>
	  switch_state_ = (switch_state_ << 1) | \
 8004e5c:	006d      	lsls	r5, r5, #1
 8004e5e:	b26d      	sxtb	r5, r5
 8004e60:	4328      	orrs	r0, r5
 8004e62:	7020      	strb	r0, [r4, #0]

	  quadrature_decoding_state_[0] = (quadrature_decoding_state_[0] << 1) | \
 8004e64:	7865      	ldrb	r5, [r4, #1]
			  mehal_readEncoderB();
 8004e66:	f000 fa91 	bl	800538c <mehal_readEncoderB>
	  quadrature_decoding_state_[0] = (quadrature_decoding_state_[0] << 1) | \
 8004e6a:	006d      	lsls	r5, r5, #1
 8004e6c:	b26d      	sxtb	r5, r5
 8004e6e:	4328      	orrs	r0, r5
 8004e70:	7060      	strb	r0, [r4, #1]

	  quadrature_decoding_state_[1] = (quadrature_decoding_state_[1] << 1) | \
 8004e72:	78a5      	ldrb	r5, [r4, #2]
			  mehal_readEncoderA();
 8004e74:	f000 fa82 	bl	800537c <mehal_readEncoderA>
	  quadrature_decoding_state_[1] = (quadrature_decoding_state_[1] << 1) | \
 8004e78:	006d      	lsls	r5, r5, #1
 8004e7a:	b26d      	sxtb	r5, r5
 8004e7c:	4328      	orrs	r0, r5
 8004e7e:	70a0      	strb	r0, [r4, #2]
	//_________
}
 8004e80:	bd38      	pop	{r3, r4, r5, pc}
			if(mehal_readEncoderSwitch()==0)
 8004e82:	f000 fa73 	bl	800536c <mehal_readEncoderSwitch>
 8004e86:	2800      	cmp	r0, #0
 8004e88:	d1e5      	bne.n	8004e56 <_ZN7Encoder4loopEv+0x10>
				state = ENCODER_SW_STATE_WAIT_RELEASE;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	7223      	strb	r3, [r4, #8]
				swTimeout = 3000;
 8004e8e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004e92:	6063      	str	r3, [r4, #4]
 8004e94:	e7df      	b.n	8004e56 <_ZN7Encoder4loopEv+0x10>
			if(swTimeout==0)
 8004e96:	6842      	ldr	r2, [r0, #4]
 8004e98:	b922      	cbnz	r2, 8004ea4 <_ZN7Encoder4loopEv+0x5e>
				flagLongPress=1;
 8004e9a:	7243      	strb	r3, [r0, #9]
				state = ENCODER_SW_STATE_DEBOUNCE;
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	7203      	strb	r3, [r0, #8]
				swTimeout = 100;
 8004ea0:	2364      	movs	r3, #100	; 0x64
 8004ea2:	6043      	str	r3, [r0, #4]
			if(mehal_readEncoderSwitch()==1)
 8004ea4:	f000 fa62 	bl	800536c <mehal_readEncoderSwitch>
 8004ea8:	2801      	cmp	r0, #1
 8004eaa:	d1d4      	bne.n	8004e56 <_ZN7Encoder4loopEv+0x10>
				state = ENCODER_SW_STATE_DEBOUNCE;
 8004eac:	2302      	movs	r3, #2
 8004eae:	7223      	strb	r3, [r4, #8]
				swTimeout = 100;
 8004eb0:	2364      	movs	r3, #100	; 0x64
				flagShortPress=1;
 8004eb2:	72a0      	strb	r0, [r4, #10]
				swTimeout = 100;
 8004eb4:	6063      	str	r3, [r4, #4]
 8004eb6:	e7ce      	b.n	8004e56 <_ZN7Encoder4loopEv+0x10>
			if(mehal_readEncoderSwitch()==1)
 8004eb8:	f000 fa58 	bl	800536c <mehal_readEncoderSwitch>
 8004ebc:	2801      	cmp	r0, #1
 8004ebe:	d1ca      	bne.n	8004e56 <_ZN7Encoder4loopEv+0x10>
				if(swTimeout==0)
 8004ec0:	6863      	ldr	r3, [r4, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1c7      	bne.n	8004e56 <_ZN7Encoder4loopEv+0x10>
					state = ENCODER_SW_STATE_IDLE;
 8004ec6:	7223      	strb	r3, [r4, #8]
 8004ec8:	e7c5      	b.n	8004e56 <_ZN7Encoder4loopEv+0x10>

08004eca <_ZN7Encoder11pressedLongEv>:

bool Encoder::pressedLong(void)
{
	bool r = flagLongPress;
 8004eca:	7a43      	ldrb	r3, [r0, #9]
	if(r!=0)
 8004ecc:	b10b      	cbz	r3, 8004ed2 <_ZN7Encoder11pressedLongEv+0x8>
		flagLongPress=0;
 8004ece:	2200      	movs	r2, #0
 8004ed0:	7242      	strb	r2, [r0, #9]

	return r;
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	4770      	bx	lr

08004ed6 <_ZN7Encoder7pressedEv>:

bool Encoder::pressed(void) {
 8004ed6:	4603      	mov	r3, r0
    //return switch_state_ == 0x00;
	bool r = flagShortPress;
	flagShortPress=0;
 8004ed8:	2200      	movs	r2, #0
	bool r = flagShortPress;
 8004eda:	7a80      	ldrb	r0, [r0, #10]
	flagShortPress=0;
 8004edc:	729a      	strb	r2, [r3, #10]
	return r;
  }
 8004ede:	4770      	bx	lr

08004ee0 <_ZN6Memory10readUInt32Et>:
#include <stdint.h>
#include "hal/MultiEngineHAL.h"
#include "hal/Memory.h"

uint32_t Memory::readUInt32(uint16_t address)
{
 8004ee0:	b507      	push	{r0, r1, r2, lr}
	uint32_t value;
	mehal_i2cMemRead(address,(uint8_t*)&value, sizeof(uint32_t));
 8004ee2:	2204      	movs	r2, #4
{
 8004ee4:	4608      	mov	r0, r1
	mehal_i2cMemRead(address,(uint8_t*)&value, sizeof(uint32_t));
 8004ee6:	eb0d 0102 	add.w	r1, sp, r2
 8004eea:	f000 fa05 	bl	80052f8 <mehal_i2cMemRead>
	return value;
}
 8004eee:	9801      	ldr	r0, [sp, #4]
 8004ef0:	b003      	add	sp, #12
 8004ef2:	f85d fb04 	ldr.w	pc, [sp], #4

08004ef6 <_ZN6Memory9readUInt8Et>:
uint8_t Memory::readUInt8(uint16_t address)
{
 8004ef6:	b507      	push	{r0, r1, r2, lr}
 8004ef8:	4608      	mov	r0, r1
	uint8_t value;
	mehal_i2cMemRead(address, &value, sizeof(uint8_t));
 8004efa:	2201      	movs	r2, #1
 8004efc:	f10d 0107 	add.w	r1, sp, #7
 8004f00:	f000 f9fa 	bl	80052f8 <mehal_i2cMemRead>
	return value;
}
 8004f04:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004f08:	b003      	add	sp, #12
 8004f0a:	f85d fb04 	ldr.w	pc, [sp], #4

08004f0e <_ZN6Memory10readUInt16Et>:

uint16_t Memory::readUInt16(uint16_t address)
{
 8004f0e:	b507      	push	{r0, r1, r2, lr}
 8004f10:	4608      	mov	r0, r1
	uint16_t value;
	mehal_i2cMemRead(address, (uint8_t*)&value, sizeof(uint16_t));
 8004f12:	2202      	movs	r2, #2
 8004f14:	f10d 0106 	add.w	r1, sp, #6
 8004f18:	f000 f9ee 	bl	80052f8 <mehal_i2cMemRead>
	return value;
}
 8004f1c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8004f20:	b003      	add	sp, #12
 8004f22:	f85d fb04 	ldr.w	pc, [sp], #4

08004f26 <_ZN6Memory11writeUInt32Etm>:

uint8_t Memory::writeUInt32(uint16_t address,uint32_t value)
{
 8004f26:	b507      	push	{r0, r1, r2, lr}
 8004f28:	4608      	mov	r0, r1
 8004f2a:	a902      	add	r1, sp, #8
 8004f2c:	f841 2d04 	str.w	r2, [r1, #-4]!
	return mehal_i2cMemWrite(address, (uint8_t*)&value, sizeof(uint32_t));
 8004f30:	2204      	movs	r2, #4
 8004f32:	f000 f9f3 	bl	800531c <mehal_i2cMemWrite>
}
 8004f36:	b003      	add	sp, #12
 8004f38:	f85d fb04 	ldr.w	pc, [sp], #4

08004f3c <_ZN6Memory10writeUInt8Eth>:

uint8_t Memory::writeUInt8(uint16_t address,uint8_t value)
{
 8004f3c:	b507      	push	{r0, r1, r2, lr}
 8004f3e:	4608      	mov	r0, r1
 8004f40:	a902      	add	r1, sp, #8
 8004f42:	f801 2d01 	strb.w	r2, [r1, #-1]!
	return mehal_i2cMemWrite(address, &value, sizeof(uint8_t));
 8004f46:	2201      	movs	r2, #1
 8004f48:	f000 f9e8 	bl	800531c <mehal_i2cMemWrite>
}
 8004f4c:	b003      	add	sp, #12
 8004f4e:	f85d fb04 	ldr.w	pc, [sp], #4

08004f52 <_ZN6Memory11writeUInt16Ett>:

uint8_t Memory::writeUInt16(uint16_t address,uint16_t value)
{
 8004f52:	b507      	push	{r0, r1, r2, lr}
 8004f54:	4608      	mov	r0, r1
 8004f56:	a902      	add	r1, sp, #8
 8004f58:	f821 2d02 	strh.w	r2, [r1, #-2]!
	return mehal_i2cMemWrite(address, (uint8_t*)&value, sizeof(uint16_t));
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	f000 f9dd 	bl	800531c <mehal_i2cMemWrite>
}
 8004f62:	b003      	add	sp, #12
 8004f64:	f85d fb04 	ldr.w	pc, [sp], #4

08004f68 <DMA1_Channel5_IRQHandler>:

static void (*callbackDMA)(int) = NULL;
static void MX_I2C1_Init(void);

void DMA1_Channel5_IRQHandler()
{
 8004f68:	b510      	push	{r4, lr}
	// check if the "transfer complete event" has triggered the interrupt
	if( DMA1->ISR & DMA_ISR_TCIF5 ){
 8004f6a:	4c0b      	ldr	r4, [pc, #44]	; (8004f98 <DMA1_Channel5_IRQHandler+0x30>)
 8004f6c:	6820      	ldr	r0, [r4, #0]
 8004f6e:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8004f72:	d005      	beq.n	8004f80 <DMA1_Channel5_IRQHandler+0x18>
		// complete transfer
		if(callbackDMA!=NULL)
 8004f74:	4b09      	ldr	r3, [pc, #36]	; (8004f9c <DMA1_Channel5_IRQHandler+0x34>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	b14b      	cbz	r3, 8004f8e <DMA1_Channel5_IRQHandler+0x26>
			callbackDMA(1);
 8004f7a:	2001      	movs	r0, #1
	}
	else if(DMA1->ISR & DMA_ISR_HTIF5)
	{
		// half transfer
		if(callbackDMA!=NULL)
			callbackDMA(0);
 8004f7c:	4798      	blx	r3
 8004f7e:	e006      	b.n	8004f8e <DMA1_Channel5_IRQHandler+0x26>
	else if(DMA1->ISR & DMA_ISR_HTIF5)
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	035b      	lsls	r3, r3, #13
 8004f84:	d503      	bpl.n	8004f8e <DMA1_Channel5_IRQHandler+0x26>
		if(callbackDMA!=NULL)
 8004f86:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <DMA1_Channel5_IRQHandler+0x34>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1f6      	bne.n	8004f7c <DMA1_Channel5_IRQHandler+0x14>
	}
	// clear the interrupt flag
	DMA1->IFCR |= DMA_IFCR_CGIF5;
 8004f8e:	6863      	ldr	r3, [r4, #4]
 8004f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f94:	6063      	str	r3, [r4, #4]
}
 8004f96:	bd10      	pop	{r4, pc}
 8004f98:	40020000 	.word	0x40020000
 8004f9c:	200047e0 	.word	0x200047e0

08004fa0 <mehal_init>:

void mehal_init(uint32_t* samplesBuffer,uint32_t samplesBufferSize,void (*fnCallbackDMA)(int))
{
 8004fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	callbackDMA = fnCallbackDMA;
 8004fa4:	4bb8      	ldr	r3, [pc, #736]	; (8005288 <mehal_init+0x2e8>)

	/* TIMER 2 SETUP FOR PWM */
	// enable timer 2 clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8004fa6:	4db9      	ldr	r5, [pc, #740]	; (800528c <mehal_init+0x2ec>)
	callbackDMA = fnCallbackDMA;
 8004fa8:	601a      	str	r2, [r3, #0]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8004faa:	69eb      	ldr	r3, [r5, #28]
	// enable AFIO and GPIO port A clock
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN | RCC_APB2ENR_IOPAEN;
	// configure pin PA0 as AFIO push-pull output with max speed
	GPIOA->CRL &=~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0);
 8004fac:	4eb8      	ldr	r6, [pc, #736]	; (8005290 <mehal_init+0x2f0>)
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8004fae:	f043 0301 	orr.w	r3, r3, #1
 8004fb2:	61eb      	str	r3, [r5, #28]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN | RCC_APB2ENR_IOPAEN;
 8004fb4:	69ab      	ldr	r3, [r5, #24]
	GPIOA->CRL |= GPIO_CRL_MODE0 | GPIO_CRL_CNF0_1;

	// set timer 2 prescaler to 1, so the timer frequency is equal to the APB2 frequency (here 72MHz)
	// the actual prescaling factor is PSC+1
	TIM2->PSC = 0;
 8004fb6:	2400      	movs	r4, #0
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN | RCC_APB2ENR_IOPAEN;
 8004fb8:	f043 0305 	orr.w	r3, r3, #5
 8004fbc:	61ab      	str	r3, [r5, #24]
	GPIOA->CRL &=~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0);
 8004fbe:	6833      	ldr	r3, [r6, #0]
	// set the auto-reload value, i.e. the max counter value
	TIM2->ARR = 255;
 8004fc0:	22ff      	movs	r2, #255	; 0xff
	GPIOA->CRL &=~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0);
 8004fc2:	f023 030f 	bic.w	r3, r3, #15
 8004fc6:	6033      	str	r3, [r6, #0]
	GPIOA->CRL |= GPIO_CRL_MODE0 | GPIO_CRL_CNF0_1;
 8004fc8:	6833      	ldr	r3, [r6, #0]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fca:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 8004fce:	f043 030b 	orr.w	r3, r3, #11
 8004fd2:	6033      	str	r3, [r6, #0]
	TIM2->PSC = 0;
 8004fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004fd8:	629c      	str	r4, [r3, #40]	; 0x28
	TIM2->ARR = 255;
 8004fda:	62da      	str	r2, [r3, #44]	; 0x2c
	// set the output compare value which determines the duty cycle
	TIM2->CCR1 = 128;
 8004fdc:	2280      	movs	r2, #128	; 0x80
 8004fde:	635a      	str	r2, [r3, #52]	; 0x34
	// refer to ST's app note "AN4776" p.14-16 for details about preload
	// PWM mode 1: duty_cycle = CCRx / ARR
	// PWM mode 2: duty_cycle = 1 - CCRx / ARR
	// if the counter is not up- but downcounting it is inverted
	// by default, the timers are upcounting
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1PE;
 8004fe0:	699a      	ldr	r2, [r3, #24]
{
 8004fe2:	b087      	sub	sp, #28
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1PE;
 8004fe4:	f042 0268 	orr.w	r2, r2, #104	; 0x68
 8004fe8:	619a      	str	r2, [r3, #24]
	// set polarity of the output to non-inverted (default, so actually not necessary)
	TIM2->CCER &=~TIM_CCER_CC1P;
 8004fea:	6a1a      	ldr	r2, [r3, #32]
 8004fec:	f022 0202 	bic.w	r2, r2, #2
 8004ff0:	621a      	str	r2, [r3, #32]
	// enable the compare outputs
	TIM2->CCER |= TIM_CCER_CC1E;
 8004ff2:	6a1a      	ldr	r2, [r3, #32]
 8004ff4:	f042 0201 	orr.w	r2, r2, #1
 8004ff8:	621a      	str	r2, [r3, #32]
	 	so here f_PWM = f_APB2 / ( 2*(PSC+1)*ARR ) = approx. 140.6 kHz
	*/
	//TIM2->CR1 |= TIM_CR1_CMS;

	// enable the timer 2 counter
	TIM2->CR1 |= TIM_CR1_CEN;
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	f042 0201 	orr.w	r2, r2, #1
 8005000:	601a      	str	r2, [r3, #0]


	/* DMA SETUP */
	//enable DMA1 clock
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8005002:	696b      	ldr	r3, [r5, #20]
	// set the peripheral address where to put the data
	// in this case it's the timers compare (duty-cycle) register
	DMA1_Channel5->CPAR = (uint32_t) (&(TIM2->CCR1));
 8005004:	4aa3      	ldr	r2, [pc, #652]	; (8005294 <mehal_init+0x2f4>)
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8005006:	f043 0301 	orr.w	r3, r3, #1
 800500a:	616b      	str	r3, [r5, #20]
	DMA1_Channel5->CPAR = (uint32_t) (&(TIM2->CCR1));
 800500c:	4ba2      	ldr	r3, [pc, #648]	; (8005298 <mehal_init+0x2f8>)
 800500e:	609a      	str	r2, [r3, #8]
	// set the memory address from where to fetch the data
	// this is the starting address of our array of samples
	DMA1_Channel5->CMAR = (uint32_t) samplesBuffer;
 8005010:	60d8      	str	r0, [r3, #12]
	//DMA1_Channel5->CMAR = (uint32_t) sine_LUT;
	// set the number of data (samples) to be transferred
	DMA1_Channel5->CNDTR = samplesBufferSize;
 8005012:	6059      	str	r1, [r3, #4]
	//DMA1_Channel5->CNDTR = 9; //for sine_LUT
	// set data transfer direction to "memory->peripheral"
	DMA1_Channel5->CCR |= DMA_CCR_DIR;
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	f042 0210 	orr.w	r2, r2, #16
 800501a:	601a      	str	r2, [r3, #0]
	// set the DMA channel priority to "high"
	DMA1_Channel5->CCR |= DMA_CCR_PL_1;
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005022:	601a      	str	r2, [r3, #0]

	// enable circular mode (this means it will be repeated eternally)
	DMA1_Channel5->CCR |= DMA_CCR_CIRC;
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	f042 0220 	orr.w	r2, r2, #32
 800502a:	601a      	str	r2, [r3, #0]

	// enable memory increment mode
	DMA1_Channel5->CCR |= DMA_CCR_MINC;
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005032:	601a      	str	r2, [r3, #0]
	// disable peripheral increment mode
	DMA1_Channel5->CCR &=~DMA_CCR_PINC;
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800503a:	601a      	str	r2, [r3, #0]
	// set memory size to 8bit
	DMA1_Channel5->CCR &=~DMA_CCR_MSIZE;
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005042:	601a      	str	r2, [r3, #0]
	// set peripheral size to 16bit
	DMA1_Channel5->CCR |= DMA_CCR_PSIZE_0;
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800504a:	601a      	str	r2, [r3, #0]

	// enable transfer complete interrupt and halft complete interrupt
	DMA1_Channel5->CCR |= DMA_CCR_TCIE;
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	f042 0202 	orr.w	r2, r2, #2
 8005052:	601a      	str	r2, [r3, #0]
	DMA1_Channel5->CCR |= DMA_CCR_HTIE;
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	f042 0204 	orr.w	r2, r2, #4
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	4a8f      	ldr	r2, [pc, #572]	; (800529c <mehal_init+0x2fc>)
 800505e:	f8c2 9000 	str.w	r9, [r2]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8005062:	b662      	cpsie	i
	// globally enable interrupts
	__enable_irq();
	//________________________________________________________________

	// enable the DMA channel
	DMA1_Channel5->CCR |= DMA_CCR_EN;
 8005064:	681a      	ldr	r2, [r3, #0]

	// PIN  B11 GATE_IN
	GPIO_InitStruct.Pin = GPIO_PIN_11;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005066:	2702      	movs	r7, #2
	DMA1_Channel5->CCR |= DMA_CCR_EN;
 8005068:	f042 0201 	orr.w	r2, r2, #1
 800506c:	601a      	str	r2, [r3, #0]
	TIM1->ARR = 750; // 96Khz
 800506e:	f240 22ee 	movw	r2, #750	; 0x2ee
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005072:	f04f 0801 	mov.w	r8, #1
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005076:	f44f 6b00 	mov.w	fp, #2048	; 0x800
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	// PIN  B12 ENC_A
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 800507a:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800507e:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005080:	a902      	add	r1, sp, #8
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8005082:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005086:	61ab      	str	r3, [r5, #24]
	TIM1->PSC = 0;
 8005088:	4b85      	ldr	r3, [pc, #532]	; (80052a0 <mehal_init+0x300>)
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800508a:	4886      	ldr	r0, [pc, #536]	; (80052a4 <mehal_init+0x304>)
	TIM1->PSC = 0;
 800508c:	629c      	str	r4, [r3, #40]	; 0x28
	TIM1->ARR = 750; // 96Khz
 800508e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->DIER |= TIM_DIER_UDE;
 8005090:	68da      	ldr	r2, [r3, #12]
 8005092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005096:	60da      	str	r2, [r3, #12]
	TIM1->CR1 |= TIM_CR1_CEN;
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	f042 0201 	orr.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]
	__HAL_RCC_GPIOB_CLK_ENABLE(); // Enable clck for portb
 80050a0:	69ab      	ldr	r3, [r5, #24]
 80050a2:	f043 0308 	orr.w	r3, r3, #8
 80050a6:	61ab      	str	r3, [r5, #24]
 80050a8:	69ab      	ldr	r3, [r5, #24]
 80050aa:	f003 0308 	and.w	r3, r3, #8
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	9b00      	ldr	r3, [sp, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE(); // Enable clck for porta
 80050b2:	69ab      	ldr	r3, [r5, #24]
 80050b4:	f043 0304 	orr.w	r3, r3, #4
 80050b8:	61ab      	str	r3, [r5, #24]
 80050ba:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050bc:	9403      	str	r4, [sp, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE(); // Enable clck for porta
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	9301      	str	r3, [sp, #4]
 80050c4:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 80050c6:	f8cd b008 	str.w	fp, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ca:	e9cd 8704 	strd	r8, r7, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050ce:	f000 fb4b 	bl	8005768 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050d2:	a902      	add	r1, sp, #8
 80050d4:	4873      	ldr	r0, [pc, #460]	; (80052a4 <mehal_init+0x304>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050d6:	e9cd a402 	strd	sl, r4, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050da:	e9cd 8704 	strd	r8, r7, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050de:	f000 fb43 	bl	8005768 <HAL_GPIO_Init>

	// PIN  B13 ENC_B
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80050e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050e6:	a902      	add	r1, sp, #8
 80050e8:	486e      	ldr	r0, [pc, #440]	; (80052a4 <mehal_init+0x304>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050ea:	e9cd 3402 	strd	r3, r4, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ee:	e9cd 8704 	strd	r8, r7, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050f2:	f000 fb39 	bl	8005768 <HAL_GPIO_Init>

	// PIN  B14 ENC_SW
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 80050f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050fa:	a902      	add	r1, sp, #8
 80050fc:	4869      	ldr	r0, [pc, #420]	; (80052a4 <mehal_init+0x304>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005102:	e9cd 8704 	strd	r8, r7, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005106:	f000 fb2f 	bl	8005768 <HAL_GPIO_Init>
	// PIN  B15 LED_CONFIG
	GPIO_InitStruct.Pin = GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800510a:	a902      	add	r1, sp, #8
 800510c:	4865      	ldr	r0, [pc, #404]	; (80052a4 <mehal_init+0x304>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800510e:	e9cd 9802 	strd	r9, r8, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005112:	e9cd 4704 	strd	r4, r7, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005116:	f000 fb27 	bl	8005768 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); //Configure GPIO pin Output Level
 800511a:	4649      	mov	r1, r9


	// PIN  A1 ANALOG INPUT PARAM2
	GPIO_InitStruct.Pin = GPIO_PIN_1;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800511c:	f04f 0903 	mov.w	r9, #3
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); //Configure GPIO pin Output Level
 8005120:	4622      	mov	r2, r4
 8005122:	4860      	ldr	r0, [pc, #384]	; (80052a4 <mehal_init+0x304>)
 8005124:	f000 fc91 	bl	8005a4a <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005128:	a902      	add	r1, sp, #8
 800512a:	4630      	mov	r0, r6
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800512c:	e9cd 9403 	strd	r9, r4, [sp, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005130:	9702      	str	r7, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005132:	9705      	str	r7, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005134:	f000 fb18 	bl	8005768 <HAL_GPIO_Init>

	// PIN  A2 ANALOG INPUT PARAM1
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005138:	2304      	movs	r3, #4
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800513a:	a902      	add	r1, sp, #8
 800513c:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800513e:	e9cd 3902 	strd	r3, r9, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005142:	e9cd 4704 	strd	r4, r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005146:	f000 fb0f 	bl	8005768 <HAL_GPIO_Init>

	// PIN  A3 ANALOG INPUT FINE_TUNE
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 800514a:	2308      	movs	r3, #8
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800514c:	4630      	mov	r0, r6
 800514e:	eb0d 0103 	add.w	r1, sp, r3
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005152:	e9cd 3902 	strd	r3, r9, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005156:	e9cd 4704 	strd	r4, r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800515a:	f000 fb05 	bl	8005768 <HAL_GPIO_Init>

	// PIN  A4 ANALOG INPUT FM
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 800515e:	2310      	movs	r3, #16
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005160:	a902      	add	r1, sp, #8
 8005162:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005164:	e9cd 3902 	strd	r3, r9, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005168:	e9cd 4704 	strd	r4, r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800516c:	f000 fafc 	bl	8005768 <HAL_GPIO_Init>

	// PIN  A5 ANALOG INPUT PITCH
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005170:	2320      	movs	r3, #32
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005172:	e9cd 3902 	strd	r3, r9, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);


	// PIN  A8 LED_BANK1
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005176:	f44f 7980 	mov.w	r9, #256	; 0x100
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800517a:	a902      	add	r1, sp, #8
 800517c:	4630      	mov	r0, r6
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800517e:	e9cd 4704 	strd	r4, r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005182:	f000 faf1 	bl	8005768 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005186:	a902      	add	r1, sp, #8
 8005188:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800518a:	e9cd 9802 	strd	r9, r8, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800518e:	e9cd 4704 	strd	r4, r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005192:	f000 fae9 	bl	8005768 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //Configure GPIO pin Output Level
 8005196:	4649      	mov	r1, r9

	// PIN  A9 LED_BANK0
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005198:	f44f 7900 	mov.w	r9, #512	; 0x200
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //Configure GPIO pin Output Level
 800519c:	4622      	mov	r2, r4
 800519e:	4630      	mov	r0, r6
 80051a0:	f000 fc53 	bl	8005a4a <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051a4:	a902      	add	r1, sp, #8
 80051a6:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051a8:	e9cd 9802 	strd	r9, r8, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051ac:	e9cd 4704 	strd	r4, r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051b0:	f000 fada 	bl	8005768 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //Configure GPIO pin Output Level
 80051b4:	4649      	mov	r1, r9

	// PIN  A10 DISPLAY_CLK
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 80051b6:	f44f 6980 	mov.w	r9, #1024	; 0x400
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //Configure GPIO pin Output Level
 80051ba:	4622      	mov	r2, r4
 80051bc:	4630      	mov	r0, r6
 80051be:	f000 fc44 	bl	8005a4a <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051c2:	a902      	add	r1, sp, #8
 80051c4:	4630      	mov	r0, r6
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051c6:	e9cd 4704 	strd	r4, r7, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051ca:	e9cd 9802 	strd	r9, r8, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051ce:	f000 facb 	bl	8005768 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); //Configure GPIO pin Output Level
 80051d2:	4622      	mov	r2, r4
 80051d4:	4649      	mov	r1, r9
 80051d6:	4630      	mov	r0, r6
 80051d8:	f000 fc37 	bl	8005a4a <HAL_GPIO_WritePin>
	// PIN  A11 DISPLAY_LATCH
	GPIO_InitStruct.Pin = GPIO_PIN_11;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051dc:	a902      	add	r1, sp, #8
 80051de:	4630      	mov	r0, r6
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051e0:	e9cd 4704 	strd	r4, r7, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051e4:	e9cd b802 	strd	fp, r8, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051e8:	f000 fabe 	bl	8005768 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET); //Configure GPIO pin Output Level
 80051ec:	4622      	mov	r2, r4
 80051ee:	4659      	mov	r1, fp
 80051f0:	4630      	mov	r0, r6
 80051f2:	f000 fc2a 	bl	8005a4a <HAL_GPIO_WritePin>
	// PIN  A12 DISPLAY_DATA
	GPIO_InitStruct.Pin = GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051f6:	a902      	add	r1, sp, #8
 80051f8:	4630      	mov	r0, r6
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051fa:	e9cd 4704 	strd	r4, r7, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051fe:	e9cd a802 	strd	sl, r8, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005202:	f000 fab1 	bl	8005768 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); //Configure GPIO pin Output Level
 8005206:	4622      	mov	r2, r4
 8005208:	4651      	mov	r1, sl
 800520a:	4630      	mov	r0, r6
 800520c:	f000 fc1d 	bl	8005a4a <HAL_GPIO_WritePin>


	// Configure ADC1
	// set ADC clock prescaler to 6 to get a 12MHZ ADC clock (14MHz is maximum)
	RCC->CFGR &=~RCC_CFGR_ADCPRE_0;
 8005210:	686b      	ldr	r3, [r5, #4]
	RCC->CFGR |= RCC_CFGR_ADCPRE_1;
	// enable ADC1 clock
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
	// enable ADC1
	ADC1->CR2 |= ADC_CR2_ADON;
 8005212:	4c25      	ldr	r4, [pc, #148]	; (80052a8 <mehal_init+0x308>)
	RCC->CFGR &=~RCC_CFGR_ADCPRE_0;
 8005214:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005218:	606b      	str	r3, [r5, #4]
	RCC->CFGR |= RCC_CFGR_ADCPRE_1;
 800521a:	686b      	ldr	r3, [r5, #4]
	ADC1->SMPR2 &=~(ADC_SMPR2_SMP0_2 | ADC_SMPR2_SMP0_1 | ADC_SMPR2_SMP0_0);
	// set data alignment to right
	ADC1->CR2 &=~ADC_CR2_ALIGN;
	// wait 10µs before ADC calibration
	//delay(10);
	HAL_Delay(1); // 1ms
 800521c:	4640      	mov	r0, r8
	RCC->CFGR |= RCC_CFGR_ADCPRE_1;
 800521e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005222:	606b      	str	r3, [r5, #4]
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8005224:	69ab      	ldr	r3, [r5, #24]
 8005226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800522a:	61ab      	str	r3, [r5, #24]
	ADC1->CR2 |= ADC_CR2_ADON;
 800522c:	68a3      	ldr	r3, [r4, #8]
 800522e:	ea43 0308 	orr.w	r3, r3, r8
 8005232:	60a3      	str	r3, [r4, #8]
	ADC1->CR2 |= (ADC_CR2_EXTSEL_2 | ADC_CR2_EXTSEL_1 | ADC_CR2_EXTSEL_0);
 8005234:	68a3      	ldr	r3, [r4, #8]
 8005236:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 800523a:	60a3      	str	r3, [r4, #8]
	ADC1->SMPR2 &=~(ADC_SMPR2_SMP0_2 | ADC_SMPR2_SMP0_1 | ADC_SMPR2_SMP0_0);
 800523c:	6923      	ldr	r3, [r4, #16]
 800523e:	f023 0307 	bic.w	r3, r3, #7
 8005242:	6123      	str	r3, [r4, #16]
	ADC1->CR2 &=~ADC_CR2_ALIGN;
 8005244:	68a3      	ldr	r3, [r4, #8]
 8005246:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800524a:	60a3      	str	r3, [r4, #8]
	HAL_Delay(1); // 1ms
 800524c:	f000 f986 	bl	800555c <HAL_Delay>
	// start calibration of ADC1
	ADC1->CR2 |= ADC_CR2_CAL;
 8005250:	68a3      	ldr	r3, [r4, #8]
 8005252:	f043 0304 	orr.w	r3, r3, #4
 8005256:	60a3      	str	r3, [r4, #8]
	// wait until calibration is finished
	while( (ADC1->CR2) & ADC_CR2_CAL );
 8005258:	68a3      	ldr	r3, [r4, #8]
 800525a:	f013 0304 	ands.w	r3, r3, #4
 800525e:	d1fb      	bne.n	8005258 <mehal_init+0x2b8>
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005260:	4812      	ldr	r0, [pc, #72]	; (80052ac <mehal_init+0x30c>)
  hi2c1.Init.ClockSpeed = 400000;
 8005262:	4913      	ldr	r1, [pc, #76]	; (80052b0 <mehal_init+0x310>)
 8005264:	4a13      	ldr	r2, [pc, #76]	; (80052b4 <mehal_init+0x314>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
 8005266:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.ClockSpeed = 400000;
 800526a:	e9c0 1200 	strd	r1, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800526e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005272:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005276:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800527a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800527c:	f000 fc16 	bl	8005aac <HAL_I2C_Init>
}
 8005280:	b007      	add	sp, #28
 8005282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005286:	bf00      	nop
 8005288:	200047e0 	.word	0x200047e0
 800528c:	40021000 	.word	0x40021000
 8005290:	40010800 	.word	0x40010800
 8005294:	40000034 	.word	0x40000034
 8005298:	40020058 	.word	0x40020058
 800529c:	e000e100 	.word	0xe000e100
 80052a0:	40012c00 	.word	0x40012c00
 80052a4:	40010c00 	.word	0x40010c00
 80052a8:	40012400 	.word	0x40012400
 80052ac:	200047e4 	.word	0x200047e4
 80052b0:	40005400 	.word	0x40005400
 80052b4:	00061a80 	.word	0x00061a80

080052b8 <mehal_readADC>:
	channel = channel + 1; // A0 is not used (its PWM output)
 80052b8:	3001      	adds	r0, #1
 80052ba:	b2c0      	uxtb	r0, r0
	if( (channel>17) || (channel<0) ) return 0xFFFF;
 80052bc:	2811      	cmp	r0, #17
 80052be:	d816      	bhi.n	80052ee <mehal_readADC+0x36>
	ADC1->SQR1 = 0;
 80052c0:	2200      	movs	r2, #0
 80052c2:	4b0c      	ldr	r3, [pc, #48]	; (80052f4 <mehal_readADC+0x3c>)
 80052c4:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1->SQR3 = (channel << ADC_SQR3_SQ1_Pos);
 80052c6:	6358      	str	r0, [r3, #52]	; 0x34
	ADC1->SR &=~ADC_SR_EOC;
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	f022 0202 	bic.w	r2, r2, #2
 80052ce:	601a      	str	r2, [r3, #0]
	ADC1->CR2 |= ADC_CR2_ADON;
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	f042 0201 	orr.w	r2, r2, #1
 80052d6:	609a      	str	r2, [r3, #8]
	ADC1->CR2 |= ADC_CR2_SWSTART;
 80052d8:	689a      	ldr	r2, [r3, #8]
 80052da:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80052de:	609a      	str	r2, [r3, #8]
	while( !(ADC1->SR & ADC_SR_EOC) );
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	0792      	lsls	r2, r2, #30
 80052e4:	d5fc      	bpl.n	80052e0 <mehal_readADC+0x28>
	return ((ADC1->DR) & 0b111111111111);
 80052e6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80052e8:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80052ec:	4770      	bx	lr
	if( (channel>17) || (channel<0) ) return 0xFFFF;
 80052ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 80052f2:	4770      	bx	lr
 80052f4:	40012400 	.word	0x40012400

080052f8 <mehal_i2cMemRead>:

}


uint8_t mehal_i2cMemRead(uint16_t memAddress,uint8_t *pData, uint16_t size)
{
 80052f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return (uint8_t)HAL_I2C_Mem_Read(&hi2c1, MEM_ADDRESS, memAddress, I2C_MEMADD_SIZE_8BIT, pData, size, 300);
 80052fa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80052fe:	9100      	str	r1, [sp, #0]
 8005300:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005304:	21a0      	movs	r1, #160	; 0xa0
 8005306:	4602      	mov	r2, r0
 8005308:	2301      	movs	r3, #1
 800530a:	4803      	ldr	r0, [pc, #12]	; (8005318 <mehal_i2cMemRead+0x20>)
 800530c:	f000 fdf0 	bl	8005ef0 <HAL_I2C_Mem_Read>
}
 8005310:	b005      	add	sp, #20
 8005312:	f85d fb04 	ldr.w	pc, [sp], #4
 8005316:	bf00      	nop
 8005318:	200047e4 	.word	0x200047e4

0800531c <mehal_i2cMemWrite>:

uint8_t mehal_i2cMemWrite(uint16_t memAddress,uint8_t *pData, uint16_t size)
{
 800531c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t r;
	r= (uint8_t)HAL_I2C_Mem_Write(&hi2c1, MEM_ADDRESS, memAddress, I2C_MEMADD_SIZE_8BIT, pData, size, 500);
 800531e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005322:	9100      	str	r1, [sp, #0]
 8005324:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005328:	21a0      	movs	r1, #160	; 0xa0
 800532a:	4602      	mov	r2, r0
 800532c:	2301      	movs	r3, #1
 800532e:	4805      	ldr	r0, [pc, #20]	; (8005344 <mehal_i2cMemWrite+0x28>)
 8005330:	f000 fce4 	bl	8005cfc <HAL_I2C_Mem_Write>
 8005334:	4604      	mov	r4, r0
}


void mehal_delay(uint32_t t)
{
	  HAL_Delay(t);
 8005336:	201e      	movs	r0, #30
 8005338:	f000 f910 	bl	800555c <HAL_Delay>
}
 800533c:	4620      	mov	r0, r4
 800533e:	b004      	add	sp, #16
 8005340:	bd10      	pop	{r4, pc}
 8005342:	bf00      	nop
 8005344:	200047e4 	.word	0x200047e4

08005348 <mehal_toogleBoardLed>:
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8005348:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800534c:	4801      	ldr	r0, [pc, #4]	; (8005354 <mehal_toogleBoardLed+0xc>)
 800534e:	f000 bb94 	b.w	8005a7a <HAL_GPIO_TogglePin>
 8005352:	bf00      	nop
 8005354:	40011000 	.word	0x40011000

08005358 <mehal_debugPinSet>:
}
 8005358:	4770      	bx	lr

0800535a <mehal_debugPinReset>:
 800535a:	4770      	bx	lr

0800535c <mehal_readGateInput>:
	return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 800535c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005360:	4801      	ldr	r0, [pc, #4]	; (8005368 <mehal_readGateInput+0xc>)
 8005362:	f000 bb5b 	b.w	8005a1c <HAL_GPIO_ReadPin>
 8005366:	bf00      	nop
 8005368:	40010c00 	.word	0x40010c00

0800536c <mehal_readEncoderSwitch>:
	return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 800536c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005370:	4801      	ldr	r0, [pc, #4]	; (8005378 <mehal_readEncoderSwitch+0xc>)
 8005372:	f000 bb53 	b.w	8005a1c <HAL_GPIO_ReadPin>
 8005376:	bf00      	nop
 8005378:	40010c00 	.word	0x40010c00

0800537c <mehal_readEncoderA>:
	return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 800537c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005380:	4801      	ldr	r0, [pc, #4]	; (8005388 <mehal_readEncoderA+0xc>)
 8005382:	f000 bb4b 	b.w	8005a1c <HAL_GPIO_ReadPin>
 8005386:	bf00      	nop
 8005388:	40010c00 	.word	0x40010c00

0800538c <mehal_readEncoderB>:
	return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 800538c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005390:	4801      	ldr	r0, [pc, #4]	; (8005398 <mehal_readEncoderB+0xc>)
 8005392:	f000 bb43 	b.w	8005a1c <HAL_GPIO_ReadPin>
 8005396:	bf00      	nop
 8005398:	40010c00 	.word	0x40010c00

0800539c <mehal_sendDataTo595>:
{
 800539c:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800539e:	2200      	movs	r2, #0
 80053a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
{
 80053a4:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80053a6:	4816      	ldr	r0, [pc, #88]	; (8005400 <mehal_sendDataTo595+0x64>)
 80053a8:	f000 fb4f 	bl	8005a4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80053ac:	2200      	movs	r2, #0
 80053ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80053b2:	4813      	ldr	r0, [pc, #76]	; (8005400 <mehal_sendDataTo595+0x64>)
 80053b4:	f000 fb49 	bl	8005a4a <HAL_GPIO_WritePin>
 80053b8:	2400      	movs	r4, #0
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80053ba:	4e11      	ldr	r6, [pc, #68]	; (8005400 <mehal_sendDataTo595+0x64>)
		if( (data&(0x80>>i)) == 0)
 80053bc:	2280      	movs	r2, #128	; 0x80
 80053be:	4122      	asrs	r2, r4
 80053c0:	402a      	ands	r2, r5
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80053c2:	bf18      	it	ne
 80053c4:	2201      	movne	r2, #1
 80053c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80053ca:	4630      	mov	r0, r6
 80053cc:	f000 fb3d 	bl	8005a4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80053d0:	2201      	movs	r2, #1
 80053d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80053d6:	480a      	ldr	r0, [pc, #40]	; (8005400 <mehal_sendDataTo595+0x64>)
 80053d8:	f000 fb37 	bl	8005a4a <HAL_GPIO_WritePin>
 80053dc:	3401      	adds	r4, #1
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80053de:	2200      	movs	r2, #0
 80053e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80053e4:	4806      	ldr	r0, [pc, #24]	; (8005400 <mehal_sendDataTo595+0x64>)
 80053e6:	f000 fb30 	bl	8005a4a <HAL_GPIO_WritePin>
	for(i=0; i<8;i++)
 80053ea:	2c08      	cmp	r4, #8
 80053ec:	d1e6      	bne.n	80053bc <mehal_sendDataTo595+0x20>
}
 80053ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80053f2:	2201      	movs	r2, #1
 80053f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80053f8:	4801      	ldr	r0, [pc, #4]	; (8005400 <mehal_sendDataTo595+0x64>)
 80053fa:	f000 bb26 	b.w	8005a4a <HAL_GPIO_WritePin>
 80053fe:	bf00      	nop
 8005400:	40010800 	.word	0x40010800

08005404 <mehal_setConfigLed>:
	if(state==1)
 8005404:	2801      	cmp	r0, #1
{
 8005406:	4602      	mov	r2, r0
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8005408:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800540c:	bf18      	it	ne
 800540e:	2200      	movne	r2, #0
 8005410:	4801      	ldr	r0, [pc, #4]	; (8005418 <mehal_setConfigLed+0x14>)
 8005412:	f000 bb1a 	b.w	8005a4a <HAL_GPIO_WritePin>
 8005416:	bf00      	nop
 8005418:	40010c00 	.word	0x40010c00

0800541c <mehal_setBank1Led>:
	if(state==1)
 800541c:	2801      	cmp	r0, #1
{
 800541e:	4602      	mov	r2, r0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8005420:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005424:	bf18      	it	ne
 8005426:	2200      	movne	r2, #0
 8005428:	4801      	ldr	r0, [pc, #4]	; (8005430 <mehal_setBank1Led+0x14>)
 800542a:	f000 bb0e 	b.w	8005a4a <HAL_GPIO_WritePin>
 800542e:	bf00      	nop
 8005430:	40010800 	.word	0x40010800

08005434 <mehal_setBank0Led>:
	if(state==1)
 8005434:	2801      	cmp	r0, #1
{
 8005436:	4602      	mov	r2, r0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8005438:	f44f 7100 	mov.w	r1, #512	; 0x200
 800543c:	bf18      	it	ne
 800543e:	2200      	movne	r2, #0
 8005440:	4801      	ldr	r0, [pc, #4]	; (8005448 <mehal_setBank0Led+0x14>)
 8005442:	f000 bb02 	b.w	8005a4a <HAL_GPIO_WritePin>
 8005446:	bf00      	nop
 8005448:	40010800 	.word	0x40010800

0800544c <Reset_Handler>:
 800544c:	2100      	movs	r1, #0
 800544e:	e003      	b.n	8005458 <LoopCopyDataInit>

08005450 <CopyDataInit>:
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <LoopFillZerobss+0x14>)
 8005452:	585b      	ldr	r3, [r3, r1]
 8005454:	5043      	str	r3, [r0, r1]
 8005456:	3104      	adds	r1, #4

08005458 <LoopCopyDataInit>:
 8005458:	480a      	ldr	r0, [pc, #40]	; (8005484 <LoopFillZerobss+0x18>)
 800545a:	4b0b      	ldr	r3, [pc, #44]	; (8005488 <LoopFillZerobss+0x1c>)
 800545c:	1842      	adds	r2, r0, r1
 800545e:	429a      	cmp	r2, r3
 8005460:	d3f6      	bcc.n	8005450 <CopyDataInit>
 8005462:	4a0a      	ldr	r2, [pc, #40]	; (800548c <LoopFillZerobss+0x20>)
 8005464:	e002      	b.n	800546c <LoopFillZerobss>

08005466 <FillZerobss>:
 8005466:	2300      	movs	r3, #0
 8005468:	f842 3b04 	str.w	r3, [r2], #4

0800546c <LoopFillZerobss>:
 800546c:	4b08      	ldr	r3, [pc, #32]	; (8005490 <LoopFillZerobss+0x24>)
 800546e:	429a      	cmp	r2, r3
 8005470:	d3f9      	bcc.n	8005466 <FillZerobss>
 8005472:	f7fe fedf 	bl	8004234 <SystemInit>
 8005476:	f001 feaf 	bl	80071d8 <__libc_init_array>
 800547a:	f7fe fdfb 	bl	8004074 <main>
 800547e:	4770      	bx	lr
 8005480:	0800dc00 	.word	0x0800dc00
 8005484:	20000000 	.word	0x20000000
 8005488:	2000033c 	.word	0x2000033c
 800548c:	2000033c 	.word	0x2000033c
 8005490:	2000483c 	.word	0x2000483c

08005494 <ADC1_2_IRQHandler>:
 8005494:	e7fe      	b.n	8005494 <ADC1_2_IRQHandler>
	...

08005498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800549c:	4b08      	ldr	r3, [pc, #32]	; (80054c0 <HAL_Init+0x28>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a07      	ldr	r2, [pc, #28]	; (80054c0 <HAL_Init+0x28>)
 80054a2:	f043 0310 	orr.w	r3, r3, #16
 80054a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054a8:	2003      	movs	r0, #3
 80054aa:	f000 f929 	bl	8005700 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054ae:	2000      	movs	r0, #0
 80054b0:	f000 f808 	bl	80054c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80054b4:	f7fe fe24 	bl	8004100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	40022000 	.word	0x40022000

080054c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80054cc:	4b12      	ldr	r3, [pc, #72]	; (8005518 <HAL_InitTick+0x54>)
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	4b12      	ldr	r3, [pc, #72]	; (800551c <HAL_InitTick+0x58>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	4619      	mov	r1, r3
 80054d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054da:	fbb3 f3f1 	udiv	r3, r3, r1
 80054de:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 f933 	bl	800574e <HAL_SYSTICK_Config>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e00e      	b.n	8005510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b0f      	cmp	r3, #15
 80054f6:	d80a      	bhi.n	800550e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054f8:	2200      	movs	r2, #0
 80054fa:	6879      	ldr	r1, [r7, #4]
 80054fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005500:	f000 f909 	bl	8005716 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005504:	4a06      	ldr	r2, [pc, #24]	; (8005520 <HAL_InitTick+0x5c>)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800550a:	2300      	movs	r3, #0
 800550c:	e000      	b.n	8005510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
}
 8005510:	4618      	mov	r0, r3
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	20000328 	.word	0x20000328
 800551c:	20000338 	.word	0x20000338
 8005520:	20000334 	.word	0x20000334

08005524 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005528:	4b05      	ldr	r3, [pc, #20]	; (8005540 <HAL_IncTick+0x1c>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	461a      	mov	r2, r3
 800552e:	4b05      	ldr	r3, [pc, #20]	; (8005544 <HAL_IncTick+0x20>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4413      	add	r3, r2
 8005534:	4a03      	ldr	r2, [pc, #12]	; (8005544 <HAL_IncTick+0x20>)
 8005536:	6013      	str	r3, [r2, #0]
}
 8005538:	bf00      	nop
 800553a:	46bd      	mov	sp, r7
 800553c:	bc80      	pop	{r7}
 800553e:	4770      	bx	lr
 8005540:	20000338 	.word	0x20000338
 8005544:	20004838 	.word	0x20004838

08005548 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
  return uwTick;
 800554c:	4b02      	ldr	r3, [pc, #8]	; (8005558 <HAL_GetTick+0x10>)
 800554e:	681b      	ldr	r3, [r3, #0]
}
 8005550:	4618      	mov	r0, r3
 8005552:	46bd      	mov	sp, r7
 8005554:	bc80      	pop	{r7}
 8005556:	4770      	bx	lr
 8005558:	20004838 	.word	0x20004838

0800555c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005564:	f7ff fff0 	bl	8005548 <HAL_GetTick>
 8005568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005574:	d005      	beq.n	8005582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005576:	4b09      	ldr	r3, [pc, #36]	; (800559c <HAL_Delay+0x40>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	461a      	mov	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4413      	add	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005582:	bf00      	nop
 8005584:	f7ff ffe0 	bl	8005548 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	429a      	cmp	r2, r3
 8005592:	d8f7      	bhi.n	8005584 <HAL_Delay+0x28>
  {
  }
}
 8005594:	bf00      	nop
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	20000338 	.word	0x20000338

080055a0 <__NVIC_SetPriorityGrouping>:
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055b0:	4b0c      	ldr	r3, [pc, #48]	; (80055e4 <__NVIC_SetPriorityGrouping+0x44>)
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055bc:	4013      	ands	r3, r2
 80055be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80055cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055d2:	4a04      	ldr	r2, [pc, #16]	; (80055e4 <__NVIC_SetPriorityGrouping+0x44>)
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	60d3      	str	r3, [r2, #12]
}
 80055d8:	bf00      	nop
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	bc80      	pop	{r7}
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	e000ed00 	.word	0xe000ed00

080055e8 <__NVIC_GetPriorityGrouping>:
{
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055ec:	4b04      	ldr	r3, [pc, #16]	; (8005600 <__NVIC_GetPriorityGrouping+0x18>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	0a1b      	lsrs	r3, r3, #8
 80055f2:	f003 0307 	and.w	r3, r3, #7
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bc80      	pop	{r7}
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	e000ed00 	.word	0xe000ed00

08005604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	4603      	mov	r3, r0
 800560c:	6039      	str	r1, [r7, #0]
 800560e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005614:	2b00      	cmp	r3, #0
 8005616:	db0a      	blt.n	800562e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	b2da      	uxtb	r2, r3
 800561c:	490c      	ldr	r1, [pc, #48]	; (8005650 <__NVIC_SetPriority+0x4c>)
 800561e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005622:	0112      	lsls	r2, r2, #4
 8005624:	b2d2      	uxtb	r2, r2
 8005626:	440b      	add	r3, r1
 8005628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800562c:	e00a      	b.n	8005644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	b2da      	uxtb	r2, r3
 8005632:	4908      	ldr	r1, [pc, #32]	; (8005654 <__NVIC_SetPriority+0x50>)
 8005634:	79fb      	ldrb	r3, [r7, #7]
 8005636:	f003 030f 	and.w	r3, r3, #15
 800563a:	3b04      	subs	r3, #4
 800563c:	0112      	lsls	r2, r2, #4
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	440b      	add	r3, r1
 8005642:	761a      	strb	r2, [r3, #24]
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	bc80      	pop	{r7}
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	e000e100 	.word	0xe000e100
 8005654:	e000ed00 	.word	0xe000ed00

08005658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005658:	b480      	push	{r7}
 800565a:	b089      	sub	sp, #36	; 0x24
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	f1c3 0307 	rsb	r3, r3, #7
 8005672:	2b04      	cmp	r3, #4
 8005674:	bf28      	it	cs
 8005676:	2304      	movcs	r3, #4
 8005678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	3304      	adds	r3, #4
 800567e:	2b06      	cmp	r3, #6
 8005680:	d902      	bls.n	8005688 <NVIC_EncodePriority+0x30>
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	3b03      	subs	r3, #3
 8005686:	e000      	b.n	800568a <NVIC_EncodePriority+0x32>
 8005688:	2300      	movs	r3, #0
 800568a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800568c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	fa02 f303 	lsl.w	r3, r2, r3
 8005696:	43da      	mvns	r2, r3
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	401a      	ands	r2, r3
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	fa01 f303 	lsl.w	r3, r1, r3
 80056aa:	43d9      	mvns	r1, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056b0:	4313      	orrs	r3, r2
         );
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3724      	adds	r7, #36	; 0x24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bc80      	pop	{r7}
 80056ba:	4770      	bx	lr

080056bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3b01      	subs	r3, #1
 80056c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056cc:	d301      	bcc.n	80056d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056ce:	2301      	movs	r3, #1
 80056d0:	e00f      	b.n	80056f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056d2:	4a0a      	ldr	r2, [pc, #40]	; (80056fc <SysTick_Config+0x40>)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056da:	210f      	movs	r1, #15
 80056dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056e0:	f7ff ff90 	bl	8005604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056e4:	4b05      	ldr	r3, [pc, #20]	; (80056fc <SysTick_Config+0x40>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056ea:	4b04      	ldr	r3, [pc, #16]	; (80056fc <SysTick_Config+0x40>)
 80056ec:	2207      	movs	r2, #7
 80056ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	e000e010 	.word	0xe000e010

08005700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7ff ff49 	bl	80055a0 <__NVIC_SetPriorityGrouping>
}
 800570e:	bf00      	nop
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005716:	b580      	push	{r7, lr}
 8005718:	b086      	sub	sp, #24
 800571a:	af00      	add	r7, sp, #0
 800571c:	4603      	mov	r3, r0
 800571e:	60b9      	str	r1, [r7, #8]
 8005720:	607a      	str	r2, [r7, #4]
 8005722:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005724:	2300      	movs	r3, #0
 8005726:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005728:	f7ff ff5e 	bl	80055e8 <__NVIC_GetPriorityGrouping>
 800572c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	68b9      	ldr	r1, [r7, #8]
 8005732:	6978      	ldr	r0, [r7, #20]
 8005734:	f7ff ff90 	bl	8005658 <NVIC_EncodePriority>
 8005738:	4602      	mov	r2, r0
 800573a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800573e:	4611      	mov	r1, r2
 8005740:	4618      	mov	r0, r3
 8005742:	f7ff ff5f 	bl	8005604 <__NVIC_SetPriority>
}
 8005746:	bf00      	nop
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b082      	sub	sp, #8
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7ff ffb0 	bl	80056bc <SysTick_Config>
 800575c:	4603      	mov	r3, r0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
	...

08005768 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005768:	b480      	push	{r7}
 800576a:	b08b      	sub	sp, #44	; 0x2c
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005772:	2300      	movs	r3, #0
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005776:	2300      	movs	r3, #0
 8005778:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800577a:	e127      	b.n	80059cc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800577c:	2201      	movs	r2, #1
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	fa02 f303 	lsl.w	r3, r2, r3
 8005784:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	69fa      	ldr	r2, [r7, #28]
 800578c:	4013      	ands	r3, r2
 800578e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	429a      	cmp	r2, r3
 8005796:	f040 8116 	bne.w	80059c6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2b12      	cmp	r3, #18
 80057a0:	d034      	beq.n	800580c <HAL_GPIO_Init+0xa4>
 80057a2:	2b12      	cmp	r3, #18
 80057a4:	d80d      	bhi.n	80057c2 <HAL_GPIO_Init+0x5a>
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d02b      	beq.n	8005802 <HAL_GPIO_Init+0x9a>
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d804      	bhi.n	80057b8 <HAL_GPIO_Init+0x50>
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d031      	beq.n	8005816 <HAL_GPIO_Init+0xae>
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d01c      	beq.n	80057f0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80057b6:	e048      	b.n	800584a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d043      	beq.n	8005844 <HAL_GPIO_Init+0xdc>
 80057bc:	2b11      	cmp	r3, #17
 80057be:	d01b      	beq.n	80057f8 <HAL_GPIO_Init+0x90>
          break;
 80057c0:	e043      	b.n	800584a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80057c2:	4a89      	ldr	r2, [pc, #548]	; (80059e8 <HAL_GPIO_Init+0x280>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d026      	beq.n	8005816 <HAL_GPIO_Init+0xae>
 80057c8:	4a87      	ldr	r2, [pc, #540]	; (80059e8 <HAL_GPIO_Init+0x280>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d806      	bhi.n	80057dc <HAL_GPIO_Init+0x74>
 80057ce:	4a87      	ldr	r2, [pc, #540]	; (80059ec <HAL_GPIO_Init+0x284>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d020      	beq.n	8005816 <HAL_GPIO_Init+0xae>
 80057d4:	4a86      	ldr	r2, [pc, #536]	; (80059f0 <HAL_GPIO_Init+0x288>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d01d      	beq.n	8005816 <HAL_GPIO_Init+0xae>
          break;
 80057da:	e036      	b.n	800584a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80057dc:	4a85      	ldr	r2, [pc, #532]	; (80059f4 <HAL_GPIO_Init+0x28c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d019      	beq.n	8005816 <HAL_GPIO_Init+0xae>
 80057e2:	4a85      	ldr	r2, [pc, #532]	; (80059f8 <HAL_GPIO_Init+0x290>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d016      	beq.n	8005816 <HAL_GPIO_Init+0xae>
 80057e8:	4a84      	ldr	r2, [pc, #528]	; (80059fc <HAL_GPIO_Init+0x294>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d013      	beq.n	8005816 <HAL_GPIO_Init+0xae>
          break;
 80057ee:	e02c      	b.n	800584a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	623b      	str	r3, [r7, #32]
          break;
 80057f6:	e028      	b.n	800584a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	3304      	adds	r3, #4
 80057fe:	623b      	str	r3, [r7, #32]
          break;
 8005800:	e023      	b.n	800584a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	3308      	adds	r3, #8
 8005808:	623b      	str	r3, [r7, #32]
          break;
 800580a:	e01e      	b.n	800584a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	330c      	adds	r3, #12
 8005812:	623b      	str	r3, [r7, #32]
          break;
 8005814:	e019      	b.n	800584a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d102      	bne.n	8005824 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800581e:	2304      	movs	r3, #4
 8005820:	623b      	str	r3, [r7, #32]
          break;
 8005822:	e012      	b.n	800584a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d105      	bne.n	8005838 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800582c:	2308      	movs	r3, #8
 800582e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	69fa      	ldr	r2, [r7, #28]
 8005834:	611a      	str	r2, [r3, #16]
          break;
 8005836:	e008      	b.n	800584a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005838:	2308      	movs	r3, #8
 800583a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	69fa      	ldr	r2, [r7, #28]
 8005840:	615a      	str	r2, [r3, #20]
          break;
 8005842:	e002      	b.n	800584a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005844:	2300      	movs	r3, #0
 8005846:	623b      	str	r3, [r7, #32]
          break;
 8005848:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	2bff      	cmp	r3, #255	; 0xff
 800584e:	d801      	bhi.n	8005854 <HAL_GPIO_Init+0xec>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	e001      	b.n	8005858 <HAL_GPIO_Init+0xf0>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3304      	adds	r3, #4
 8005858:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	2bff      	cmp	r3, #255	; 0xff
 800585e:	d802      	bhi.n	8005866 <HAL_GPIO_Init+0xfe>
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	e002      	b.n	800586c <HAL_GPIO_Init+0x104>
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	3b08      	subs	r3, #8
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	210f      	movs	r1, #15
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	fa01 f303 	lsl.w	r3, r1, r3
 800587a:	43db      	mvns	r3, r3
 800587c:	401a      	ands	r2, r3
 800587e:	6a39      	ldr	r1, [r7, #32]
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	fa01 f303 	lsl.w	r3, r1, r3
 8005886:	431a      	orrs	r2, r3
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 8096 	beq.w	80059c6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800589a:	4b59      	ldr	r3, [pc, #356]	; (8005a00 <HAL_GPIO_Init+0x298>)
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	4a58      	ldr	r2, [pc, #352]	; (8005a00 <HAL_GPIO_Init+0x298>)
 80058a0:	f043 0301 	orr.w	r3, r3, #1
 80058a4:	6193      	str	r3, [r2, #24]
 80058a6:	4b56      	ldr	r3, [pc, #344]	; (8005a00 <HAL_GPIO_Init+0x298>)
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	60bb      	str	r3, [r7, #8]
 80058b0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80058b2:	4a54      	ldr	r2, [pc, #336]	; (8005a04 <HAL_GPIO_Init+0x29c>)
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	089b      	lsrs	r3, r3, #2
 80058b8:	3302      	adds	r3, #2
 80058ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058be:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	f003 0303 	and.w	r3, r3, #3
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	220f      	movs	r2, #15
 80058ca:	fa02 f303 	lsl.w	r3, r2, r3
 80058ce:	43db      	mvns	r3, r3
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4013      	ands	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a4b      	ldr	r2, [pc, #300]	; (8005a08 <HAL_GPIO_Init+0x2a0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d013      	beq.n	8005906 <HAL_GPIO_Init+0x19e>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a4a      	ldr	r2, [pc, #296]	; (8005a0c <HAL_GPIO_Init+0x2a4>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d00d      	beq.n	8005902 <HAL_GPIO_Init+0x19a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a49      	ldr	r2, [pc, #292]	; (8005a10 <HAL_GPIO_Init+0x2a8>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d007      	beq.n	80058fe <HAL_GPIO_Init+0x196>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a48      	ldr	r2, [pc, #288]	; (8005a14 <HAL_GPIO_Init+0x2ac>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d101      	bne.n	80058fa <HAL_GPIO_Init+0x192>
 80058f6:	2303      	movs	r3, #3
 80058f8:	e006      	b.n	8005908 <HAL_GPIO_Init+0x1a0>
 80058fa:	2304      	movs	r3, #4
 80058fc:	e004      	b.n	8005908 <HAL_GPIO_Init+0x1a0>
 80058fe:	2302      	movs	r3, #2
 8005900:	e002      	b.n	8005908 <HAL_GPIO_Init+0x1a0>
 8005902:	2301      	movs	r3, #1
 8005904:	e000      	b.n	8005908 <HAL_GPIO_Init+0x1a0>
 8005906:	2300      	movs	r3, #0
 8005908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800590a:	f002 0203 	and.w	r2, r2, #3
 800590e:	0092      	lsls	r2, r2, #2
 8005910:	4093      	lsls	r3, r2
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4313      	orrs	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005918:	493a      	ldr	r1, [pc, #232]	; (8005a04 <HAL_GPIO_Init+0x29c>)
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	089b      	lsrs	r3, r3, #2
 800591e:	3302      	adds	r3, #2
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d006      	beq.n	8005940 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005932:	4b39      	ldr	r3, [pc, #228]	; (8005a18 <HAL_GPIO_Init+0x2b0>)
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	4938      	ldr	r1, [pc, #224]	; (8005a18 <HAL_GPIO_Init+0x2b0>)
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	4313      	orrs	r3, r2
 800593c:	600b      	str	r3, [r1, #0]
 800593e:	e006      	b.n	800594e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005940:	4b35      	ldr	r3, [pc, #212]	; (8005a18 <HAL_GPIO_Init+0x2b0>)
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	43db      	mvns	r3, r3
 8005948:	4933      	ldr	r1, [pc, #204]	; (8005a18 <HAL_GPIO_Init+0x2b0>)
 800594a:	4013      	ands	r3, r2
 800594c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d006      	beq.n	8005968 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800595a:	4b2f      	ldr	r3, [pc, #188]	; (8005a18 <HAL_GPIO_Init+0x2b0>)
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	492e      	ldr	r1, [pc, #184]	; (8005a18 <HAL_GPIO_Init+0x2b0>)
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	4313      	orrs	r3, r2
 8005964:	604b      	str	r3, [r1, #4]
 8005966:	e006      	b.n	8005976 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005968:	4b2b      	ldr	r3, [pc, #172]	; (8005a18 <HAL_GPIO_Init+0x2b0>)
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	43db      	mvns	r3, r3
 8005970:	4929      	ldr	r1, [pc, #164]	; (8005a18 <HAL_GPIO_Init+0x2b0>)
 8005972:	4013      	ands	r3, r2
 8005974:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d006      	beq.n	8005990 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005982:	4b25      	ldr	r3, [pc, #148]	; (8005a18 <HAL_GPIO_Init+0x2b0>)
 8005984:	689a      	ldr	r2, [r3, #8]
 8005986:	4924      	ldr	r1, [pc, #144]	; (8005a18 <HAL_GPIO_Init+0x2b0>)
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	4313      	orrs	r3, r2
 800598c:	608b      	str	r3, [r1, #8]
 800598e:	e006      	b.n	800599e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005990:	4b21      	ldr	r3, [pc, #132]	; (8005a18 <HAL_GPIO_Init+0x2b0>)
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	43db      	mvns	r3, r3
 8005998:	491f      	ldr	r1, [pc, #124]	; (8005a18 <HAL_GPIO_Init+0x2b0>)
 800599a:	4013      	ands	r3, r2
 800599c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d006      	beq.n	80059b8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80059aa:	4b1b      	ldr	r3, [pc, #108]	; (8005a18 <HAL_GPIO_Init+0x2b0>)
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	491a      	ldr	r1, [pc, #104]	; (8005a18 <HAL_GPIO_Init+0x2b0>)
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60cb      	str	r3, [r1, #12]
 80059b6:	e006      	b.n	80059c6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80059b8:	4b17      	ldr	r3, [pc, #92]	; (8005a18 <HAL_GPIO_Init+0x2b0>)
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	43db      	mvns	r3, r3
 80059c0:	4915      	ldr	r1, [pc, #84]	; (8005a18 <HAL_GPIO_Init+0x2b0>)
 80059c2:	4013      	ands	r3, r2
 80059c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	3301      	adds	r3, #1
 80059ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	fa22 f303 	lsr.w	r3, r2, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f47f aed0 	bne.w	800577c <HAL_GPIO_Init+0x14>
  }
}
 80059dc:	bf00      	nop
 80059de:	372c      	adds	r7, #44	; 0x2c
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bc80      	pop	{r7}
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	10210000 	.word	0x10210000
 80059ec:	10110000 	.word	0x10110000
 80059f0:	10120000 	.word	0x10120000
 80059f4:	10310000 	.word	0x10310000
 80059f8:	10320000 	.word	0x10320000
 80059fc:	10220000 	.word	0x10220000
 8005a00:	40021000 	.word	0x40021000
 8005a04:	40010000 	.word	0x40010000
 8005a08:	40010800 	.word	0x40010800
 8005a0c:	40010c00 	.word	0x40010c00
 8005a10:	40011000 	.word	0x40011000
 8005a14:	40011400 	.word	0x40011400
 8005a18:	40010400 	.word	0x40010400

08005a1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	460b      	mov	r3, r1
 8005a26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	887b      	ldrh	r3, [r7, #2]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a34:	2301      	movs	r3, #1
 8005a36:	73fb      	strb	r3, [r7, #15]
 8005a38:	e001      	b.n	8005a3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bc80      	pop	{r7}
 8005a48:	4770      	bx	lr

08005a4a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	460b      	mov	r3, r1
 8005a54:	807b      	strh	r3, [r7, #2]
 8005a56:	4613      	mov	r3, r2
 8005a58:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a5a:	787b      	ldrb	r3, [r7, #1]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a60:	887a      	ldrh	r2, [r7, #2]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005a66:	e003      	b.n	8005a70 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005a68:	887b      	ldrh	r3, [r7, #2]
 8005a6a:	041a      	lsls	r2, r3, #16
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	611a      	str	r2, [r3, #16]
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bc80      	pop	{r7}
 8005a78:	4770      	bx	lr

08005a7a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	460b      	mov	r3, r1
 8005a84:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68da      	ldr	r2, [r3, #12]
 8005a8a:	887b      	ldrh	r3, [r7, #2]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a92:	887a      	ldrh	r2, [r7, #2]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8005a98:	e002      	b.n	8005aa0 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a9a:	887a      	ldrh	r2, [r7, #2]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	611a      	str	r2, [r3, #16]
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bc80      	pop	{r7}
 8005aa8:	4770      	bx	lr
	...

08005aac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e10f      	b.n	8005cde <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d106      	bne.n	8005ad8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7fe fb46 	bl	8004164 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2224      	movs	r2, #36	; 0x24
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0201 	bic.w	r2, r2, #1
 8005aee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005af0:	f001 fb40 	bl	8007174 <HAL_RCC_GetPCLK1Freq>
 8005af4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	4a7b      	ldr	r2, [pc, #492]	; (8005ce8 <HAL_I2C_Init+0x23c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d807      	bhi.n	8005b10 <HAL_I2C_Init+0x64>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4a7a      	ldr	r2, [pc, #488]	; (8005cec <HAL_I2C_Init+0x240>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	bf94      	ite	ls
 8005b08:	2301      	movls	r3, #1
 8005b0a:	2300      	movhi	r3, #0
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	e006      	b.n	8005b1e <HAL_I2C_Init+0x72>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4a77      	ldr	r2, [pc, #476]	; (8005cf0 <HAL_I2C_Init+0x244>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	bf94      	ite	ls
 8005b18:	2301      	movls	r3, #1
 8005b1a:	2300      	movhi	r3, #0
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e0db      	b.n	8005cde <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4a72      	ldr	r2, [pc, #456]	; (8005cf4 <HAL_I2C_Init+0x248>)
 8005b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2e:	0c9b      	lsrs	r3, r3, #18
 8005b30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	4a64      	ldr	r2, [pc, #400]	; (8005ce8 <HAL_I2C_Init+0x23c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d802      	bhi.n	8005b60 <HAL_I2C_Init+0xb4>
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	e009      	b.n	8005b74 <HAL_I2C_Init+0xc8>
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005b66:	fb02 f303 	mul.w	r3, r2, r3
 8005b6a:	4a63      	ldr	r2, [pc, #396]	; (8005cf8 <HAL_I2C_Init+0x24c>)
 8005b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b70:	099b      	lsrs	r3, r3, #6
 8005b72:	3301      	adds	r3, #1
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	6812      	ldr	r2, [r2, #0]
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005b86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	4956      	ldr	r1, [pc, #344]	; (8005ce8 <HAL_I2C_Init+0x23c>)
 8005b90:	428b      	cmp	r3, r1
 8005b92:	d80d      	bhi.n	8005bb0 <HAL_I2C_Init+0x104>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	1e59      	subs	r1, r3, #1
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	005b      	lsls	r3, r3, #1
 8005b9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ba8:	2b04      	cmp	r3, #4
 8005baa:	bf38      	it	cc
 8005bac:	2304      	movcc	r3, #4
 8005bae:	e04f      	b.n	8005c50 <HAL_I2C_Init+0x1a4>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d111      	bne.n	8005bdc <HAL_I2C_Init+0x130>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	1e58      	subs	r0, r3, #1
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6859      	ldr	r1, [r3, #4]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	440b      	add	r3, r1
 8005bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bca:	3301      	adds	r3, #1
 8005bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	bf0c      	ite	eq
 8005bd4:	2301      	moveq	r3, #1
 8005bd6:	2300      	movne	r3, #0
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	e012      	b.n	8005c02 <HAL_I2C_Init+0x156>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	1e58      	subs	r0, r3, #1
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6859      	ldr	r1, [r3, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	440b      	add	r3, r1
 8005bea:	0099      	lsls	r1, r3, #2
 8005bec:	440b      	add	r3, r1
 8005bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	bf0c      	ite	eq
 8005bfc:	2301      	moveq	r3, #1
 8005bfe:	2300      	movne	r3, #0
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <HAL_I2C_Init+0x15e>
 8005c06:	2301      	movs	r3, #1
 8005c08:	e022      	b.n	8005c50 <HAL_I2C_Init+0x1a4>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10e      	bne.n	8005c30 <HAL_I2C_Init+0x184>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	1e58      	subs	r0, r3, #1
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6859      	ldr	r1, [r3, #4]
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	440b      	add	r3, r1
 8005c20:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c24:	3301      	adds	r3, #1
 8005c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c2e:	e00f      	b.n	8005c50 <HAL_I2C_Init+0x1a4>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	1e58      	subs	r0, r3, #1
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6859      	ldr	r1, [r3, #4]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	440b      	add	r3, r1
 8005c3e:	0099      	lsls	r1, r3, #2
 8005c40:	440b      	add	r3, r1
 8005c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c46:	3301      	adds	r3, #1
 8005c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c50:	6879      	ldr	r1, [r7, #4]
 8005c52:	6809      	ldr	r1, [r1, #0]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	69da      	ldr	r2, [r3, #28]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005c7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	6911      	ldr	r1, [r2, #16]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	68d2      	ldr	r2, [r2, #12]
 8005c8a:	4311      	orrs	r1, r2
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6812      	ldr	r2, [r2, #0]
 8005c90:	430b      	orrs	r3, r1
 8005c92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	695a      	ldr	r2, [r3, #20]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f042 0201 	orr.w	r2, r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	000186a0 	.word	0x000186a0
 8005cec:	001e847f 	.word	0x001e847f
 8005cf0:	003d08ff 	.word	0x003d08ff
 8005cf4:	431bde83 	.word	0x431bde83
 8005cf8:	10624dd3 	.word	0x10624dd3

08005cfc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af02      	add	r7, sp, #8
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	4608      	mov	r0, r1
 8005d06:	4611      	mov	r1, r2
 8005d08:	461a      	mov	r2, r3
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	817b      	strh	r3, [r7, #10]
 8005d0e:	460b      	mov	r3, r1
 8005d10:	813b      	strh	r3, [r7, #8]
 8005d12:	4613      	mov	r3, r2
 8005d14:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d16:	f7ff fc17 	bl	8005548 <HAL_GetTick>
 8005d1a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b20      	cmp	r3, #32
 8005d26:	f040 80d9 	bne.w	8005edc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	2319      	movs	r3, #25
 8005d30:	2201      	movs	r2, #1
 8005d32:	496d      	ldr	r1, [pc, #436]	; (8005ee8 <HAL_I2C_Mem_Write+0x1ec>)
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 fc6b 	bl	8006610 <I2C_WaitOnFlagUntilTimeout>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005d40:	2302      	movs	r3, #2
 8005d42:	e0cc      	b.n	8005ede <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d101      	bne.n	8005d52 <HAL_I2C_Mem_Write+0x56>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	e0c5      	b.n	8005ede <HAL_I2C_Mem_Write+0x1e2>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d007      	beq.n	8005d78 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f042 0201 	orr.w	r2, r2, #1
 8005d76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2221      	movs	r2, #33	; 0x21
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2240      	movs	r2, #64	; 0x40
 8005d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6a3a      	ldr	r2, [r7, #32]
 8005da2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005da8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4a4d      	ldr	r2, [pc, #308]	; (8005eec <HAL_I2C_Mem_Write+0x1f0>)
 8005db8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005dba:	88f8      	ldrh	r0, [r7, #6]
 8005dbc:	893a      	ldrh	r2, [r7, #8]
 8005dbe:	8979      	ldrh	r1, [r7, #10]
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	9301      	str	r3, [sp, #4]
 8005dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	4603      	mov	r3, r0
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f000 fac6 	bl	800635c <I2C_RequestMemoryWrite>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d052      	beq.n	8005e7c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e081      	b.n	8005ede <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 fcec 	bl	80067bc <I2C_WaitOnTXEFlagUntilTimeout>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00d      	beq.n	8005e06 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	2b04      	cmp	r3, #4
 8005df0:	d107      	bne.n	8005e02 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e06b      	b.n	8005ede <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	781a      	ldrb	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e20:	3b01      	subs	r3, #1
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b04      	cmp	r3, #4
 8005e42:	d11b      	bne.n	8005e7c <HAL_I2C_Mem_Write+0x180>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d017      	beq.n	8005e7c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	781a      	ldrb	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	1c5a      	adds	r2, r3, #1
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e66:	3b01      	subs	r3, #1
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	3b01      	subs	r3, #1
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1aa      	bne.n	8005dda <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 fcd8 	bl	800683e <I2C_WaitOnBTFFlagUntilTimeout>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00d      	beq.n	8005eb0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e98:	2b04      	cmp	r3, #4
 8005e9a:	d107      	bne.n	8005eac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eaa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e016      	b.n	8005ede <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ebe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e000      	b.n	8005ede <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005edc:	2302      	movs	r3, #2
  }
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3718      	adds	r7, #24
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	00100002 	.word	0x00100002
 8005eec:	ffff0000 	.word	0xffff0000

08005ef0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b08c      	sub	sp, #48	; 0x30
 8005ef4:	af02      	add	r7, sp, #8
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	4608      	mov	r0, r1
 8005efa:	4611      	mov	r1, r2
 8005efc:	461a      	mov	r2, r3
 8005efe:	4603      	mov	r3, r0
 8005f00:	817b      	strh	r3, [r7, #10]
 8005f02:	460b      	mov	r3, r1
 8005f04:	813b      	strh	r3, [r7, #8]
 8005f06:	4613      	mov	r3, r2
 8005f08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f0a:	f7ff fb1d 	bl	8005548 <HAL_GetTick>
 8005f0e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b20      	cmp	r3, #32
 8005f1a:	f040 8218 	bne.w	800634e <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	2319      	movs	r3, #25
 8005f24:	2201      	movs	r2, #1
 8005f26:	4981      	ldr	r1, [pc, #516]	; (800612c <HAL_I2C_Mem_Read+0x23c>)
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f000 fb71 	bl	8006610 <I2C_WaitOnFlagUntilTimeout>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005f34:	2302      	movs	r3, #2
 8005f36:	e20b      	b.n	8006350 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d101      	bne.n	8005f46 <HAL_I2C_Mem_Read+0x56>
 8005f42:	2302      	movs	r3, #2
 8005f44:	e204      	b.n	8006350 <HAL_I2C_Mem_Read+0x460>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0301 	and.w	r3, r3, #1
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d007      	beq.n	8005f6c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f042 0201 	orr.w	r2, r2, #1
 8005f6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2222      	movs	r2, #34	; 0x22
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2240      	movs	r2, #64	; 0x40
 8005f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005f9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4a61      	ldr	r2, [pc, #388]	; (8006130 <HAL_I2C_Mem_Read+0x240>)
 8005fac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005fae:	88f8      	ldrh	r0, [r7, #6]
 8005fb0:	893a      	ldrh	r2, [r7, #8]
 8005fb2:	8979      	ldrh	r1, [r7, #10]
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	9301      	str	r3, [sp, #4]
 8005fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 fa56 	bl	8006470 <I2C_RequestMemoryRead>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e1c0      	b.n	8006350 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d113      	bne.n	8005ffe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	623b      	str	r3, [r7, #32]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	623b      	str	r3, [r7, #32]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	623b      	str	r3, [r7, #32]
 8005fea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ffa:	601a      	str	r2, [r3, #0]
 8005ffc:	e194      	b.n	8006328 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006002:	2b01      	cmp	r3, #1
 8006004:	d11d      	bne.n	8006042 <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006014:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006016:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006018:	2300      	movs	r3, #0
 800601a:	61fb      	str	r3, [r7, #28]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	61fb      	str	r3, [r7, #28]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	61fb      	str	r3, [r7, #28]
 800602c:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800603c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800603e:	b662      	cpsie	i
 8006040:	e172      	b.n	8006328 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006046:	2b02      	cmp	r3, #2
 8006048:	d11d      	bne.n	8006086 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006058:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800605a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800605c:	2300      	movs	r3, #0
 800605e:	61bb      	str	r3, [r7, #24]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	61bb      	str	r3, [r7, #24]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	61bb      	str	r3, [r7, #24]
 8006070:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006080:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006082:	b662      	cpsie	i
 8006084:	e150      	b.n	8006328 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006094:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006096:	2300      	movs	r3, #0
 8006098:	617b      	str	r3, [r7, #20]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	617b      	str	r3, [r7, #20]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	617b      	str	r3, [r7, #20]
 80060aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80060ac:	e13c      	b.n	8006328 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b2:	2b03      	cmp	r3, #3
 80060b4:	f200 80f5 	bhi.w	80062a2 <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d123      	bne.n	8006108 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 fbfb 	bl	80068c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e13d      	b.n	8006350 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	691a      	ldr	r2, [r3, #16]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060de:	b2d2      	uxtb	r2, r2
 80060e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e6:	1c5a      	adds	r2, r3, #1
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f0:	3b01      	subs	r3, #1
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	3b01      	subs	r3, #1
 8006100:	b29a      	uxth	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006106:	e10f      	b.n	8006328 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800610c:	2b02      	cmp	r3, #2
 800610e:	d150      	bne.n	80061b2 <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006116:	2200      	movs	r2, #0
 8006118:	4906      	ldr	r1, [pc, #24]	; (8006134 <HAL_I2C_Mem_Read+0x244>)
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 fa78 	bl	8006610 <I2C_WaitOnFlagUntilTimeout>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d008      	beq.n	8006138 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e112      	b.n	8006350 <HAL_I2C_Mem_Read+0x460>
 800612a:	bf00      	nop
 800612c:	00100002 	.word	0x00100002
 8006130:	ffff0000 	.word	0xffff0000
 8006134:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006138:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006148:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	691a      	ldr	r2, [r3, #16]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	b2d2      	uxtb	r2, r2
 8006156:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615c:	1c5a      	adds	r2, r3, #1
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006166:	3b01      	subs	r3, #1
 8006168:	b29a      	uxth	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006172:	b29b      	uxth	r3, r3
 8006174:	3b01      	subs	r3, #1
 8006176:	b29a      	uxth	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800617c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	691a      	ldr	r2, [r3, #16]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619a:	3b01      	subs	r3, #1
 800619c:	b29a      	uxth	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	3b01      	subs	r3, #1
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061b0:	e0ba      	b.n	8006328 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b8:	2200      	movs	r2, #0
 80061ba:	4967      	ldr	r1, [pc, #412]	; (8006358 <HAL_I2C_Mem_Read+0x468>)
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 fa27 	bl	8006610 <I2C_WaitOnFlagUntilTimeout>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e0c1      	b.n	8006350 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80061dc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	691a      	ldr	r2, [r3, #16]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e8:	b2d2      	uxtb	r2, r2
 80061ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	1c5a      	adds	r2, r3, #1
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061fa:	3b01      	subs	r3, #1
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006206:	b29b      	uxth	r3, r3
 8006208:	3b01      	subs	r3, #1
 800620a:	b29a      	uxth	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006216:	2200      	movs	r2, #0
 8006218:	494f      	ldr	r1, [pc, #316]	; (8006358 <HAL_I2C_Mem_Read+0x468>)
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 f9f8 	bl	8006610 <I2C_WaitOnFlagUntilTimeout>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e092      	b.n	8006350 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006238:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	691a      	ldr	r2, [r3, #16]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006244:	b2d2      	uxtb	r2, r2
 8006246:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624c:	1c5a      	adds	r2, r3, #1
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006256:	3b01      	subs	r3, #1
 8006258:	b29a      	uxth	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006262:	b29b      	uxth	r3, r3
 8006264:	3b01      	subs	r3, #1
 8006266:	b29a      	uxth	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800626c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	691a      	ldr	r2, [r3, #16]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006278:	b2d2      	uxtb	r2, r2
 800627a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800628a:	3b01      	subs	r3, #1
 800628c:	b29a      	uxth	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006296:	b29b      	uxth	r3, r3
 8006298:	3b01      	subs	r3, #1
 800629a:	b29a      	uxth	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062a0:	e042      	b.n	8006328 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 fb0a 	bl	80068c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e04c      	b.n	8006350 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	691a      	ldr	r2, [r3, #16]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	b2d2      	uxtb	r2, r2
 80062c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d2:	3b01      	subs	r3, #1
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062de:	b29b      	uxth	r3, r3
 80062e0:	3b01      	subs	r3, #1
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	f003 0304 	and.w	r3, r3, #4
 80062f2:	2b04      	cmp	r3, #4
 80062f4:	d118      	bne.n	8006328 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	691a      	ldr	r2, [r3, #16]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	b2d2      	uxtb	r2, r2
 8006302:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	1c5a      	adds	r2, r3, #1
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006312:	3b01      	subs	r3, #1
 8006314:	b29a      	uxth	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800631e:	b29b      	uxth	r3, r3
 8006320:	3b01      	subs	r3, #1
 8006322:	b29a      	uxth	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800632c:	2b00      	cmp	r3, #0
 800632e:	f47f aebe 	bne.w	80060ae <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2220      	movs	r2, #32
 8006336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	e000      	b.n	8006350 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 800634e:	2302      	movs	r3, #2
  }
}
 8006350:	4618      	mov	r0, r3
 8006352:	3728      	adds	r7, #40	; 0x28
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	00010004 	.word	0x00010004

0800635c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b088      	sub	sp, #32
 8006360:	af02      	add	r7, sp, #8
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	4608      	mov	r0, r1
 8006366:	4611      	mov	r1, r2
 8006368:	461a      	mov	r2, r3
 800636a:	4603      	mov	r3, r0
 800636c:	817b      	strh	r3, [r7, #10]
 800636e:	460b      	mov	r3, r1
 8006370:	813b      	strh	r3, [r7, #8]
 8006372:	4613      	mov	r3, r2
 8006374:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006384:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	2200      	movs	r2, #0
 800638e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 f93c 	bl	8006610 <I2C_WaitOnFlagUntilTimeout>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e05f      	b.n	8006462 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80063a2:	897b      	ldrh	r3, [r7, #10]
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	461a      	mov	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80063b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	6a3a      	ldr	r2, [r7, #32]
 80063b6:	492d      	ldr	r1, [pc, #180]	; (800646c <I2C_RequestMemoryWrite+0x110>)
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f000 f980 	bl	80066be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e04c      	b.n	8006462 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063c8:	2300      	movs	r3, #0
 80063ca:	617b      	str	r3, [r7, #20]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	617b      	str	r3, [r7, #20]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	617b      	str	r3, [r7, #20]
 80063dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e0:	6a39      	ldr	r1, [r7, #32]
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f000 f9ea 	bl	80067bc <I2C_WaitOnTXEFlagUntilTimeout>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00d      	beq.n	800640a <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d107      	bne.n	8006406 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006404:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e02b      	b.n	8006462 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800640a:	88fb      	ldrh	r3, [r7, #6]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d105      	bne.n	800641c <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006410:	893b      	ldrh	r3, [r7, #8]
 8006412:	b2da      	uxtb	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	611a      	str	r2, [r3, #16]
 800641a:	e021      	b.n	8006460 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800641c:	893b      	ldrh	r3, [r7, #8]
 800641e:	0a1b      	lsrs	r3, r3, #8
 8006420:	b29b      	uxth	r3, r3
 8006422:	b2da      	uxtb	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800642a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800642c:	6a39      	ldr	r1, [r7, #32]
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 f9c4 	bl	80067bc <I2C_WaitOnTXEFlagUntilTimeout>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00d      	beq.n	8006456 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	2b04      	cmp	r3, #4
 8006440:	d107      	bne.n	8006452 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006450:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e005      	b.n	8006462 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006456:	893b      	ldrh	r3, [r7, #8]
 8006458:	b2da      	uxtb	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	00010002 	.word	0x00010002

08006470 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b088      	sub	sp, #32
 8006474:	af02      	add	r7, sp, #8
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	4608      	mov	r0, r1
 800647a:	4611      	mov	r1, r2
 800647c:	461a      	mov	r2, r3
 800647e:	4603      	mov	r3, r0
 8006480:	817b      	strh	r3, [r7, #10]
 8006482:	460b      	mov	r3, r1
 8006484:	813b      	strh	r3, [r7, #8]
 8006486:	4613      	mov	r3, r2
 8006488:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006498:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 f8aa 	bl	8006610 <I2C_WaitOnFlagUntilTimeout>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e09e      	b.n	8006604 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064c6:	897b      	ldrh	r3, [r7, #10]
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	461a      	mov	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80064d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	6a3a      	ldr	r2, [r7, #32]
 80064da:	494c      	ldr	r1, [pc, #304]	; (800660c <I2C_RequestMemoryRead+0x19c>)
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 f8ee 	bl	80066be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e08b      	b.n	8006604 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ec:	2300      	movs	r3, #0
 80064ee:	617b      	str	r3, [r7, #20]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	617b      	str	r3, [r7, #20]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	617b      	str	r3, [r7, #20]
 8006500:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006504:	6a39      	ldr	r1, [r7, #32]
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 f958 	bl	80067bc <I2C_WaitOnTXEFlagUntilTimeout>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00d      	beq.n	800652e <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	2b04      	cmp	r3, #4
 8006518:	d107      	bne.n	800652a <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006528:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e06a      	b.n	8006604 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800652e:	88fb      	ldrh	r3, [r7, #6]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d105      	bne.n	8006540 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006534:	893b      	ldrh	r3, [r7, #8]
 8006536:	b2da      	uxtb	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	611a      	str	r2, [r3, #16]
 800653e:	e021      	b.n	8006584 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006540:	893b      	ldrh	r3, [r7, #8]
 8006542:	0a1b      	lsrs	r3, r3, #8
 8006544:	b29b      	uxth	r3, r3
 8006546:	b2da      	uxtb	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800654e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006550:	6a39      	ldr	r1, [r7, #32]
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 f932 	bl	80067bc <I2C_WaitOnTXEFlagUntilTimeout>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00d      	beq.n	800657a <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	2b04      	cmp	r3, #4
 8006564:	d107      	bne.n	8006576 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006574:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e044      	b.n	8006604 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800657a:	893b      	ldrh	r3, [r7, #8]
 800657c:	b2da      	uxtb	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006586:	6a39      	ldr	r1, [r7, #32]
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f000 f917 	bl	80067bc <I2C_WaitOnTXEFlagUntilTimeout>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00d      	beq.n	80065b0 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006598:	2b04      	cmp	r3, #4
 800659a:	d107      	bne.n	80065ac <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e029      	b.n	8006604 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f000 f81f 	bl	8006610 <I2C_WaitOnFlagUntilTimeout>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e013      	b.n	8006604 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80065dc:	897b      	ldrh	r3, [r7, #10]
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	f043 0301 	orr.w	r3, r3, #1
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	6a3a      	ldr	r2, [r7, #32]
 80065f0:	4906      	ldr	r1, [pc, #24]	; (800660c <I2C_RequestMemoryRead+0x19c>)
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 f863 	bl	80066be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e000      	b.n	8006604 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3718      	adds	r7, #24
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	00010002 	.word	0x00010002

08006610 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	603b      	str	r3, [r7, #0]
 800661c:	4613      	mov	r3, r2
 800661e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006620:	e025      	b.n	800666e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006628:	d021      	beq.n	800666e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800662a:	f7fe ff8d 	bl	8005548 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	429a      	cmp	r2, r3
 8006638:	d302      	bcc.n	8006640 <I2C_WaitOnFlagUntilTimeout+0x30>
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d116      	bne.n	800666e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2220      	movs	r2, #32
 800664a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665a:	f043 0220 	orr.w	r2, r3, #32
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e023      	b.n	80066b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	0c1b      	lsrs	r3, r3, #16
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b01      	cmp	r3, #1
 8006676:	d10d      	bne.n	8006694 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	43da      	mvns	r2, r3
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	4013      	ands	r3, r2
 8006684:	b29b      	uxth	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	bf0c      	ite	eq
 800668a:	2301      	moveq	r3, #1
 800668c:	2300      	movne	r3, #0
 800668e:	b2db      	uxtb	r3, r3
 8006690:	461a      	mov	r2, r3
 8006692:	e00c      	b.n	80066ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	43da      	mvns	r2, r3
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	4013      	ands	r3, r2
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	bf0c      	ite	eq
 80066a6:	2301      	moveq	r3, #1
 80066a8:	2300      	movne	r3, #0
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	461a      	mov	r2, r3
 80066ae:	79fb      	ldrb	r3, [r7, #7]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d0b6      	beq.n	8006622 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b084      	sub	sp, #16
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	60f8      	str	r0, [r7, #12]
 80066c6:	60b9      	str	r1, [r7, #8]
 80066c8:	607a      	str	r2, [r7, #4]
 80066ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066cc:	e051      	b.n	8006772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066dc:	d123      	bne.n	8006726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2220      	movs	r2, #32
 8006702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006712:	f043 0204 	orr.w	r2, r3, #4
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e046      	b.n	80067b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800672c:	d021      	beq.n	8006772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800672e:	f7fe ff0b 	bl	8005548 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	429a      	cmp	r2, r3
 800673c:	d302      	bcc.n	8006744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d116      	bne.n	8006772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2220      	movs	r2, #32
 800674e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675e:	f043 0220 	orr.w	r2, r3, #32
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e020      	b.n	80067b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	0c1b      	lsrs	r3, r3, #16
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b01      	cmp	r3, #1
 800677a:	d10c      	bne.n	8006796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	43da      	mvns	r2, r3
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	4013      	ands	r3, r2
 8006788:	b29b      	uxth	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	bf14      	ite	ne
 800678e:	2301      	movne	r3, #1
 8006790:	2300      	moveq	r3, #0
 8006792:	b2db      	uxtb	r3, r3
 8006794:	e00b      	b.n	80067ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	43da      	mvns	r2, r3
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	4013      	ands	r3, r2
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	bf14      	ite	ne
 80067a8:	2301      	movne	r3, #1
 80067aa:	2300      	moveq	r3, #0
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d18d      	bne.n	80066ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067c8:	e02d      	b.n	8006826 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f000 f8ce 	bl	800696c <I2C_IsAcknowledgeFailed>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d001      	beq.n	80067da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e02d      	b.n	8006836 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067e0:	d021      	beq.n	8006826 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067e2:	f7fe feb1 	bl	8005548 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d302      	bcc.n	80067f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d116      	bne.n	8006826 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2220      	movs	r2, #32
 8006802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006812:	f043 0220 	orr.w	r2, r3, #32
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e007      	b.n	8006836 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006830:	2b80      	cmp	r3, #128	; 0x80
 8006832:	d1ca      	bne.n	80067ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b084      	sub	sp, #16
 8006842:	af00      	add	r7, sp, #0
 8006844:	60f8      	str	r0, [r7, #12]
 8006846:	60b9      	str	r1, [r7, #8]
 8006848:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800684a:	e02d      	b.n	80068a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f000 f88d 	bl	800696c <I2C_IsAcknowledgeFailed>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e02d      	b.n	80068b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006862:	d021      	beq.n	80068a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006864:	f7fe fe70 	bl	8005548 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	429a      	cmp	r2, r3
 8006872:	d302      	bcc.n	800687a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d116      	bne.n	80068a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2220      	movs	r2, #32
 8006884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006894:	f043 0220 	orr.w	r2, r3, #32
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e007      	b.n	80068b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	f003 0304 	and.w	r3, r3, #4
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	d1ca      	bne.n	800684c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068cc:	e042      	b.n	8006954 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	f003 0310 	and.w	r3, r3, #16
 80068d8:	2b10      	cmp	r3, #16
 80068da:	d119      	bne.n	8006910 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f06f 0210 	mvn.w	r2, #16
 80068e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2220      	movs	r2, #32
 80068f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e029      	b.n	8006964 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006910:	f7fe fe1a 	bl	8005548 <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	429a      	cmp	r2, r3
 800691e:	d302      	bcc.n	8006926 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d116      	bne.n	8006954 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2220      	movs	r2, #32
 8006930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006940:	f043 0220 	orr.w	r2, r3, #32
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e007      	b.n	8006964 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695e:	2b40      	cmp	r3, #64	; 0x40
 8006960:	d1b5      	bne.n	80068ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800697e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006982:	d11b      	bne.n	80069bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800698c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2220      	movs	r2, #32
 8006998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a8:	f043 0204 	orr.w	r2, r3, #4
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e000      	b.n	80069be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	370c      	adds	r7, #12
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bc80      	pop	{r7}
 80069c6:	4770      	bx	lr

080069c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e26c      	b.n	8006eb4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 8087 	beq.w	8006af6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80069e8:	4b92      	ldr	r3, [pc, #584]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f003 030c 	and.w	r3, r3, #12
 80069f0:	2b04      	cmp	r3, #4
 80069f2:	d00c      	beq.n	8006a0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80069f4:	4b8f      	ldr	r3, [pc, #572]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f003 030c 	and.w	r3, r3, #12
 80069fc:	2b08      	cmp	r3, #8
 80069fe:	d112      	bne.n	8006a26 <HAL_RCC_OscConfig+0x5e>
 8006a00:	4b8c      	ldr	r3, [pc, #560]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a0c:	d10b      	bne.n	8006a26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a0e:	4b89      	ldr	r3, [pc, #548]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d06c      	beq.n	8006af4 <HAL_RCC_OscConfig+0x12c>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d168      	bne.n	8006af4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e246      	b.n	8006eb4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a2e:	d106      	bne.n	8006a3e <HAL_RCC_OscConfig+0x76>
 8006a30:	4b80      	ldr	r3, [pc, #512]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a7f      	ldr	r2, [pc, #508]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a3a:	6013      	str	r3, [r2, #0]
 8006a3c:	e02e      	b.n	8006a9c <HAL_RCC_OscConfig+0xd4>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10c      	bne.n	8006a60 <HAL_RCC_OscConfig+0x98>
 8006a46:	4b7b      	ldr	r3, [pc, #492]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a7a      	ldr	r2, [pc, #488]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a50:	6013      	str	r3, [r2, #0]
 8006a52:	4b78      	ldr	r3, [pc, #480]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a77      	ldr	r2, [pc, #476]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	e01d      	b.n	8006a9c <HAL_RCC_OscConfig+0xd4>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a68:	d10c      	bne.n	8006a84 <HAL_RCC_OscConfig+0xbc>
 8006a6a:	4b72      	ldr	r3, [pc, #456]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a71      	ldr	r2, [pc, #452]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a74:	6013      	str	r3, [r2, #0]
 8006a76:	4b6f      	ldr	r3, [pc, #444]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a6e      	ldr	r2, [pc, #440]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a80:	6013      	str	r3, [r2, #0]
 8006a82:	e00b      	b.n	8006a9c <HAL_RCC_OscConfig+0xd4>
 8006a84:	4b6b      	ldr	r3, [pc, #428]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a6a      	ldr	r2, [pc, #424]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a8e:	6013      	str	r3, [r2, #0]
 8006a90:	4b68      	ldr	r3, [pc, #416]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a67      	ldr	r2, [pc, #412]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d013      	beq.n	8006acc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aa4:	f7fe fd50 	bl	8005548 <HAL_GetTick>
 8006aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aaa:	e008      	b.n	8006abe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006aac:	f7fe fd4c 	bl	8005548 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b64      	cmp	r3, #100	; 0x64
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e1fa      	b.n	8006eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006abe:	4b5d      	ldr	r3, [pc, #372]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d0f0      	beq.n	8006aac <HAL_RCC_OscConfig+0xe4>
 8006aca:	e014      	b.n	8006af6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006acc:	f7fe fd3c 	bl	8005548 <HAL_GetTick>
 8006ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ad2:	e008      	b.n	8006ae6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ad4:	f7fe fd38 	bl	8005548 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	2b64      	cmp	r3, #100	; 0x64
 8006ae0:	d901      	bls.n	8006ae6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e1e6      	b.n	8006eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ae6:	4b53      	ldr	r3, [pc, #332]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1f0      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x10c>
 8006af2:	e000      	b.n	8006af6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d063      	beq.n	8006bca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b02:	4b4c      	ldr	r3, [pc, #304]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	f003 030c 	and.w	r3, r3, #12
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00b      	beq.n	8006b26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006b0e:	4b49      	ldr	r3, [pc, #292]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f003 030c 	and.w	r3, r3, #12
 8006b16:	2b08      	cmp	r3, #8
 8006b18:	d11c      	bne.n	8006b54 <HAL_RCC_OscConfig+0x18c>
 8006b1a:	4b46      	ldr	r3, [pc, #280]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d116      	bne.n	8006b54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b26:	4b43      	ldr	r3, [pc, #268]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d005      	beq.n	8006b3e <HAL_RCC_OscConfig+0x176>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d001      	beq.n	8006b3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e1ba      	b.n	8006eb4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b3e:	4b3d      	ldr	r3, [pc, #244]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	00db      	lsls	r3, r3, #3
 8006b4c:	4939      	ldr	r1, [pc, #228]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b52:	e03a      	b.n	8006bca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d020      	beq.n	8006b9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b5c:	4b36      	ldr	r3, [pc, #216]	; (8006c38 <HAL_RCC_OscConfig+0x270>)
 8006b5e:	2201      	movs	r2, #1
 8006b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b62:	f7fe fcf1 	bl	8005548 <HAL_GetTick>
 8006b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b68:	e008      	b.n	8006b7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b6a:	f7fe fced 	bl	8005548 <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d901      	bls.n	8006b7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e19b      	b.n	8006eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b7c:	4b2d      	ldr	r3, [pc, #180]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0302 	and.w	r3, r3, #2
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d0f0      	beq.n	8006b6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b88:	4b2a      	ldr	r3, [pc, #168]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	00db      	lsls	r3, r3, #3
 8006b96:	4927      	ldr	r1, [pc, #156]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	600b      	str	r3, [r1, #0]
 8006b9c:	e015      	b.n	8006bca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b9e:	4b26      	ldr	r3, [pc, #152]	; (8006c38 <HAL_RCC_OscConfig+0x270>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ba4:	f7fe fcd0 	bl	8005548 <HAL_GetTick>
 8006ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006baa:	e008      	b.n	8006bbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bac:	f7fe fccc 	bl	8005548 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e17a      	b.n	8006eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bbe:	4b1d      	ldr	r3, [pc, #116]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1f0      	bne.n	8006bac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0308 	and.w	r3, r3, #8
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d03a      	beq.n	8006c4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d019      	beq.n	8006c12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bde:	4b17      	ldr	r3, [pc, #92]	; (8006c3c <HAL_RCC_OscConfig+0x274>)
 8006be0:	2201      	movs	r2, #1
 8006be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006be4:	f7fe fcb0 	bl	8005548 <HAL_GetTick>
 8006be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bea:	e008      	b.n	8006bfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bec:	f7fe fcac 	bl	8005548 <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d901      	bls.n	8006bfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e15a      	b.n	8006eb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bfe:	4b0d      	ldr	r3, [pc, #52]	; (8006c34 <HAL_RCC_OscConfig+0x26c>)
 8006c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d0f0      	beq.n	8006bec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006c0a:	2001      	movs	r0, #1
 8006c0c:	f000 fac6 	bl	800719c <RCC_Delay>
 8006c10:	e01c      	b.n	8006c4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c12:	4b0a      	ldr	r3, [pc, #40]	; (8006c3c <HAL_RCC_OscConfig+0x274>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c18:	f7fe fc96 	bl	8005548 <HAL_GetTick>
 8006c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c1e:	e00f      	b.n	8006c40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c20:	f7fe fc92 	bl	8005548 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d908      	bls.n	8006c40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e140      	b.n	8006eb4 <HAL_RCC_OscConfig+0x4ec>
 8006c32:	bf00      	nop
 8006c34:	40021000 	.word	0x40021000
 8006c38:	42420000 	.word	0x42420000
 8006c3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c40:	4b9e      	ldr	r3, [pc, #632]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	f003 0302 	and.w	r3, r3, #2
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e9      	bne.n	8006c20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0304 	and.w	r3, r3, #4
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 80a6 	beq.w	8006da6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c5e:	4b97      	ldr	r3, [pc, #604]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006c60:	69db      	ldr	r3, [r3, #28]
 8006c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10d      	bne.n	8006c86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c6a:	4b94      	ldr	r3, [pc, #592]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	4a93      	ldr	r2, [pc, #588]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c74:	61d3      	str	r3, [r2, #28]
 8006c76:	4b91      	ldr	r3, [pc, #580]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c7e:	60bb      	str	r3, [r7, #8]
 8006c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c82:	2301      	movs	r3, #1
 8006c84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c86:	4b8e      	ldr	r3, [pc, #568]	; (8006ec0 <HAL_RCC_OscConfig+0x4f8>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d118      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c92:	4b8b      	ldr	r3, [pc, #556]	; (8006ec0 <HAL_RCC_OscConfig+0x4f8>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a8a      	ldr	r2, [pc, #552]	; (8006ec0 <HAL_RCC_OscConfig+0x4f8>)
 8006c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c9e:	f7fe fc53 	bl	8005548 <HAL_GetTick>
 8006ca2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ca4:	e008      	b.n	8006cb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ca6:	f7fe fc4f 	bl	8005548 <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	2b64      	cmp	r3, #100	; 0x64
 8006cb2:	d901      	bls.n	8006cb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e0fd      	b.n	8006eb4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cb8:	4b81      	ldr	r3, [pc, #516]	; (8006ec0 <HAL_RCC_OscConfig+0x4f8>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d0f0      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d106      	bne.n	8006cda <HAL_RCC_OscConfig+0x312>
 8006ccc:	4b7b      	ldr	r3, [pc, #492]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006cce:	6a1b      	ldr	r3, [r3, #32]
 8006cd0:	4a7a      	ldr	r2, [pc, #488]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006cd2:	f043 0301 	orr.w	r3, r3, #1
 8006cd6:	6213      	str	r3, [r2, #32]
 8006cd8:	e02d      	b.n	8006d36 <HAL_RCC_OscConfig+0x36e>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10c      	bne.n	8006cfc <HAL_RCC_OscConfig+0x334>
 8006ce2:	4b76      	ldr	r3, [pc, #472]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	4a75      	ldr	r2, [pc, #468]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006ce8:	f023 0301 	bic.w	r3, r3, #1
 8006cec:	6213      	str	r3, [r2, #32]
 8006cee:	4b73      	ldr	r3, [pc, #460]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	4a72      	ldr	r2, [pc, #456]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006cf4:	f023 0304 	bic.w	r3, r3, #4
 8006cf8:	6213      	str	r3, [r2, #32]
 8006cfa:	e01c      	b.n	8006d36 <HAL_RCC_OscConfig+0x36e>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	2b05      	cmp	r3, #5
 8006d02:	d10c      	bne.n	8006d1e <HAL_RCC_OscConfig+0x356>
 8006d04:	4b6d      	ldr	r3, [pc, #436]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	4a6c      	ldr	r2, [pc, #432]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006d0a:	f043 0304 	orr.w	r3, r3, #4
 8006d0e:	6213      	str	r3, [r2, #32]
 8006d10:	4b6a      	ldr	r3, [pc, #424]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	4a69      	ldr	r2, [pc, #420]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006d16:	f043 0301 	orr.w	r3, r3, #1
 8006d1a:	6213      	str	r3, [r2, #32]
 8006d1c:	e00b      	b.n	8006d36 <HAL_RCC_OscConfig+0x36e>
 8006d1e:	4b67      	ldr	r3, [pc, #412]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	4a66      	ldr	r2, [pc, #408]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006d24:	f023 0301 	bic.w	r3, r3, #1
 8006d28:	6213      	str	r3, [r2, #32]
 8006d2a:	4b64      	ldr	r3, [pc, #400]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	4a63      	ldr	r2, [pc, #396]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006d30:	f023 0304 	bic.w	r3, r3, #4
 8006d34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d015      	beq.n	8006d6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d3e:	f7fe fc03 	bl	8005548 <HAL_GetTick>
 8006d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d44:	e00a      	b.n	8006d5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d46:	f7fe fbff 	bl	8005548 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d901      	bls.n	8006d5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e0ab      	b.n	8006eb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d5c:	4b57      	ldr	r3, [pc, #348]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006d5e:	6a1b      	ldr	r3, [r3, #32]
 8006d60:	f003 0302 	and.w	r3, r3, #2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d0ee      	beq.n	8006d46 <HAL_RCC_OscConfig+0x37e>
 8006d68:	e014      	b.n	8006d94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d6a:	f7fe fbed 	bl	8005548 <HAL_GetTick>
 8006d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d70:	e00a      	b.n	8006d88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d72:	f7fe fbe9 	bl	8005548 <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d901      	bls.n	8006d88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e095      	b.n	8006eb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d88:	4b4c      	ldr	r3, [pc, #304]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1ee      	bne.n	8006d72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006d94:	7dfb      	ldrb	r3, [r7, #23]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d105      	bne.n	8006da6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d9a:	4b48      	ldr	r3, [pc, #288]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	4a47      	ldr	r2, [pc, #284]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006da4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 8081 	beq.w	8006eb2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006db0:	4b42      	ldr	r3, [pc, #264]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f003 030c 	and.w	r3, r3, #12
 8006db8:	2b08      	cmp	r3, #8
 8006dba:	d061      	beq.n	8006e80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	69db      	ldr	r3, [r3, #28]
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d146      	bne.n	8006e52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dc4:	4b3f      	ldr	r3, [pc, #252]	; (8006ec4 <HAL_RCC_OscConfig+0x4fc>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dca:	f7fe fbbd 	bl	8005548 <HAL_GetTick>
 8006dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dd0:	e008      	b.n	8006de4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dd2:	f7fe fbb9 	bl	8005548 <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d901      	bls.n	8006de4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e067      	b.n	8006eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006de4:	4b35      	ldr	r3, [pc, #212]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1f0      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006df8:	d108      	bne.n	8006e0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006dfa:	4b30      	ldr	r3, [pc, #192]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	492d      	ldr	r1, [pc, #180]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e0c:	4b2b      	ldr	r3, [pc, #172]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a19      	ldr	r1, [r3, #32]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1c:	430b      	orrs	r3, r1
 8006e1e:	4927      	ldr	r1, [pc, #156]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e24:	4b27      	ldr	r3, [pc, #156]	; (8006ec4 <HAL_RCC_OscConfig+0x4fc>)
 8006e26:	2201      	movs	r2, #1
 8006e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e2a:	f7fe fb8d 	bl	8005548 <HAL_GetTick>
 8006e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e30:	e008      	b.n	8006e44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e32:	f7fe fb89 	bl	8005548 <HAL_GetTick>
 8006e36:	4602      	mov	r2, r0
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d901      	bls.n	8006e44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e037      	b.n	8006eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e44:	4b1d      	ldr	r3, [pc, #116]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d0f0      	beq.n	8006e32 <HAL_RCC_OscConfig+0x46a>
 8006e50:	e02f      	b.n	8006eb2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e52:	4b1c      	ldr	r3, [pc, #112]	; (8006ec4 <HAL_RCC_OscConfig+0x4fc>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e58:	f7fe fb76 	bl	8005548 <HAL_GetTick>
 8006e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e5e:	e008      	b.n	8006e72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e60:	f7fe fb72 	bl	8005548 <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d901      	bls.n	8006e72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e020      	b.n	8006eb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e72:	4b12      	ldr	r3, [pc, #72]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1f0      	bne.n	8006e60 <HAL_RCC_OscConfig+0x498>
 8006e7e:	e018      	b.n	8006eb2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	69db      	ldr	r3, [r3, #28]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d101      	bne.n	8006e8c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e013      	b.n	8006eb4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006e8c:	4b0b      	ldr	r3, [pc, #44]	; (8006ebc <HAL_RCC_OscConfig+0x4f4>)
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d106      	bne.n	8006eae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d001      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e000      	b.n	8006eb4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3718      	adds	r7, #24
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	40021000 	.word	0x40021000
 8006ec0:	40007000 	.word	0x40007000
 8006ec4:	42420060 	.word	0x42420060

08006ec8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d101      	bne.n	8006edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e0d0      	b.n	800707e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006edc:	4b6a      	ldr	r3, [pc, #424]	; (8007088 <HAL_RCC_ClockConfig+0x1c0>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0307 	and.w	r3, r3, #7
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d910      	bls.n	8006f0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eea:	4b67      	ldr	r3, [pc, #412]	; (8007088 <HAL_RCC_ClockConfig+0x1c0>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f023 0207 	bic.w	r2, r3, #7
 8006ef2:	4965      	ldr	r1, [pc, #404]	; (8007088 <HAL_RCC_ClockConfig+0x1c0>)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006efa:	4b63      	ldr	r3, [pc, #396]	; (8007088 <HAL_RCC_ClockConfig+0x1c0>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0307 	and.w	r3, r3, #7
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d001      	beq.n	8006f0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e0b8      	b.n	800707e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0302 	and.w	r3, r3, #2
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d020      	beq.n	8006f5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0304 	and.w	r3, r3, #4
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d005      	beq.n	8006f30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f24:	4b59      	ldr	r3, [pc, #356]	; (800708c <HAL_RCC_ClockConfig+0x1c4>)
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	4a58      	ldr	r2, [pc, #352]	; (800708c <HAL_RCC_ClockConfig+0x1c4>)
 8006f2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006f2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0308 	and.w	r3, r3, #8
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d005      	beq.n	8006f48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f3c:	4b53      	ldr	r3, [pc, #332]	; (800708c <HAL_RCC_ClockConfig+0x1c4>)
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	4a52      	ldr	r2, [pc, #328]	; (800708c <HAL_RCC_ClockConfig+0x1c4>)
 8006f42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006f46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f48:	4b50      	ldr	r3, [pc, #320]	; (800708c <HAL_RCC_ClockConfig+0x1c4>)
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	494d      	ldr	r1, [pc, #308]	; (800708c <HAL_RCC_ClockConfig+0x1c4>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d040      	beq.n	8006fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d107      	bne.n	8006f7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f6e:	4b47      	ldr	r3, [pc, #284]	; (800708c <HAL_RCC_ClockConfig+0x1c4>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d115      	bne.n	8006fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e07f      	b.n	800707e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d107      	bne.n	8006f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f86:	4b41      	ldr	r3, [pc, #260]	; (800708c <HAL_RCC_ClockConfig+0x1c4>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d109      	bne.n	8006fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e073      	b.n	800707e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f96:	4b3d      	ldr	r3, [pc, #244]	; (800708c <HAL_RCC_ClockConfig+0x1c4>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0302 	and.w	r3, r3, #2
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d101      	bne.n	8006fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e06b      	b.n	800707e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fa6:	4b39      	ldr	r3, [pc, #228]	; (800708c <HAL_RCC_ClockConfig+0x1c4>)
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f023 0203 	bic.w	r2, r3, #3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	4936      	ldr	r1, [pc, #216]	; (800708c <HAL_RCC_ClockConfig+0x1c4>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006fb8:	f7fe fac6 	bl	8005548 <HAL_GetTick>
 8006fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fbe:	e00a      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fc0:	f7fe fac2 	bl	8005548 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d901      	bls.n	8006fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e053      	b.n	800707e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fd6:	4b2d      	ldr	r3, [pc, #180]	; (800708c <HAL_RCC_ClockConfig+0x1c4>)
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f003 020c 	and.w	r2, r3, #12
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d1eb      	bne.n	8006fc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006fe8:	4b27      	ldr	r3, [pc, #156]	; (8007088 <HAL_RCC_ClockConfig+0x1c0>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0307 	and.w	r3, r3, #7
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d210      	bcs.n	8007018 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ff6:	4b24      	ldr	r3, [pc, #144]	; (8007088 <HAL_RCC_ClockConfig+0x1c0>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f023 0207 	bic.w	r2, r3, #7
 8006ffe:	4922      	ldr	r1, [pc, #136]	; (8007088 <HAL_RCC_ClockConfig+0x1c0>)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	4313      	orrs	r3, r2
 8007004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007006:	4b20      	ldr	r3, [pc, #128]	; (8007088 <HAL_RCC_ClockConfig+0x1c0>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0307 	and.w	r3, r3, #7
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	429a      	cmp	r2, r3
 8007012:	d001      	beq.n	8007018 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e032      	b.n	800707e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0304 	and.w	r3, r3, #4
 8007020:	2b00      	cmp	r3, #0
 8007022:	d008      	beq.n	8007036 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007024:	4b19      	ldr	r3, [pc, #100]	; (800708c <HAL_RCC_ClockConfig+0x1c4>)
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	4916      	ldr	r1, [pc, #88]	; (800708c <HAL_RCC_ClockConfig+0x1c4>)
 8007032:	4313      	orrs	r3, r2
 8007034:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0308 	and.w	r3, r3, #8
 800703e:	2b00      	cmp	r3, #0
 8007040:	d009      	beq.n	8007056 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007042:	4b12      	ldr	r3, [pc, #72]	; (800708c <HAL_RCC_ClockConfig+0x1c4>)
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	00db      	lsls	r3, r3, #3
 8007050:	490e      	ldr	r1, [pc, #56]	; (800708c <HAL_RCC_ClockConfig+0x1c4>)
 8007052:	4313      	orrs	r3, r2
 8007054:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007056:	f000 f821 	bl	800709c <HAL_RCC_GetSysClockFreq>
 800705a:	4601      	mov	r1, r0
 800705c:	4b0b      	ldr	r3, [pc, #44]	; (800708c <HAL_RCC_ClockConfig+0x1c4>)
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	091b      	lsrs	r3, r3, #4
 8007062:	f003 030f 	and.w	r3, r3, #15
 8007066:	4a0a      	ldr	r2, [pc, #40]	; (8007090 <HAL_RCC_ClockConfig+0x1c8>)
 8007068:	5cd3      	ldrb	r3, [r2, r3]
 800706a:	fa21 f303 	lsr.w	r3, r1, r3
 800706e:	4a09      	ldr	r2, [pc, #36]	; (8007094 <HAL_RCC_ClockConfig+0x1cc>)
 8007070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007072:	4b09      	ldr	r3, [pc, #36]	; (8007098 <HAL_RCC_ClockConfig+0x1d0>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4618      	mov	r0, r3
 8007078:	f7fe fa24 	bl	80054c4 <HAL_InitTick>

  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	40022000 	.word	0x40022000
 800708c:	40021000 	.word	0x40021000
 8007090:	0800d364 	.word	0x0800d364
 8007094:	20000328 	.word	0x20000328
 8007098:	20000334 	.word	0x20000334

0800709c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800709c:	b490      	push	{r4, r7}
 800709e:	b08a      	sub	sp, #40	; 0x28
 80070a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80070a2:	4b2a      	ldr	r3, [pc, #168]	; (800714c <HAL_RCC_GetSysClockFreq+0xb0>)
 80070a4:	1d3c      	adds	r4, r7, #4
 80070a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80070a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80070ac:	4b28      	ldr	r3, [pc, #160]	; (8007150 <HAL_RCC_GetSysClockFreq+0xb4>)
 80070ae:	881b      	ldrh	r3, [r3, #0]
 80070b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80070b2:	2300      	movs	r3, #0
 80070b4:	61fb      	str	r3, [r7, #28]
 80070b6:	2300      	movs	r3, #0
 80070b8:	61bb      	str	r3, [r7, #24]
 80070ba:	2300      	movs	r3, #0
 80070bc:	627b      	str	r3, [r7, #36]	; 0x24
 80070be:	2300      	movs	r3, #0
 80070c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80070c2:	2300      	movs	r3, #0
 80070c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80070c6:	4b23      	ldr	r3, [pc, #140]	; (8007154 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	f003 030c 	and.w	r3, r3, #12
 80070d2:	2b04      	cmp	r3, #4
 80070d4:	d002      	beq.n	80070dc <HAL_RCC_GetSysClockFreq+0x40>
 80070d6:	2b08      	cmp	r3, #8
 80070d8:	d003      	beq.n	80070e2 <HAL_RCC_GetSysClockFreq+0x46>
 80070da:	e02d      	b.n	8007138 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80070dc:	4b1e      	ldr	r3, [pc, #120]	; (8007158 <HAL_RCC_GetSysClockFreq+0xbc>)
 80070de:	623b      	str	r3, [r7, #32]
      break;
 80070e0:	e02d      	b.n	800713e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	0c9b      	lsrs	r3, r3, #18
 80070e6:	f003 030f 	and.w	r3, r3, #15
 80070ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80070ee:	4413      	add	r3, r2
 80070f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80070f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d013      	beq.n	8007128 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007100:	4b14      	ldr	r3, [pc, #80]	; (8007154 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	0c5b      	lsrs	r3, r3, #17
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800710e:	4413      	add	r3, r2
 8007110:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007114:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	4a0f      	ldr	r2, [pc, #60]	; (8007158 <HAL_RCC_GetSysClockFreq+0xbc>)
 800711a:	fb02 f203 	mul.w	r2, r2, r3
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	fbb2 f3f3 	udiv	r3, r2, r3
 8007124:	627b      	str	r3, [r7, #36]	; 0x24
 8007126:	e004      	b.n	8007132 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	4a0c      	ldr	r2, [pc, #48]	; (800715c <HAL_RCC_GetSysClockFreq+0xc0>)
 800712c:	fb02 f303 	mul.w	r3, r2, r3
 8007130:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007134:	623b      	str	r3, [r7, #32]
      break;
 8007136:	e002      	b.n	800713e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007138:	4b07      	ldr	r3, [pc, #28]	; (8007158 <HAL_RCC_GetSysClockFreq+0xbc>)
 800713a:	623b      	str	r3, [r7, #32]
      break;
 800713c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800713e:	6a3b      	ldr	r3, [r7, #32]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3728      	adds	r7, #40	; 0x28
 8007144:	46bd      	mov	sp, r7
 8007146:	bc90      	pop	{r4, r7}
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	08007260 	.word	0x08007260
 8007150:	08007270 	.word	0x08007270
 8007154:	40021000 	.word	0x40021000
 8007158:	007a1200 	.word	0x007a1200
 800715c:	003d0900 	.word	0x003d0900

08007160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007164:	4b02      	ldr	r3, [pc, #8]	; (8007170 <HAL_RCC_GetHCLKFreq+0x10>)
 8007166:	681b      	ldr	r3, [r3, #0]
}
 8007168:	4618      	mov	r0, r3
 800716a:	46bd      	mov	sp, r7
 800716c:	bc80      	pop	{r7}
 800716e:	4770      	bx	lr
 8007170:	20000328 	.word	0x20000328

08007174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007178:	f7ff fff2 	bl	8007160 <HAL_RCC_GetHCLKFreq>
 800717c:	4601      	mov	r1, r0
 800717e:	4b05      	ldr	r3, [pc, #20]	; (8007194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	0a1b      	lsrs	r3, r3, #8
 8007184:	f003 0307 	and.w	r3, r3, #7
 8007188:	4a03      	ldr	r2, [pc, #12]	; (8007198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800718a:	5cd3      	ldrb	r3, [r2, r3]
 800718c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007190:	4618      	mov	r0, r3
 8007192:	bd80      	pop	{r7, pc}
 8007194:	40021000 	.word	0x40021000
 8007198:	0800d374 	.word	0x0800d374

0800719c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80071a4:	4b0a      	ldr	r3, [pc, #40]	; (80071d0 <RCC_Delay+0x34>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a0a      	ldr	r2, [pc, #40]	; (80071d4 <RCC_Delay+0x38>)
 80071aa:	fba2 2303 	umull	r2, r3, r2, r3
 80071ae:	0a5b      	lsrs	r3, r3, #9
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	fb02 f303 	mul.w	r3, r2, r3
 80071b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80071b8:	bf00      	nop
  }
  while (Delay --);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	1e5a      	subs	r2, r3, #1
 80071be:	60fa      	str	r2, [r7, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1f9      	bne.n	80071b8 <RCC_Delay+0x1c>
}
 80071c4:	bf00      	nop
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bc80      	pop	{r7}
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	20000328 	.word	0x20000328
 80071d4:	10624dd3 	.word	0x10624dd3

080071d8 <__libc_init_array>:
 80071d8:	b570      	push	{r4, r5, r6, lr}
 80071da:	2500      	movs	r5, #0
 80071dc:	4e0c      	ldr	r6, [pc, #48]	; (8007210 <__libc_init_array+0x38>)
 80071de:	4c0d      	ldr	r4, [pc, #52]	; (8007214 <__libc_init_array+0x3c>)
 80071e0:	1ba4      	subs	r4, r4, r6
 80071e2:	10a4      	asrs	r4, r4, #2
 80071e4:	42a5      	cmp	r5, r4
 80071e6:	d109      	bne.n	80071fc <__libc_init_array+0x24>
 80071e8:	f000 f82e 	bl	8007248 <_init>
 80071ec:	2500      	movs	r5, #0
 80071ee:	4e0a      	ldr	r6, [pc, #40]	; (8007218 <__libc_init_array+0x40>)
 80071f0:	4c0a      	ldr	r4, [pc, #40]	; (800721c <__libc_init_array+0x44>)
 80071f2:	1ba4      	subs	r4, r4, r6
 80071f4:	10a4      	asrs	r4, r4, #2
 80071f6:	42a5      	cmp	r5, r4
 80071f8:	d105      	bne.n	8007206 <__libc_init_array+0x2e>
 80071fa:	bd70      	pop	{r4, r5, r6, pc}
 80071fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007200:	4798      	blx	r3
 8007202:	3501      	adds	r5, #1
 8007204:	e7ee      	b.n	80071e4 <__libc_init_array+0xc>
 8007206:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800720a:	4798      	blx	r3
 800720c:	3501      	adds	r5, #1
 800720e:	e7f2      	b.n	80071f6 <__libc_init_array+0x1e>
 8007210:	0800dbf4 	.word	0x0800dbf4
 8007214:	0800dbf4 	.word	0x0800dbf4
 8007218:	0800dbf4 	.word	0x0800dbf4
 800721c:	0800dbfc 	.word	0x0800dbfc

08007220 <memcpy>:
 8007220:	b510      	push	{r4, lr}
 8007222:	1e43      	subs	r3, r0, #1
 8007224:	440a      	add	r2, r1
 8007226:	4291      	cmp	r1, r2
 8007228:	d100      	bne.n	800722c <memcpy+0xc>
 800722a:	bd10      	pop	{r4, pc}
 800722c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007230:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007234:	e7f7      	b.n	8007226 <memcpy+0x6>

08007236 <memset>:
 8007236:	4603      	mov	r3, r0
 8007238:	4402      	add	r2, r0
 800723a:	4293      	cmp	r3, r2
 800723c:	d100      	bne.n	8007240 <memset+0xa>
 800723e:	4770      	bx	lr
 8007240:	f803 1b01 	strb.w	r1, [r3], #1
 8007244:	e7f9      	b.n	800723a <memset+0x4>
	...

08007248 <_init>:
 8007248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724a:	bf00      	nop
 800724c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800724e:	bc08      	pop	{r3}
 8007250:	469e      	mov	lr, r3
 8007252:	4770      	bx	lr

08007254 <_fini>:
 8007254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007256:	bf00      	nop
 8007258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800725a:	bc08      	pop	{r3}
 800725c:	469e      	mov	lr, r3
 800725e:	4770      	bx	lr
