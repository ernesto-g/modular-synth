
ChordMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a374  08004900  08004900  00014900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec74  0800ec74  000202ac  2**0
                  CONTENTS
  4 .ARM          00000000  0800ec74  0800ec74  000202ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ec74  0800ec74  000202ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ec74  0800ec74  0001ec74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec7c  0800ec7c  0001ec7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ac  20000000  0800ec80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004568  200002ac  0800ef2c  000202ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004814  0800ef2c  00024814  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026b84  00000000  00000000  000202d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004e02  00000000  00000000  00046e59  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00010a53  00000000  00000000  0004bc5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000c30  00000000  00000000  0005c6b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000039e0  00000000  00000000  0005d2e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00018840  00000000  00000000  00060cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000ef6b  00000000  00000000  00079500  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0007943a  00000000  00000000  0008846b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001018a5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b80  00000000  00000000  00101920  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002ac 	.word	0x200002ac
 8000128:	00000000 	.word	0x00000000
 800012c:	080048e8 	.word	0x080048e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002b0 	.word	0x200002b0
 8000148:	080048e8 	.word	0x080048e8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <_ZN6braids16AnalogOscillator21ComputePhaseIncrementEs>:
 8000160:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000164:	4299      	cmp	r1, r3
 8000166:	bfa8      	it	ge
 8000168:	4619      	movge	r1, r3
 800016a:	2000      	movs	r0, #0
 800016c:	b510      	push	{r4, lr}
 800016e:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
 8000172:	f511 61c0 	adds.w	r1, r1, #1536	; 0x600
 8000176:	f100 0001 	add.w	r0, r0, #1
 800017a:	d4fa      	bmi.n	8000172 <_ZN6braids16AnalogOscillator21ComputePhaseIncrementEs+0x12>
 800017c:	4c07      	ldr	r4, [pc, #28]	; (800019c <_ZN6braids16AnalogOscillator21ComputePhaseIncrementEs+0x3c>)
 800017e:	110a      	asrs	r2, r1, #4
 8000180:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 8000184:	3201      	adds	r2, #1
 8000186:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800018a:	f001 010f 	and.w	r1, r1, #15
 800018e:	1ad2      	subs	r2, r2, r3
 8000190:	4351      	muls	r1, r2
 8000192:	eb03 1121 	add.w	r1, r3, r1, asr #4
 8000196:	fa21 f000 	lsr.w	r0, r1, r0
 800019a:	bd10      	pop	{r4, pc}
 800019c:	08005144 	.word	0x08005144

080001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>:
 80001a0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001a4:	4604      	mov	r4, r0
 80001a6:	469a      	mov	sl, r3
 80001a8:	7f00      	ldrb	r0, [r0, #28]
 80001aa:	4b20      	ldr	r3, [pc, #128]	; (800022c <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x8c>)
 80001ac:	4691      	mov	r9, r2
 80001ae:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]
 80001b2:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 80001b6:	7f63      	ldrb	r3, [r4, #29]
 80001b8:	4688      	mov	r8, r1
 80001ba:	4283      	cmp	r3, r0
 80001bc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80001c0:	6857      	ldr	r7, [r2, #4]
 80001c2:	d00f      	beq.n	80001e4 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x44>
 80001c4:	2100      	movs	r1, #0
 80001c6:	2301      	movs	r3, #1
 80001c8:	e9c4 1300 	strd	r1, r3, [r4]
 80001cc:	f24c 0301 	movw	r3, #49153	; 0xc001
 80001d0:	82a3      	strh	r3, [r4, #20]
 80001d2:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80001d6:	7321      	strb	r1, [r4, #12]
 80001d8:	8221      	strh	r1, [r4, #16]
 80001da:	81e1      	strh	r1, [r4, #14]
 80001dc:	8261      	strh	r1, [r4, #18]
 80001de:	82e3      	strh	r3, [r4, #22]
 80001e0:	61a1      	str	r1, [r4, #24]
 80001e2:	7760      	strb	r0, [r4, #29]
 80001e4:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 80001e8:	4620      	mov	r0, r4
 80001ea:	4631      	mov	r1, r6
 80001ec:	f7ff ffb8 	bl	8000160 <_ZN6braids16AnalogOscillator21ComputePhaseIncrementEs>
 80001f0:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
 80001f4:	6060      	str	r0, [r4, #4]
 80001f6:	dd14      	ble.n	8000222 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x82>
 80001f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80001fc:	82e3      	strh	r3, [r4, #22]
 80001fe:	107b      	asrs	r3, r7, #1
 8000200:	07fa      	lsls	r2, r7, #31
 8000202:	eb04 0003 	add.w	r0, r4, r3
 8000206:	bf48      	it	mi
 8000208:	58e3      	ldrmi	r3, [r4, r3]
 800020a:	464a      	mov	r2, r9
 800020c:	bf48      	it	mi
 800020e:	595d      	ldrmi	r5, [r3, r5]
 8000210:	4641      	mov	r1, r8
 8000212:	4653      	mov	r3, sl
 8000214:	46ac      	mov	ip, r5
 8000216:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800021a:	b001      	add	sp, #4
 800021c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000220:	4760      	bx	ip
 8000222:	2e00      	cmp	r6, #0
 8000224:	daeb      	bge.n	80001fe <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x5e>
 8000226:	2300      	movs	r3, #0
 8000228:	e7e8      	b.n	80001fc <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x5c>
 800022a:	bf00      	nop
 800022c:	200002c8 	.word	0x200002c8

08000230 <_ZN6braids3Svf4InitEv>:
  ~Svf() { }
  
  void Init() {
    lp_ = 0;
    bp_ = 0;
    frequency_ = 33 << 7;
 8000230:	f44f 5284 	mov.w	r2, #4224	; 0x1080
 8000234:	8042      	strh	r2, [r0, #2]
    resonance_ = 16384;
 8000236:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    lp_ = 0;
 800023a:	2300      	movs	r3, #0
    resonance_ = 16384;
 800023c:	8082      	strh	r2, [r0, #4]
    dirty_ = true;
 800023e:	2201      	movs	r2, #1
    bp_ = 0;
 8000240:	e9c0 3305 	strd	r3, r3, [r0, #20]
    dirty_ = true;
 8000244:	7002      	strb	r2, [r0, #0]
    punch_ = 0;
 8000246:	6083      	str	r3, [r0, #8]
    mode_ = SVF_MODE_BP;
 8000248:	7702      	strb	r2, [r0, #28]
  }
 800024a:	4770      	bx	lr

0800024c <_ZN6stmlib6Random7GetWordEv>:
  static inline void Seed(uint32_t seed) {
    rng_state_ = seed;
  }

  static inline uint32_t GetWord() {
    rng_state_ = rng_state_ * 1664525L + 1013904223L;
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <_ZN6stmlib6Random7GetWordEv+0x10>)
 800024e:	4904      	ldr	r1, [pc, #16]	; (8000260 <_ZN6stmlib6Random7GetWordEv+0x14>)
 8000250:	6818      	ldr	r0, [r3, #0]
 8000252:	4a04      	ldr	r2, [pc, #16]	; (8000264 <_ZN6stmlib6Random7GetWordEv+0x18>)
 8000254:	fb01 2000 	mla	r0, r1, r0, r2
 8000258:	6018      	str	r0, [r3, #0]
    return state();
  }
 800025a:	4770      	bx	lr
 800025c:	200002a0 	.word	0x200002a0
 8000260:	0019660d 	.word	0x0019660d
 8000264:	3c6ef35f 	.word	0x3c6ef35f

08000268 <_ZN6stmlib6Random9GetSampleEv>:
  
  static inline int16_t GetSample() {
 8000268:	b508      	push	{r3, lr}
    return static_cast<int16_t>(GetWord() >> 16);
 800026a:	f7ff ffef 	bl	800024c <_ZN6stmlib6Random7GetWordEv>
  }
 800026e:	1400      	asrs	r0, r0, #16
 8000270:	bd08      	pop	{r3, pc}
	...

08000274 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj>:
}

void DigitalOscillator::RenderQuestionMark(
    const uint8_t* sync,
    int16_t* buffer,
    size_t size) {
 8000274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000278:	4690      	mov	r8, r2
  ClockedNoiseState* state = &state_.clk;
  
  if (strike_) {
 800027a:	7f02      	ldrb	r2, [r0, #28]
    size_t size) {
 800027c:	4604      	mov	r4, r0
 800027e:	4699      	mov	r9, r3
  if (strike_) {
 8000280:	b15a      	cbz	r2, 800029a <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x26>
    state->rng_state = 0;
    state->cycle_phase = 0;
    state->sample = 10;
 8000282:	210a      	movs	r1, #10
 8000284:	8601      	strh	r1, [r0, #48]	; 0x30
    state->cycle_phase_increment = -1;
 8000286:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    state->rng_state = 0;
 800028a:	2200      	movs	r2, #0
    state->cycle_phase_increment = -1;
 800028c:	6241      	str	r1, [r0, #36]	; 0x24
    state->seed = 32767;
 800028e:	f647 71ff 	movw	r1, #32767	; 0x7fff
    state->rng_state = 0;
 8000292:	6282      	str	r2, [r0, #40]	; 0x28
    state->cycle_phase = 0;
 8000294:	6202      	str	r2, [r0, #32]
    state->seed = 32767;
 8000296:	62c1      	str	r1, [r0, #44]	; 0x2c
    strike_ = false;
 8000298:	7702      	strb	r2, [r0, #28]
  }
  
  uint32_t phase = phase_;
  uint32_t increment = phase_increment_;
  uint32_t dit_duration = 3600 + ((32767 - parameter_[0]) >> 2);
 800029a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
  int32_t noise_threshold = 1024 + (parameter_[1] >> 3);
 800029e:	f9b4 700e 	ldrsh.w	r7, [r4, #14]
  uint32_t dit_duration = 3600 + ((32767 - parameter_[0]) >> 2);
 80002a2:	f5c6 46ff 	rsb	r6, r6, #32640	; 0x7f80
 80002a6:	367f      	adds	r6, #127	; 0x7f
 80002a8:	10b6      	asrs	r6, r6, #2
  int32_t noise_threshold = 1024 + (parameter_[1] >> 3);
 80002aa:	10ff      	asrs	r7, r7, #3
 80002ac:	f8df a138 	ldr.w	sl, [pc, #312]	; 80003e8 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x174>
  uint32_t increment = phase_increment_;
 80002b0:	e9d4 b300 	ldrd	fp, r3, [r4]
  uint32_t dit_duration = 3600 + ((32767 - parameter_[0]) >> 2);
 80002b4:	f506 6661 	add.w	r6, r6, #3600	; 0xe10
  uint32_t increment = phase_increment_;
 80002b8:	9300      	str	r3, [sp, #0]
  int32_t noise_threshold = 1024 + (parameter_[1] >> 3);
 80002ba:	f507 6780 	add.w	r7, r7, #1024	; 0x400
  while (size--) {
 80002be:	f119 39ff 	adds.w	r9, r9, #4294967295	; 0xffffffff
 80002c2:	f0c0 8085 	bcc.w	80003d0 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x15c>
    phase += increment;
 80002c6:	9b00      	ldr	r3, [sp, #0]
    int32_t sample;
    if (state->rng_state) {
 80002c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    phase += increment;
 80002ca:	449b      	add	fp, r3
    if (state->rng_state) {
 80002cc:	2800      	cmp	r0, #0
 80002ce:	d07b      	beq.n	80003c8 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x154>
  return (a * (65535 - balance) + b * balance) >> 16;
}

inline int16_t Interpolate824(const int16_t* table, uint32_t phase) {
  int32_t a = table[phase >> 24];
  int32_t b = table[(phase >> 24) + 1];
 80002d0:	4b42      	ldr	r3, [pc, #264]	; (80003dc <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x168>)
  int32_t a = table[phase >> 24];
 80002d2:	ea4f 621b 	mov.w	r2, fp, lsr #24
 80002d6:	f93a 5012 	ldrsh.w	r5, [sl, r2, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 80002da:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 80002de:	eba2 0c05 	sub.w	ip, r2, r5
 80002e2:	f3cb 220f 	ubfx	r2, fp, #8, #16
 80002e6:	fb02 f20c 	mul.w	r2, r2, ip
 80002ea:	eb05 4522 	add.w	r5, r5, r2, asr #16
      sample = (Interpolate824(wav_sine, phase) * 3) >> 2;
 80002ee:	b22d      	sxth	r5, r5
 80002f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80002f4:	10ad      	asrs	r5, r5, #2
    } else {
      sample = 0;
    }
    if (++state->cycle_phase > dit_duration) {
 80002f6:	6a22      	ldr	r2, [r4, #32]
 80002f8:	3201      	adds	r2, #1
 80002fa:	42b2      	cmp	r2, r6
 80002fc:	6222      	str	r2, [r4, #32]
 80002fe:	d92a      	bls.n	8000356 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0xe2>
      --state->sample;
 8000300:	f8b4 c030 	ldrh.w	ip, [r4, #48]	; 0x30
 8000304:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8000308:	fa0f f38c 	sxth.w	r3, ip
 800030c:	8623      	strh	r3, [r4, #48]	; 0x30
      if (state->sample == 0) {
 800030e:	bb03      	cbnz	r3, 8000352 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0xde>
        ++state->cycle_phase_increment;
        state->rng_state = !state->rng_state;
 8000310:	fab0 f080 	clz	r0, r0
        ++state->cycle_phase_increment;
 8000314:	6a62      	ldr	r2, [r4, #36]	; 0x24
        state->rng_state = !state->rng_state;
 8000316:	0940      	lsrs	r0, r0, #5
        ++state->cycle_phase_increment;
 8000318:	3201      	adds	r2, #1

        size_t address = state->cycle_phase_increment >> 2;
        size_t shift = (state->cycle_phase_increment & 0x3) << 1;
        state->sample = (2 << ((wt_code[address] >> shift) & 3)) - 1;
 800031a:	4931      	ldr	r1, [pc, #196]	; (80003e0 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x16c>)
        ++state->cycle_phase_increment;
 800031c:	6262      	str	r2, [r4, #36]	; 0x24
        state->rng_state = !state->rng_state;
 800031e:	62a0      	str	r0, [r4, #40]	; 0x28
        size_t address = state->cycle_phase_increment >> 2;
 8000320:	0890      	lsrs	r0, r2, #2
        state->sample = (2 << ((wt_code[address] >> shift) & 3)) - 1;
 8000322:	5c08      	ldrb	r0, [r1, r0]
        size_t shift = (state->cycle_phase_increment & 0x3) << 1;
 8000324:	0052      	lsls	r2, r2, #1
 8000326:	f002 0206 	and.w	r2, r2, #6
        state->sample = (2 << ((wt_code[address] >> shift) & 3)) - 1;
 800032a:	fa40 f202 	asr.w	r2, r0, r2
 800032e:	f002 0003 	and.w	r0, r2, #3
 8000332:	2202      	movs	r2, #2
 8000334:	4082      	lsls	r2, r0
 8000336:	3a01      	subs	r2, #1
 8000338:	b292      	uxth	r2, r2
        if (state->sample == 15) {
 800033a:	2a0f      	cmp	r2, #15
          state->sample = 100;
 800033c:	bf02      	ittt	eq
 800033e:	2264      	moveq	r2, #100	; 0x64
 8000340:	8622      	strheq	r2, [r4, #48]	; 0x30
          state->rng_state = 0;
          state->cycle_phase_increment = - 1;
 8000342:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
        }
        phase = 1L << 30;
 8000346:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
        state->sample = (2 << ((wt_code[address] >> shift) & 3)) - 1;
 800034a:	bf12      	itee	ne
 800034c:	8622      	strhne	r2, [r4, #48]	; 0x30
          state->rng_state = 0;
 800034e:	62a3      	streq	r3, [r4, #40]	; 0x28
          state->cycle_phase_increment = - 1;
 8000350:	6262      	streq	r2, [r4, #36]	; 0x24
      }
      state->cycle_phase = 0;
 8000352:	2200      	movs	r2, #0
 8000354:	6222      	str	r2, [r4, #32]
    }
    state->seed += Random::GetSample() >> 2;
 8000356:	f7ff ff87 	bl	8000268 <_ZN6stmlib6Random9GetSampleEv>
 800035a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800035c:	eb02 02a0 	add.w	r2, r2, r0, asr #2
 8000360:	62e2      	str	r2, [r4, #44]	; 0x2c
    int32_t noise_intensity = state->seed >> 8;
 8000362:	1212      	asrs	r2, r2, #8
 8000364:	2a00      	cmp	r2, #0
 8000366:	bfb8      	it	lt
 8000368:	4252      	neglt	r2, r2
    if (noise_intensity < 0) {
      noise_intensity = -noise_intensity;
    }
    if (noise_intensity < noise_threshold) {
 800036a:	4297      	cmp	r7, r2
 800036c:	dc2e      	bgt.n	80003cc <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x158>
 800036e:	f5b2 5f7a 	cmp.w	r2, #16000	; 0x3e80
 8000372:	bfa8      	it	ge
 8000374:	f44f 527a 	movge.w	r2, #16000	; 0x3e80
 8000378:	9201      	str	r2, [sp, #4]
      noise_intensity = noise_threshold;
    }
    if (noise_intensity > 16000) {
      noise_intensity = 16000;
    }
    int32_t noise = (Random::GetSample() * noise_intensity >> 15);
 800037a:	f7ff ff75 	bl	8000268 <_ZN6stmlib6Random9GetSampleEv>
 800037e:	f647 7eff 	movw	lr, #32767	; 0x7fff
 8000382:	9a01      	ldr	r2, [sp, #4]
    noise = noise * wav_sine[(phase >> 22) & 0xff] >> 15;
 8000384:	f3cb 5c87 	ubfx	ip, fp, #22, #8
    int32_t noise = (Random::GetSample() * noise_intensity >> 15);
 8000388:	4342      	muls	r2, r0
    noise = noise * wav_sine[(phase >> 22) & 0xff] >> 15;
 800038a:	f93a c01c 	ldrsh.w	ip, [sl, ip, lsl #1]
    int32_t noise = (Random::GetSample() * noise_intensity >> 15);
 800038e:	13d2      	asrs	r2, r2, #15
    noise = noise * wav_sine[(phase >> 22) & 0xff] >> 15;
 8000390:	fb02 f20c 	mul.w	r2, r2, ip
    sample += noise;
 8000394:	eb05 35e2 	add.w	r5, r5, r2, asr #15
 8000398:	4575      	cmp	r5, lr
 800039a:	bfa8      	it	ge
 800039c:	4675      	movge	r5, lr
 800039e:	4911      	ldr	r1, [pc, #68]	; (80003e4 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x170>)
    CLIP(sample);
    int32_t distorted = sample * sample >> 14;
    sample += distorted * parameter_[1] >> 15;
 80003a0:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 80003a4:	428d      	cmp	r5, r1
 80003a6:	bfb8      	it	lt
 80003a8:	460d      	movlt	r5, r1
    int32_t distorted = sample * sample >> 14;
 80003aa:	fb05 f005 	mul.w	r0, r5, r5
 80003ae:	1380      	asrs	r0, r0, #14
    sample += distorted * parameter_[1] >> 15;
 80003b0:	4342      	muls	r2, r0
 80003b2:	eb05 35e2 	add.w	r5, r5, r2, asr #15
 80003b6:	4575      	cmp	r5, lr
 80003b8:	bfa8      	it	ge
 80003ba:	4675      	movge	r5, lr
    CLIP(sample);
    *buffer++ = sample;
 80003bc:	428d      	cmp	r5, r1
 80003be:	bfb8      	it	lt
 80003c0:	460d      	movlt	r5, r1
 80003c2:	f828 5b02 	strh.w	r5, [r8], #2
  while (size--) {
 80003c6:	e77a      	b.n	80002be <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x4a>
      sample = 0;
 80003c8:	4605      	mov	r5, r0
 80003ca:	e794      	b.n	80002f6 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x82>
 80003cc:	463a      	mov	r2, r7
 80003ce:	e7d3      	b.n	8000378 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x104>
  }
  phase_ = phase;
 80003d0:	f8c4 b000 	str.w	fp, [r4]
}
 80003d4:	b003      	add	sp, #12
 80003d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003da:	bf00      	nop
 80003dc:	080059f6 	.word	0x080059f6
 80003e0:	080055cc 	.word	0x080055cc
 80003e4:	ffff8001 	.word	0xffff8001
 80003e8:	080059f4 	.word	0x080059f4

080003ec <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>:
  int32_t ref_pitch = midi_pitch;
 80003ec:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80003f0:	4299      	cmp	r1, r3
 80003f2:	bfa8      	it	ge
 80003f4:	4619      	movge	r1, r3
  size_t num_shifts = 0;
 80003f6:	2000      	movs	r0, #0
uint32_t DigitalOscillator::ComputePhaseIncrement(int16_t midi_pitch) {
 80003f8:	b510      	push	{r4, lr}
  ref_pitch -= kPitchTableStart;
 80003fa:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
  while (ref_pitch < 0) {
 80003fe:	f511 61c0 	adds.w	r1, r1, #1536	; 0x600
    ++num_shifts;
 8000402:	f100 0001 	add.w	r0, r0, #1
  while (ref_pitch < 0) {
 8000406:	d4fa      	bmi.n	80003fe <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs+0x12>
  uint32_t a = lut_oscillator_increments[ref_pitch >> 4];
 8000408:	4c07      	ldr	r4, [pc, #28]	; (8000428 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs+0x3c>)
 800040a:	110a      	asrs	r2, r1, #4
 800040c:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
  uint32_t b = lut_oscillator_increments[(ref_pitch >> 4) + 1];
 8000410:	3201      	adds	r2, #1
      (static_cast<int32_t>(b - a) * (ref_pitch & 0xf) >> 4);
 8000412:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8000416:	f001 010f 	and.w	r1, r1, #15
 800041a:	1ad2      	subs	r2, r2, r3
 800041c:	4351      	muls	r1, r2
  uint32_t phase_increment = a + \
 800041e:	eb03 1121 	add.w	r1, r3, r1, asr #4
}
 8000422:	fa21 f000 	lsr.w	r0, r1, r0
 8000426:	bd10      	pop	{r4, pc}
 8000428:	08005144 	.word	0x08005144

0800042c <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj>:
    size_t size) {
 800042c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000430:	b08f      	sub	sp, #60	; 0x3c
 8000432:	9304      	str	r3, [sp, #16]
  if (strike_) {
 8000434:	7f03      	ldrb	r3, [r0, #28]
    size_t size) {
 8000436:	4604      	mov	r4, r0
 8000438:	4615      	mov	r5, r2
  if (strike_) {
 800043a:	b15b      	cbz	r3, 8000454 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0x28>
 800043c:	f100 0620 	add.w	r6, r0, #32
 8000440:	f100 0730 	add.w	r7, r0, #48	; 0x30
      state_.saw.phase[i] = Random::GetWord();
 8000444:	f7ff ff02 	bl	800024c <_ZN6stmlib6Random7GetWordEv>
 8000448:	f846 0b04 	str.w	r0, [r6], #4
    for (size_t i = 0; i < 4; ++i) {
 800044c:	42b7      	cmp	r7, r6
 800044e:	d1f9      	bne.n	8000444 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0x18>
    strike_ = false;
 8000450:	2300      	movs	r3, #0
 8000452:	7723      	strb	r3, [r4, #28]
  for (size_t i = 0; i < 3; ++i) {
 8000454:	f04f 0800 	mov.w	r8, #0
  phase_1 = state_.saw.phase[1];
 8000458:	e9d4 6708 	ldrd	r6, r7, [r4, #32]
  phase_increment_0 = phase_increment_;
 800045c:	6863      	ldr	r3, [r4, #4]
    phase_increment[i] = ComputePhaseIncrement(pitch_ + detune);
 800045e:	f8b4 b018 	ldrh.w	fp, [r4, #24]
  phase_increment_0 = phase_increment_;
 8000462:	9308      	str	r3, [sp, #32]
  phase_2 = state_.saw.phase[2];
 8000464:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000466:	f504 79ca 	add.w	r9, r4, #404	; 0x194
 800046a:	9301      	str	r3, [sp, #4]
  phase_3 = state_.saw.phase[3];
 800046c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    phase_increment[i] = ComputePhaseIncrement(pitch_ + detune);
 800046e:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
  phase_3 = state_.saw.phase[3];
 8000472:	9300      	str	r3, [sp, #0]
    int16_t detune = chordsIntervals[i]; //chords[chord_integral][i];
 8000474:	f939 1b02 	ldrsh.w	r1, [r9], #2
    phase_increment[i] = ComputePhaseIncrement(pitch_ + detune);
 8000478:	4620      	mov	r0, r4
 800047a:	4459      	add	r1, fp
 800047c:	b209      	sxth	r1, r1
 800047e:	f7ff ffb5 	bl	80003ec <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
 8000482:	f84a 0028 	str.w	r0, [sl, r8, lsl #2]
  for (size_t i = 0; i < 3; ++i) {
 8000486:	f108 0801 	add.w	r8, r8, #1
 800048a:	f1b8 0f03 	cmp.w	r8, #3
 800048e:	d1f1      	bne.n	8000474 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0x48>
  const uint8_t* wave_1 = wt_waves + mini_wave_line[parameter_[0] >> 10] * 129;
 8000490:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8000494:	48d3      	ldr	r0, [pc, #844]	; (80007e4 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0x3b8>)
 8000496:	128b      	asrs	r3, r1, #10
  uint16_t wave_xfade = parameter_[0] << 6;
 8000498:	0189      	lsls	r1, r1, #6
 800049a:	fa1f fb81 	uxth.w	fp, r1
    phase_1 += phase_increment[0];
 800049e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  const uint8_t* wave_1 = wt_waves + mini_wave_line[parameter_[0] >> 10] * 129;
 80004a0:	5cc2      	ldrb	r2, [r0, r3]
    phase_1 += phase_increment[0];
 80004a2:	9105      	str	r1, [sp, #20]
  const uint8_t* wave_2 = wt_waves + mini_wave_line[(parameter_[0] >> 10) + 1] * 129;
 80004a4:	4418      	add	r0, r3
    phase_2 += phase_increment[1];
 80004a6:	990c      	ldr	r1, [sp, #48]	; 0x30
  const uint8_t* wave_2 = wt_waves + mini_wave_line[(parameter_[0] >> 10) + 1] * 129;
 80004a8:	7843      	ldrb	r3, [r0, #1]
  const uint8_t* wave_1 = wt_waves + mini_wave_line[parameter_[0] >> 10] * 129;
 80004aa:	f8df c33c 	ldr.w	ip, [pc, #828]	; 80007e8 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0x3bc>
    phase_2 += phase_increment[1];
 80004ae:	9106      	str	r1, [sp, #24]
    phase_3 += phase_increment[2];
 80004b0:	990d      	ldr	r1, [sp, #52]	; 0x34
  const uint8_t* wave_1 = wt_waves + mini_wave_line[parameter_[0] >> 10] * 129;
 80004b2:	eb02 12c2 	add.w	r2, r2, r2, lsl #7
  const uint8_t* wave_2 = wt_waves + mini_wave_line[(parameter_[0] >> 10) + 1] * 129;
 80004b6:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
  const uint8_t* wave_1 = wt_waves + mini_wave_line[parameter_[0] >> 10] * 129;
 80004ba:	4462      	add	r2, ip
  const uint8_t* wave_2 = wt_waves + mini_wave_line[(parameter_[0] >> 10) + 1] * 129;
 80004bc:	4463      	add	r3, ip
    phase_3 += phase_increment[2];
 80004be:	9107      	str	r1, [sp, #28]
 80004c0:	9502      	str	r5, [sp, #8]
 80004c2:	9902      	ldr	r1, [sp, #8]
 80004c4:	3104      	adds	r1, #4
 80004c6:	9102      	str	r1, [sp, #8]
  while (size) {
 80004c8:	9904      	ldr	r1, [sp, #16]
 80004ca:	2900      	cmp	r1, #0
 80004cc:	f000 8181 	beq.w	80007d2 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0x3a6>
    phase_0 += phase_increment_0;
 80004d0:	9908      	ldr	r1, [sp, #32]
 80004d2:	9806      	ldr	r0, [sp, #24]
 80004d4:	440e      	add	r6, r1
 80004d6:	9905      	ldr	r1, [sp, #20]
  uint32_t b = table[(phase >> 24) + 1];
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
}

inline int16_t Interpolate824(const uint8_t* table, uint32_t phase) {
  int32_t a = table[phase >> 24];
 80004d8:	0e75      	lsrs	r5, r6, #25
 80004da:	4439      	add	r1, r7
 80004dc:	9103      	str	r1, [sp, #12]
 80004de:	9901      	ldr	r1, [sp, #4]
  int32_t b = table[(phase >> 24) + 1];
  return (a << 8) + \
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80004e0:	f3c6 0957 	ubfx	r9, r6, #1, #24
 80004e4:	4401      	add	r1, r0
 80004e6:	9101      	str	r1, [sp, #4]
 80004e8:	9807      	ldr	r0, [sp, #28]
 80004ea:	9900      	ldr	r1, [sp, #0]
 80004ec:	4401      	add	r1, r0
 80004ee:	468a      	mov	sl, r1
  int32_t b = table[(phase >> 24) + 1];
 80004f0:	1c69      	adds	r1, r5, #1
  int32_t a = table[phase >> 24];
 80004f2:	5d50      	ldrb	r0, [r2, r5]
  int32_t b = table[(phase >> 24) + 1];
 80004f4:	5c57      	ldrb	r7, [r2, r1]
 80004f6:	9109      	str	r1, [sp, #36]	; 0x24
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80004f8:	1a3f      	subs	r7, r7, r0
 80004fa:	fb09 f707 	mul.w	r7, r9, r7
  return (a << 8) + \
 80004fe:	0201      	lsls	r1, r0, #8
  int32_t a = table[phase >> 24];
 8000500:	9803      	ldr	r0, [sp, #12]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000502:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
  int32_t a = table[phase >> 24];
 8000506:	ea4f 6c50 	mov.w	ip, r0, lsr #25
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800050a:	eb01 4127 	add.w	r1, r1, r7, asr #16
 800050e:	9f03      	ldr	r7, [sp, #12]
  int32_t b = table[(phase >> 24) + 1];
 8000510:	f10c 0801 	add.w	r8, ip, #1
  int32_t a = table[phase >> 24];
 8000514:	f812 000c 	ldrb.w	r0, [r2, ip]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000518:	f3c7 0e57 	ubfx	lr, r7, #1, #24
  int32_t b = table[(phase >> 24) + 1];
 800051c:	f812 7008 	ldrb.w	r7, [r2, r8]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000520:	b289      	uxth	r1, r1
 8000522:	1a3f      	subs	r7, r7, r0
 8000524:	fb0e f707 	mul.w	r7, lr, r7
 8000528:	9100      	str	r1, [sp, #0]
  return (a << 8) + \
 800052a:	0200      	lsls	r0, r0, #8
  int32_t b = table[(phase >> 24) + 1];
 800052c:	9909      	ldr	r1, [sp, #36]	; 0x24
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800052e:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
  int32_t a = table[phase >> 24];
 8000532:	5d5d      	ldrb	r5, [r3, r5]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000534:	eb00 4727 	add.w	r7, r0, r7, asr #16
  int32_t a = table[phase >> 24];
 8000538:	f813 000c 	ldrb.w	r0, [r3, ip]
  int32_t b = table[(phase >> 24) + 1];
 800053c:	f813 c001 	ldrb.w	ip, [r3, r1]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000540:	b2bf      	uxth	r7, r7
 8000542:	ebac 0c05 	sub.w	ip, ip, r5
 8000546:	fb09 f90c 	mul.w	r9, r9, ip
  return (a << 8) + \
 800054a:	022d      	lsls	r5, r5, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800054c:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
 8000550:	eb05 4929 	add.w	r9, r5, r9, asr #16
  int32_t b = table[(phase >> 24) + 1];
 8000554:	f813 5008 	ldrb.w	r5, [r3, r8]
inline int16_t Crossfade(
    const uint8_t* table_a,
    const uint8_t* table_b,
    uint32_t phase,
    uint16_t balance) {
  int32_t a = Interpolate824(table_a, phase);
 8000558:	f9bd c000 	ldrsh.w	ip, [sp]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800055c:	1a2d      	subs	r5, r5, r0
 800055e:	fb0e fe05 	mul.w	lr, lr, r5
  return (a << 8) + \
 8000562:	0200      	lsls	r0, r0, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000564:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 8000568:	eb00 4e2e 	add.w	lr, r0, lr, asr #16
  int32_t a = Interpolate824(table_a, phase);
 800056c:	b23d      	sxth	r5, r7
  int32_t b = Interpolate824(table_b, phase);
 800056e:	fa0f fe8e 	sxth.w	lr, lr
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 8000572:	ebae 0e05 	sub.w	lr, lr, r5
  int32_t a = table[phase >> 24];
 8000576:	9801      	ldr	r0, [sp, #4]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 8000578:	fb0b fe0e 	mul.w	lr, fp, lr
  int32_t b = Interpolate824(table_b, phase);
 800057c:	fa0f f989 	sxth.w	r9, r9
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000580:	9d01      	ldr	r5, [sp, #4]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 8000582:	eba9 090c 	sub.w	r9, r9, ip
  int32_t a = table[phase >> 24];
 8000586:	ea4f 6c50 	mov.w	ip, r0, lsr #25
  int32_t b = table[(phase >> 24) + 1];
 800058a:	f10c 0801 	add.w	r8, ip, #1
  int32_t a = table[phase >> 24];
 800058e:	f812 000c 	ldrb.w	r0, [r2, ip]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 8000592:	eb07 472e 	add.w	r7, r7, lr, asr #16
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000596:	f3c5 0e57 	ubfx	lr, r5, #1, #24
  int32_t b = table[(phase >> 24) + 1];
 800059a:	f812 5008 	ldrb.w	r5, [r2, r8]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 800059e:	fb0b f909 	mul.w	r9, fp, r9
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80005a2:	1a2d      	subs	r5, r5, r0
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 80005a4:	9900      	ldr	r1, [sp, #0]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80005a6:	fb0e f505 	mul.w	r5, lr, r5
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 80005aa:	eb01 4129 	add.w	r1, r1, r9, asr #16
  return (a << 8) + \
 80005ae:	0200      	lsls	r0, r0, #8
    sample += Crossfade(wave_1, wave_2, phase_1 >> 1, wave_xfade);
 80005b0:	b23f      	sxth	r7, r7
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80005b2:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
    sample += Crossfade(wave_1, wave_2, phase_0 >> 1, wave_xfade);
 80005b6:	b209      	sxth	r1, r1
    sample += Crossfade(wave_1, wave_2, phase_1 >> 1, wave_xfade);
 80005b8:	4439      	add	r1, r7
 80005ba:	eb00 4525 	add.w	r5, r0, r5, asr #16
  int32_t b = table[(phase >> 24) + 1];
 80005be:	f813 7008 	ldrb.w	r7, [r3, r8]
  int32_t a = table[phase >> 24];
 80005c2:	f813 000c 	ldrb.w	r0, [r3, ip]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80005c6:	b2ad      	uxth	r5, r5
 80005c8:	1a3f      	subs	r7, r7, r0
 80005ca:	fb0e fe07 	mul.w	lr, lr, r7
  return (a << 8) + \
 80005ce:	0200      	lsls	r0, r0, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80005d0:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 80005d4:	eb00 4e2e 	add.w	lr, r0, lr, asr #16
  int32_t b = Interpolate824(table_b, phase);
 80005d8:	fa0f fe8e 	sxth.w	lr, lr
  int32_t a = Interpolate824(table_a, phase);
 80005dc:	b22f      	sxth	r7, r5
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 80005de:	ebae 0707 	sub.w	r7, lr, r7
 80005e2:	fb0b f707 	mul.w	r7, fp, r7
 80005e6:	eb05 4727 	add.w	r7, r5, r7, asr #16
  int32_t a = table[phase >> 24];
 80005ea:	ea4f 655a 	mov.w	r5, sl, lsr #25
  int32_t b = table[(phase >> 24) + 1];
 80005ee:	f105 0e01 	add.w	lr, r5, #1
    sample += Crossfade(wave_1, wave_2, phase_2 >> 1, wave_xfade);
 80005f2:	b23f      	sxth	r7, r7
 80005f4:	440f      	add	r7, r1
 80005f6:	f812 000e 	ldrb.w	r0, [r2, lr]
  int32_t a = table[phase >> 24];
 80005fa:	5d51      	ldrb	r1, [r2, r5]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80005fc:	f3ca 0c57 	ubfx	ip, sl, #1, #24
 8000600:	1a40      	subs	r0, r0, r1
 8000602:	fb0c f000 	mul.w	r0, ip, r0
  return (a << 8) + \
 8000606:	0209      	lsls	r1, r1, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000608:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 800060c:	eb01 4020 	add.w	r0, r1, r0, asr #16
  int32_t a = table[phase >> 24];
 8000610:	5d59      	ldrb	r1, [r3, r5]
  int32_t b = table[(phase >> 24) + 1];
 8000612:	f813 500e 	ldrb.w	r5, [r3, lr]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000616:	b280      	uxth	r0, r0
 8000618:	1a6d      	subs	r5, r5, r1
 800061a:	fb0c fc05 	mul.w	ip, ip, r5
  return (a << 8) + \
 800061e:	0209      	lsls	r1, r1, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000620:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8000624:	eb01 4c2c 	add.w	ip, r1, ip, asr #16
  int32_t a = Interpolate824(table_a, phase);
 8000628:	b205      	sxth	r5, r0
  int32_t b = Interpolate824(table_b, phase);
 800062a:	fa0f fc8c 	sxth.w	ip, ip
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 800062e:	ebac 0c05 	sub.w	ip, ip, r5
 8000632:	fb0b fc0c 	mul.w	ip, fp, ip
 8000636:	eb00 402c 	add.w	r0, r0, ip, asr #16
    sample += Crossfade(wave_1, wave_2, phase_3 >> 1, wave_xfade);
 800063a:	b200      	sxth	r0, r0
    *buffer++ = sample >> 2;
 800063c:	9902      	ldr	r1, [sp, #8]
    sample += Crossfade(wave_1, wave_2, phase_3 >> 1, wave_xfade);
 800063e:	4438      	add	r0, r7
    *buffer++ = sample >> 2;
 8000640:	1080      	asrs	r0, r0, #2
 8000642:	f821 0c04 	strh.w	r0, [r1, #-4]
 8000646:	9908      	ldr	r1, [sp, #32]
 8000648:	9803      	ldr	r0, [sp, #12]
 800064a:	440e      	add	r6, r1
 800064c:	9905      	ldr	r1, [sp, #20]
  int32_t a = table[phase >> 24];
 800064e:	0e75      	lsrs	r5, r6, #25
 8000650:	180f      	adds	r7, r1, r0
 8000652:	9801      	ldr	r0, [sp, #4]
 8000654:	9906      	ldr	r1, [sp, #24]
 8000656:	ea4f 6e57 	mov.w	lr, r7, lsr #25
 800065a:	4401      	add	r1, r0
 800065c:	9101      	str	r1, [sp, #4]
 800065e:	9907      	ldr	r1, [sp, #28]
 8000660:	5d50      	ldrb	r0, [r2, r5]
 8000662:	4451      	add	r1, sl
 8000664:	9100      	str	r1, [sp, #0]
  int32_t b = table[(phase >> 24) + 1];
 8000666:	1c69      	adds	r1, r5, #1
 8000668:	f812 c001 	ldrb.w	ip, [r2, r1]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800066c:	f3c6 0a57 	ubfx	sl, r6, #1, #24
 8000670:	ebac 0c00 	sub.w	ip, ip, r0
 8000674:	fb0a fc0c 	mul.w	ip, sl, ip
  int32_t b = table[(phase >> 24) + 1];
 8000678:	9109      	str	r1, [sp, #36]	; 0x24
  return (a << 8) + \
 800067a:	0201      	lsls	r1, r0, #8
  int32_t b = table[(phase >> 24) + 1];
 800067c:	f10e 0901 	add.w	r9, lr, #1
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000680:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
  int32_t a = table[phase >> 24];
 8000684:	f812 000e 	ldrb.w	r0, [r2, lr]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000688:	eb01 412c 	add.w	r1, r1, ip, asr #16
  int32_t b = table[(phase >> 24) + 1];
 800068c:	f812 c009 	ldrb.w	ip, [r2, r9]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000690:	f3c7 0857 	ubfx	r8, r7, #1, #24
 8000694:	ebac 0c00 	sub.w	ip, ip, r0
 8000698:	fb08 fc0c 	mul.w	ip, r8, ip
 800069c:	b289      	uxth	r1, r1
 800069e:	9103      	str	r1, [sp, #12]
  return (a << 8) + \
 80006a0:	0200      	lsls	r0, r0, #8
  int32_t b = table[(phase >> 24) + 1];
 80006a2:	9909      	ldr	r1, [sp, #36]	; 0x24
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006a4:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
  int32_t a = table[phase >> 24];
 80006a8:	5d5d      	ldrb	r5, [r3, r5]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006aa:	eb00 4c2c 	add.w	ip, r0, ip, asr #16
  int32_t a = table[phase >> 24];
 80006ae:	f813 000e 	ldrb.w	r0, [r3, lr]
  int32_t b = table[(phase >> 24) + 1];
 80006b2:	f813 e001 	ldrb.w	lr, [r3, r1]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006b6:	fa1f fc8c 	uxth.w	ip, ip
 80006ba:	ebae 0e05 	sub.w	lr, lr, r5
 80006be:	fb0a fa0e 	mul.w	sl, sl, lr
  return (a << 8) + \
 80006c2:	022d      	lsls	r5, r5, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006c4:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
 80006c8:	eb05 4a2a 	add.w	sl, r5, sl, asr #16
  int32_t b = table[(phase >> 24) + 1];
 80006cc:	f813 5009 	ldrb.w	r5, [r3, r9]
  int32_t a = Interpolate824(table_a, phase);
 80006d0:	f9bd e00c 	ldrsh.w	lr, [sp, #12]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006d4:	1a2d      	subs	r5, r5, r0
 80006d6:	fb08 f805 	mul.w	r8, r8, r5
  return (a << 8) + \
 80006da:	0200      	lsls	r0, r0, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006dc:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 80006e0:	eb00 4828 	add.w	r8, r0, r8, asr #16
  int32_t a = Interpolate824(table_a, phase);
 80006e4:	fa0f f58c 	sxth.w	r5, ip
  int32_t b = Interpolate824(table_b, phase);
 80006e8:	fa0f f888 	sxth.w	r8, r8
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 80006ec:	eba8 0805 	sub.w	r8, r8, r5
  int32_t a = table[phase >> 24];
 80006f0:	9801      	ldr	r0, [sp, #4]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 80006f2:	fb0b f808 	mul.w	r8, fp, r8
  int32_t b = Interpolate824(table_b, phase);
 80006f6:	fa0f fa8a 	sxth.w	sl, sl
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006fa:	9d01      	ldr	r5, [sp, #4]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 80006fc:	ebaa 0a0e 	sub.w	sl, sl, lr
  int32_t a = table[phase >> 24];
 8000700:	ea4f 6e50 	mov.w	lr, r0, lsr #25
  int32_t b = table[(phase >> 24) + 1];
 8000704:	f10e 0901 	add.w	r9, lr, #1
  int32_t a = table[phase >> 24];
 8000708:	f812 000e 	ldrb.w	r0, [r2, lr]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 800070c:	eb0c 4c28 	add.w	ip, ip, r8, asr #16
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000710:	f3c5 0857 	ubfx	r8, r5, #1, #24
  int32_t b = table[(phase >> 24) + 1];
 8000714:	f812 5009 	ldrb.w	r5, [r2, r9]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 8000718:	fb0b fa0a 	mul.w	sl, fp, sl
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800071c:	1a2d      	subs	r5, r5, r0
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 800071e:	9903      	ldr	r1, [sp, #12]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000720:	fb08 f505 	mul.w	r5, r8, r5
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 8000724:	eb01 412a 	add.w	r1, r1, sl, asr #16
  return (a << 8) + \
 8000728:	0200      	lsls	r0, r0, #8
    sample += Crossfade(wave_1, wave_2, phase_1 >> 1, wave_xfade);
 800072a:	fa0f fc8c 	sxth.w	ip, ip
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800072e:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
    sample += Crossfade(wave_1, wave_2, phase_0 >> 1, wave_xfade);
 8000732:	b209      	sxth	r1, r1
    sample += Crossfade(wave_1, wave_2, phase_1 >> 1, wave_xfade);
 8000734:	4461      	add	r1, ip
 8000736:	eb00 4525 	add.w	r5, r0, r5, asr #16
  int32_t b = table[(phase >> 24) + 1];
 800073a:	f813 c009 	ldrb.w	ip, [r3, r9]
  int32_t a = table[phase >> 24];
 800073e:	f813 000e 	ldrb.w	r0, [r3, lr]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000742:	b2ad      	uxth	r5, r5
 8000744:	ebac 0c00 	sub.w	ip, ip, r0
 8000748:	fb08 f80c 	mul.w	r8, r8, ip
  return (a << 8) + \
 800074c:	0200      	lsls	r0, r0, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800074e:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 8000752:	eb00 4828 	add.w	r8, r0, r8, asr #16
  int32_t b = Interpolate824(table_b, phase);
 8000756:	fa0f f888 	sxth.w	r8, r8
  int32_t a = Interpolate824(table_a, phase);
 800075a:	fa0f fc85 	sxth.w	ip, r5
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 800075e:	eba8 0c0c 	sub.w	ip, r8, ip
 8000762:	fb0b fc0c 	mul.w	ip, fp, ip
 8000766:	eb05 4c2c 	add.w	ip, r5, ip, asr #16
    sample += Crossfade(wave_1, wave_2, phase_2 >> 1, wave_xfade);
 800076a:	fa0f fc8c 	sxth.w	ip, ip
 800076e:	448c      	add	ip, r1
  int32_t a = table[phase >> 24];
 8000770:	9900      	ldr	r1, [sp, #0]
 8000772:	0e4d      	lsrs	r5, r1, #25
 8000774:	5d51      	ldrb	r1, [r2, r5]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000776:	9800      	ldr	r0, [sp, #0]
  int32_t b = table[(phase >> 24) + 1];
 8000778:	f105 0801 	add.w	r8, r5, #1
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800077c:	f3c0 0e57 	ubfx	lr, r0, #1, #24
  int32_t b = table[(phase >> 24) + 1];
 8000780:	f812 0008 	ldrb.w	r0, [r2, r8]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000784:	1a40      	subs	r0, r0, r1
 8000786:	fb0e f000 	mul.w	r0, lr, r0
  return (a << 8) + \
 800078a:	0209      	lsls	r1, r1, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800078c:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8000790:	eb01 4020 	add.w	r0, r1, r0, asr #16
  int32_t a = table[phase >> 24];
 8000794:	5d59      	ldrb	r1, [r3, r5]
  int32_t b = table[(phase >> 24) + 1];
 8000796:	f813 5008 	ldrb.w	r5, [r3, r8]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800079a:	b280      	uxth	r0, r0
 800079c:	1a6d      	subs	r5, r5, r1
 800079e:	fb0e fe05 	mul.w	lr, lr, r5
  return (a << 8) + \
 80007a2:	0209      	lsls	r1, r1, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80007a4:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 80007a8:	eb01 4e2e 	add.w	lr, r1, lr, asr #16
  int32_t a = Interpolate824(table_a, phase);
 80007ac:	b205      	sxth	r5, r0
  int32_t b = Interpolate824(table_b, phase);
 80007ae:	fa0f fe8e 	sxth.w	lr, lr
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 80007b2:	ebae 0e05 	sub.w	lr, lr, r5
 80007b6:	fb0b fe0e 	mul.w	lr, fp, lr
 80007ba:	eb00 402e 	add.w	r0, r0, lr, asr #16
    sample += Crossfade(wave_1, wave_2, phase_3 >> 1, wave_xfade);
 80007be:	b200      	sxth	r0, r0
    *buffer++ = sample >> 2;
 80007c0:	9902      	ldr	r1, [sp, #8]
    sample += Crossfade(wave_1, wave_2, phase_3 >> 1, wave_xfade);
 80007c2:	4460      	add	r0, ip
    *buffer++ = sample >> 2;
 80007c4:	1080      	asrs	r0, r0, #2
 80007c6:	f821 0c02 	strh.w	r0, [r1, #-2]
    size -= 2;
 80007ca:	9904      	ldr	r1, [sp, #16]
 80007cc:	3902      	subs	r1, #2
 80007ce:	9104      	str	r1, [sp, #16]
  while (size) {
 80007d0:	e677      	b.n	80004c2 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0x96>
  state_.saw.phase[2] = phase_2;
 80007d2:	9b01      	ldr	r3, [sp, #4]
  state_.saw.phase[1] = phase_1;
 80007d4:	e9c4 6708 	strd	r6, r7, [r4, #32]
  state_.saw.phase[2] = phase_2;
 80007d8:	62a3      	str	r3, [r4, #40]	; 0x28
  state_.saw.phase[3] = phase_3;
 80007da:	9b00      	ldr	r3, [sp, #0]
 80007dc:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80007de:	b00f      	add	sp, #60	; 0x3c
 80007e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007e4:	08004912 	.word	0x08004912
 80007e8:	08005bf6 	.word	0x08005bf6

080007ec <_ZN6braids17DigitalOscillator12ComputeDelayEs>:
  int32_t ref_pitch = midi_pitch;
 80007ec:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80007f0:	bfa8      	it	ge
 80007f2:	f44f 4180 	movge.w	r1, #16384	; 0x4000
  size_t num_shifts = 0;
 80007f6:	2300      	movs	r3, #0
uint32_t DigitalOscillator::ComputeDelay(int16_t midi_pitch) {
 80007f8:	b510      	push	{r4, lr}
  ref_pitch -= kPitchTableStart;
 80007fa:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
  while (ref_pitch < 0) {
 80007fe:	2900      	cmp	r1, #0
 8000800:	da03      	bge.n	800080a <_ZN6braids17DigitalOscillator12ComputeDelayEs+0x1e>
    ref_pitch += kOctave;
 8000802:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
    ++num_shifts;
 8000806:	3301      	adds	r3, #1
  while (ref_pitch < 0) {
 8000808:	e7f9      	b.n	80007fe <_ZN6braids17DigitalOscillator12ComputeDelayEs+0x12>
  uint32_t a = lut_oscillator_delays[ref_pitch >> 4];
 800080a:	4c08      	ldr	r4, [pc, #32]	; (800082c <_ZN6braids17DigitalOscillator12ComputeDelayEs+0x40>)
 800080c:	110a      	asrs	r2, r1, #4
 800080e:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
  uint32_t b = lut_oscillator_delays[(ref_pitch >> 4) + 1];
 8000812:	3201      	adds	r2, #1
  uint32_t delay = a + (static_cast<int32_t>(b - a) * (ref_pitch & 0xf) >> 4);  
 8000814:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8000818:	f001 010f 	and.w	r1, r1, #15
 800081c:	1a12      	subs	r2, r2, r0
 800081e:	4351      	muls	r1, r2
  delay >>= 12 - num_shifts;
 8000820:	f1c3 030c 	rsb	r3, r3, #12
  uint32_t delay = a + (static_cast<int32_t>(b - a) * (ref_pitch & 0xf) >> 4);  
 8000824:	eb00 1021 	add.w	r0, r0, r1, asr #4
}
 8000828:	40d8      	lsrs	r0, r3
 800082a:	bd10      	pop	{r4, pc}
 800082c:	08004fc0 	.word	0x08004fc0

08000830 <_ZN6braids17DigitalOscillator6RenderEPKhPsj>:
    size_t size) {
 8000830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000834:	4617      	mov	r7, r2
  if (shape_ >= OSC_SHAPE_FM &&
 8000836:	7f42      	ldrb	r2, [r0, #29]
    size_t size) {
 8000838:	4698      	mov	r8, r3
  if (shape_ >= OSC_SHAPE_FM &&
 800083a:	f1a2 030c 	sub.w	r3, r2, #12
 800083e:	2b02      	cmp	r3, #2
    size_t size) {
 8000840:	4604      	mov	r4, r0
 8000842:	460e      	mov	r6, r1
  if (shape_ >= OSC_SHAPE_FM &&
 8000844:	d810      	bhi.n	8000868 <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0x38>
    uint16_t integral = parameter_[1] >> 8;
 8000846:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    int16_t a = lut_fm_frequency_quantizer[integral];
 800084a:	4d3b      	ldr	r5, [pc, #236]	; (8000938 <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0x108>)
 800084c:	f3c3 200f 	ubfx	r0, r3, #8, #16
 8000850:	f835 1010 	ldrh.w	r1, [r5, r0, lsl #1]
    int16_t b = lut_fm_frequency_quantizer[integral + 1];
 8000854:	3001      	adds	r0, #1
    parameter_[1] = a + ((b - a) * fractional >> 8);
 8000856:	f935 0010 	ldrsh.w	r0, [r5, r0, lsl #1]
 800085a:	b20d      	sxth	r5, r1
 800085c:	1b40      	subs	r0, r0, r5
 800085e:	b2db      	uxtb	r3, r3
 8000860:	4343      	muls	r3, r0
 8000862:	eb01 2323 	add.w	r3, r1, r3, asr #8
 8000866:	81e3      	strh	r3, [r4, #14]
  RenderFn fn = fn_table_[shape_];
 8000868:	4b34      	ldr	r3, [pc, #208]	; (800093c <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0x10c>)
 800086a:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800086e:	f853 9032 	ldr.w	r9, [r3, r2, lsl #3]
  if (shape_ != previous_shape_) {
 8000872:	7fa3      	ldrb	r3, [r4, #30]
  RenderFn fn = fn_table_[shape_];
 8000874:	f8d1 a004 	ldr.w	sl, [r1, #4]
  if (shape_ != previous_shape_) {
 8000878:	4293      	cmp	r3, r2
 800087a:	d034      	beq.n	80008e6 <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0xb6>

  DigitalOscillator() { }
  ~DigitalOscillator() { }
  
  inline void Init() {
    memset(&state_, 0, sizeof(state_));
 800087c:	22c4      	movs	r2, #196	; 0xc4
 800087e:	2100      	movs	r1, #0
 8000880:	f104 0020 	add.w	r0, r4, #32
 8000884:	f004 f827 	bl	80048d6 <memset>
  Excitation() { }
  ~Excitation() { }

  void Init() {
    delay_ = 0;
    decay_ = 4093;
 8000888:	2500      	movs	r5, #0
 800088a:	f640 73fd 	movw	r3, #4093	; 0xffd
    pulse_[0].Init();
    pulse_[1].Init();
    pulse_[2].Init();
    pulse_[3].Init();
    svf_[0].Init();
 800088e:	f504 709a 	add.w	r0, r4, #308	; 0x134
 8000892:	e9c4 5339 	strd	r5, r3, [r4, #228]	; 0xe4
 8000896:	e9c4 533e 	strd	r5, r3, [r4, #248]	; 0xf8
 800089a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800089e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    counter_ = 0;
    state_ = 0;
 80008a2:	e9c4 553b 	strd	r5, r5, [r4, #236]	; 0xec
    counter_ = 0;
 80008a6:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    state_ = 0;
 80008aa:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    delay_ = 0;
 80008ae:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
    counter_ = 0;
 80008b2:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
    state_ = 0;
 80008b6:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
    delay_ = 0;
 80008ba:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
    counter_ = 0;
 80008be:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
    state_ = 0;
 80008c2:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 80008c6:	f7ff fcb3 	bl	8000230 <_ZN6braids3Svf4InitEv>
    svf_[1].Init();
 80008ca:	f504 70aa 	add.w	r0, r4, #340	; 0x154
 80008ce:	f7ff fcaf 	bl	8000230 <_ZN6braids3Svf4InitEv>
    svf_[2].Init();
 80008d2:	f504 70ba 	add.w	r0, r4, #372	; 0x174
 80008d6:	f7ff fcab 	bl	8000230 <_ZN6braids3Svf4InitEv>
    phase_ = 0;
    strike_ = true;
 80008da:	2301      	movs	r3, #1
 80008dc:	7723      	strb	r3, [r4, #28]
    init_ = true;
 80008de:	76e3      	strb	r3, [r4, #27]
    previous_shape_ = shape_;
 80008e0:	7f63      	ldrb	r3, [r4, #29]
    phase_ = 0;
 80008e2:	6025      	str	r5, [r4, #0]
 80008e4:	77a3      	strb	r3, [r4, #30]
  phase_increment_ = ComputePhaseIncrement(pitch_);
 80008e6:	f9b4 5018 	ldrsh.w	r5, [r4, #24]
 80008ea:	4620      	mov	r0, r4
 80008ec:	4629      	mov	r1, r5
 80008ee:	f7ff fd7d 	bl	80003ec <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
  delay_ = ComputeDelay(pitch_);
 80008f2:	4629      	mov	r1, r5
  phase_increment_ = ComputePhaseIncrement(pitch_);
 80008f4:	6060      	str	r0, [r4, #4]
  delay_ = ComputeDelay(pitch_);
 80008f6:	4620      	mov	r0, r4
 80008f8:	f7ff ff78 	bl	80007ec <_ZN6braids17DigitalOscillator12ComputeDelayEs>
  if (pitch_ > kHighestNote) {
 80008fc:	f5b5 4f8c 	cmp.w	r5, #17920	; 0x4600
  delay_ = ComputeDelay(pitch_);
 8000900:	60a0      	str	r0, [r4, #8]
  if (pitch_ > kHighestNote) {
 8000902:	dd14      	ble.n	800092e <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0xfe>
    pitch_ = kHighestNote;
 8000904:	f44f 438c 	mov.w	r3, #17920	; 0x4600
    pitch_ = 0;
 8000908:	8323      	strh	r3, [r4, #24]
  (this->*fn)(sync, buffer, size);
 800090a:	ea4f 036a 	mov.w	r3, sl, asr #1
 800090e:	f01a 0f01 	tst.w	sl, #1
 8000912:	eb04 0003 	add.w	r0, r4, r3
 8000916:	bf18      	it	ne
 8000918:	58e3      	ldrne	r3, [r4, r3]
 800091a:	463a      	mov	r2, r7
 800091c:	bf18      	it	ne
 800091e:	f853 9009 	ldrne.w	r9, [r3, r9]
 8000922:	4631      	mov	r1, r6
 8000924:	4643      	mov	r3, r8
 8000926:	46cc      	mov	ip, r9
}
 8000928:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  (this->*fn)(sync, buffer, size);
 800092c:	4760      	bx	ip
  } else if (pitch_ < 0) {
 800092e:	2d00      	cmp	r5, #0
 8000930:	daeb      	bge.n	800090a <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0xda>
    pitch_ = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	e7e8      	b.n	8000908 <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0xd8>
 8000936:	bf00      	nop
 8000938:	080052c8 	.word	0x080052c8
 800093c:	20000000 	.word	0x20000000

08000940 <_ZN6braids17DigitalOscillator18set_chordIntervalsEsss>:
	chordsIntervals[0] = interval1;
 8000940:	f8a0 1194 	strh.w	r1, [r0, #404]	; 0x194
	chordsIntervals[1] = interval2;
 8000944:	f8a0 2196 	strh.w	r2, [r0, #406]	; 0x196
	chordsIntervals[2] = interval3;
 8000948:	f8a0 3198 	strh.w	r3, [r0, #408]	; 0x198
}
 800094c:	4770      	bx	lr

0800094e <_ZN6braids15MacroOscillator10RenderBuzzEPKhPsj>:
}

void MacroOscillator::RenderBuzz(
    const uint8_t* sync,
    int16_t* buffer,
    size_t size) {
 800094e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  analog_oscillator_[0].set_parameter(parameter_[0]);
 8000952:	f9b0 7000 	ldrsh.w	r7, [r0]
    size_t size) {
 8000956:	4604      	mov	r4, r0
  inline void set_pitch(int16_t pitch) {
    pitch_ = pitch;
  }

  inline void set_parameter(int16_t parameter) {
    parameter_ = parameter;
 8000958:	f8a0 7066 	strh.w	r7, [r0, #102]	; 0x66
    shape_ = shape;
 800095c:	2008      	movs	r0, #8
 800095e:	461e      	mov	r6, r3
 8000960:	4688      	mov	r8, r1
 8000962:	4615      	mov	r5, r2
  analog_oscillator_[0].set_shape(OSC_SHAPE_BUZZ);
  analog_oscillator_[0].set_pitch(pitch_);
 8000964:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000968:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
 800096c:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94

  analog_oscillator_[1].set_parameter(parameter_[0]);
  analog_oscillator_[1].set_shape(OSC_SHAPE_BUZZ);
  analog_oscillator_[1].set_pitch(pitch_ + (parameter_[1] >> 8));
 8000970:	f994 0003 	ldrsb.w	r0, [r4, #3]
    pitch_ = pitch;
 8000974:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8000978:	4403      	add	r3, r0
    parameter_ = parameter;
 800097a:	f8a4 7086 	strh.w	r7, [r4, #134]	; 0x86
    pitch_ = pitch;
 800097e:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e

  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8000982:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000986:	2300      	movs	r3, #0
 8000988:	9600      	str	r6, [sp, #0]
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 800098a:	f104 0722 	add.w	r7, r4, #34	; 0x22
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 800098e:	f7ff fc07 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 8000992:	463a      	mov	r2, r7
 8000994:	9600      	str	r6, [sp, #0]
 8000996:	2300      	movs	r3, #0
 8000998:	4641      	mov	r1, r8
 800099a:	f104 0078 	add.w	r0, r4, #120	; 0x78
 800099e:	f7ff fbff 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
 80009a2:	1eaa      	subs	r2, r5, #2
  int16_t* temp_buffer = temp_buffer_;
  while (size--) {
 80009a4:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 80009a8:	d309      	bcc.n	80009be <_ZN6braids15MacroOscillator10RenderBuzzEPKhPsj+0x70>
    *buffer >>= 1;
 80009aa:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 80009ae:	105b      	asrs	r3, r3, #1
 80009b0:	8013      	strh	r3, [r2, #0]
    *buffer += *temp_buffer >> 1;
 80009b2:	f937 1b02 	ldrsh.w	r1, [r7], #2
 80009b6:	eb03 0361 	add.w	r3, r3, r1, asr #1
 80009ba:	8013      	strh	r3, [r2, #0]
  while (size--) {
 80009bc:	e7f2      	b.n	80009a4 <_ZN6braids15MacroOscillator10RenderBuzzEPKhPsj+0x56>
    buffer++;
    temp_buffer++;
  }
}
 80009be:	b002      	add	sp, #8
 80009c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080009c4 <_ZN6braids15MacroOscillator10RenderCSawEPKhPsj>:
    size_t size) {
 80009c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80009c6:	461d      	mov	r5, r3
 80009c8:	8903      	ldrh	r3, [r0, #8]
 80009ca:	4604      	mov	r4, r0
 80009cc:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
    shape_ = shape;
 80009d0:	2302      	movs	r3, #2
 80009d2:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    parameter_ = parameter;
 80009d6:	8803      	ldrh	r3, [r0, #0]
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 80009d8:	3058      	adds	r0, #88	; 0x58
 80009da:	81c3      	strh	r3, [r0, #14]
  }

  inline void set_aux_parameter(int16_t parameter) {
    aux_parameter_ = parameter;
 80009dc:	f830 3c56 	ldrh.w	r3, [r0, #-86]
    size_t size) {
 80009e0:	4616      	mov	r6, r2
 80009e2:	8243      	strh	r3, [r0, #18]
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 80009e4:	2300      	movs	r3, #0
 80009e6:	9500      	str	r5, [sp, #0]
 80009e8:	f7ff fbda 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
    *buffer++ = (s * 13) >> 3;
 80009ec:	210d      	movs	r1, #13
  int16_t shift = -(parameter_[1] - 32767) >> 4;
 80009ee:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80009f2:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 80009f6:	337f      	adds	r3, #127	; 0x7f
 80009f8:	111a      	asrs	r2, r3, #4
  while (size--) {
 80009fa:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 80009fe:	d307      	bcc.n	8000a10 <_ZN6braids15MacroOscillator10RenderCSawEPKhPsj+0x4c>
    int32_t s = *buffer + shift;
 8000a00:	f9b6 3000 	ldrsh.w	r3, [r6]
 8000a04:	4413      	add	r3, r2
    *buffer++ = (s * 13) >> 3;
 8000a06:	434b      	muls	r3, r1
 8000a08:	10db      	asrs	r3, r3, #3
 8000a0a:	f826 3b02 	strh.w	r3, [r6], #2
  while (size--) {
 8000a0e:	e7f4      	b.n	80009fa <_ZN6braids15MacroOscillator10RenderCSawEPKhPsj+0x36>
}
 8000a10:	b002      	add	sp, #8
 8000a12:	bd70      	pop	{r4, r5, r6, pc}

08000a14 <_ZN6braids15MacroOscillator15RenderSawSquareEPKhPsj>:
    size_t size) {
 8000a14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000a18:	461d      	mov	r5, r3
  analog_oscillator_[0].set_parameter(parameter_[0]);
 8000a1a:	f9b0 3000 	ldrsh.w	r3, [r0]
    size_t size) {
 8000a1e:	4604      	mov	r4, r0
    parameter_ = parameter;
 8000a20:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
 8000a24:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
  analog_oscillator_[0].set_pitch(pitch_);
 8000a28:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    size_t size) {
 8000a2c:	4688      	mov	r8, r1
    pitch_ = pitch;
 8000a2e:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
 8000a32:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
    shape_ = shape;
 8000a36:	2301      	movs	r3, #1
 8000a38:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
 8000a3c:	2303      	movs	r3, #3
  int16_t* square_buffer = temp_buffer_;
 8000a3e:	f100 0722 	add.w	r7, r0, #34	; 0x22
 8000a42:	f880 3094 	strb.w	r3, [r0, #148]	; 0x94
  analog_oscillator_[0].Render(sync, saw_buffer, NULL, size);
 8000a46:	2300      	movs	r3, #0
 8000a48:	3058      	adds	r0, #88	; 0x58
 8000a4a:	9500      	str	r5, [sp, #0]
    size_t size) {
 8000a4c:	4616      	mov	r6, r2
  analog_oscillator_[0].Render(sync, saw_buffer, NULL, size);
 8000a4e:	f7ff fba7 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync, square_buffer, NULL, size);
 8000a52:	2300      	movs	r3, #0
 8000a54:	463a      	mov	r2, r7
 8000a56:	4641      	mov	r1, r8
 8000a58:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8000a5c:	9500      	str	r5, [sp, #0]
 8000a5e:	f7ff fb9f 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  BEGIN_INTERPOLATE_PARAMETER_1
 8000a62:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8000a66:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
          *square_buffer++) * 148 >> 8;
 8000a6a:	f04f 0e94 	mov.w	lr, #148	; 0x94
  BEGIN_INTERPOLATE_PARAMETER_1
 8000a6e:	1a13      	subs	r3, r2, r0
 8000a70:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000a74:	fbb2 f2f5 	udiv	r2, r2, r5
 8000a78:	435a      	muls	r2, r3
  return (a * (65535 - balance) + b * balance) >> 16;
 8000a7a:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8000a7e:	4611      	mov	r1, r2
  while (size--) {
 8000a80:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 8000a84:	d316      	bcc.n	8000ab4 <_ZN6braids15MacroOscillator15RenderSawSquareEPKhPsj+0xa0>
    INTERPOLATE_PARAMETER_1
 8000a86:	eb00 33e1 	add.w	r3, r0, r1, asr #15
    uint16_t balance = parameter_1 << 1;
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	fa1f f883 	uxth.w	r8, r3
    int16_t attenuated_square = static_cast<int32_t>(
 8000a90:	f937 3b02 	ldrsh.w	r3, [r7], #2
 8000a94:	f936 ab02 	ldrsh.w	sl, [r6], #2
          *square_buffer++) * 148 >> 8;
 8000a98:	fb0e f303 	mul.w	r3, lr, r3
 8000a9c:	ebac 0908 	sub.w	r9, ip, r8
 8000aa0:	fb09 f90a 	mul.w	r9, r9, sl
 8000aa4:	121b      	asrs	r3, r3, #8
 8000aa6:	fb08 9303 	mla	r3, r8, r3, r9
 8000aaa:	141b      	asrs	r3, r3, #16
 8000aac:	f826 3c02 	strh.w	r3, [r6, #-2]
 8000ab0:	4411      	add	r1, r2
  while (size--) {
 8000ab2:	e7e5      	b.n	8000a80 <_ZN6braids15MacroOscillator15RenderSawSquareEPKhPsj+0x6c>
  END_INTERPOLATE_PARAMETER_1
 8000ab4:	8863      	ldrh	r3, [r4, #2]
 8000ab6:	80e3      	strh	r3, [r4, #6]
}
 8000ab8:	b002      	add	sp, #8
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000abe <_ZN6braids15MacroOscillator9RenderSubEPKhPsj>:
    size_t size) {
 8000abe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac2:	461d      	mov	r5, r3
  AnalogOscillatorShape base_shape = shape_ == MACRO_OSC_SHAPE_SQUARE_SUB ?
 8000ac4:	f244 2354 	movw	r3, #16980	; 0x4254
    size_t size) {
 8000ac8:	4604      	mov	r4, r0
  AnalogOscillatorShape base_shape = shape_ == MACRO_OSC_SHAPE_SQUARE_SUB ?
 8000aca:	5cc3      	ldrb	r3, [r0, r3]
    parameter_ = parameter;
 8000acc:	8800      	ldrh	r0, [r0, #0]
 8000ace:	2b05      	cmp	r3, #5
 8000ad0:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
    shape_ = shape;
 8000ad4:	f04f 0003 	mov.w	r0, #3
 8000ad8:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
  int16_t octave = parameter_[1] < 16384 ? (24 << 7) : (12 << 7);
 8000adc:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
  AnalogOscillatorShape base_shape = shape_ == MACRO_OSC_SHAPE_SQUARE_SUB ?
 8000ae0:	bf14      	ite	ne
 8000ae2:	2301      	movne	r3, #1
 8000ae4:	2303      	moveq	r3, #3
  int16_t octave = parameter_[1] < 16384 ? (24 << 7) : (12 << 7);
 8000ae6:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8000aea:	bfac      	ite	ge
 8000aec:	f44f 60c0 	movge.w	r0, #1536	; 0x600
 8000af0:	f44f 6040 	movlt.w	r0, #3072	; 0xc00
    parameter_ = parameter;
 8000af4:	2700      	movs	r7, #0
    size_t size) {
 8000af6:	4689      	mov	r9, r1
    shape_ = shape;
 8000af8:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  analog_oscillator_[0].set_pitch(pitch_);
 8000afc:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    parameter_ = parameter;
 8000b00:	f8a4 7086 	strh.w	r7, [r4, #134]	; 0x86
    pitch_ = pitch;
 8000b04:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
  analog_oscillator_[1].set_pitch(pitch_ - octave);
 8000b08:	1a1b      	subs	r3, r3, r0
 8000b0a:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8000b0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000b12:	463b      	mov	r3, r7
 8000b14:	9500      	str	r5, [sp, #0]
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 8000b16:	f104 0622 	add.w	r6, r4, #34	; 0x22
    size_t size) {
 8000b1a:	4690      	mov	r8, r2
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8000b1c:	f7ff fb40 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 8000b20:	463b      	mov	r3, r7
 8000b22:	4632      	mov	r2, r6
 8000b24:	4649      	mov	r1, r9
 8000b26:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8000b2a:	9500      	str	r5, [sp, #0]
 8000b2c:	f7ff fb38 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  BEGIN_INTERPOLATE_PARAMETER_1
 8000b30:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8000b34:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
        ? (16383 - parameter_1) : (parameter_1 - 16384)) << 1;
 8000b38:	f643 7eff 	movw	lr, #16383	; 0x3fff
  BEGIN_INTERPOLATE_PARAMETER_1
 8000b3c:	1bcb      	subs	r3, r1, r7
 8000b3e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000b42:	fbb1 f1f5 	udiv	r1, r1, r5
 8000b46:	4359      	muls	r1, r3
 8000b48:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8000b4c:	4608      	mov	r0, r1
 8000b4e:	f1a8 0202 	sub.w	r2, r8, #2
  while (size--) {
 8000b52:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 8000b56:	d31a      	bcc.n	8000b8e <_ZN6braids15MacroOscillator9RenderSubEPKhPsj+0xd0>
    INTERPOLATE_PARAMETER_1
 8000b58:	eb07 38e0 	add.w	r8, r7, r0, asr #15
 8000b5c:	fa1f f388 	uxth.w	r3, r8
    uint16_t sub_gain = (parameter_1 < 16384
 8000b60:	f5b8 4f80 	cmp.w	r8, #16384	; 0x4000
        ? (16383 - parameter_1) : (parameter_1 - 16384)) << 1;
 8000b64:	bfb4      	ite	lt
 8000b66:	ebae 0303 	sublt.w	r3, lr, r3
 8000b6a:	f5a3 4380 	subge.w	r3, r3, #16384	; 0x4000
 8000b6e:	f936 ab02 	ldrsh.w	sl, [r6], #2
    uint16_t sub_gain = (parameter_1 < 16384
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	ebac 0903 	sub.w	r9, ip, r3
 8000b7a:	fb03 f30a 	mul.w	r3, r3, sl
 8000b7e:	f932 8f02 	ldrsh.w	r8, [r2, #2]!
 8000b82:	4408      	add	r0, r1
 8000b84:	fb09 3308 	mla	r3, r9, r8, r3
 8000b88:	141b      	asrs	r3, r3, #16
 8000b8a:	8013      	strh	r3, [r2, #0]
  while (size--) {
 8000b8c:	e7e1      	b.n	8000b52 <_ZN6braids15MacroOscillator9RenderSubEPKhPsj+0x94>
  END_INTERPOLATE_PARAMETER_1
 8000b8e:	8863      	ldrh	r3, [r4, #2]
 8000b90:	80e3      	strh	r3, [r4, #6]
}
 8000b92:	b002      	add	sp, #8
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000b98 <_ZN6braids15MacroOscillator14RenderDualSyncEPKhPsj>:
    size_t size) {
 8000b98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000b9c:	461d      	mov	r5, r3
  AnalogOscillatorShape base_shape = shape_ == MACRO_OSC_SHAPE_SQUARE_SYNC ?
 8000b9e:	f244 2354 	movw	r3, #16980	; 0x4254
 8000ba2:	f04f 0800 	mov.w	r8, #0
 8000ba6:	5cc3      	ldrb	r3, [r0, r3]
    size_t size) {
 8000ba8:	4604      	mov	r4, r0
  AnalogOscillatorShape base_shape = shape_ == MACRO_OSC_SHAPE_SQUARE_SYNC ?
 8000baa:	2b07      	cmp	r3, #7
 8000bac:	bf0c      	ite	eq
 8000bae:	2003      	moveq	r0, #3
 8000bb0:	4640      	movne	r0, r8
  analog_oscillator_[0].set_pitch(pitch_);
 8000bb2:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    shape_ = shape;
 8000bb6:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
 8000bba:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
  analog_oscillator_[1].set_pitch(pitch_ + (parameter_[0] >> 2));
 8000bbe:	f9b4 0000 	ldrsh.w	r0, [r4]
    pitch_ = pitch;
 8000bc2:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
  analog_oscillator_[0].Render(sync, buffer, sync_buffer_, size);
 8000bc6:	f104 090a 	add.w	r9, r4, #10
  analog_oscillator_[1].set_pitch(pitch_ + (parameter_[0] >> 2));
 8000bca:	eb03 03a0 	add.w	r3, r3, r0, asr #2
 8000bce:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
  analog_oscillator_[0].Render(sync, buffer, sync_buffer_, size);
 8000bd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000bd6:	464b      	mov	r3, r9
    parameter_ = parameter;
 8000bd8:	f8a4 8066 	strh.w	r8, [r4, #102]	; 0x66
 8000bdc:	f8a4 8086 	strh.w	r8, [r4, #134]	; 0x86
 8000be0:	9500      	str	r5, [sp, #0]
  analog_oscillator_[1].Render(sync_buffer_, temp_buffer_, NULL, size);
 8000be2:	f104 0622 	add.w	r6, r4, #34	; 0x22
    size_t size) {
 8000be6:	4617      	mov	r7, r2
  analog_oscillator_[0].Render(sync, buffer, sync_buffer_, size);
 8000be8:	f7ff fada 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync_buffer_, temp_buffer_, NULL, size);
 8000bec:	4643      	mov	r3, r8
 8000bee:	4632      	mov	r2, r6
 8000bf0:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8000bf4:	9500      	str	r5, [sp, #0]
 8000bf6:	4649      	mov	r1, r9
 8000bf8:	f7ff fad2 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  BEGIN_INTERPOLATE_PARAMETER_1
 8000bfc:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8000c00:	f9b4 c006 	ldrsh.w	ip, [r4, #6]
 8000c04:	1eba      	subs	r2, r7, #2
 8000c06:	eba0 030c 	sub.w	r3, r0, ip
 8000c0a:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8000c0e:	fbb0 f0f5 	udiv	r0, r0, r5
 8000c12:	4358      	muls	r0, r3
 8000c14:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8000c18:	4607      	mov	r7, r0
  while (size--) {
 8000c1a:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 8000c1e:	d313      	bcc.n	8000c48 <_ZN6braids15MacroOscillator14RenderDualSyncEPKhPsj+0xb0>
    INTERPOLATE_PARAMETER_1
 8000c20:	eb0c 31e7 	add.w	r1, ip, r7, asr #15
 8000c24:	f936 9b02 	ldrsh.w	r9, [r6], #2
    uint16_t balance = parameter_1 << 1;
 8000c28:	0049      	lsls	r1, r1, #1
 8000c2a:	b289      	uxth	r1, r1
 8000c2c:	ebae 0801 	sub.w	r8, lr, r1
 8000c30:	fb01 f109 	mul.w	r1, r1, r9
 8000c34:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 8000c38:	4407      	add	r7, r0
 8000c3a:	fb08 1303 	mla	r3, r8, r3, r1
    *buffer = (Mix(*buffer, *temp_buffer, balance) >> 2) * 3;
 8000c3e:	149b      	asrs	r3, r3, #18
 8000c40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000c44:	8013      	strh	r3, [r2, #0]
  while (size--) {
 8000c46:	e7e8      	b.n	8000c1a <_ZN6braids15MacroOscillator14RenderDualSyncEPKhPsj+0x82>
  END_INTERPOLATE_PARAMETER_1
 8000c48:	8863      	ldrh	r3, [r4, #2]
 8000c4a:	80e3      	strh	r3, [r4, #6]
}
 8000c4c:	b003      	add	sp, #12
 8000c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c52 <_ZN6braids15MacroOscillator18RenderSineTriangleEPKhPsj>:
    size_t size) {
 8000c52:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  int32_t attenuation_sine = 32767 - 6 * (pitch_ - (92 << 7));
 8000c56:	f06f 0c05 	mvn.w	ip, #5
 8000c5a:	f647 75ff 	movw	r5, #32767	; 0x7fff
    size_t size) {
 8000c5e:	4604      	mov	r4, r0
  int32_t attenuation_sine = 32767 - 6 * (pitch_ - (92 << 7));
 8000c60:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
    size_t size) {
 8000c64:	461e      	mov	r6, r3
  int32_t attenuation_sine = 32767 - 6 * (pitch_ - (92 << 7));
 8000c66:	f5a0 5338 	sub.w	r3, r0, #11776	; 0x2e00
 8000c6a:	fb0c 5303 	mla	r3, ip, r3, r5
 8000c6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  analog_oscillator_[0].set_parameter(timbre * attenuation_sine >> 15);
 8000c72:	42ab      	cmp	r3, r5
 8000c74:	bfa8      	it	ge
 8000c76:	462b      	movge	r3, r5
  int32_t timbre = parameter_[0];
 8000c78:	f9b4 e000 	ldrsh.w	lr, [r4]
  int32_t attenuation_tri = 32767 - 7 * (pitch_ - (80 << 7));
 8000c7c:	f5a0 5c20 	sub.w	ip, r0, #10240	; 0x2800
  analog_oscillator_[0].set_parameter(timbre * attenuation_sine >> 15);
 8000c80:	fb0e f303 	mul.w	r3, lr, r3
 8000c84:	13db      	asrs	r3, r3, #15
 8000c86:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    shape_ = shape;
 8000c8a:	2307      	movs	r3, #7
  int32_t attenuation_tri = 32767 - 7 * (pitch_ - (80 << 7));
 8000c8c:	ebac 0ccc 	sub.w	ip, ip, ip, lsl #3
 8000c90:	44ac      	add	ip, r5
 8000c92:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
  analog_oscillator_[1].set_parameter(timbre * attenuation_tri >> 15);
 8000c96:	45ac      	cmp	ip, r5
 8000c98:	bfa8      	it	ge
 8000c9a:	46ac      	movge	ip, r5
 8000c9c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
 8000ca0:	2306      	movs	r3, #6
    size_t size) {
 8000ca2:	4688      	mov	r8, r1
  analog_oscillator_[1].set_parameter(timbre * attenuation_tri >> 15);
 8000ca4:	fb0e fe0c 	mul.w	lr, lr, ip
 8000ca8:	ea4f 3eee 	mov.w	lr, lr, asr #15
 8000cac:	f8a4 e086 	strh.w	lr, [r4, #134]	; 0x86
    pitch_ = pitch;
 8000cb0:	f8a4 006e 	strh.w	r0, [r4, #110]	; 0x6e
 8000cb4:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    shape_ = shape;
 8000cb8:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8000cbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	9600      	str	r6, [sp, #0]
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 8000cc4:	f104 0922 	add.w	r9, r4, #34	; 0x22
    size_t size) {
 8000cc8:	4617      	mov	r7, r2
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8000cca:	f7ff fa69 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 8000cce:	2300      	movs	r3, #0
 8000cd0:	464a      	mov	r2, r9
 8000cd2:	4641      	mov	r1, r8
 8000cd4:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8000cd8:	9600      	str	r6, [sp, #0]
 8000cda:	f7ff fa61 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  BEGIN_INTERPOLATE_PARAMETER_1
 8000cde:	fbb5 f5f6 	udiv	r5, r5, r6
 8000ce2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8000ce6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8000cea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000cee:	1a9b      	subs	r3, r3, r2
 8000cf0:	435d      	muls	r5, r3
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	3f02      	subs	r7, #2
  while (size--) {
 8000cf6:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 8000cfa:	d311      	bcc.n	8000d20 <_ZN6braids15MacroOscillator18RenderSineTriangleEPKhPsj+0xce>
    INTERPOLATE_PARAMETER_1
 8000cfc:	eb02 33e1 	add.w	r3, r2, r1, asr #15
 8000d00:	f939 8b02 	ldrsh.w	r8, [r9], #2
    uint16_t balance = parameter_1 << 1;
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	eba0 0e03 	sub.w	lr, r0, r3
 8000d0c:	fb03 f308 	mul.w	r3, r3, r8
 8000d10:	f937 cf02 	ldrsh.w	ip, [r7, #2]!
 8000d14:	4429      	add	r1, r5
 8000d16:	fb0e 330c 	mla	r3, lr, ip, r3
 8000d1a:	141b      	asrs	r3, r3, #16
 8000d1c:	803b      	strh	r3, [r7, #0]
  while (size--) {
 8000d1e:	e7ea      	b.n	8000cf6 <_ZN6braids15MacroOscillator18RenderSineTriangleEPKhPsj+0xa4>
  END_INTERPOLATE_PARAMETER_1
 8000d20:	8863      	ldrh	r3, [r4, #2]
 8000d22:	80e3      	strh	r3, [r4, #6]
}
 8000d24:	b003      	add	sp, #12
 8000d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08000d2c <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj>:
    size_t size) {
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	4617      	mov	r7, r2
  if (parameter_[0] <= 10922) {
 8000d32:	f642 22aa 	movw	r2, #10922	; 0x2aaa
    size_t size) {
 8000d36:	461e      	mov	r6, r3
  analog_oscillator_[0].set_pitch(pitch_);
 8000d38:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    size_t size) {
 8000d3c:	b087      	sub	sp, #28
    pitch_ = pitch;
 8000d3e:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
 8000d42:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
  if (parameter_[0] <= 10922) {
 8000d46:	f9b0 3000 	ldrsh.w	r3, [r0]
    size_t size) {
 8000d4a:	4604      	mov	r4, r0
  if (parameter_[0] <= 10922) {
 8000d4c:	4293      	cmp	r3, r2
    size_t size) {
 8000d4e:	4689      	mov	r9, r1
 8000d50:	f04f 0500 	mov.w	r5, #0
  if (parameter_[0] <= 10922) {
 8000d54:	f300 808b 	bgt.w	8000e6e <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x142>
    shape_ = shape;
 8000d58:	2204      	movs	r2, #4
    parameter_ = parameter;
 8000d5a:	f8a0 5066 	strh.w	r5, [r0, #102]	; 0x66
 8000d5e:	f8a0 5086 	strh.w	r5, [r0, #134]	; 0x86
    shape_ = shape;
 8000d62:	f880 5094 	strb.w	r5, [r0, #148]	; 0x94
    balance = parameter_[0] * 6;
 8000d66:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8000d6a:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
 8000d6e:	006d      	lsls	r5, r5, #1
    balance = 65535 - (parameter_[0] - 10923) * 6;
 8000d70:	b2ad      	uxth	r5, r5
  analog_oscillator_[0].Render(sync, shape_1, NULL, size);
 8000d72:	4649      	mov	r1, r9
 8000d74:	2300      	movs	r3, #0
 8000d76:	463a      	mov	r2, r7
 8000d78:	f104 0058 	add.w	r0, r4, #88	; 0x58
  int16_t* shape_2 = temp_buffer_;
 8000d7c:	f104 0822 	add.w	r8, r4, #34	; 0x22
  analog_oscillator_[0].Render(sync, shape_1, NULL, size);
 8000d80:	9600      	str	r6, [sp, #0]
 8000d82:	f7ff fa0d 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync, shape_2, NULL, size);
 8000d86:	4649      	mov	r1, r9
 8000d88:	2300      	movs	r3, #0
 8000d8a:	4642      	mov	r2, r8
 8000d8c:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8000d90:	9600      	str	r6, [sp, #0]
 8000d92:	f7ff fa05 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  int32_t lp_cutoff = pitch_ - (parameter_[1] >> 1) + 128 * 128;
 8000d96:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8000d9a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
  uint32_t a = table[phase >> 24];
 8000d9e:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8000ecc <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x1a0>
 8000da2:	eba2 0361 	sub.w	r3, r2, r1, asr #1
 8000da6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
  int32_t f = Interpolate824(lut_svf_cutoff, lp_cutoff << 17);
 8000daa:	f383 030f 	usat	r3, #15, r3
 8000dae:	045b      	lsls	r3, r3, #17
 8000db0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8000db4:	f83c 001e 	ldrh.w	r0, [ip, lr, lsl #1]
  uint32_t b = table[(phase >> 24) + 1];
 8000db8:	f10c 0c02 	add.w	ip, ip, #2
 8000dbc:	f83c c01e 	ldrh.w	ip, [ip, lr, lsl #1]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	ebac 0c00 	sub.w	ip, ip, r0
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	fb03 f30c 	mul.w	r3, r3, ip
 8000dcc:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  if (pitch_ > (80 << 7)) {
 8000dd0:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
  int32_t f = Interpolate824(lut_svf_cutoff, lp_cutoff << 17);
 8000dd4:	b283      	uxth	r3, r0
    fuzz_amount -= (pitch_ - (80 << 7)) << 4;
 8000dd6:	bfc8      	it	gt
 8000dd8:	f5a2 5220 	subgt.w	r2, r2, #10240	; 0x2800
  int32_t f = Interpolate824(lut_svf_cutoff, lp_cutoff << 17);
 8000ddc:	9303      	str	r3, [sp, #12]
  int32_t fuzz_amount = parameter_[1] << 1;
 8000dde:	ea4f 0341 	mov.w	r3, r1, lsl #1
    fuzz_amount -= (pitch_ - (80 << 7)) << 4;
 8000de2:	bfc4      	itt	gt
 8000de4:	eba3 1302 	subgt.w	r3, r3, r2, lsl #4
 8000de8:	ea23 73e3 	bicgt.w	r3, r3, r3, asr #31
  return (a * (65535 - balance) + b * balance) >> 16;
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	f647 7bff 	movw	fp, #32767	; 0x7fff
 8000df4:	f5c5 497f 	rsb	r9, r5, #65280	; 0xff00
 8000df8:	b29b      	uxth	r3, r3
  int32_t lp_state = lp_state_;
 8000dfa:	f8d4 c054 	ldr.w	ip, [r4, #84]	; 0x54
  int32_t a = table[index >> 8];
 8000dfe:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8000ed0 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x1a4>
  return (a * (65535 - balance) + b * balance) >> 16;
 8000e02:	f109 09ff 	add.w	r9, r9, #255	; 0xff
 8000e06:	9204      	str	r2, [sp, #16]
 8000e08:	9305      	str	r3, [sp, #20]
  while (size--) {
 8000e0a:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 8000e0e:	d353      	bcc.n	8000eb8 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x18c>
 8000e10:	f938 3b02 	ldrsh.w	r3, [r8], #2
 8000e14:	f937 2b02 	ldrsh.w	r2, [r7], #2
 8000e18:	436b      	muls	r3, r5
 8000e1a:	fb09 3202 	mla	r2, r9, r2, r3
    lp_state += (sample - lp_state) * f >> 15;
 8000e1e:	9903      	ldr	r1, [sp, #12]
 8000e20:	1412      	asrs	r2, r2, #16
 8000e22:	eba2 030c 	sub.w	r3, r2, ip
 8000e26:	434b      	muls	r3, r1
 8000e28:	eb0c 3ce3 	add.w	ip, ip, r3, asr #15
 8000e2c:	45dc      	cmp	ip, fp
 8000e2e:	bfa8      	it	ge
 8000e30:	46dc      	movge	ip, fp
 8000e32:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x198>)
  int32_t b = table[(index >> 8) + 1];
 8000e34:	4824      	ldr	r0, [pc, #144]	; (8000ec8 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x19c>)
 8000e36:	459c      	cmp	ip, r3
 8000e38:	bfb8      	it	lt
 8000e3a:	469c      	movlt	ip, r3
    shifted_sample = lp_state + 32768;
 8000e3c:	f50c 4100 	add.w	r1, ip, #32768	; 0x8000
  int32_t a = table[index >> 8];
 8000e40:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8000e44:	f93a 301e 	ldrsh.w	r3, [sl, lr, lsl #1]
  int32_t b = table[(index >> 8) + 1];
 8000e48:	f930 e01e 	ldrsh.w	lr, [r0, lr, lsl #1]
  return a + ((b - a) * static_cast<int32_t>(index & 0xff) >> 8);
 8000e4c:	b2c9      	uxtb	r1, r1
 8000e4e:	ebae 0e03 	sub.w	lr, lr, r3
 8000e52:	fb01 f10e 	mul.w	r1, r1, lr
 8000e56:	eb03 2121 	add.w	r1, r3, r1, asr #8
  return (a * (65535 - balance) + b * balance) >> 16;
 8000e5a:	9b05      	ldr	r3, [sp, #20]
 8000e5c:	b209      	sxth	r1, r1
 8000e5e:	435a      	muls	r2, r3
 8000e60:	9b04      	ldr	r3, [sp, #16]
 8000e62:	fb03 2101 	mla	r1, r3, r1, r2
 8000e66:	1409      	asrs	r1, r1, #16
 8000e68:	f827 1c02 	strh.w	r1, [r7, #-2]
  while (size--) {
 8000e6c:	e7cd      	b.n	8000e0a <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0xde>
  } else if (parameter_[0] <= 21845) {
 8000e6e:	f245 5255 	movw	r2, #21845	; 0x5555
 8000e72:	4293      	cmp	r3, r2
 8000e74:	dc10      	bgt.n	8000e98 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x16c>
 8000e76:	2203      	movs	r2, #3
    balance = 65535 - (parameter_[0] - 10923) * 6;
 8000e78:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 8000e7c:	3b2b      	subs	r3, #43	; 0x2b
 8000e7e:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
    parameter_ = parameter;
 8000e82:	f8a0 5066 	strh.w	r5, [r0, #102]	; 0x66
 8000e86:	f8a0 5086 	strh.w	r5, [r0, #134]	; 0x86
    shape_ = shape;
 8000e8a:	f880 5094 	strb.w	r5, [r0, #148]	; 0x94
 8000e8e:	005d      	lsls	r5, r3, #1
 8000e90:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
 8000e94:	3d01      	subs	r5, #1
 8000e96:	e76b      	b.n	8000d70 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x44>
    analog_oscillator_[0].set_parameter((parameter_[0] - 21846) * 3);
 8000e98:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 8000e9c:	3b56      	subs	r3, #86	; 0x56
 8000e9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    parameter_ = parameter;
 8000ea2:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
    shape_ = shape;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
 8000eac:	2305      	movs	r3, #5
    parameter_ = parameter;
 8000eae:	f8a0 5086 	strh.w	r5, [r0, #134]	; 0x86
    shape_ = shape;
 8000eb2:	f880 3094 	strb.w	r3, [r0, #148]	; 0x94
 8000eb6:	e75c      	b.n	8000d72 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x46>
  lp_state_ = lp_state;
 8000eb8:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
}
 8000ebc:	b007      	add	sp, #28
 8000ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ec2:	bf00      	nop
 8000ec4:	ffff8001 	.word	0xffff8001
 8000ec8:	08004dbe 	.word	0x08004dbe
 8000ecc:	08004bba 	.word	0x08004bba
 8000ed0:	08004dbc 	.word	0x08004dbc

08000ed4 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj>:
    size_t size) {
 8000ed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ed8:	461d      	mov	r5, r3
  switch (shape_) {
 8000eda:	f244 2354 	movw	r3, #16980	; 0x4254
 8000ede:	5cc3      	ldrb	r3, [r0, r3]
    size_t size) {
 8000ee0:	4614      	mov	r4, r2
 8000ee2:	3b09      	subs	r3, #9
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	bf98      	it	ls
 8000eea:	4a3c      	ldrls	r2, [pc, #240]	; (8000fdc <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0x108>)
 8000eec:	460e      	mov	r6, r1
 8000eee:	bf98      	it	ls
 8000ef0:	5cd1      	ldrbls	r1, [r2, r3]
    int16_t detune_1 = intervals[parameter_[i] >> 9];
 8000ef2:	f9b0 3000 	ldrsh.w	r3, [r0]
 8000ef6:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8000fe0 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0x10c>
 8000efa:	ea4f 2e63 	mov.w	lr, r3, asr #9
 8000efe:	f93c 801e 	ldrsh.w	r8, [ip, lr, lsl #1]
    int16_t detune_2 = intervals[((parameter_[i] >> 8) + 1) >> 1];
 8000f02:	ea4f 2e23 	mov.w	lr, r3, asr #8
 8000f06:	f10e 0e01 	add.w	lr, lr, #1
 8000f0a:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    int16_t detune = detune_1 + ((detune_2 - detune_1) * xfade >> 16);
 8000f0e:	f93c e01e 	ldrsh.w	lr, [ip, lr, lsl #1]
    uint16_t xfade = parameter_[i] << 8;
 8000f12:	ea4f 2303 	mov.w	r3, r3, lsl #8
    int16_t detune = detune_1 + ((detune_2 - detune_1) * xfade >> 16);
 8000f16:	ebae 0e08 	sub.w	lr, lr, r8
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	fb03 f30e 	mul.w	r3, r3, lr
  analog_oscillator_[0].set_pitch(pitch_);
 8000f20:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  switch (shape_) {
 8000f24:	bf88      	it	hi
 8000f26:	2105      	movhi	r1, #5
    pitch_ = pitch;
 8000f28:	f8a0 706e 	strh.w	r7, [r0, #110]	; 0x6e
    analog_oscillator_[i + 1].set_pitch(pitch_ + detune);
 8000f2c:	4447      	add	r7, r8
 8000f2e:	eb07 4323 	add.w	r3, r7, r3, asr #16
 8000f32:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
    int16_t detune_1 = intervals[parameter_[i] >> 9];
 8000f36:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    parameter_ = parameter;
 8000f3a:	2200      	movs	r2, #0
    int16_t detune_2 = intervals[((parameter_[i] >> 8) + 1) >> 1];
 8000f3c:	ea4f 2e23 	mov.w	lr, r3, asr #8
 8000f40:	f10e 0e01 	add.w	lr, lr, #1
    int16_t detune_1 = intervals[parameter_[i] >> 9];
 8000f44:	125f      	asrs	r7, r3, #9
    int16_t detune_2 = intervals[((parameter_[i] >> 8) + 1) >> 1];
 8000f46:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    int16_t detune_1 = intervals[parameter_[i] >> 9];
 8000f4a:	f93c 7017 	ldrsh.w	r7, [ip, r7, lsl #1]
    int16_t detune = detune_1 + ((detune_2 - detune_1) * xfade >> 16);
 8000f4e:	f93c c01e 	ldrsh.w	ip, [ip, lr, lsl #1]
    uint16_t xfade = parameter_[i] << 8;
 8000f52:	021b      	lsls	r3, r3, #8
    int16_t detune = detune_1 + ((detune_2 - detune_1) * xfade >> 16);
 8000f54:	ebac 0c07 	sub.w	ip, ip, r7
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	fb03 f30c 	mul.w	r3, r3, ip
    analog_oscillator_[i + 1].set_pitch(pitch_ + detune);
 8000f5e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8000f62:	f8a0 2066 	strh.w	r2, [r0, #102]	; 0x66
 8000f66:	4467      	add	r7, ip
 8000f68:	eb07 4323 	add.w	r3, r7, r3, asr #16
    pitch_ = pitch;
 8000f6c:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
  std::fill(&buffer[0], &buffer[size], 0);
 8000f70:	4623      	mov	r3, r4
    parameter_ = parameter;
 8000f72:	f8a0 2086 	strh.w	r2, [r0, #134]	; 0x86
 8000f76:	f8a0 20a6 	strh.w	r2, [r0, #166]	; 0xa6
    shape_ = shape;
 8000f7a:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 8000f7e:	f880 1094 	strb.w	r1, [r0, #148]	; 0x94
 8000f82:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
 8000f86:	eb04 0845 	add.w	r8, r4, r5, lsl #1
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 8000f8a:	4598      	cmp	r8, r3
 8000f8c:	d002      	beq.n	8000f94 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xc0>
	*__first = __tmp;
 8000f8e:	f823 2b02 	strh.w	r2, [r3], #2
 8000f92:	e7fa      	b.n	8000f8a <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xb6>
      buffer[j] += temp_buffer_[j] * 21 >> 6;
 8000f94:	f04f 0b15 	mov.w	fp, #21
 8000f98:	f100 0758 	add.w	r7, r0, #88	; 0x58
 8000f9c:	f100 0ab8 	add.w	sl, r0, #184	; 0xb8
    analog_oscillator_[i].Render(sync, temp_buffer_, NULL, size);
 8000fa0:	f100 0922 	add.w	r9, r0, #34	; 0x22
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	4638      	mov	r0, r7
 8000fa8:	9500      	str	r5, [sp, #0]
 8000faa:	464a      	mov	r2, r9
 8000fac:	4631      	mov	r1, r6
 8000fae:	f7ff f8f7 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
 8000fb2:	4648      	mov	r0, r9
 8000fb4:	4623      	mov	r3, r4
    for (size_t j = 0; j < size; ++j) {
 8000fb6:	4598      	cmp	r8, r3
 8000fb8:	d00a      	beq.n	8000fd0 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xfc>
      buffer[j] += temp_buffer_[j] * 21 >> 6;
 8000fba:	f930 1b02 	ldrsh.w	r1, [r0], #2
 8000fbe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fc2:	fb0b f101 	mul.w	r1, fp, r1
 8000fc6:	eb02 12a1 	add.w	r2, r2, r1, asr #6
 8000fca:	f823 2b02 	strh.w	r2, [r3], #2
    for (size_t j = 0; j < size; ++j) {
 8000fce:	e7f2      	b.n	8000fb6 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xe2>
 8000fd0:	3720      	adds	r7, #32
  for (size_t i = 0; i < 3; ++i) {
 8000fd2:	4557      	cmp	r7, sl
 8000fd4:	d1e6      	bne.n	8000fa4 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xd0>
}
 8000fd6:	b003      	add	sp, #12
 8000fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fdc:	08004933 	.word	0x08004933
 8000fe0:	08004936 	.word	0x08004936

08000fe4 <_ZN6braids15MacroOscillator13RenderSawCombEPKhPsj>:
}

void MacroOscillator::RenderSawComb(
  const uint8_t* sync,
  int16_t* buffer,
  size_t size) {
 8000fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000fe6:	461d      	mov	r5, r3
    parameter_ = parameter;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	4604      	mov	r4, r0
 8000fec:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
    pitch_ = pitch;
 8000ff0:	8900      	ldrh	r0, [r0, #8]
    shape_ = shape;
 8000ff2:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    pitch_ = pitch;
 8000ff6:	f8a4 006e 	strh.w	r0, [r4, #110]	; 0x6e
  analog_oscillator_[0].set_parameter(0);
  analog_oscillator_[0].set_pitch(pitch_);
  analog_oscillator_[0].set_shape(OSC_SHAPE_SAW);
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8000ffa:	9500      	str	r5, [sp, #0]
 8000ffc:	f104 0058 	add.w	r0, r4, #88	; 0x58
  size_t size) {
 8001000:	4617      	mov	r7, r2
 8001002:	460e      	mov	r6, r1
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8001004:	f7ff f8cc 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  
  digital_oscillator_.set_parameters(parameter_[0], parameter_[1]);
 8001008:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  }

  inline void set_parameters(
      int16_t parameter_1,
      int16_t parameter_2) {
    parameter_[0] = parameter_1;
 800100c:	8822      	ldrh	r2, [r4, #0]
    parameter_[1] = parameter_2;
 800100e:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
    if (pitch_ > (90 << 7) && pitch > (90 << 7)) {
 8001012:	f9b4 30d0 	ldrsh.w	r3, [r4, #208]	; 0xd0
    parameter_[0] = parameter_1;
 8001016:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
    if (pitch_ > (90 << 7) && pitch > (90 << 7)) {
 800101a:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 800101e:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
  digital_oscillator_.set_pitch(pitch_);
 8001022:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8001026:	dd11      	ble.n	800104c <_ZN6braids15MacroOscillator13RenderSawCombEPKhPsj+0x68>
 8001028:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 800102c:	dd0e      	ble.n	800104c <_ZN6braids15MacroOscillator13RenderSawCombEPKhPsj+0x68>
      pitch_ = (static_cast<int32_t>(pitch_) + pitch) >> 1;
 800102e:	4413      	add	r3, r2
 8001030:	105b      	asrs	r3, r3, #1
 8001032:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
    shape_ = shape;
 8001036:	2302      	movs	r3, #2
  digital_oscillator_.set_shape(OSC_SHAPE_COMB_FILTER);
  digital_oscillator_.Render(sync, buffer, size);
 8001038:	463a      	mov	r2, r7
 800103a:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
 800103e:	4631      	mov	r1, r6
 8001040:	462b      	mov	r3, r5
}
 8001042:	b003      	add	sp, #12
 8001044:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  digital_oscillator_.Render(sync, buffer, size);
 8001048:	f7ff bbf2 	b.w	8000830 <_ZN6braids17DigitalOscillator6RenderEPKhPsj>
      pitch_ = pitch;
 800104c:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
 8001050:	e7f1      	b.n	8001036 <_ZN6braids15MacroOscillator13RenderSawCombEPKhPsj+0x52>

08001052 <_ZN6braids15MacroOscillator13RenderDigitalEPKhPsj>:
    size_t size) {
 8001052:	b470      	push	{r4, r5, r6}
  digital_oscillator_.set_parameters(parameter_[0], parameter_[1]);
 8001054:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
    parameter_[0] = parameter_1;
 8001058:	8805      	ldrh	r5, [r0, #0]
    parameter_[1] = parameter_2;
 800105a:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
    if (pitch_ > (90 << 7) && pitch > (90 << 7)) {
 800105e:	f9b0 40d0 	ldrsh.w	r4, [r0, #208]	; 0xd0
    parameter_[0] = parameter_1;
 8001062:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
    if (pitch_ > (90 << 7) && pitch > (90 << 7)) {
 8001066:	f5b4 5f34 	cmp.w	r4, #11520	; 0x2d00
 800106a:	f100 06b8 	add.w	r6, r0, #184	; 0xb8
  digital_oscillator_.set_pitch(pitch_);
 800106e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8001072:	dd10      	ble.n	8001096 <_ZN6braids15MacroOscillator13RenderDigitalEPKhPsj+0x44>
 8001074:	f5b5 5f34 	cmp.w	r5, #11520	; 0x2d00
 8001078:	dd0d      	ble.n	8001096 <_ZN6braids15MacroOscillator13RenderDigitalEPKhPsj+0x44>
      pitch_ = (static_cast<int32_t>(pitch_) + pitch) >> 1;
 800107a:	442c      	add	r4, r5
 800107c:	1064      	asrs	r4, r4, #1
 800107e:	f8a0 40d0 	strh.w	r4, [r0, #208]	; 0xd0
      shape_ - MACRO_OSC_SHAPE_TRIPLE_RING_MOD));
 8001082:	f244 2454 	movw	r4, #16980	; 0x4254
 8001086:	5d04      	ldrb	r4, [r0, r4]
 8001088:	3c0d      	subs	r4, #13
    shape_ = shape;
 800108a:	f880 40d5 	strb.w	r4, [r0, #213]	; 0xd5
  digital_oscillator_.Render(sync, buffer, size);
 800108e:	4630      	mov	r0, r6
}
 8001090:	bc70      	pop	{r4, r5, r6}
  digital_oscillator_.Render(sync, buffer, size);
 8001092:	f7ff bbcd 	b.w	8000830 <_ZN6braids17DigitalOscillator6RenderEPKhPsj>
      pitch_ = pitch;
 8001096:	f8a0 50d0 	strh.w	r5, [r0, #208]	; 0xd0
 800109a:	e7f2      	b.n	8001082 <_ZN6braids15MacroOscillator13RenderDigitalEPKhPsj+0x30>

0800109c <_ZN6braids15MacroOscillator6RenderEPKhPsj>:
    size_t size) {
 800109c:	b4f0      	push	{r4, r5, r6, r7}
  RenderFn fn = fn_table_[shape_];
 800109e:	f244 2554 	movw	r5, #16980	; 0x4254
 80010a2:	4c09      	ldr	r4, [pc, #36]	; (80010c8 <_ZN6braids15MacroOscillator6RenderEPKhPsj+0x2c>)
 80010a4:	5d45      	ldrb	r5, [r0, r5]
 80010a6:	eb04 06c5 	add.w	r6, r4, r5, lsl #3
 80010aa:	6876      	ldr	r6, [r6, #4]
 80010ac:	f854 4035 	ldr.w	r4, [r4, r5, lsl #3]
  (this->*fn)(sync, buffer, size);
 80010b0:	1075      	asrs	r5, r6, #1
 80010b2:	07f6      	lsls	r6, r6, #31
 80010b4:	eb00 0705 	add.w	r7, r0, r5
 80010b8:	bf44      	itt	mi
 80010ba:	5940      	ldrmi	r0, [r0, r5]
 80010bc:	5904      	ldrmi	r4, [r0, r4]
 80010be:	4638      	mov	r0, r7
 80010c0:	46a4      	mov	ip, r4
}
 80010c2:	bcf0      	pop	{r4, r5, r6, r7}
  (this->*fn)(sync, buffer, size);
 80010c4:	4760      	bx	ip
 80010c6:	bf00      	nop
 80010c8:	20000118 	.word	0x20000118

080010cc <_ZN6braids9Quantizer4InitEv>:
 80010cc:	2301      	movs	r3, #1
 80010ce:	7003      	strb	r3, [r0, #0]
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80010d6:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 80010da:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 80010de:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80010e2:	3002      	adds	r0, #2
 80010e4:	f820 3b02 	strh.w	r3, [r0], #2
 80010e8:	3380      	adds	r3, #128	; 0x80
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010f0:	d1f8      	bne.n	80010e4 <_ZN6braids9Quantizer4InitEv+0x18>
 80010f2:	4770      	bx	lr

080010f4 <_ZN6braids9Quantizer9ConfigureEPKssj>:
 80010f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010f8:	b3a1      	cbz	r1, 8001164 <_ZN6braids9Quantizer9ConfigureEPKssj+0x70>
 80010fa:	b39b      	cbz	r3, 8001164 <_ZN6braids9Quantizer9ConfigureEPKssj+0x70>
 80010fc:	b392      	cbz	r2, 8001164 <_ZN6braids9Quantizer9ConfigureEPKssj+0x70>
 80010fe:	2401      	movs	r4, #1
 8001100:	4607      	mov	r7, r0
 8001102:	f807 4b82 	strb.w	r4, [r7], #130
 8001106:	2400      	movs	r4, #0
 8001108:	f647 78ff 	movw	r8, #32767	; 0x7fff
 800110c:	4626      	mov	r6, r4
 800110e:	f103 4e00 	add.w	lr, r3, #2147483648	; 0x80000000
 8001112:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800116c <_ZN6braids9Quantizer9ConfigureEPKssj+0x78>
 8001116:	f100 0c80 	add.w	ip, r0, #128	; 0x80
 800111a:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800111e:	ebae 0504 	sub.w	r5, lr, r4
 8001122:	f931 b015 	ldrsh.w	fp, [r1, r5, lsl #1]
 8001126:	43f5      	mvns	r5, r6
 8001128:	f931 a014 	ldrsh.w	sl, [r1, r4, lsl #1]
 800112c:	fb02 b505 	mla	r5, r2, r5, fp
 8001130:	fb06 aa02 	mla	sl, r6, r2, sl
 8001134:	45c2      	cmp	sl, r8
 8001136:	bfa8      	it	ge
 8001138:	46c2      	movge	sl, r8
 800113a:	4545      	cmp	r5, r8
 800113c:	bfa8      	it	ge
 800113e:	4645      	movge	r5, r8
 8001140:	45ca      	cmp	sl, r9
 8001142:	bfb8      	it	lt
 8001144:	46ca      	movlt	sl, r9
 8001146:	454d      	cmp	r5, r9
 8001148:	bfb8      	it	lt
 800114a:	464d      	movlt	r5, r9
 800114c:	3401      	adds	r4, #1
 800114e:	42a3      	cmp	r3, r4
 8001150:	f827 ab02 	strh.w	sl, [r7], #2
 8001154:	f82c 5902 	strh.w	r5, [ip], #-2
 8001158:	bf9c      	itt	ls
 800115a:	3601      	addls	r6, #1
 800115c:	2400      	movls	r4, #0
 800115e:	4560      	cmp	r0, ip
 8001160:	d1dd      	bne.n	800111e <_ZN6braids9Quantizer9ConfigureEPKssj+0x2a>
 8001162:	e001      	b.n	8001168 <_ZN6braids9Quantizer9ConfigureEPKssj+0x74>
 8001164:	2300      	movs	r3, #0
 8001166:	7003      	strb	r3, [r0, #0]
 8001168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800116c:	ffff8001 	.word	0xffff8001

08001170 <_ZN6braids9Quantizer7ProcessEll>:
 8001170:	7803      	ldrb	r3, [r0, #0]
 8001172:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001174:	b15b      	cbz	r3, 800118e <_ZN6braids9Quantizer7ProcessEll+0x1e>
 8001176:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800117a:	1a89      	subs	r1, r1, r2
 800117c:	428b      	cmp	r3, r1
 800117e:	dc08      	bgt.n	8001192 <_ZN6braids9Quantizer7ProcessEll+0x22>
 8001180:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8001184:	428b      	cmp	r3, r1
 8001186:	db04      	blt.n	8001192 <_ZN6braids9Quantizer7ProcessEll+0x22>
 8001188:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
 800118c:	4411      	add	r1, r2
 800118e:	4608      	mov	r0, r1
 8001190:	bdf0      	pop	{r4, r5, r6, r7, pc}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 8001192:	247b      	movs	r4, #123	; 0x7b
 8001194:	b20f      	sxth	r7, r1
 8001196:	f100 0308 	add.w	r3, r0, #8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 800119a:	2c00      	cmp	r4, #0
 800119c:	dd0c      	ble.n	80011b8 <_ZN6braids9Quantizer7ProcessEll+0x48>
	{
	  _DistanceType __half = __len >> 1;
 800119e:	1065      	asrs	r5, r4, #1
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__val, __middle))
 80011a0:	f933 c015 	ldrsh.w	ip, [r3, r5, lsl #1]
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
 80011a4:	eb03 0645 	add.w	r6, r3, r5, lsl #1
 80011a8:	45bc      	cmp	ip, r7
 80011aa:	dc03      	bgt.n	80011b4 <_ZN6braids9Quantizer7ProcessEll+0x44>
	    __len = __half;
	  else
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 80011ac:	1b64      	subs	r4, r4, r5
	      ++__first;
 80011ae:	1cb3      	adds	r3, r6, #2
	      __len = __len - __half - 1;
 80011b0:	3c01      	subs	r4, #1
 80011b2:	e7f2      	b.n	800119a <_ZN6braids9Quantizer7ProcessEll+0x2a>
	  _DistanceType __half = __len >> 1;
 80011b4:	462c      	mov	r4, r5
 80011b6:	e7f0      	b.n	800119a <_ZN6braids9Quantizer7ProcessEll+0x2a>
 80011b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80011bc:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 80011c0:	1c84      	adds	r4, r0, #2
 80011c2:	1b1b      	subs	r3, r3, r4
 80011c4:	105b      	asrs	r3, r3, #1
 80011c6:	b21f      	sxth	r7, r3
 80011c8:	3b02      	subs	r3, #2
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	42bb      	cmp	r3, r7
 80011ce:	dc11      	bgt.n	80011f4 <_ZN6braids9Quantizer7ProcessEll+0x84>
 80011d0:	eb00 0443 	add.w	r4, r0, r3, lsl #1
 80011d4:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 80011d8:	1b0c      	subs	r4, r1, r4
 80011da:	2c00      	cmp	r4, #0
 80011dc:	bfb8      	it	lt
 80011de:	4264      	neglt	r4, r4
 80011e0:	b224      	sxth	r4, r4
 80011e2:	42a6      	cmp	r6, r4
 80011e4:	bfc8      	it	gt
 80011e6:	461d      	movgt	r5, r3
 80011e8:	f103 0301 	add.w	r3, r3, #1
 80011ec:	bfc8      	it	gt
 80011ee:	4626      	movgt	r6, r4
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	e7eb      	b.n	80011cc <_ZN6braids9Quantizer7ProcessEll+0x5c>
 80011f4:	eb00 0345 	add.w	r3, r0, r5, lsl #1
 80011f8:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 80011fc:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
 8001200:	f930 4015 	ldrsh.w	r4, [r0, r5, lsl #1]
 8001204:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 8001208:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800120c:	4434      	add	r4, r6
 800120e:	1124      	asrs	r4, r4, #4
 8001210:	f8c0 4108 	str.w	r4, [r0, #264]	; 0x108
 8001214:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001218:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800121c:	4433      	add	r3, r6
 800121e:	111b      	asrs	r3, r3, #4
 8001220:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8001224:	e7b2      	b.n	800118c <_ZN6braids9Quantizer7ProcessEll+0x1c>
	...

08001228 <_ZN6braids8Settings5ResetEv>:
  }
  CheckPaques();
}

void Settings::Reset() {
  memcpy(&data_, &kInitSettings, sizeof(SettingsData));
 8001228:	2260      	movs	r2, #96	; 0x60
void Settings::Reset() {
 800122a:	b508      	push	{r3, lr}
  memcpy(&data_, &kInitSettings, sizeof(SettingsData));
 800122c:	4903      	ldr	r1, [pc, #12]	; (800123c <_ZN6braids8Settings5ResetEv+0x14>)
 800122e:	f003 fb47 	bl	80048c0 <memcpy>
  data_.magic_byte = 'M';
 8001232:	224d      	movs	r2, #77	; 0x4d
 8001234:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
}
 8001238:	bd08      	pop	{r3, pc}
 800123a:	bf00      	nop
 800123c:	0800df40 	.word	0x0800df40

08001240 <_ZN6braids8Settings11CheckPaquesEv>:
  data_.magic_byte = 'M';
  //storage.ParsimoniousSave(data_, &version_token_);
  CheckPaques();
}

void Settings::CheckPaques() {
 8001240:	b510      	push	{r4, lr}
  paques_ = !strcmp(data_.marquee_text, "49");
 8001242:	4905      	ldr	r1, [pc, #20]	; (8001258 <_ZN6braids8Settings11CheckPaquesEv+0x18>)
void Settings::CheckPaques() {
 8001244:	4604      	mov	r4, r0
  paques_ = !strcmp(data_.marquee_text, "49");
 8001246:	3028      	adds	r0, #40	; 0x28
 8001248:	f7fe ff80 	bl	800014c <strcmp>
 800124c:	fab0 f080 	clz	r0, r0
 8001250:	0940      	lsrs	r0, r0, #5
 8001252:	f884 0062 	strb.w	r0, [r4, #98]	; 0x62
}
 8001256:	bd10      	pop	{r4, pc}
 8001258:	0800dcf6 	.word	0x0800dcf6

0800125c <_ZN6braids8Settings4InitEv>:
void Settings::Init() {
 800125c:	b570      	push	{r4, r5, r6, lr}
 800125e:	4604      	mov	r4, r0
 8001260:	260c      	movs	r6, #12
    Reset();
 8001262:	f7ff ffe1 	bl	8001228 <_ZN6braids8Settings5ResetEv>
  for (int32_t i = 0; i <= SETTING_LAST_EDITABLE_SETTING; ++i) {
 8001266:	2200      	movs	r2, #0
  bool settings_within_range = true;
 8001268:	2301      	movs	r3, #1
        value >= setting_metadata.min_value && \
 800126a:	481b      	ldr	r0, [pc, #108]	; (80012d8 <_ZN6braids8Settings4InitEv+0x7c>)
 800126c:	b15b      	cbz	r3, 8001286 <_ZN6braids8Settings4InitEv+0x2a>
 800126e:	fb06 f102 	mul.w	r1, r6, r2
  }
  
  uint8_t GetValue(Setting setting) const {
    const uint8_t* data = static_cast<const uint8_t*>(
        static_cast<const void*>(&data_));
    return data[setting];
 8001272:	5ca5      	ldrb	r5, [r4, r2]
    settings_within_range = settings_within_range && \
 8001274:	5c0b      	ldrb	r3, [r1, r0]
 8001276:	42ab      	cmp	r3, r5
 8001278:	d82b      	bhi.n	80012d2 <_ZN6braids8Settings4InitEv+0x76>
        value <= setting_metadata.max_value;
 800127a:	4401      	add	r1, r0
        value >= setting_metadata.min_value && \
 800127c:	784b      	ldrb	r3, [r1, #1]
 800127e:	42ab      	cmp	r3, r5
 8001280:	bf34      	ite	cc
 8001282:	2300      	movcc	r3, #0
 8001284:	2301      	movcs	r3, #1
  for (int32_t i = 0; i <= SETTING_LAST_EDITABLE_SETTING; ++i) {
 8001286:	3201      	adds	r2, #1
 8001288:	2a14      	cmp	r2, #20
 800128a:	d1ef      	bne.n	800126c <_ZN6braids8Settings4InitEv+0x10>
  settings_within_range = settings_within_range && data_.magic_byte == 'M';
 800128c:	b1cb      	cbz	r3, 80012c2 <_ZN6braids8Settings4InitEv+0x66>
 800128e:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
 8001292:	2b4d      	cmp	r3, #77	; 0x4d
 8001294:	d115      	bne.n	80012c2 <_ZN6braids8Settings4InitEv+0x66>
    settings_within_range = settings_within_range && \
 8001296:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8001298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800129c:	d911      	bls.n	80012c2 <_ZN6braids8Settings4InitEv+0x66>
    settings_within_range = settings_within_range && \
 800129e:	f641 733f 	movw	r3, #7999	; 0x1f3f
 80012a2:	f643 617e 	movw	r1, #15998	; 0x3e7e
 80012a6:	8c22      	ldrh	r2, [r4, #32]
 80012a8:	441a      	add	r2, r3
 80012aa:	b292      	uxth	r2, r2
 80012ac:	428a      	cmp	r2, r1
 80012ae:	d808      	bhi.n	80012c2 <_ZN6braids8Settings4InitEv+0x66>
    settings_within_range = settings_within_range && \
 80012b0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80012b2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80012b6:	d904      	bls.n	80012c2 <_ZN6braids8Settings4InitEv+0x66>
    settings_within_range = settings_within_range && \
 80012b8:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 80012ba:	4413      	add	r3, r2
 80012bc:	b29b      	uxth	r3, r3
 80012be:	428b      	cmp	r3, r1
 80012c0:	d902      	bls.n	80012c8 <_ZN6braids8Settings4InitEv+0x6c>
    Reset();
 80012c2:	4620      	mov	r0, r4
 80012c4:	f7ff ffb0 	bl	8001228 <_ZN6braids8Settings5ResetEv>
  CheckPaques();
 80012c8:	4620      	mov	r0, r4
}
 80012ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  CheckPaques();
 80012ce:	f7ff bfb7 	b.w	8001240 <_ZN6braids8Settings11CheckPaquesEv>
        value >= setting_metadata.min_value && \
 80012d2:	2300      	movs	r3, #0
 80012d4:	e7d7      	b.n	8001286 <_ZN6braids8Settings4InitEv+0x2a>
 80012d6:	bf00      	nop
 80012d8:	0800dcfc 	.word	0x0800dcfc

080012dc <_ZN6braids8Settings4SaveEv>:
  data_.magic_byte = 'M';
 80012dc:	234d      	movs	r3, #77	; 0x4d
 80012de:	f880 305f 	strb.w	r3, [r0, #95]	; 0x5f
  CheckPaques();
 80012e2:	f7ff bfad 	b.w	8001240 <_ZN6braids8Settings11CheckPaquesEv>

080012e6 <_ZN6braids3Adc4InitEv>:
 80012e6:	4770      	bx	lr

080012e8 <_Z18SystemClock_Configv>:
 80012e8:	b510      	push	{r4, lr}
 80012ea:	2414      	movs	r4, #20
 80012ec:	b090      	sub	sp, #64	; 0x40
 80012ee:	4622      	mov	r2, r4
 80012f0:	2100      	movs	r1, #0
 80012f2:	a808      	add	r0, sp, #32
 80012f4:	f003 faef 	bl	80048d6 <memset>
 80012f8:	4622      	mov	r2, r4
 80012fa:	2100      	movs	r1, #0
 80012fc:	a801      	add	r0, sp, #4
 80012fe:	f003 faea 	bl	80048d6 <memset>
 8001302:	2402      	movs	r4, #2
 8001304:	2201      	movs	r2, #1
 8001306:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800130a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800130e:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
 8001312:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001316:	a806      	add	r0, sp, #24
 8001318:	920a      	str	r2, [sp, #40]	; 0x28
 800131a:	930f      	str	r3, [sp, #60]	; 0x3c
 800131c:	f002 fea4 	bl	8004068 <HAL_RCC_OscConfig>
 8001320:	230f      	movs	r3, #15
 8001322:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001326:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800132a:	2300      	movs	r3, #0
 800132c:	4621      	mov	r1, r4
 800132e:	a801      	add	r0, sp, #4
 8001330:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8001334:	9305      	str	r3, [sp, #20]
 8001336:	f003 f917 	bl	8004568 <HAL_RCC_ClockConfig>
 800133a:	b010      	add	sp, #64	; 0x40
 800133c:	bd10      	pop	{r4, pc}
	...

08001340 <main>:
 8001340:	b500      	push	{lr}
 8001342:	b089      	sub	sp, #36	; 0x24
 8001344:	f001 fc10 	bl	8002b68 <HAL_Init>
 8001348:	f7ff ffce 	bl	80012e8 <_Z18SystemClock_Configv>
 800134c:	2210      	movs	r2, #16
 800134e:	2100      	movs	r1, #0
 8001350:	eb0d 0002 	add.w	r0, sp, r2
 8001354:	f003 fabf 	bl	80048d6 <memset>
 8001358:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <main+0x84>)
 800135a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800135e:	699a      	ldr	r2, [r3, #24]
 8001360:	4819      	ldr	r0, [pc, #100]	; (80013c8 <main+0x88>)
 8001362:	f042 0210 	orr.w	r2, r2, #16
 8001366:	619a      	str	r2, [r3, #24]
 8001368:	699a      	ldr	r2, [r3, #24]
 800136a:	f002 0210 	and.w	r2, r2, #16
 800136e:	9201      	str	r2, [sp, #4]
 8001370:	9a01      	ldr	r2, [sp, #4]
 8001372:	699a      	ldr	r2, [r3, #24]
 8001374:	f042 0220 	orr.w	r2, r2, #32
 8001378:	619a      	str	r2, [r3, #24]
 800137a:	699a      	ldr	r2, [r3, #24]
 800137c:	f002 0220 	and.w	r2, r2, #32
 8001380:	9202      	str	r2, [sp, #8]
 8001382:	9a02      	ldr	r2, [sp, #8]
 8001384:	699a      	ldr	r2, [r3, #24]
 8001386:	f042 0204 	orr.w	r2, r2, #4
 800138a:	619a      	str	r2, [r3, #24]
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	2200      	movs	r2, #0
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	9303      	str	r3, [sp, #12]
 8001396:	9b03      	ldr	r3, [sp, #12]
 8001398:	f001 febf 	bl	800311a <HAL_GPIO_WritePin>
 800139c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013a0:	2301      	movs	r3, #1
 80013a2:	2100      	movs	r1, #0
 80013a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013a8:	2302      	movs	r3, #2
 80013aa:	4807      	ldr	r0, [pc, #28]	; (80013c8 <main+0x88>)
 80013ac:	e9cd 1306 	strd	r1, r3, [sp, #24]
 80013b0:	a904      	add	r1, sp, #16
 80013b2:	f001 fd41 	bl	8002e38 <HAL_GPIO_Init>
 80013b6:	a804      	add	r0, sp, #16
 80013b8:	f000 fb74 	bl	8001aa4 <_ZN8MainLoop4initEv>
 80013bc:	a804      	add	r0, sp, #16
 80013be:	f000 fd9d 	bl	8001efc <_ZN8MainLoop4loopEv>
 80013c2:	e7fb      	b.n	80013bc <main+0x7c>
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40011000 	.word	0x40011000

080013cc <HAL_MspInit>:
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <HAL_MspInit+0x5c>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	4a14      	ldr	r2, [pc, #80]	; (8001428 <HAL_MspInit+0x5c>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6193      	str	r3, [r2, #24]
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_MspInit+0x5c>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <HAL_MspInit+0x5c>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	4a0e      	ldr	r2, [pc, #56]	; (8001428 <HAL_MspInit+0x5c>)
 80013f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f4:	61d3      	str	r3, [r2, #28]
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <HAL_MspInit+0x5c>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <HAL_MspInit+0x60>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <HAL_MspInit+0x60>)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6053      	str	r3, [r2, #4]
 800141e:	bf00      	nop
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	40021000 	.word	0x40021000
 800142c:	40010000 	.word	0x40010000

08001430 <HAL_I2C_MspInit>:
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	f107 0310 	add.w	r3, r7, #16
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a15      	ldr	r2, [pc, #84]	; (80014a0 <HAL_I2C_MspInit+0x70>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d123      	bne.n	8001498 <HAL_I2C_MspInit+0x68>
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <HAL_I2C_MspInit+0x74>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a13      	ldr	r2, [pc, #76]	; (80014a4 <HAL_I2C_MspInit+0x74>)
 8001456:	f043 0308 	orr.w	r3, r3, #8
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <HAL_I2C_MspInit+0x74>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	23c0      	movs	r3, #192	; 0xc0
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	2312      	movs	r3, #18
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	2303      	movs	r3, #3
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	f107 0310 	add.w	r3, r7, #16
 8001478:	4619      	mov	r1, r3
 800147a:	480b      	ldr	r0, [pc, #44]	; (80014a8 <HAL_I2C_MspInit+0x78>)
 800147c:	f001 fcdc 	bl	8002e38 <HAL_GPIO_Init>
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_I2C_MspInit+0x74>)
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_I2C_MspInit+0x74>)
 8001486:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800148a:	61d3      	str	r3, [r2, #28]
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_I2C_MspInit+0x74>)
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	bf00      	nop
 800149a:	3720      	adds	r7, #32
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40005400 	.word	0x40005400
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40010c00 	.word	0x40010c00

080014ac <NMI_Handler>:
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <HardFault_Handler>:
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	e7fe      	b.n	80014bc <HardFault_Handler+0x4>

080014be <MemManage_Handler>:
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	e7fe      	b.n	80014c2 <MemManage_Handler+0x4>

080014c4 <BusFault_Handler>:
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	e7fe      	b.n	80014c8 <BusFault_Handler+0x4>

080014ca <UsageFault_Handler>:
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	e7fe      	b.n	80014ce <UsageFault_Handler+0x4>

080014d0 <SVC_Handler>:
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <DebugMon_Handler>:
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <PendSV_Handler>:
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <SysTick_Handler>:
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	f001 fb7c 	bl	8002bf4 <HAL_IncTick>
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}

08001500 <SystemInit>:
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <SystemInit+0x5c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a14      	ldr	r2, [pc, #80]	; (800155c <SystemInit+0x5c>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <SystemInit+0x5c>)
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	4911      	ldr	r1, [pc, #68]	; (800155c <SystemInit+0x5c>)
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <SystemInit+0x60>)
 8001518:	4013      	ands	r3, r2
 800151a:	604b      	str	r3, [r1, #4]
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <SystemInit+0x5c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0e      	ldr	r2, [pc, #56]	; (800155c <SystemInit+0x5c>)
 8001522:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <SystemInit+0x5c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0a      	ldr	r2, [pc, #40]	; (800155c <SystemInit+0x5c>)
 8001532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <SystemInit+0x5c>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <SystemInit+0x5c>)
 800153e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001542:	6053      	str	r3, [r2, #4]
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <SystemInit+0x5c>)
 8001546:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <SystemInit+0x64>)
 800154e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	40021000 	.word	0x40021000
 8001560:	f8ff0000 	.word	0xf8ff0000
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <_ZN12ChordManager4initEv>:



void ChordManager::init(void) {

	this->currentChordIntervals[0]=0;
 8001568:	2300      	movs	r3, #0
 800156a:	6003      	str	r3, [r0, #0]
	this->currentChordIntervals[1]=0;
 800156c:	8083      	strh	r3, [r0, #4]
	this->currentChordIntervals[2]=0;
	this->pitch=0;
 800156e:	6083      	str	r3, [r0, #8]
 8001570:	f240 1301 	movw	r3, #257	; 0x101
 8001574:	8183      	strh	r3, [r0, #12]
	this->harmonizerEnabled=1;
	this->harmonizerScale=1;
}
 8001576:	4770      	bx	lr

08001578 <_ZN12ChordManager9getChord1Ev>:
}

int16_t ChordManager::getChord1(void)
{
	return this->currentChordIntervals[0];
}
 8001578:	f9b0 0000 	ldrsh.w	r0, [r0]
 800157c:	4770      	bx	lr

0800157e <_ZN12ChordManager9getChord2Ev>:
int16_t ChordManager::getChord2(void)
{
	return this->currentChordIntervals[1];
}
 800157e:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8001582:	4770      	bx	lr

08001584 <_ZN12ChordManager9getChord3Ev>:
int16_t ChordManager::getChord3(void)
{
	return this->currentChordIntervals[2];
}
 8001584:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8001588:	4770      	bx	lr

0800158a <_ZN12ChordManager8getPitchEv>:
int32_t ChordManager::getPitch(void)
{
	return this->pitch;
}
 800158a:	6880      	ldr	r0, [r0, #8]
 800158c:	4770      	bx	lr
	...

08001590 <_ZN12ChordManager26calculateHarmonizedQualityEll>:


uint8_t ChordManager::calculateHarmonizedQuality(int32_t pitchValueIn,int32_t rootValueIn)
{
	uint16_t notePositionInScale;
	uint16_t note = pitchValueIn % (12 SEMI);
 8001590:	f44f 63c0 	mov.w	r3, #1536	; 0x600
{
 8001594:	b530      	push	{r4, r5, lr}
	uint16_t note = pitchValueIn % (12 SEMI);
 8001596:	fb91 f4f3 	sdiv	r4, r1, r3
 800159a:	fb04 1113 	mls	r1, r4, r3, r1
	uint16_t root = rootValueIn % (12 SEMI);
 800159e:	fb92 f4f3 	sdiv	r4, r2, r3
 80015a2:	fb04 2213 	mls	r2, r4, r3, r2
 80015a6:	b294      	uxth	r4, r2
 80015a8:	2280      	movs	r2, #128	; 0x80
 80015aa:	b28d      	uxth	r5, r1
	if(note>=root)
 80015ac:	42a5      	cmp	r5, r4
	{
		notePositionInScale = (note - root)/(1 SEMI);
	}
	else
	{
		notePositionInScale = (( (12 SEMI)-root) + note)/(1 SEMI);
 80015ae:	bf36      	itet	cc
 80015b0:	f5c4 63c0 	rsbcc	r3, r4, #1536	; 0x600
		notePositionInScale = (note - root)/(1 SEMI);
 80015b4:	1b2b      	subcs	r3, r5, r4
		notePositionInScale = (( (12 SEMI)-root) + note)/(1 SEMI);
 80015b6:	195b      	addcc	r3, r3, r5
 80015b8:	fb93 f3f2 	sdiv	r3, r3, r2
	}

	switch(this->harmonizerScale)
 80015bc:	7b42      	ldrb	r2, [r0, #13]
		notePositionInScale = (( (12 SEMI)-root) + note)/(1 SEMI);
 80015be:	b29b      	uxth	r3, r3
	switch(this->harmonizerScale)
 80015c0:	b11a      	cbz	r2, 80015ca <_ZN12ChordManager26calculateHarmonizedQualityEll+0x3a>
 80015c2:	2a01      	cmp	r2, #1
 80015c4:	d01c      	beq.n	8001600 <_ZN12ChordManager26calculateHarmonizedQualityEll+0x70>
		case 1: // MINOR
		{
			switch(notePositionInScale)
			{
				case 0: return QUALITY_MIN; // i
				case 1: return QUALITY_MAJ;
 80015c6:	2000      	movs	r0, #0
 80015c8:	e039      	b.n	800163e <_ZN12ChordManager26calculateHarmonizedQualityEll+0xae>
			switch(notePositionInScale)
 80015ca:	3b02      	subs	r3, #2
 80015cc:	2b09      	cmp	r3, #9
 80015ce:	d8fa      	bhi.n	80015c6 <_ZN12ChordManager26calculateHarmonizedQualityEll+0x36>
 80015d0:	a201      	add	r2, pc, #4	; (adr r2, 80015d8 <_ZN12ChordManager26calculateHarmonizedQualityEll+0x48>)
 80015d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d6:	bf00      	nop
 80015d8:	08001645 	.word	0x08001645
 80015dc:	080015c7 	.word	0x080015c7
 80015e0:	08001645 	.word	0x08001645
 80015e4:	080015c7 	.word	0x080015c7
 80015e8:	08001649 	.word	0x08001649
 80015ec:	08001649 	.word	0x08001649
 80015f0:	080015c7 	.word	0x080015c7
 80015f4:	08001645 	.word	0x08001645
 80015f8:	08001649 	.word	0x08001649
 80015fc:	0800163d 	.word	0x0800163d
			switch(notePositionInScale)
 8001600:	2b0b      	cmp	r3, #11
 8001602:	d8e0      	bhi.n	80015c6 <_ZN12ChordManager26calculateHarmonizedQualityEll+0x36>
 8001604:	a201      	add	r2, pc, #4	; (adr r2, 800160c <_ZN12ChordManager26calculateHarmonizedQualityEll+0x7c>)
 8001606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160a:	bf00      	nop
 800160c:	08001645 	.word	0x08001645
 8001610:	080015c7 	.word	0x080015c7
 8001614:	0800163d 	.word	0x0800163d
 8001618:	080015c7 	.word	0x080015c7
 800161c:	0800163d 	.word	0x0800163d
 8001620:	08001645 	.word	0x08001645
 8001624:	08001641 	.word	0x08001641
 8001628:	08001649 	.word	0x08001649
 800162c:	080015c7 	.word	0x080015c7
 8001630:	0800163d 	.word	0x0800163d
 8001634:	080015c7 	.word	0x080015c7
 8001638:	0800163d 	.word	0x0800163d
				case 11: return QUALITY_DIM; //(diatonic) vii
 800163c:	2003      	movs	r0, #3
			}
			break;
		}
	}
	return QUALITY_MAJ;
}
 800163e:	bd30      	pop	{r4, r5, pc}
				case 6: return QUALITY_AUG;
 8001640:	2005      	movs	r0, #5
 8001642:	e7fc      	b.n	800163e <_ZN12ChordManager26calculateHarmonizedQualityEll+0xae>
				case 2: return QUALITY_MIN; //(diatonic)  ii
 8001644:	2001      	movs	r0, #1
 8001646:	e7fa      	b.n	800163e <_ZN12ChordManager26calculateHarmonizedQualityEll+0xae>
				case 6: return QUALITY_DOM; //(modal interchange)
 8001648:	2002      	movs	r0, #2
 800164a:	e7f8      	b.n	800163e <_ZN12ChordManager26calculateHarmonizedQualityEll+0xae>

0800164c <_ZN12ChordManager17calculateVoicingsEltttl>:
{
 800164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800164e:	461f      	mov	r7, r3
	if(this->harmonizerEnabled==1)
 8001650:	7b03      	ldrb	r3, [r0, #12]
{
 8001652:	4604      	mov	r4, r0
	if(this->harmonizerEnabled==1)
 8001654:	2b01      	cmp	r3, #1
{
 8001656:	460d      	mov	r5, r1
 8001658:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	if(this->harmonizerEnabled==1)
 800165c:	d111      	bne.n	8001682 <_ZN12ChordManager17calculateVoicingsEltttl+0x36>
		quality = calculateHarmonizedQuality(pitchValueIn,rootValueIn);
 800165e:	9a07      	ldr	r2, [sp, #28]
 8001660:	f7ff ff96 	bl	8001590 <_ZN12ChordManager26calculateHarmonizedQualityEll>
	uint8_t variation = calculateVariation(variationValueIn>>2,quality);
 8001664:	10bb      	asrs	r3, r7, #2
	if(quality==0 ||quality==1)
 8001666:	2801      	cmp	r0, #1
	uint8_t variation = calculateVariation(variationValueIn>>2,quality);
 8001668:	b29a      	uxth	r2, r3
	if(quality==0 ||quality==1)
 800166a:	d86b      	bhi.n	8001744 <_ZN12ChordManager17calculateVoicingsEltttl+0xf8>
		if(param>(3072+DELTA_HYSTERESIS_FOR_VARIAT))
 800166c:	f640 4196 	movw	r1, #3222	; 0xc96
 8001670:	428b      	cmp	r3, r1
 8001672:	499f      	ldr	r1, [pc, #636]	; (80018f0 <_ZN12ChordManager17calculateVoicingsEltttl+0x2a4>)
 8001674:	dc51      	bgt.n	800171a <_ZN12ChordManager17calculateVoicingsEltttl+0xce>
		else if(param>(3072-DELTA_HYSTERESIS_FOR_VARIAT))
 8001676:	f640 376a 	movw	r7, #2922	; 0xb6a
 800167a:	42bb      	cmp	r3, r7
 800167c:	dd3b      	ble.n	80016f6 <_ZN12ChordManager17calculateVoicingsEltttl+0xaa>
			ret=prevRet35;
 800167e:	780b      	ldrb	r3, [r1, #0]
 8001680:	e04c      	b.n	800171c <_ZN12ChordManager17calculateVoicingsEltttl+0xd0>
	if(param>(4100+DELTA_HYSTERESIS_FOR_QUALITY))
 8001682:	f241 039a 	movw	r3, #4250	; 0x109a
		quality = calculateQuality(qualityValueIn>>2); // get quality from input CV and Knob
 8001686:	1092      	asrs	r2, r2, #2
	if(param>(4100+DELTA_HYSTERESIS_FOR_QUALITY))
 8001688:	429a      	cmp	r2, r3
 800168a:	499a      	ldr	r1, [pc, #616]	; (80018f4 <_ZN12ChordManager17calculateVoicingsEltttl+0x2a8>)
 800168c:	dc29      	bgt.n	80016e2 <_ZN12ChordManager17calculateVoicingsEltttl+0x96>
	else if(param>(4100-DELTA_HYSTERESIS_FOR_QUALITY))
 800168e:	f640 706e 	movw	r0, #3950	; 0xf6e
 8001692:	4282      	cmp	r2, r0
		quality = calculateQuality(qualityValueIn>>2); // get quality from input CV and Knob
 8001694:	b293      	uxth	r3, r2
	else if(param>(4100-DELTA_HYSTERESIS_FOR_QUALITY))
 8001696:	dd02      	ble.n	800169e <_ZN12ChordManager17calculateVoicingsEltttl+0x52>
		ret = prevRet;
 8001698:	7808      	ldrb	r0, [r1, #0]
	prevRet = ret;
 800169a:	7008      	strb	r0, [r1, #0]
 800169c:	e7e2      	b.n	8001664 <_ZN12ChordManager17calculateVoicingsEltttl+0x18>
	else if(param>(3280+DELTA_HYSTERESIS_FOR_QUALITY))
 800169e:	f640 5266 	movw	r2, #3430	; 0xd66
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d81f      	bhi.n	80016e6 <_ZN12ChordManager17calculateVoicingsEltttl+0x9a>
	else if(param>(3280-DELTA_HYSTERESIS_FOR_QUALITY))
 80016a6:	f640 423a 	movw	r2, #3130	; 0xc3a
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d8f4      	bhi.n	8001698 <_ZN12ChordManager17calculateVoicingsEltttl+0x4c>
	else if(param>(2460+DELTA_HYSTERESIS_FOR_QUALITY))
 80016ae:	f640 2232 	movw	r2, #2610	; 0xa32
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d819      	bhi.n	80016ea <_ZN12ChordManager17calculateVoicingsEltttl+0x9e>
	else if(param>(2460-DELTA_HYSTERESIS_FOR_QUALITY))
 80016b6:	f640 1206 	movw	r2, #2310	; 0x906
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d8ec      	bhi.n	8001698 <_ZN12ChordManager17calculateVoicingsEltttl+0x4c>
	else if(param>(1640+DELTA_HYSTERESIS_FOR_QUALITY))
 80016be:	f240 62fe 	movw	r2, #1790	; 0x6fe
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d813      	bhi.n	80016ee <_ZN12ChordManager17calculateVoicingsEltttl+0xa2>
	else if(param>(1640-DELTA_HYSTERESIS_FOR_QUALITY))
 80016c6:	f240 52d2 	movw	r2, #1490	; 0x5d2
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d8e4      	bhi.n	8001698 <_ZN12ChordManager17calculateVoicingsEltttl+0x4c>
	else if(param>(820+DELTA_HYSTERESIS_FOR_QUALITY))
 80016ce:	f240 32ca 	movw	r2, #970	; 0x3ca
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d80d      	bhi.n	80016f2 <_ZN12ChordManager17calculateVoicingsEltttl+0xa6>
	else if(param>(820-DELTA_HYSTERESIS_FOR_QUALITY))
 80016d6:	f240 229e 	movw	r2, #670	; 0x29e
 80016da:	4293      	cmp	r3, r2
 80016dc:	d8dc      	bhi.n	8001698 <_ZN12ChordManager17calculateVoicingsEltttl+0x4c>
		ret=0;
 80016de:	2000      	movs	r0, #0
 80016e0:	e7db      	b.n	800169a <_ZN12ChordManager17calculateVoicingsEltttl+0x4e>
		ret= 5;
 80016e2:	2005      	movs	r0, #5
 80016e4:	e7d9      	b.n	800169a <_ZN12ChordManager17calculateVoicingsEltttl+0x4e>
		ret= 4;
 80016e6:	2004      	movs	r0, #4
 80016e8:	e7d7      	b.n	800169a <_ZN12ChordManager17calculateVoicingsEltttl+0x4e>
		ret= 3;
 80016ea:	2003      	movs	r0, #3
 80016ec:	e7d5      	b.n	800169a <_ZN12ChordManager17calculateVoicingsEltttl+0x4e>
		ret= 2;
 80016ee:	2002      	movs	r0, #2
 80016f0:	e7d3      	b.n	800169a <_ZN12ChordManager17calculateVoicingsEltttl+0x4e>
		ret= 1;
 80016f2:	2001      	movs	r0, #1
 80016f4:	e7d1      	b.n	800169a <_ZN12ChordManager17calculateVoicingsEltttl+0x4e>
		else if(param>(2048+DELTA_HYSTERESIS_FOR_VARIAT))
 80016f6:	f640 0396 	movw	r3, #2198	; 0x896
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d836      	bhi.n	800176c <_ZN12ChordManager17calculateVoicingsEltttl+0x120>
		else if(param>(2048-DELTA_HYSTERESIS_FOR_VARIAT))
 80016fe:	f240 736a 	movw	r3, #1898	; 0x76a
 8001702:	429a      	cmp	r2, r3
 8001704:	d8bb      	bhi.n	800167e <_ZN12ChordManager17calculateVoicingsEltttl+0x32>
		else if(param>(1024+DELTA_HYSTERESIS_FOR_VARIAT))
 8001706:	f240 4396 	movw	r3, #1174	; 0x496
 800170a:	429a      	cmp	r2, r3
 800170c:	d830      	bhi.n	8001770 <_ZN12ChordManager17calculateVoicingsEltttl+0x124>
		else if(param>(1024-DELTA_HYSTERESIS_FOR_VARIAT))
 800170e:	f240 336a 	movw	r3, #874	; 0x36a
 8001712:	429a      	cmp	r2, r3
 8001714:	d8b3      	bhi.n	800167e <_ZN12ChordManager17calculateVoicingsEltttl+0x32>
			ret=0;
 8001716:	2300      	movs	r3, #0
 8001718:	e000      	b.n	800171c <_ZN12ChordManager17calculateVoicingsEltttl+0xd0>
			ret=3;
 800171a:	2303      	movs	r3, #3
		prevRet35 = ret;
 800171c:	700b      	strb	r3, [r1, #0]
	if(param>(3584+DELTA_HYSTERESIS_FOR_VOICING))
 800171e:	f640 6296 	movw	r2, #3734	; 0xe96
 8001722:	4296      	cmp	r6, r2
 8001724:	4974      	ldr	r1, [pc, #464]	; (80018f8 <_ZN12ChordManager17calculateVoicingsEltttl+0x2ac>)
 8001726:	d86a      	bhi.n	80017fe <_ZN12ChordManager17calculateVoicingsEltttl+0x1b2>
	else if(param>(3584-DELTA_HYSTERESIS_FOR_VOICING))
 8001728:	f640 526a 	movw	r2, #3434	; 0xd6a
 800172c:	4296      	cmp	r6, r2
 800172e:	d935      	bls.n	800179c <_ZN12ChordManager17calculateVoicingsEltttl+0x150>
		ret=prevRet;
 8001730:	780a      	ldrb	r2, [r1, #0]
	prevRet = ret;
 8001732:	700a      	strb	r2, [r1, #0]
	switch(quality)
 8001734:	2805      	cmp	r0, #5
 8001736:	f200 809c 	bhi.w	8001872 <_ZN12ChordManager17calculateVoicingsEltttl+0x226>
 800173a:	e8df f000 	tbb	[pc, r0]
 800173e:	846e      	.short	0x846e
 8001740:	b0a99593 	.word	0xb0a99593
	if(quality==3 ||quality==5)
 8001744:	2803      	cmp	r0, #3
 8001746:	d001      	beq.n	800174c <_ZN12ChordManager17calculateVoicingsEltttl+0x100>
 8001748:	2805      	cmp	r0, #5
 800174a:	d113      	bne.n	8001774 <_ZN12ChordManager17calculateVoicingsEltttl+0x128>
		if(param>(2730+DELTA_HYSTERESIS_FOR_VARIAT))
 800174c:	f5b3 6f34 	cmp.w	r3, #2880	; 0xb40
 8001750:	496a      	ldr	r1, [pc, #424]	; (80018fc <_ZN12ChordManager17calculateVoicingsEltttl+0x2b0>)
 8001752:	dc0b      	bgt.n	800176c <_ZN12ChordManager17calculateVoicingsEltttl+0x120>
		else if(param>(2730-DELTA_HYSTERESIS_FOR_VARIAT))
 8001754:	f640 2714 	movw	r7, #2580	; 0xa14
 8001758:	42bb      	cmp	r3, r7
 800175a:	dc90      	bgt.n	800167e <_ZN12ChordManager17calculateVoicingsEltttl+0x32>
		else if(param>(1365+DELTA_HYSTERESIS_FOR_VARIAT))
 800175c:	f240 53eb 	movw	r3, #1515	; 0x5eb
 8001760:	429a      	cmp	r2, r3
 8001762:	d805      	bhi.n	8001770 <_ZN12ChordManager17calculateVoicingsEltttl+0x124>
		else if(param>(1365-DELTA_HYSTERESIS_FOR_VARIAT))
 8001764:	f5b2 6f98 	cmp.w	r2, #1216	; 0x4c0
 8001768:	d289      	bcs.n	800167e <_ZN12ChordManager17calculateVoicingsEltttl+0x32>
 800176a:	e7d4      	b.n	8001716 <_ZN12ChordManager17calculateVoicingsEltttl+0xca>
			ret=2;
 800176c:	2302      	movs	r3, #2
 800176e:	e7d5      	b.n	800171c <_ZN12ChordManager17calculateVoicingsEltttl+0xd0>
			ret=1;
 8001770:	2301      	movs	r3, #1
 8001772:	e7d3      	b.n	800171c <_ZN12ChordManager17calculateVoicingsEltttl+0xd0>
	if(quality==4)
 8001774:	2804      	cmp	r0, #4
 8001776:	d10f      	bne.n	8001798 <_ZN12ChordManager17calculateVoicingsEltttl+0x14c>
		if(param>(2048+DELTA_HYSTERESIS_FOR_VARIAT))
 8001778:	f640 0296 	movw	r2, #2198	; 0x896
 800177c:	4293      	cmp	r3, r2
 800177e:	4a60      	ldr	r2, [pc, #384]	; (8001900 <_ZN12ChordManager17calculateVoicingsEltttl+0x2b4>)
 8001780:	dc06      	bgt.n	8001790 <_ZN12ChordManager17calculateVoicingsEltttl+0x144>
		else if(param>(2048-DELTA_HYSTERESIS_FOR_VARIAT))
 8001782:	f240 716a 	movw	r1, #1898	; 0x76a
 8001786:	428b      	cmp	r3, r1
 8001788:	dd04      	ble.n	8001794 <_ZN12ChordManager17calculateVoicingsEltttl+0x148>
			ret = prevRet4;
 800178a:	7813      	ldrb	r3, [r2, #0]
		prevRet4 = ret;
 800178c:	7013      	strb	r3, [r2, #0]
 800178e:	e7c6      	b.n	800171e <_ZN12ChordManager17calculateVoicingsEltttl+0xd2>
			ret = 1;
 8001790:	2301      	movs	r3, #1
 8001792:	e7fb      	b.n	800178c <_ZN12ChordManager17calculateVoicingsEltttl+0x140>
			ret=0;
 8001794:	2300      	movs	r3, #0
 8001796:	e7f9      	b.n	800178c <_ZN12ChordManager17calculateVoicingsEltttl+0x140>
	return 0;
 8001798:	2300      	movs	r3, #0
 800179a:	e7c0      	b.n	800171e <_ZN12ChordManager17calculateVoicingsEltttl+0xd2>
	else if(param>(3072+DELTA_HYSTERESIS_FOR_VOICING))
 800179c:	f640 4296 	movw	r2, #3222	; 0xc96
 80017a0:	4296      	cmp	r6, r2
 80017a2:	d82e      	bhi.n	8001802 <_ZN12ChordManager17calculateVoicingsEltttl+0x1b6>
	else if(param>(3072-DELTA_HYSTERESIS_FOR_VOICING))
 80017a4:	f640 326a 	movw	r2, #2922	; 0xb6a
 80017a8:	4296      	cmp	r6, r2
 80017aa:	d8c1      	bhi.n	8001730 <_ZN12ChordManager17calculateVoicingsEltttl+0xe4>
	else if(param>(2560+DELTA_HYSTERESIS_FOR_VOICING))
 80017ac:	f640 2296 	movw	r2, #2710	; 0xa96
 80017b0:	4296      	cmp	r6, r2
 80017b2:	d828      	bhi.n	8001806 <_ZN12ChordManager17calculateVoicingsEltttl+0x1ba>
	else if(param>(2560-DELTA_HYSTERESIS_FOR_VOICING))
 80017b4:	f640 126a 	movw	r2, #2410	; 0x96a
 80017b8:	4296      	cmp	r6, r2
 80017ba:	d8b9      	bhi.n	8001730 <_ZN12ChordManager17calculateVoicingsEltttl+0xe4>
	else if(param>(2048+DELTA_HYSTERESIS_FOR_VOICING))
 80017bc:	f640 0296 	movw	r2, #2198	; 0x896
 80017c0:	4296      	cmp	r6, r2
 80017c2:	d822      	bhi.n	800180a <_ZN12ChordManager17calculateVoicingsEltttl+0x1be>
	else if(param>(2048-DELTA_HYSTERESIS_FOR_VOICING))
 80017c4:	f240 726a 	movw	r2, #1898	; 0x76a
 80017c8:	4296      	cmp	r6, r2
 80017ca:	d8b1      	bhi.n	8001730 <_ZN12ChordManager17calculateVoicingsEltttl+0xe4>
	else if(param>(1536+DELTA_HYSTERESIS_FOR_VOICING))
 80017cc:	f240 6296 	movw	r2, #1686	; 0x696
 80017d0:	4296      	cmp	r6, r2
 80017d2:	d81c      	bhi.n	800180e <_ZN12ChordManager17calculateVoicingsEltttl+0x1c2>
	else if(param>(1536-DELTA_HYSTERESIS_FOR_VOICING))
 80017d4:	f240 526a 	movw	r2, #1386	; 0x56a
 80017d8:	4296      	cmp	r6, r2
 80017da:	d8a9      	bhi.n	8001730 <_ZN12ChordManager17calculateVoicingsEltttl+0xe4>
	else if(param>(1024+DELTA_HYSTERESIS_FOR_VOICING))
 80017dc:	f240 4296 	movw	r2, #1174	; 0x496
 80017e0:	4296      	cmp	r6, r2
 80017e2:	d816      	bhi.n	8001812 <_ZN12ChordManager17calculateVoicingsEltttl+0x1c6>
	else if(param>(1024-DELTA_HYSTERESIS_FOR_VOICING))
 80017e4:	f240 326a 	movw	r2, #874	; 0x36a
 80017e8:	4296      	cmp	r6, r2
 80017ea:	d8a1      	bhi.n	8001730 <_ZN12ChordManager17calculateVoicingsEltttl+0xe4>
	else if(param>(512+DELTA_HYSTERESIS_FOR_VOICING))
 80017ec:	f240 2296 	movw	r2, #662	; 0x296
 80017f0:	4296      	cmp	r6, r2
 80017f2:	d810      	bhi.n	8001816 <_ZN12ChordManager17calculateVoicingsEltttl+0x1ca>
	else if(param>(512-DELTA_HYSTERESIS_FOR_VOICING))
 80017f4:	f5b6 7fb5 	cmp.w	r6, #362	; 0x16a
 80017f8:	d89a      	bhi.n	8001730 <_ZN12ChordManager17calculateVoicingsEltttl+0xe4>
		ret=0;
 80017fa:	2200      	movs	r2, #0
 80017fc:	e799      	b.n	8001732 <_ZN12ChordManager17calculateVoicingsEltttl+0xe6>
		ret=7;
 80017fe:	2207      	movs	r2, #7
 8001800:	e797      	b.n	8001732 <_ZN12ChordManager17calculateVoicingsEltttl+0xe6>
		ret=6;
 8001802:	2206      	movs	r2, #6
 8001804:	e795      	b.n	8001732 <_ZN12ChordManager17calculateVoicingsEltttl+0xe6>
		ret=5;
 8001806:	2205      	movs	r2, #5
 8001808:	e793      	b.n	8001732 <_ZN12ChordManager17calculateVoicingsEltttl+0xe6>
		ret=4;
 800180a:	2204      	movs	r2, #4
 800180c:	e791      	b.n	8001732 <_ZN12ChordManager17calculateVoicingsEltttl+0xe6>
		ret=3;
 800180e:	2203      	movs	r2, #3
 8001810:	e78f      	b.n	8001732 <_ZN12ChordManager17calculateVoicingsEltttl+0xe6>
		ret=2;
 8001812:	2202      	movs	r2, #2
 8001814:	e78d      	b.n	8001732 <_ZN12ChordManager17calculateVoicingsEltttl+0xe6>
		ret=1;
 8001816:	2201      	movs	r2, #1
 8001818:	e78b      	b.n	8001732 <_ZN12ChordManager17calculateVoicingsEltttl+0xe6>
			switch(variation){
 800181a:	2b03      	cmp	r3, #3
 800181c:	d829      	bhi.n	8001872 <_ZN12ChordManager17calculateVoicingsEltttl+0x226>
 800181e:	e8df f003 	tbb	[pc, r3]
 8001822:	0702      	.short	0x0702
 8001824:	0d43      	.short	0x0d43
					currentChordIntervals[0]=4 SEMI;
 8001826:	4b37      	ldr	r3, [pc, #220]	; (8001904 <_ZN12ChordManager17calculateVoicingsEltttl+0x2b8>)
					currentChordIntervals[0]=5 SEMI;
 8001828:	6023      	str	r3, [r4, #0]
					currentChordIntervals[1]=7 SEMI;
 800182a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800182e:	e003      	b.n	8001838 <_ZN12ChordManager17calculateVoicingsEltttl+0x1ec>
					currentChordIntervals[0]=4 SEMI;
 8001830:	4b34      	ldr	r3, [pc, #208]	; (8001904 <_ZN12ChordManager17calculateVoicingsEltttl+0x2b8>)
					currentChordIntervals[0]=3 SEMI;
 8001832:	6023      	str	r3, [r4, #0]
					currentChordIntervals[1]=7 SEMI;
 8001834:	f44f 63b0 	mov.w	r3, #1408	; 0x580
					currentChordIntervals[1]=7 SEMI;
 8001838:	80a3      	strh	r3, [r4, #4]
					break;
 800183a:	e01a      	b.n	8001872 <_ZN12ChordManager17calculateVoicingsEltttl+0x226>
					currentChordIntervals[0]=4 SEMI;
 800183c:	4b32      	ldr	r3, [pc, #200]	; (8001908 <_ZN12ChordManager17calculateVoicingsEltttl+0x2bc>)
					currentChordIntervals[0]=4 SEMI;
 800183e:	6023      	str	r3, [r4, #0]
					currentChordIntervals[1]=8 SEMI;
 8001840:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001844:	e7f8      	b.n	8001838 <_ZN12ChordManager17calculateVoicingsEltttl+0x1ec>
			switch(variation){
 8001846:	2b03      	cmp	r3, #3
 8001848:	d813      	bhi.n	8001872 <_ZN12ChordManager17calculateVoicingsEltttl+0x226>
 800184a:	e8df f003 	tbb	[pc, r3]
 800184e:	0402      	.short	0x0402
 8001850:	0406      	.short	0x0406
					currentChordIntervals[0]=3 SEMI;
 8001852:	4b2e      	ldr	r3, [pc, #184]	; (800190c <_ZN12ChordManager17calculateVoicingsEltttl+0x2c0>)
 8001854:	e7e8      	b.n	8001828 <_ZN12ChordManager17calculateVoicingsEltttl+0x1dc>
					currentChordIntervals[0]=3 SEMI;
 8001856:	4b2d      	ldr	r3, [pc, #180]	; (800190c <_ZN12ChordManager17calculateVoicingsEltttl+0x2c0>)
 8001858:	e7eb      	b.n	8001832 <_ZN12ChordManager17calculateVoicingsEltttl+0x1e6>
					currentChordIntervals[0]=3 SEMI;
 800185a:	4b2c      	ldr	r3, [pc, #176]	; (800190c <_ZN12ChordManager17calculateVoicingsEltttl+0x2c0>)
					currentChordIntervals[0]=4 SEMI;
 800185c:	6023      	str	r3, [r4, #0]
					currentChordIntervals[1]=7 SEMI;
 800185e:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8001862:	e7e9      	b.n	8001838 <_ZN12ChordManager17calculateVoicingsEltttl+0x1ec>
			currentChordIntervals[0]=4 SEMI;
 8001864:	4b27      	ldr	r3, [pc, #156]	; (8001904 <_ZN12ChordManager17calculateVoicingsEltttl+0x2b8>)
 8001866:	e7ea      	b.n	800183e <_ZN12ChordManager17calculateVoicingsEltttl+0x1f2>
			switch(variation){
 8001868:	2b01      	cmp	r3, #1
 800186a:	d00d      	beq.n	8001888 <_ZN12ChordManager17calculateVoicingsEltttl+0x23c>
 800186c:	d30a      	bcc.n	8001884 <_ZN12ChordManager17calculateVoicingsEltttl+0x238>
 800186e:	2b02      	cmp	r3, #2
 8001870:	d00c      	beq.n	800188c <_ZN12ChordManager17calculateVoicingsEltttl+0x240>
	switch(voicing)
 8001872:	3a01      	subs	r2, #1
 8001874:	2a06      	cmp	r2, #6
 8001876:	d86c      	bhi.n	8001952 <_ZN12ChordManager17calculateVoicingsEltttl+0x306>
 8001878:	e8df f002 	tbb	[pc, r2]
 800187c:	34302c1c 	.word	0x34302c1c
 8001880:	5852      	.short	0x5852
 8001882:	67          	.byte	0x67
 8001883:	00          	.byte	0x00
					currentChordIntervals[0]=3 SEMI;
 8001884:	4b22      	ldr	r3, [pc, #136]	; (8001910 <_ZN12ChordManager17calculateVoicingsEltttl+0x2c4>)
 8001886:	e7cf      	b.n	8001828 <_ZN12ChordManager17calculateVoicingsEltttl+0x1dc>
					currentChordIntervals[0]=3 SEMI;
 8001888:	4b21      	ldr	r3, [pc, #132]	; (8001910 <_ZN12ChordManager17calculateVoicingsEltttl+0x2c4>)
 800188a:	e7e7      	b.n	800185c <_ZN12ChordManager17calculateVoicingsEltttl+0x210>
					currentChordIntervals[0]=3 SEMI;
 800188c:	4b20      	ldr	r3, [pc, #128]	; (8001910 <_ZN12ChordManager17calculateVoicingsEltttl+0x2c4>)
 800188e:	e7d6      	b.n	800183e <_ZN12ChordManager17calculateVoicingsEltttl+0x1f2>
			switch(variation){
 8001890:	b11b      	cbz	r3, 800189a <_ZN12ChordManager17calculateVoicingsEltttl+0x24e>
 8001892:	2b01      	cmp	r3, #1
 8001894:	d1ed      	bne.n	8001872 <_ZN12ChordManager17calculateVoicingsEltttl+0x226>
					currentChordIntervals[0]=5 SEMI;
 8001896:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <_ZN12ChordManager17calculateVoicingsEltttl+0x2c8>)
 8001898:	e7c6      	b.n	8001828 <_ZN12ChordManager17calculateVoicingsEltttl+0x1dc>
					currentChordIntervals[0]=2 SEMI;
 800189a:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <_ZN12ChordManager17calculateVoicingsEltttl+0x2cc>)
 800189c:	e7c4      	b.n	8001828 <_ZN12ChordManager17calculateVoicingsEltttl+0x1dc>
			switch(variation){
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d006      	beq.n	80018b0 <_ZN12ChordManager17calculateVoicingsEltttl+0x264>
 80018a2:	d303      	bcc.n	80018ac <_ZN12ChordManager17calculateVoicingsEltttl+0x260>
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d1e4      	bne.n	8001872 <_ZN12ChordManager17calculateVoicingsEltttl+0x226>
					currentChordIntervals[0]=4 SEMI;
 80018a8:	4b16      	ldr	r3, [pc, #88]	; (8001904 <_ZN12ChordManager17calculateVoicingsEltttl+0x2b8>)
 80018aa:	e7d7      	b.n	800185c <_ZN12ChordManager17calculateVoicingsEltttl+0x210>
					currentChordIntervals[0]=4 SEMI;
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <_ZN12ChordManager17calculateVoicingsEltttl+0x2d0>)
 80018ae:	e7bb      	b.n	8001828 <_ZN12ChordManager17calculateVoicingsEltttl+0x1dc>
					currentChordIntervals[0]=4 SEMI;
 80018b0:	4b1a      	ldr	r3, [pc, #104]	; (800191c <_ZN12ChordManager17calculateVoicingsEltttl+0x2d0>)
 80018b2:	e7c4      	b.n	800183e <_ZN12ChordManager17calculateVoicingsEltttl+0x1f2>
			currentChordIntervals[0] = currentChordIntervals[0] - 12 SEMI;
 80018b4:	8823      	ldrh	r3, [r4, #0]
			this->pitch = voice0 + 12 SEMI;
 80018b6:	f505 65c0 	add.w	r5, r5, #1536	; 0x600
			currentChordIntervals[0] = currentChordIntervals[0] - 12 SEMI;
 80018ba:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
			this->pitch = voice0 + 12 SEMI;
 80018be:	60a5      	str	r5, [r4, #8]
			currentChordIntervals[0] = currentChordIntervals[0] - 12 SEMI;
 80018c0:	8023      	strh	r3, [r4, #0]
			currentChordIntervals[1] = currentChordIntervals[1] - 12 SEMI;
 80018c2:	8863      	ldrh	r3, [r4, #2]
 80018c4:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 80018c8:	8063      	strh	r3, [r4, #2]
			currentChordIntervals[2] = currentChordIntervals[2] - 12 SEMI;
 80018ca:	88a3      	ldrh	r3, [r4, #4]
 80018cc:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
			currentChordIntervals[2] = currentChordIntervals[2] + 24 SEMI;
 80018d0:	80a3      	strh	r3, [r4, #4]
			break;
 80018d2:	e00c      	b.n	80018ee <_ZN12ChordManager17calculateVoicingsEltttl+0x2a2>
			this->pitch = voice0 + 12 SEMI;
 80018d4:	f505 65c0 	add.w	r5, r5, #1536	; 0x600
 80018d8:	60a5      	str	r5, [r4, #8]
 80018da:	e7f2      	b.n	80018c2 <_ZN12ChordManager17calculateVoicingsEltttl+0x276>
			this->pitch = voice0 + 12 SEMI;
 80018dc:	f505 65c0 	add.w	r5, r5, #1536	; 0x600
 80018e0:	60a5      	str	r5, [r4, #8]
 80018e2:	e7f2      	b.n	80018ca <_ZN12ChordManager17calculateVoicingsEltttl+0x27e>
			currentChordIntervals[1] = currentChordIntervals[1] - 12 SEMI;
 80018e4:	8863      	ldrh	r3, [r4, #2]
			this->pitch = voice0;
 80018e6:	60a5      	str	r5, [r4, #8]
			currentChordIntervals[1] = currentChordIntervals[1] - 12 SEMI;
 80018e8:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 80018ec:	8063      	strh	r3, [r4, #2]
}
 80018ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018f0:	20000377 	.word	0x20000377
 80018f4:	20000374 	.word	0x20000374
 80018f8:	20000375 	.word	0x20000375
 80018fc:	20000378 	.word	0x20000378
 8001900:	20000376 	.word	0x20000376
 8001904:	03800200 	.word	0x03800200
 8001908:	03000200 	.word	0x03000200
 800190c:	03800180 	.word	0x03800180
 8001910:	03000180 	.word	0x03000180
 8001914:	03800280 	.word	0x03800280
 8001918:	03800100 	.word	0x03800100
 800191c:	04000200 	.word	0x04000200
			currentChordIntervals[0] = currentChordIntervals[0] - 12 SEMI;
 8001920:	8823      	ldrh	r3, [r4, #0]
			this->pitch = voice0;
 8001922:	60a5      	str	r5, [r4, #8]
			currentChordIntervals[0] = currentChordIntervals[0] - 12 SEMI;
 8001924:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8001928:	8023      	strh	r3, [r4, #0]
			break;
 800192a:	e7e0      	b.n	80018ee <_ZN12ChordManager17calculateVoicingsEltttl+0x2a2>
			currentChordIntervals[0] = currentChordIntervals[0] + 12 SEMI;
 800192c:	8823      	ldrh	r3, [r4, #0]
			this->pitch = voice0 - 12 SEMI ;
 800192e:	f5a5 65c0 	sub.w	r5, r5, #1536	; 0x600
			currentChordIntervals[0] = currentChordIntervals[0] + 12 SEMI;
 8001932:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
			this->pitch = voice0 - 12 SEMI ;
 8001936:	60a5      	str	r5, [r4, #8]
			currentChordIntervals[0] = currentChordIntervals[0] + 12 SEMI;
 8001938:	8023      	strh	r3, [r4, #0]
			currentChordIntervals[1] = currentChordIntervals[1] + 12 SEMI;
 800193a:	8863      	ldrh	r3, [r4, #2]
 800193c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8001940:	8063      	strh	r3, [r4, #2]
			currentChordIntervals[2] = currentChordIntervals[2] + 24 SEMI;
 8001942:	88a3      	ldrh	r3, [r4, #4]
 8001944:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001948:	e7c2      	b.n	80018d0 <_ZN12ChordManager17calculateVoicingsEltttl+0x284>
			this->pitch = voice0 - 12 SEMI ;
 800194a:	f5a5 65c0 	sub.w	r5, r5, #1536	; 0x600
 800194e:	60a5      	str	r5, [r4, #8]
 8001950:	e7f3      	b.n	800193a <_ZN12ChordManager17calculateVoicingsEltttl+0x2ee>
			this->pitch = voice0;
 8001952:	60a5      	str	r5, [r4, #8]
}
 8001954:	e7cb      	b.n	80018ee <_ZN12ChordManager17calculateVoicingsEltttl+0x2a2>
 8001956:	bf00      	nop

08001958 <_ZL14callbackRenderi>:



static void callbackRender(int flagEndHalf)
{
	flagRender = 1;
 8001958:	2201      	movs	r2, #1
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <_ZL14callbackRenderi+0x18>)
	if(flagEndHalf==1)
 800195c:	4290      	cmp	r0, r2
	flagRender = 1;
 800195e:	701a      	strb	r2, [r3, #0]
		indexBufferRender=1;
	}
	else
	{
		// transfer reach half, so I can start writing the first half
		indexBufferRender=0;
 8001960:	bf18      	it	ne
 8001962:	2200      	movne	r2, #0
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <_ZL14callbackRenderi+0x1c>)
		indexBufferRender=1;
 8001966:	bf0c      	ite	eq
 8001968:	7018      	strbeq	r0, [r3, #0]
		indexBufferRender=0;
 800196a:	701a      	strbne	r2, [r3, #0]
	}
}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20000379 	.word	0x20000379
 8001974:	2000040d 	.word	0x2000040d

08001978 <_ZN6braids15MacroOscillator4InitEv>:
  typedef void (MacroOscillator::*RenderFn)(const uint8_t*, int16_t*, size_t);

  MacroOscillator() { }
  ~MacroOscillator() { }
  
  inline void Init() {
 8001978:	b570      	push	{r4, r5, r6, lr}
    pitch_ = 60 << 7;
 800197a:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
    phase_increment_ = 1;
 800197e:	2500      	movs	r5, #0
 8001980:	2601      	movs	r6, #1
    discontinuity_depth_ = -16383;
 8001982:	f24c 0201 	movw	r2, #49153	; 0xc001
 8001986:	4604      	mov	r4, r0
 8001988:	f8a0 206c 	strh.w	r2, [r0, #108]	; 0x6c
    pitch_ = 60 << 7;
 800198c:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
    discontinuity_depth_ = -16383;
 8001990:	f8a0 208c 	strh.w	r2, [r0, #140]	; 0x8c
    pitch_ = 60 << 7;
 8001994:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
    discontinuity_depth_ = -16383;
 8001998:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
    pitch_ = 60 << 7;
 800199c:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
    phase_increment_ = 1;
 80019a0:	e9c0 5616 	strd	r5, r6, [r0, #88]	; 0x58
    high_ = false;
 80019a4:	f880 5064 	strb.w	r5, [r0, #100]	; 0x64
    parameter_ = previous_parameter_ = 0;
 80019a8:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
 80019ac:	f8a0 5066 	strh.w	r5, [r0, #102]	; 0x66
    aux_parameter_ = 0;
 80019b0:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
    next_sample_ = 0;
 80019b4:	6705      	str	r5, [r0, #112]	; 0x70
    phase_increment_ = 1;
 80019b6:	e9c0 561e 	strd	r5, r6, [r0, #120]	; 0x78
    high_ = false;
 80019ba:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    parameter_ = previous_parameter_ = 0;
 80019be:	f8a0 5088 	strh.w	r5, [r0, #136]	; 0x88
 80019c2:	f8a0 5086 	strh.w	r5, [r0, #134]	; 0x86
    aux_parameter_ = 0;
 80019c6:	f8a0 508a 	strh.w	r5, [r0, #138]	; 0x8a
    next_sample_ = 0;
 80019ca:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    phase_increment_ = 1;
 80019ce:	e9c0 5626 	strd	r5, r6, [r0, #152]	; 0x98
    high_ = false;
 80019d2:	f880 50a4 	strb.w	r5, [r0, #164]	; 0xa4
    parameter_ = previous_parameter_ = 0;
 80019d6:	f8a0 50a8 	strh.w	r5, [r0, #168]	; 0xa8
 80019da:	f8a0 50a6 	strh.w	r5, [r0, #166]	; 0xa6
    aux_parameter_ = 0;
 80019de:	f8a0 50aa 	strh.w	r5, [r0, #170]	; 0xaa
    next_sample_ = 0;
 80019e2:	f8c0 50b0 	str.w	r5, [r0, #176]	; 0xb0
    memset(&state_, 0, sizeof(state_));
 80019e6:	22c4      	movs	r2, #196	; 0xc4
 80019e8:	4629      	mov	r1, r5
 80019ea:	30d8      	adds	r0, #216	; 0xd8
 80019ec:	f002 ff73 	bl	80048d6 <memset>
    decay_ = 4093;
 80019f0:	f640 73fd 	movw	r3, #4093	; 0xffd
    frequency_ = 33 << 7;
 80019f4:	f44f 5284 	mov.w	r2, #4224	; 0x1080
 80019f8:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
 80019fc:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
 8001a00:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
 8001a04:	f8c4 31dc 	str.w	r3, [r4, #476]	; 0x1dc
    resonance_ = 16384;
 8001a08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    delay_ = 0;
 8001a0c:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
    counter_ = 0;
 8001a10:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
    state_ = 0;
 8001a14:	f8c4 51a8 	str.w	r5, [r4, #424]	; 0x1a8
    delay_ = 0;
 8001a18:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
    counter_ = 0;
 8001a1c:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    state_ = 0;
 8001a20:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
    delay_ = 0;
 8001a24:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    counter_ = 0;
 8001a28:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
    state_ = 0;
 8001a2c:	f8c4 51d0 	str.w	r5, [r4, #464]	; 0x1d0
    delay_ = 0;
 8001a30:	f8c4 51d8 	str.w	r5, [r4, #472]	; 0x1d8
    counter_ = 0;
 8001a34:	f8c4 51e0 	str.w	r5, [r4, #480]	; 0x1e0
    state_ = 0;
 8001a38:	f8c4 51e4 	str.w	r5, [r4, #484]	; 0x1e4
    lp_ = 0;
 8001a3c:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    bp_ = 0;
 8001a40:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
    frequency_ = 33 << 7;
 8001a44:	f8a4 21ee 	strh.w	r2, [r4, #494]	; 0x1ee
    resonance_ = 16384;
 8001a48:	f8a4 31f0 	strh.w	r3, [r4, #496]	; 0x1f0
    dirty_ = true;
 8001a4c:	f884 61ec 	strb.w	r6, [r4, #492]	; 0x1ec
    punch_ = 0;
 8001a50:	f8c4 51f4 	str.w	r5, [r4, #500]	; 0x1f4
    mode_ = SVF_MODE_BP;
 8001a54:	f884 6208 	strb.w	r6, [r4, #520]	; 0x208
    lp_ = 0;
 8001a58:	f8c4 5220 	str.w	r5, [r4, #544]	; 0x220
    bp_ = 0;
 8001a5c:	f8c4 5224 	str.w	r5, [r4, #548]	; 0x224
    frequency_ = 33 << 7;
 8001a60:	f8a4 220e 	strh.w	r2, [r4, #526]	; 0x20e
    resonance_ = 16384;
 8001a64:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
    dirty_ = true;
 8001a68:	f884 620c 	strb.w	r6, [r4, #524]	; 0x20c
    punch_ = 0;
 8001a6c:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
    mode_ = SVF_MODE_BP;
 8001a70:	f884 6228 	strb.w	r6, [r4, #552]	; 0x228
    lp_ = 0;
 8001a74:	f8c4 5240 	str.w	r5, [r4, #576]	; 0x240
    bp_ = 0;
 8001a78:	f8c4 5244 	str.w	r5, [r4, #580]	; 0x244
    frequency_ = 33 << 7;
 8001a7c:	f8a4 222e 	strh.w	r2, [r4, #558]	; 0x22e
    resonance_ = 16384;
 8001a80:	f8a4 3230 	strh.w	r3, [r4, #560]	; 0x230
    dirty_ = true;
 8001a84:	f884 622c 	strb.w	r6, [r4, #556]	; 0x22c
    punch_ = 0;
 8001a88:	f8c4 5234 	str.w	r5, [r4, #564]	; 0x234
    mode_ = SVF_MODE_BP;
 8001a8c:	f884 6248 	strb.w	r6, [r4, #584]	; 0x248
    phase_ = 0;
 8001a90:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
    strike_ = true;
 8001a94:	f884 60d4 	strb.w	r6, [r4, #212]	; 0xd4
    init_ = true;
 8001a98:	f884 60d3 	strb.w	r6, [r4, #211]	; 0xd3
    analog_oscillator_[0].Init();
    analog_oscillator_[1].Init();
    analog_oscillator_[2].Init();
    digital_oscillator_.Init();
    lp_state_ = 0;
 8001a9c:	6565      	str	r5, [r4, #84]	; 0x54
    previous_parameter_[0] = 0;
 8001a9e:	6065      	str	r5, [r4, #4]
    previous_parameter_[1] = 0;
  }
 8001aa0:	bd70      	pop	{r4, r5, r6, pc}
	...

08001aa4 <_ZN8MainLoop4initEv>:


void MainLoop::init(void)
{
 8001aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;
	for(i=0; i<SAMPLES_BUFFER_SIZE; i++)
 8001aa6:	2400      	movs	r4, #0
	{
		samplesBuffer[i] = 0;
 8001aa8:	4625      	mov	r5, r4
 8001aaa:	4b37      	ldr	r3, [pc, #220]	; (8001b88 <_ZN8MainLoop4initEv+0xe4>)
 8001aac:	54e5      	strb	r5, [r4, r3]
	for(i=0; i<SAMPLES_BUFFER_SIZE; i++)
 8001aae:	3401      	adds	r4, #1
 8001ab0:	2c30      	cmp	r4, #48	; 0x30
 8001ab2:	d1fb      	bne.n	8001aac <_ZN8MainLoop4initEv+0x8>
	}
    memset(sync_samples, 0, SAMPLES_BUFFER_SIZE/2);
 8001ab4:	2218      	movs	r2, #24
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4834      	ldr	r0, [pc, #208]	; (8001b8c <_ZN8MainLoop4initEv+0xe8>)
 8001aba:	f002 ff0c 	bl	80048d6 <memset>

	mehal_init((uint32_t*)samplesBuffer,SAMPLES_BUFFER_SIZE,callbackRender);
 8001abe:	4621      	mov	r1, r4
 8001ac0:	4a33      	ldr	r2, [pc, #204]	; (8001b90 <_ZN8MainLoop4initEv+0xec>)
 8001ac2:	4831      	ldr	r0, [pc, #196]	; (8001b88 <_ZN8MainLoop4initEv+0xe4>)
 8001ac4:	f000 fde2 	bl	800268c <mehal_init>

	settings.Init();
 8001ac8:	4832      	ldr	r0, [pc, #200]	; (8001b94 <_ZN8MainLoop4initEv+0xf0>)
 8001aca:	f7ff fbc7 	bl	800125c <_ZN6braids8Settings4InitEv>
	osc.Init();
 8001ace:	4832      	ldr	r0, [pc, #200]	; (8001b98 <_ZN8MainLoop4initEv+0xf4>)
 8001ad0:	f7ff ff52 	bl	8001978 <_ZN6braids15MacroOscillator4InitEv>
	quantizer.Init();
 8001ad4:	4831      	ldr	r0, [pc, #196]	; (8001b9c <_ZN8MainLoop4initEv+0xf8>)
 8001ad6:	f7ff faf9 	bl	80010cc <_ZN6braids9Quantizer4InitEv>

  void Init() {
    target_[ENV_SEGMENT_ATTACK] = 65535;
    target_[ENV_SEGMENT_DECAY] = 0;
    target_[ENV_SEGMENT_DEAD] = 0;
    increment_[ENV_SEGMENT_DEAD] = 0;
 8001ada:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ade:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <_ZN8MainLoop4initEv+0xfc>)
	envelope.Init();
	//jitter_source.Init();
	adc.Init();
 8001ae0:	4830      	ldr	r0, [pc, #192]	; (8001ba4 <_ZN8MainLoop4initEv+0x100>)
 8001ae2:	609d      	str	r5, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
    target_[ENV_SEGMENT_DECAY] = 0;
 8001ae6:	821d      	strh	r5, [r3, #16]
 8001ae8:	f7ff fbfd 	bl	80012e6 <_ZN6braids3Adc4InitEv>
	userInterface.init(&adc,&memory);
 8001aec:	4a2e      	ldr	r2, [pc, #184]	; (8001ba8 <_ZN8MainLoop4initEv+0x104>)
 8001aee:	492d      	ldr	r1, [pc, #180]	; (8001ba4 <_ZN8MainLoop4initEv+0x100>)
 8001af0:	482e      	ldr	r0, [pc, #184]	; (8001bac <_ZN8MainLoop4initEv+0x108>)
 8001af2:	f000 fad3 	bl	800209c <_ZN2Ui4initEPN6braids3AdcEP6Memory>
	//ws.Init(GetUniqueId(1));
	chordManager.init();
 8001af6:	482e      	ldr	r0, [pc, #184]	; (8001bb0 <_ZN8MainLoop4initEv+0x10c>)
 8001af8:	f7ff fd36 	bl	8001568 <_ZN12ChordManager4initEv>


	// calibration
	int32_t adc_code_c2=memory.readUInt32(Memory::ADDR_ADC_CODE_C2);
 8001afc:	2100      	movs	r1, #0
 8001afe:	482a      	ldr	r0, [pc, #168]	; (8001ba8 <_ZN8MainLoop4initEv+0x104>)
 8001b00:	f000 fd60 	bl	80025c4 <_ZN6Memory10readUInt32Et>
	if(adc_code_c2<0 || adc_code_c2>4095) adc_code_c2=82;

	int32_t adc_code_c4=memory.readUInt32(Memory::ADDR_ADC_CODE_C4);
 8001b04:	2104      	movs	r1, #4
 8001b06:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8001b0a:	bf34      	ite	cc
 8001b0c:	4604      	movcc	r4, r0
 8001b0e:	2452      	movcs	r4, #82	; 0x52
 8001b10:	4825      	ldr	r0, [pc, #148]	; (8001ba8 <_ZN8MainLoop4initEv+0x104>)
 8001b12:	f000 fd57 	bl	80025c4 <_ZN6Memory10readUInt32Et>
 8001b16:	f240 279f 	movw	r7, #671	; 0x29f
	if(adc_code_c4<0 || adc_code_c4>4095) adc_code_c4=671;

	int32_t adc_code_fm=memory.readUInt32(Memory::ADDR_ADC_CODE_FM);
 8001b1a:	2108      	movs	r1, #8
 8001b1c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8001b20:	bf38      	it	cc
 8001b22:	4607      	movcc	r7, r0
 8001b24:	4820      	ldr	r0, [pc, #128]	; (8001ba8 <_ZN8MainLoop4initEv+0x104>)
 8001b26:	f000 fd4d 	bl	80025c4 <_ZN6Memory10readUInt32Et>
	if(adc_code_fm<0 || adc_code_fm>4095) adc_code_fm=0;

	int32_t adc_code_p0_min= memory.readUInt32(Memory::ADDR_ADC_CODE_P0_MIN);
 8001b2a:	210c      	movs	r1, #12
 8001b2c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8001b30:	bf34      	ite	cc
 8001b32:	4606      	movcc	r6, r0
 8001b34:	2600      	movcs	r6, #0
 8001b36:	481c      	ldr	r0, [pc, #112]	; (8001ba8 <_ZN8MainLoop4initEv+0x104>)
 8001b38:	f000 fd44 	bl	80025c4 <_ZN6Memory10readUInt32Et>
	if(adc_code_p0_min<0 || adc_code_p0_min>4095) adc_code_p0_min=0;

	int32_t adc_code_p0_max= memory.readUInt32(Memory::ADDR_ADC_CODE_P0_MAX);
 8001b3c:	2110      	movs	r1, #16
 8001b3e:	481a      	ldr	r0, [pc, #104]	; (8001ba8 <_ZN8MainLoop4initEv+0x104>)
 8001b40:	f000 fd40 	bl	80025c4 <_ZN6Memory10readUInt32Et>
	if(adc_code_p0_max<0 || adc_code_p0_max>4095) adc_code_p0_max=4095;

	int32_t adc_code_p1_min= memory.readUInt32(Memory::ADDR_ADC_CODE_P1_MIN);
 8001b44:	2114      	movs	r1, #20
 8001b46:	4818      	ldr	r0, [pc, #96]	; (8001ba8 <_ZN8MainLoop4initEv+0x104>)
 8001b48:	f000 fd3c 	bl	80025c4 <_ZN6Memory10readUInt32Et>
	if(adc_code_p1_min<0 || adc_code_p1_min>4095) adc_code_p1_min=0;

	int32_t adc_code_p1_max= memory.readUInt32(Memory::ADDR_ADC_CODE_P1_MAX);
 8001b4c:	2118      	movs	r1, #24
 8001b4e:	4816      	ldr	r0, [pc, #88]	; (8001ba8 <_ZN8MainLoop4initEv+0x104>)
 8001b50:	f000 fd38 	bl	80025c4 <_ZN6Memory10readUInt32Et>
      int32_t adc_code_fm,
      int32_t adc_code_p0_min,
      int32_t adc_code_p0_max,
      int32_t adc_code_p1_min,
      int32_t adc_code_p1_max) {
    if (adc_code_c4 != adc_code_c2) {
 8001b54:	42bc      	cmp	r4, r7
 8001b56:	4d0f      	ldr	r5, [pc, #60]	; (8001b94 <_ZN8MainLoop4initEv+0xf0>)
 8001b58:	d00d      	beq.n	8001b76 <_ZN8MainLoop4initEv+0xd2>
      int32_t scale = (24 * 128 * 4096L) / (adc_code_c4 - adc_code_c2);
 8001b5a:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8001b5e:	1b3a      	subs	r2, r7, r4
 8001b60:	fb93 f3f2 	sdiv	r3, r3, r2
      data_.pitch_cv_scale = scale;
      data_.pitch_cv_offset = (60 << 7) - 
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 8001b64:	443c      	add	r4, r7
 8001b66:	1064      	asrs	r4, r4, #1
      data_.pitch_cv_scale = scale;
 8001b68:	61ab      	str	r3, [r5, #24]
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 8001b6a:	4363      	muls	r3, r4
 8001b6c:	131b      	asrs	r3, r3, #12
      data_.pitch_cv_offset = (60 << 7) - 
 8001b6e:	f5c3 53f0 	rsb	r3, r3, #7680	; 0x1e00
 8001b72:	616b      	str	r3, [r5, #20]
      data_.fm_cv_offset = adc_code_fm;
 8001b74:	61ee      	str	r6, [r5, #28]
    //     int32_t offset = -(min_code[i] * scale >> 12) - 40;
    //     data_.parameter_cv_offset[i] = offset;
    //     data_.parameter_cv_scale[i] = scale;
    //   }
    // }
    Save();
 8001b76:	4807      	ldr	r0, [pc, #28]	; (8001b94 <_ZN8MainLoop4initEv+0xf0>)
 8001b78:	f7ff fbb0 	bl	80012dc <_ZN6braids8Settings4SaveEv>
    data[setting] = value;
 8001b7c:	2304      	movs	r3, #4
 8001b7e:	706b      	strb	r3, [r5, #1]
 8001b80:	2301      	movs	r3, #1
 8001b82:	722b      	strb	r3, [r5, #8]
	//________________________________

	settings.SetValue(SETTING_RESOLUTION,RESOLUTION_8_BIT);
	settings.SetValue(SETTING_PITCH_OCTAVE,1); // C2: Lowest octave

}
 8001b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200003a5 	.word	0x200003a5
 8001b8c:	2000038c 	.word	0x2000038c
 8001b90:	08001959 	.word	0x08001959
 8001b94:	20000310 	.word	0x20000310
 8001b98:	20000420 	.word	0x20000420
 8001b9c:	200046a0 	.word	0x200046a0
 8001ba0:	2000467c 	.word	0x2000467c
 8001ba4:	20000414 	.word	0x20000414
 8001ba8:	20004678 	.word	0x20004678
 8001bac:	200003d8 	.word	0x200003d8
 8001bb0:	2000037c 	.word	0x2000037c

08001bb4 <_ZN8MainLoop6renderEPhm>:
	}
	//______________
}

void MainLoop::render(uint8_t* out, uint32_t outSize)
{
 8001bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bb8:	b085      	sub	sp, #20
    return data[setting];
 8001bba:	4db0      	ldr	r5, [pc, #704]	; (8001e7c <_ZN8MainLoop6renderEPhm+0x2c8>)
 8001bbc:	468a      	mov	sl, r1
	  static uint16_t gain_lp;

	  // Envelope management
	  envelope.Update(
	      settings.GetValue(SETTING_AD_ATTACK) * 8,
	      settings.GetValue(SETTING_AD_DECAY) * 8);
 8001bbe:	7beb      	ldrb	r3, [r5, #15]
  inline EnvelopeSegment segment() const {
    return static_cast<EnvelopeSegment>(segment_);
  }

  inline void Update(int32_t a, int32_t d) {
    increment_[ENV_SEGMENT_ATTACK] = lut_env_portamento_increments[a];
 8001bc0:	49af      	ldr	r1, [pc, #700]	; (8001e80 <_ZN8MainLoop6renderEPhm+0x2cc>)
{
 8001bc2:	4690      	mov	r8, r2
	      settings.GetValue(SETTING_AD_ATTACK) * 8,
 8001bc4:	7baa      	ldrb	r2, [r5, #14]
	      settings.GetValue(SETTING_AD_DECAY) * 8);
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4cae      	ldr	r4, [pc, #696]	; (8001e84 <_ZN8MainLoop6renderEPhm+0x2d0>)
    increment_[ENV_SEGMENT_DECAY] = lut_env_portamento_increments[d];
 8001bca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    increment_[ENV_SEGMENT_ATTACK] = lut_env_portamento_increments[a];
 8001bce:	00d2      	lsls	r2, r2, #3
 8001bd0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    increment_[ENV_SEGMENT_DECAY] = lut_env_portamento_increments[d];
 8001bd4:	6063      	str	r3, [r4, #4]
    segment_ = segment;
    phase_ = 0;
  }

  inline uint16_t Render() {
    uint32_t increment = increment_[segment_];
 8001bd6:	6963      	ldr	r3, [r4, #20]
    increment_[ENV_SEGMENT_ATTACK] = lut_env_portamento_increments[a];
 8001bd8:	6022      	str	r2, [r4, #0]
 8001bda:	6a21      	ldr	r1, [r4, #32]
 8001bdc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8001be0:	2000      	movs	r0, #0
 8001be2:	1852      	adds	r2, r2, r1
 8001be4:	bf28      	it	cs
 8001be6:	2001      	movcs	r0, #1
{
 8001be8:	af02      	add	r7, sp, #8
    phase_ += increment;
 8001bea:	6222      	str	r2, [r4, #32]
    if (phase_ < increment) {
 8001bec:	b198      	cbz	r0, 8001c16 <_ZN8MainLoop6renderEPhm+0x62>
      value_ = Mix(a_, b_, 65535);
      Trigger(static_cast<EnvelopeSegment>(segment_ + 1));
 8001bee:	3301      	adds	r3, #1
 8001bf0:	b2db      	uxtb	r3, r3
    if (segment == ENV_SEGMENT_DEAD) {
 8001bf2:	2b02      	cmp	r3, #2
      value_ = 0;
 8001bf4:	bf0c      	ite	eq
 8001bf6:	2200      	moveq	r2, #0
  return (a * (65535 - balance) + b * balance) >> 16;
 8001bf8:	8b62      	ldrhne	r2, [r4, #26]
    segment_ = segment;
 8001bfa:	6163      	str	r3, [r4, #20]
 8001bfc:	bf1c      	itt	ne
 8001bfe:	ebc2 4202 	rsbne	r2, r2, r2, lsl #16
 8001c02:	1412      	asrne	r2, r2, #16
      value_ = 0;
 8001c04:	83a2      	strh	r2, [r4, #28]
    a_ = value_;
 8001c06:	8ba2      	ldrh	r2, [r4, #28]
 8001c08:	8322      	strh	r2, [r4, #24]
    b_ = target_[segment];
 8001c0a:	eb04 0243 	add.w	r2, r4, r3, lsl #1
    phase_ = 0;
 8001c0e:	2300      	movs	r3, #0
    b_ = target_[segment];
 8001c10:	8992      	ldrh	r2, [r2, #12]
    phase_ = 0;
 8001c12:	6223      	str	r3, [r4, #32]
    b_ = target_[segment];
 8001c14:	8362      	strh	r2, [r4, #26]
    }
    if (increment_[segment_]) {
 8001c16:	6963      	ldr	r3, [r4, #20]
 8001c18:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001c1c:	b1c3      	cbz	r3, 8001c50 <_ZN8MainLoop6renderEPhm+0x9c>
      value_ = Mix(a_, b_, Interpolate824(lut_env_expo, phase_));
 8001c1e:	6a22      	ldr	r2, [r4, #32]
  uint32_t a = table[phase >> 24];
 8001c20:	4999      	ldr	r1, [pc, #612]	; (8001e88 <_ZN8MainLoop6renderEPhm+0x2d4>)
 8001c22:	0e10      	lsrs	r0, r2, #24
 8001c24:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
  uint32_t b = table[(phase >> 24) + 1];
 8001c28:	3102      	adds	r1, #2
 8001c2a:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 8001c2e:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8001c32:	1ac9      	subs	r1, r1, r3
 8001c34:	434a      	muls	r2, r1
  return (a * (65535 - balance) + b * balance) >> 16;
 8001c36:	8b60      	ldrh	r0, [r4, #26]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 8001c38:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  return (a * (65535 - balance) + b * balance) >> 16;
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	f5c3 417f 	rsb	r1, r3, #65280	; 0xff00
 8001c42:	4343      	muls	r3, r0
 8001c44:	8b22      	ldrh	r2, [r4, #24]
 8001c46:	31ff      	adds	r1, #255	; 0xff
 8001c48:	fb01 3302 	mla	r3, r1, r2, r3
 8001c4c:	141b      	asrs	r3, r3, #16
 8001c4e:	83a3      	strh	r3, [r4, #28]
  
  inline void set_shape(MacroOscillatorShape shape) {
    if (shape != shape_) {
 8001c50:	f244 2354 	movw	r3, #16980	; 0x4254
 8001c54:	4e8d      	ldr	r6, [pc, #564]	; (8001e8c <_ZN8MainLoop6renderEPhm+0x2d8>)
	  uint32_t ad_value = envelope.Render();
	  //____________________

	  // Set shape (not used)
	  osc.set_shape(settings.shape());
 8001c56:	782a      	ldrb	r2, [r5, #0]
 8001c58:	5cf1      	ldrb	r1, [r6, r3]
	  // Set waveform with param0
	  osc.set_parameters(userInterface.getParamFromCurrentWaveTable(),0);
 8001c5a:	488d      	ldr	r0, [pc, #564]	; (8001e90 <_ZN8MainLoop6renderEPhm+0x2dc>)
 8001c5c:	4291      	cmp	r1, r2
  inline uint32_t phase_increment() const {
    return phase_increment_;
  }
  
  inline void Strike() {
    strike_ = true;
 8001c5e:	bf1c      	itt	ne
 8001c60:	2101      	movne	r1, #1
 8001c62:	f886 10d4 	strbne.w	r1, [r6, #212]	; 0xd4
      Strike();
    }
    shape_ = shape;
 8001c66:	54f2      	strb	r2, [r6, r3]
    }
    return value_;
 8001c68:	f8b4 901c 	ldrh.w	r9, [r4, #28]
 8001c6c:	f000 f9be 	bl	8001fec <_ZN2Ui28getParamFromCurrentWaveTableEv>

  inline void set_parameters(
      int16_t parameter_1,
      int16_t parameter_2) {
    parameter_[0] = parameter_1;
    parameter_[1] = parameter_2;
 8001c70:	2300      	movs	r3, #0
 8001c72:	8073      	strh	r3, [r6, #2]
  }
  
  inline int32_t adc_to_pitch(int32_t pitch_adc_code) const {
    if (data_.pitch_range == PITCH_RANGE_EXTERNAL ||
 8001c74:	79eb      	ldrb	r3, [r5, #7]
		  return this->currentValues[0];
	  }
	  else if(index==2)
	  {
		  ///pitch
		  return this->currentValues[4];
 8001c76:	4a87      	ldr	r2, [pc, #540]	; (8001e94 <_ZN8MainLoop6renderEPhm+0x2e0>)
 8001c78:	f013 0ffb 	tst.w	r3, #251	; 0xfb
    parameter_[0] = parameter_1;
 8001c7c:	8030      	strh	r0, [r6, #0]


	  // SET PITCH
	  // Apply hysteresis to ADC reading to prevent a single bit error to move
	  // the quantized pitch up and down the quantization boundary.
	  int32_t pitch = quantizer.Process(
 8001c7e:	8911      	ldrh	r1, [r2, #8]
 8001c80:	4693      	mov	fp, r2
 8001c82:	f040 8094 	bne.w	8001dae <_ZN8MainLoop6renderEPhm+0x1fa>
        data_.pitch_range == PITCH_RANGE_LFO) {
      pitch_adc_code = pitch_adc_code * data_.pitch_cv_scale >> 12;
 8001c86:	69ab      	ldr	r3, [r5, #24]
 8001c88:	434b      	muls	r3, r1
      pitch_adc_code += data_.pitch_cv_offset;
 8001c8a:	6969      	ldr	r1, [r5, #20]
 8001c8c:	eb01 3123 	add.w	r1, r1, r3, asr #12
    return data_.quantizer_root;
 8001c90:	7cea      	ldrb	r2, [r5, #19]
	      settings.adc_to_pitch(adc.channel(ADC_CHANNEL_PITCH)),
	      (60 + settings.quantizer_root()) << 7);
 8001c92:	4881      	ldr	r0, [pc, #516]	; (8001e98 <_ZN8MainLoop6renderEPhm+0x2e4>)
 8001c94:	323c      	adds	r2, #60	; 0x3c
 8001c96:	01d2      	lsls	r2, r2, #7
 8001c98:	f7ff fa6a 	bl	8001170 <_ZN6braids9Quantizer7ProcessEll>
	  // Check if the pitch has changed to cause an auto-retrigger
	  int32_t pitch_delta = pitch - previous_pitch;
	  if (settings.data().auto_trig &&
 8001c9c:	792b      	ldrb	r3, [r5, #4]
 8001c9e:	4a7f      	ldr	r2, [pc, #508]	; (8001e9c <_ZN8MainLoop6renderEPhm+0x2e8>)
 8001ca0:	b143      	cbz	r3, 8001cb4 <_ZN8MainLoop6renderEPhm+0x100>
	  int32_t pitch_delta = pitch - previous_pitch;
 8001ca2:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001ca6:	1ac3      	subs	r3, r0, r3
	      //(pitch_delta >= 0x40 || -pitch_delta >= 0x40)) {
			(pitch_delta >= 0x70 || -pitch_delta >= 0x70)) { // too much noise in this hardware
 8001ca8:	336f      	adds	r3, #111	; 0x6f
	  if (settings.data().auto_trig &&
 8001caa:	2bde      	cmp	r3, #222	; 0xde
		  trigger_flag = true;
 8001cac:	bf82      	ittt	hi
 8001cae:	2101      	movhi	r1, #1
 8001cb0:	4b7b      	ldrhi	r3, [pc, #492]	; (8001ea0 <_ZN8MainLoop6renderEPhm+0x2ec>)
 8001cb2:	7019      	strbhi	r1, [r3, #0]
	  }
	  //_________________________________________________________________


	  // Set chords and pitch
	  int32_t qualityValue = settings.adc_to_parameter(0, adc.channel(ADC_CHANNEL_PARAM0));
 8001cb4:	f8bb 3002 	ldrh.w	r3, [fp, #2]
	  previous_pitch = pitch;
 8001cb8:	8010      	strh	r0, [r2, #0]
    }
    return fm_adc_code;
  }
  
  inline int32_t adc_to_parameter(int index, int32_t adc_code) const {
    int32_t scale = static_cast<int32_t>(data_.parameter_cv_scale[index]);
 8001cba:	8caa      	ldrh	r2, [r5, #36]	; 0x24
	  int32_t variationValue = settings.adc_to_parameter(1, adc.channel(ADC_CHANNEL_PARAM1));
 8001cbc:	f8bb e000 	ldrh.w	lr, [fp]
    int32_t offset = static_cast<int32_t>(data_.parameter_cv_offset[index]);
    return (scale * adc_code >> 12) + offset;
 8001cc0:	435a      	muls	r2, r3
    int32_t offset = static_cast<int32_t>(data_.parameter_cv_offset[index]);
 8001cc2:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
	  }
	  else if(index==3)
	  {
		  // FM
		  return this->currentValues[3];
 8001cc6:	f8bb c006 	ldrh.w	ip, [fp, #6]
    return (scale * adc_code >> 12) + offset;
 8001cca:	eb03 3222 	add.w	r2, r3, r2, asr #12
    int32_t scale = static_cast<int32_t>(data_.parameter_cv_scale[index]);
 8001cce:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    fm_adc_code -= data_.fm_cv_offset;
 8001cd0:	69e9      	ldr	r1, [r5, #28]
    return (scale * adc_code >> 12) + offset;
 8001cd2:	fb03 f30e 	mul.w	r3, r3, lr
    int32_t offset = static_cast<int32_t>(data_.parameter_cv_offset[index]);
 8001cd6:	f9b5 e022 	ldrsh.w	lr, [r5, #34]	; 0x22
    t += (static_cast<int32_t>(data_.pitch_octave) - 2) * 12 * 128;
 8001cda:	f44f 6bc0 	mov.w	fp, #1536	; 0x600
    return (scale * adc_code >> 12) + offset;
 8001cde:	eb0e 3e23 	add.w	lr, lr, r3, asr #12
    if (data_.pitch_range == PITCH_RANGE_440) {
 8001ce2:	79eb      	ldrb	r3, [r5, #7]
 8001ce4:	f380 000e 	usat	r0, #14, r0
 8001ce8:	2b03      	cmp	r3, #3
    fm_adc_code -= data_.fm_cv_offset;
 8001cea:	bf1d      	ittte	ne
 8001cec:	ebac 0101 	subne.w	r1, ip, r1
    fm_adc_code = fm_adc_code * 1538 >> 9;
 8001cf0:	f240 6c02 	movwne	ip, #1538	; 0x602
 8001cf4:	fb0c fc01 	mulne.w	ip, ip, r1
      fm_adc_code = 0;
 8001cf8:	f04f 0c00 	moveq.w	ip, #0
    fm_adc_code = fm_adc_code * 1538 >> 9;
 8001cfc:	bf18      	it	ne
 8001cfe:	ea4f 2c6c 	movne.w	ip, ip, asr #9
    int32_t t = data_.pitch_range == PITCH_RANGE_LFO ? -36 << 7 : 0;
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	4b67      	ldr	r3, [pc, #412]	; (8001ea4 <_ZN8MainLoop6renderEPhm+0x2f0>)
 8001d06:	bf18      	it	ne
 8001d08:	2300      	movne	r3, #0
	  int32_t voicingValue = settings.adc_to_fm(adc.channel(ADC_CHANNEL_FM));

	  chordManager.calculateVoicings( pitch + settings.pitch_transposition(),
 8001d0a:	7a29      	ldrb	r1, [r5, #8]
 8001d0c:	b292      	uxth	r2, r2
    t += (static_cast<int32_t>(data_.pitch_octave) - 2) * 12 * 128;
 8001d0e:	3902      	subs	r1, #2
 8001d10:	fb0b 3101 	mla	r1, fp, r1, r3
    return data_.quantizer_root;
 8001d14:	7ceb      	ldrb	r3, [r5, #19]
 8001d16:	4401      	add	r1, r0
			  	  	  	  	  	  	  qualityValue,
									  variationValue,
									  voicingValue,
									  (60 + settings.quantizer_root()) << 7);
 8001d18:	333c      	adds	r3, #60	; 0x3c
	  chordManager.calculateVoicings( pitch + settings.pitch_transposition(),
 8001d1a:	01db      	lsls	r3, r3, #7
 8001d1c:	9301      	str	r3, [sp, #4]
 8001d1e:	fa1f f38c 	uxth.w	r3, ip
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	4860      	ldr	r0, [pc, #384]	; (8001ea8 <_ZN8MainLoop6renderEPhm+0x2f4>)
 8001d26:	fa1f f38e 	uxth.w	r3, lr
 8001d2a:	f7ff fc8f 	bl	800164c <_ZN12ChordManager17calculateVoicingsEltttl>
	  osc.set_chords_parameters(chordManager.getChord1(),chordManager.getChord2(),chordManager.getChord3());
 8001d2e:	485e      	ldr	r0, [pc, #376]	; (8001ea8 <_ZN8MainLoop6renderEPhm+0x2f4>)
 8001d30:	f7ff fc22 	bl	8001578 <_ZN12ChordManager9getChord1Ev>
 8001d34:	4683      	mov	fp, r0
 8001d36:	485c      	ldr	r0, [pc, #368]	; (8001ea8 <_ZN8MainLoop6renderEPhm+0x2f4>)
 8001d38:	f7ff fc21 	bl	800157e <_ZN12ChordManager9getChord2Ev>
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	485a      	ldr	r0, [pc, #360]	; (8001ea8 <_ZN8MainLoop6renderEPhm+0x2f4>)
 8001d40:	f7ff fc20 	bl	8001584 <_ZN12ChordManager9getChord3Ev>
  }
  inline void set_chords_parameters(
      int16_t parameter_1,
      int16_t parameter_2,
	  int16_t parameter_3) {
	  digital_oscillator_.set_chordIntervals(parameter_1,parameter_2,parameter_3);
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	4603      	mov	r3, r0
 8001d48:	4659      	mov	r1, fp
 8001d4a:	4858      	ldr	r0, [pc, #352]	; (8001eac <_ZN8MainLoop6renderEPhm+0x2f8>)
 8001d4c:	f7fe fdf8 	bl	8000940 <_ZN6braids17DigitalOscillator18set_chordIntervalsEsss>
	  osc.set_pitch(chordManager.getPitch());
 8001d50:	4855      	ldr	r0, [pc, #340]	; (8001ea8 <_ZN8MainLoop6renderEPhm+0x2f4>)
 8001d52:	f7ff fc1a 	bl	800158a <_ZN12ChordManager8getPitchEv>
	  //_________________________________________________



	  // TRIGGER
	  if (trigger_flag) {
 8001d56:	4a52      	ldr	r2, [pc, #328]	; (8001ea0 <_ZN8MainLoop6renderEPhm+0x2ec>)
	  osc.set_pitch(chordManager.getPitch());
 8001d58:	8130      	strh	r0, [r6, #8]
	  if (trigger_flag) {
 8001d5a:	7813      	ldrb	r3, [r2, #0]
 8001d5c:	b153      	cbz	r3, 8001d74 <_ZN8MainLoop6renderEPhm+0x1c0>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	f886 30d4 	strb.w	r3, [r6, #212]	; 0xd4
    a_ = value_;
 8001d64:	8ba3      	ldrh	r3, [r4, #28]
 8001d66:	8323      	strh	r3, [r4, #24]
    b_ = target_[segment];
 8001d68:	89a3      	ldrh	r3, [r4, #12]
 8001d6a:	8363      	strh	r3, [r4, #26]
    segment_ = segment;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	6163      	str	r3, [r4, #20]
    phase_ = 0;
 8001d70:	6223      	str	r3, [r4, #32]
	    osc.Strike();
	    envelope.Trigger(ENV_SEGMENT_ATTACK);
	    trigger_flag = false;
 8001d72:	7013      	strb	r3, [r2, #0]
	  }
	  //_________


	  // RENDER
	  int16_t audio_samples[outSize];
 8001d74:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8001d78:	3308      	adds	r3, #8
 8001d7a:	f023 0307 	bic.w	r3, r3, #7
 8001d7e:	ebad 0d03 	sub.w	sp, sp, r3
	  int16_t* render_buffer = audio_samples;

	  if (settings.GetValue(SETTING_AD_VCA) != 0
	    || settings.GetValue(SETTING_AD_TIMBRE) != 0
	    || settings.GetValue(SETTING_AD_COLOR) != 0
	    || settings.GetValue(SETTING_AD_FM) != 0) {
 8001d82:	7cab      	ldrb	r3, [r5, #18]
	  int16_t audio_samples[outSize];
 8001d84:	ac02      	add	r4, sp, #8
	    || settings.GetValue(SETTING_AD_FM) != 0) {
 8001d86:	bb3b      	cbnz	r3, 8001dd8 <_ZN8MainLoop6renderEPhm+0x224>
	    || settings.GetValue(SETTING_AD_TIMBRE) != 0
 8001d88:	78eb      	ldrb	r3, [r5, #3]
 8001d8a:	bb2b      	cbnz	r3, 8001dd8 <_ZN8MainLoop6renderEPhm+0x224>
	    || settings.GetValue(SETTING_AD_COLOR) != 0
 8001d8c:	7c6b      	ldrb	r3, [r5, #17]
 8001d8e:	bb1b      	cbnz	r3, 8001dd8 <_ZN8MainLoop6renderEPhm+0x224>
	    || settings.GetValue(SETTING_AD_FM) != 0) {
 8001d90:	7c2e      	ldrb	r6, [r5, #16]
 8001d92:	bb0e      	cbnz	r6, 8001dd8 <_ZN8MainLoop6renderEPhm+0x224>
	    memset(sync_buffer, 0, outSize);
	  }
	  else
	  {
		  //Trigger in sync event (this is placed in sampler interrupt timer in braids)
		  memset(sync_buffer, 0, outSize);
 8001d94:	4b46      	ldr	r3, [pc, #280]	; (8001eb0 <_ZN8MainLoop6renderEPhm+0x2fc>)
 8001d96:	4642      	mov	r2, r8
 8001d98:	4631      	mov	r1, r6
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f002 fd9b 	bl	80048d6 <memset>
		  if(flagTriggerInEvent==1)
 8001da0:	4944      	ldr	r1, [pc, #272]	; (8001eb4 <_ZN8MainLoop6renderEPhm+0x300>)
 8001da2:	680a      	ldr	r2, [r1, #0]
 8001da4:	2a01      	cmp	r2, #1
 8001da6:	d11c      	bne.n	8001de2 <_ZN8MainLoop6renderEPhm+0x22e>
		  {
			  flagTriggerInEvent=0;
 8001da8:	600e      	str	r6, [r1, #0]
			  sync_buffer[0]=1;
 8001daa:	7002      	strb	r2, [r0, #0]
 8001dac:	e019      	b.n	8001de2 <_ZN8MainLoop6renderEPhm+0x22e>
    } else if (data_.pitch_range == PITCH_RANGE_FREE) {
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d107      	bne.n	8001dc2 <_ZN8MainLoop6renderEPhm+0x20e>
      pitch_adc_code = pitch_adc_code * data_.pitch_cv_scale >> 12;
 8001db2:	69ab      	ldr	r3, [r5, #24]
      pitch_adc_code = (pitch_adc_code - 1638);
 8001db4:	f2a1 6166 	subw	r1, r1, #1638	; 0x666
      pitch_adc_code = pitch_adc_code * data_.pitch_cv_scale >> 12;
 8001db8:	4359      	muls	r1, r3
 8001dba:	1309      	asrs	r1, r1, #12
      pitch_adc_code += 60 << 7;
 8001dbc:	f501 51f0 	add.w	r1, r1, #7680	; 0x1e00
 8001dc0:	e766      	b.n	8001c90 <_ZN8MainLoop6renderEPhm+0xdc>
    } else if (data_.pitch_range == PITCH_RANGE_440) {
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d005      	beq.n	8001dd2 <_ZN8MainLoop6renderEPhm+0x21e>
      pitch_adc_code = (pitch_adc_code - 1638) * 9 >> 1;
 8001dc6:	f2a1 6166 	subw	r1, r1, #1638	; 0x666
 8001dca:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001dce:	1049      	asrs	r1, r1, #1
 8001dd0:	e7f4      	b.n	8001dbc <_ZN8MainLoop6renderEPhm+0x208>
      pitch_adc_code = 69 << 7;
 8001dd2:	f44f 510a 	mov.w	r1, #8832	; 0x2280
 8001dd6:	e75b      	b.n	8001c90 <_ZN8MainLoop6renderEPhm+0xdc>
	    memset(sync_buffer, 0, outSize);
 8001dd8:	4642      	mov	r2, r8
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4834      	ldr	r0, [pc, #208]	; (8001eb0 <_ZN8MainLoop6renderEPhm+0x2fc>)
 8001dde:	f002 fd7a 	bl	80048d6 <memset>
		  }
		  //______________________
	  }

	  osc.Render(sync_buffer, render_buffer, outSize);
 8001de2:	4643      	mov	r3, r8
 8001de4:	4622      	mov	r2, r4
 8001de6:	4932      	ldr	r1, [pc, #200]	; (8001eb0 <_ZN8MainLoop6renderEPhm+0x2fc>)
 8001de8:	4828      	ldr	r0, [pc, #160]	; (8001e8c <_ZN8MainLoop6renderEPhm+0x2d8>)
 8001dea:	f7ff f957 	bl	800109c <_ZN6braids15MacroOscillator6RenderEPKhPsj>

	  // Copy to DAC buffer with sample rate and bit reduction applied.
	    int16_t sample = 0;
	    size_t decimation_factor = decimation_factors[settings.data().sample_rate];
	    uint16_t bit_mask = bit_reduction_masks[settings.data().resolution];
	    int32_t gain = settings.GetValue(SETTING_AD_VCA) ? ad_value : 65535;
 8001dee:	f64f 7eff 	movw	lr, #65535	; 0xffff
	    size_t decimation_factor = decimation_factors[settings.data().sample_rate];
 8001df2:	78aa      	ldrb	r2, [r5, #2]
 8001df4:	4b30      	ldr	r3, [pc, #192]	; (8001eb8 <_ZN8MainLoop6renderEPhm+0x304>)
 8001df6:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 8001ec0 <_ZN8MainLoop6renderEPhm+0x30c>
 8001dfa:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
	    uint16_t bit_mask = bit_reduction_masks[settings.data().resolution];
 8001dfe:	786a      	ldrb	r2, [r5, #1]
 8001e00:	4b2e      	ldr	r3, [pc, #184]	; (8001ebc <_ZN8MainLoop6renderEPhm+0x308>)
 8001e02:	f8bb 0000 	ldrh.w	r0, [fp]
 8001e06:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
	    int32_t gain = settings.GetValue(SETTING_AD_VCA) ? ad_value : 65535;
 8001e0a:	7cab      	ldrb	r3, [r5, #18]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	bf08      	it	eq
 8001e10:	46f1      	moveq	r9, lr
	    uint16_t signature = settings.signature() * settings.signature() * 4095;
 8001e12:	7b2b      	ldrb	r3, [r5, #12]
 8001e14:	2500      	movs	r5, #0
	    for (size_t i = 0; i < outSize; ++i) {
 8001e16:	462a      	mov	r2, r5
	    int16_t sample = 0;
 8001e18:	4629      	mov	r1, r5
	    uint16_t signature = settings.signature() * settings.signature() * 4095;
 8001e1a:	435b      	muls	r3, r3
 8001e1c:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 8001e20:	b29b      	uxth	r3, r3
  return (a * (65535 - balance) + b * balance) >> 16;
 8001e22:	ebae 0303 	sub.w	r3, lr, r3
	    for (size_t i = 0; i < outSize; ++i) {
 8001e26:	4542      	cmp	r2, r8
 8001e28:	d10f      	bne.n	8001e4a <_ZN8MainLoop6renderEPhm+0x296>
 8001e2a:	b10d      	cbz	r5, 8001e30 <_ZN8MainLoop6renderEPhm+0x27c>
 8001e2c:	f8ab 0000 	strh.w	r0, [fp]
	      render_buffer[i] = Mix(sample, warped, signature);
	    }

	  // Copy rendered buffer to DMA buffer (8bits)
	  uint32_t i;
	  for(i=0; i<outSize; i++)
 8001e30:	2300      	movs	r3, #0
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d046      	beq.n	8001ec4 <_ZN8MainLoop6renderEPhm+0x310>
	  {
		  out[i] = (uint8_t) (((uint16_t)(  -(render_buffer[i]) + 32768U )) >>8)  ;
 8001e36:	f834 1013 	ldrh.w	r1, [r4, r3, lsl #1]
 8001e3a:	f5c1 4100 	rsb	r1, r1, #32768	; 0x8000
 8001e3e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8001e42:	f80a 1003 	strb.w	r1, [sl, r3]
	  for(i=0; i<outSize; i++)
 8001e46:	3301      	adds	r3, #1
 8001e48:	e7f3      	b.n	8001e32 <_ZN8MainLoop6renderEPhm+0x27e>
	      if ((i % decimation_factor) == 0) {
 8001e4a:	fbb2 f5f6 	udiv	r5, r2, r6
 8001e4e:	fb06 2515 	mls	r5, r6, r5, r2
 8001e52:	b925      	cbnz	r5, 8001e5e <_ZN8MainLoop6renderEPhm+0x2aa>
	        sample = render_buffer[i] & bit_mask;
 8001e54:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
 8001e58:	ea0c 0101 	and.w	r1, ip, r1
 8001e5c:	b209      	sxth	r1, r1
	      sample = sample * gain_lp >> 16;
 8001e5e:	4341      	muls	r1, r0
 8001e60:	140d      	asrs	r5, r1, #16
 8001e62:	b229      	sxth	r1, r5
 8001e64:	435d      	muls	r5, r3
	      gain_lp += (gain - gain_lp) >> 4;
 8001e66:	eba9 0e00 	sub.w	lr, r9, r0
 8001e6a:	142d      	asrs	r5, r5, #16
 8001e6c:	eb00 102e 	add.w	r0, r0, lr, asr #4
 8001e70:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
 8001e74:	b280      	uxth	r0, r0
	    for (size_t i = 0; i < outSize; ++i) {
 8001e76:	3201      	adds	r2, #1
 8001e78:	2501      	movs	r5, #1
 8001e7a:	e7d4      	b.n	8001e26 <_ZN8MainLoop6renderEPhm+0x272>
 8001e7c:	20000310 	.word	0x20000310
 8001e80:	080053cc 	.word	0x080053cc
 8001e84:	2000467c 	.word	0x2000467c
 8001e88:	080049b8 	.word	0x080049b8
 8001e8c:	20000420 	.word	0x20000420
 8001e90:	200003d8 	.word	0x200003d8
 8001e94:	20000414 	.word	0x20000414
 8001e98:	200046a0 	.word	0x200046a0
 8001e9c:	200047b2 	.word	0x200047b2
 8001ea0:	200003a4 	.word	0x200003a4
 8001ea4:	ffffee00 	.word	0xffffee00
 8001ea8:	2000037c 	.word	0x2000037c
 8001eac:	200004d8 	.word	0x200004d8
 8001eb0:	2000038c 	.word	0x2000038c
 8001eb4:	20000410 	.word	0x20000410
 8001eb8:	0800e414 	.word	0x0800e414
 8001ebc:	0800e422 	.word	0x0800e422
 8001ec0:	200047b4 	.word	0x200047b4
	  }
	  //___________________________________________

}
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001ecc <_ZN8MainLoop15adcStateMachineEv>:


void MainLoop::adcStateMachine(void)
{
 8001ecc:	b538      	push	{r3, r4, r5, lr}
	static uint8_t chn=0;

	adc.updateChannelValue(chn,mehal_readADC(chn));
 8001ece:	4c09      	ldr	r4, [pc, #36]	; (8001ef4 <_ZN8MainLoop15adcStateMachineEv+0x28>)
 8001ed0:	7825      	ldrb	r5, [r4, #0]
 8001ed2:	4628      	mov	r0, r5
 8001ed4:	f000 fd66 	bl	80029a4 <mehal_readADC>

  }

  void updateChannelValue(uint8_t chn,uint16_t value)
  {
	  if(chn<ADC_CHANNELS)
 8001ed8:	2d04      	cmp	r5, #4
	  {
		  this->currentValues[chn] = value;
 8001eda:	bf9c      	itt	ls
 8001edc:	4a06      	ldrls	r2, [pc, #24]	; (8001ef8 <_ZN8MainLoop15adcStateMachineEv+0x2c>)
 8001ede:	f822 0015 	strhls.w	r0, [r2, r5, lsl #1]

	chn++;
 8001ee2:	7822      	ldrb	r2, [r4, #0]
 8001ee4:	3201      	adds	r2, #1
 8001ee6:	b2d2      	uxtb	r2, r2
	if(chn>=ADC_CHANNELS)
 8001ee8:	2a04      	cmp	r2, #4
	{
		chn=0;
 8001eea:	bf88      	it	hi
 8001eec:	2200      	movhi	r2, #0
 8001eee:	7022      	strb	r2, [r4, #0]
	}

}
 8001ef0:	bd38      	pop	{r3, r4, r5, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200047b0 	.word	0x200047b0
 8001ef8:	20000414 	.word	0x20000414

08001efc <_ZN8MainLoop4loopEv>:
{
 8001efc:	b570      	push	{r4, r5, r6, lr}
 8001efe:	4605      	mov	r5, r0
	userInterface.loop();
 8001f00:	481f      	ldr	r0, [pc, #124]	; (8001f80 <_ZN8MainLoop4loopEv+0x84>)
 8001f02:	f000 f911 	bl	8002128 <_ZN2Ui4loopEv>
    return data[setting];
 8001f06:	4b1f      	ldr	r3, [pc, #124]	; (8001f84 <_ZN8MainLoop4loopEv+0x88>)
    if (current_scale != settings.GetValue(SETTING_QUANTIZER_SCALE)) {
 8001f08:	4a1f      	ldr	r2, [pc, #124]	; (8001f88 <_ZN8MainLoop4loopEv+0x8c>)
 8001f0a:	7a5b      	ldrb	r3, [r3, #9]
 8001f0c:	7811      	ldrb	r1, [r2, #0]
 8001f0e:	4299      	cmp	r1, r3
 8001f10:	d00c      	beq.n	8001f2c <_ZN8MainLoop4loopEv+0x30>
      current_scale = settings.GetValue(SETTING_QUANTIZER_SCALE);
 8001f12:	7013      	strb	r3, [r2, #0]
  }
  
  int32_t Process(int32_t pitch, int32_t root);
  
  void Configure(const Scale& scale) {
    Configure(scale.notes, scale.span, scale.num_notes);
 8001f14:	2228      	movs	r2, #40	; 0x28
 8001f16:	435a      	muls	r2, r3
 8001f18:	491c      	ldr	r1, [pc, #112]	; (8001f8c <_ZN8MainLoop4loopEv+0x90>)
 8001f1a:	f102 0008 	add.w	r0, r2, #8
 8001f1e:	188b      	adds	r3, r1, r2
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	5e8a      	ldrsh	r2, [r1, r2]
 8001f24:	4401      	add	r1, r0
 8001f26:	481a      	ldr	r0, [pc, #104]	; (8001f90 <_ZN8MainLoop4loopEv+0x94>)
 8001f28:	f7ff f8e4 	bl	80010f4 <_ZN6braids9Quantizer9ConfigureEPKssj>
	if(flagRender==1)
 8001f2c:	4e19      	ldr	r6, [pc, #100]	; (8001f94 <_ZN8MainLoop4loopEv+0x98>)
    this->adcStateMachine();
 8001f2e:	4628      	mov	r0, r5
 8001f30:	f7ff ffcc 	bl	8001ecc <_ZN8MainLoop15adcStateMachineEv>
	if(flagRender==1)
 8001f34:	7832      	ldrb	r2, [r6, #0]
 8001f36:	2a01      	cmp	r2, #1
 8001f38:	d121      	bne.n	8001f7e <_ZN8MainLoop4loopEv+0x82>
		if(indexBufferRender==0)
 8001f3a:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <_ZN8MainLoop4loopEv+0x9c>)
 8001f3c:	7819      	ldrb	r1, [r3, #0]
			out = samplesBuffer+(SAMPLES_BUFFER_SIZE/2);
 8001f3e:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <_ZN8MainLoop4loopEv+0xa0>)
 8001f40:	f103 0418 	add.w	r4, r3, #24
 8001f44:	2900      	cmp	r1, #0
 8001f46:	bf08      	it	eq
 8001f48:	461c      	moveq	r4, r3
		mehal_debugPinSet();
 8001f4a:	f000 fd75 	bl	8002a38 <mehal_debugPinSet>
		this->render(out,SAMPLES_BUFFER_SIZE/2);
 8001f4e:	4621      	mov	r1, r4
		sysTickDivisor++;
 8001f50:	4c13      	ldr	r4, [pc, #76]	; (8001fa0 <_ZN8MainLoop4loopEv+0xa4>)
		this->render(out,SAMPLES_BUFFER_SIZE/2);
 8001f52:	2218      	movs	r2, #24
 8001f54:	4628      	mov	r0, r5
 8001f56:	f7ff fe2d 	bl	8001bb4 <_ZN8MainLoop6renderEPhm>
		mehal_debugPinReset();
 8001f5a:	f000 fd6e 	bl	8002a3a <mehal_debugPinReset>
		sysTickDivisor++;
 8001f5e:	7823      	ldrb	r3, [r4, #0]
 8001f60:	3301      	adds	r3, #1
 8001f62:	b2db      	uxtb	r3, r3
		if(sysTickDivisor>=4)
 8001f64:	2b03      	cmp	r3, #3
		sysTickDivisor++;
 8001f66:	7023      	strb	r3, [r4, #0]
		if(sysTickDivisor>=4)
 8001f68:	d904      	bls.n	8001f74 <_ZN8MainLoop4loopEv+0x78>
			userInterface.sysTick(); // 1ms
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <_ZN8MainLoop4loopEv+0x84>)
 8001f6c:	f000 f844 	bl	8001ff8 <_ZN2Ui7sysTickEv>
			sysTickDivisor=0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	7023      	strb	r3, [r4, #0]
		userInterface.justFinishedRender(); // notify the UI the render has finished. Now there is time to update the display
 8001f74:	4802      	ldr	r0, [pc, #8]	; (8001f80 <_ZN8MainLoop4loopEv+0x84>)
 8001f76:	f000 f8d3 	bl	8002120 <_ZN2Ui18justFinishedRenderEv>
		flagRender=0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	7033      	strb	r3, [r6, #0]
}
 8001f7e:	bd70      	pop	{r4, r5, r6, pc}
 8001f80:	200003d8 	.word	0x200003d8
 8001f84:	20000310 	.word	0x20000310
 8001f88:	2000029c 	.word	0x2000029c
 8001f8c:	0800e430 	.word	0x0800e430
 8001f90:	200046a0 	.word	0x200046a0
 8001f94:	20000379 	.word	0x20000379
 8001f98:	2000040d 	.word	0x2000040d
 8001f9c:	200003a5 	.word	0x200003a5
 8001fa0:	2000040c 	.word	0x2000040c

08001fa4 <_GLOBAL__sub_I__ZN6stmlib11GetUniqueIdEh>:
  Adc() { }
 8001fa4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <_GLOBAL__sub_I__ZN6stmlib11GetUniqueIdEh+0x1c>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	8019      	strh	r1, [r3, #0]
 8001fae:	8059      	strh	r1, [r3, #2]
 8001fb0:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001fb4:	f8c3 2006 	str.w	r2, [r3, #6]
 8001fb8:	8099      	strh	r1, [r3, #4]

#define OSCILLATOR_INDEX_LEN	32

using namespace braids;

class Ui
 8001fba:	4b02      	ldr	r3, [pc, #8]	; (8001fc4 <_GLOBAL__sub_I__ZN6stmlib11GetUniqueIdEh+0x20>)
 8001fbc:	759a      	strb	r2, [r3, #22]
}
 8001fbe:	4770      	bx	lr
 8001fc0:	20000414 	.word	0x20000414
 8001fc4:	200003d8 	.word	0x200003d8

08001fc8 <_ZNK7Encoder9incrementEv.isra.0>:
  inline bool pressed_immediate() const {
    //return !GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13);
	  return !mehal_readEncoderSwitch();
  }
  
  inline int32_t increment() const {
 8001fc8:	f000 0003 	and.w	r0, r0, #3
    int32_t increment = 0;
    uint8_t a = quadrature_decoding_state_[0];
    uint8_t b = quadrature_decoding_state_[1];
    if ((a & 0x03) == 0x02 && (b & 0x03) == 0x00) {
 8001fcc:	2802      	cmp	r0, #2
 8001fce:	f001 0103 	and.w	r1, r1, #3
 8001fd2:	d100      	bne.n	8001fd6 <_ZNK7Encoder9incrementEv.isra.0+0xe>
 8001fd4:	b129      	cbz	r1, 8001fe2 <_ZNK7Encoder9incrementEv.isra.0+0x1a>
      increment = -1;
    } else {
      if ((b & 0x03) == 0x02 && (a & 0x03) == 0x00) {
 8001fd6:	2902      	cmp	r1, #2
 8001fd8:	d106      	bne.n	8001fe8 <_ZNK7Encoder9incrementEv.isra.0+0x20>
 8001fda:	fab0 f080 	clz	r0, r0
 8001fde:	0940      	lsrs	r0, r0, #5
 8001fe0:	4770      	bx	lr
      increment = -1;
 8001fe2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fe6:	4770      	bx	lr
    int32_t increment = 0;
 8001fe8:	2000      	movs	r0, #0
        increment = 1;
      }
    }
    return increment;
  }
 8001fea:	4770      	bx	lr

08001fec <_ZN2Ui28getParamFromCurrentWaveTableEv>:



uint16_t Ui::getParamFromCurrentWaveTable(void)
{
	return (((uint16_t)currentOscillator)<<10);
 8001fec:	f990 0010 	ldrsb.w	r0, [r0, #16]
 8001ff0:	0280      	lsls	r0, r0, #10
}
 8001ff2:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 8001ff6:	4770      	bx	lr

08001ff8 <_ZN2Ui7sysTickEv>:
		fineTuneChanged=1;
	}
}

void Ui::sysTick(void)
{
 8001ff8:	b510      	push	{r4, lr}
 8001ffa:	4604      	mov	r4, r0
	encoder.sysTick();
 8001ffc:	3004      	adds	r0, #4
 8001ffe:	f000 fa8f 	bl	8002520 <_ZN7Encoder7sysTickEv>

	if(timeoutCalibCounter>0)
 8002002:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8002006:	2b00      	cmp	r3, #0
 8002008:	dd04      	ble.n	8002014 <_ZN2Ui7sysTickEv+0x1c>
	{
		timeoutCalibCounter--;
 800200a:	3b01      	subs	r3, #1
 800200c:	b29b      	uxth	r3, r3
 800200e:	82a3      	strh	r3, [r4, #20]
		if(timeoutCalibCounter==0)
 8002010:	b903      	cbnz	r3, 8002014 <_ZN2Ui7sysTickEv+0x1c>
		{
			enterCalibCounter=0;
 8002012:	75a3      	strb	r3, [r4, #22]
		}
	}
}
 8002014:	bd10      	pop	{r4, pc}
	...

08002018 <_ZN2Ui15saveAllSettingsEv>:

void Ui::saveAllSettings(void)
{
 8002018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800201a:	4605      	mov	r5, r0
 800201c:	2400      	movs	r4, #0
	uint16_t i;
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
	{
		Setting setting_ = CONFIG_ITEMS[i].option;
 800201e:	4f07      	ldr	r7, [pc, #28]	; (800203c <_ZN2Ui15saveAllSettingsEv+0x24>)
 8002020:	4e07      	ldr	r6, [pc, #28]	; (8002040 <_ZN2Ui15saveAllSettingsEv+0x28>)
 8002022:	193b      	adds	r3, r7, r4
 8002024:	785b      	ldrb	r3, [r3, #1]
		int16_t value = settings.GetValue(setting_);
		this->memory->writeUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))), (uint16_t)value);
 8002026:	f104 0120 	add.w	r1, r4, #32
 800202a:	5cf2      	ldrb	r2, [r6, r3]
 800202c:	b289      	uxth	r1, r1
 800202e:	69e8      	ldr	r0, [r5, #28]
 8002030:	3402      	adds	r4, #2
 8002032:	f000 fb02 	bl	800263a <_ZN6Memory11writeUInt16Ett>
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
 8002036:	2c16      	cmp	r4, #22
 8002038:	d1f3      	bne.n	8002022 <_ZN2Ui15saveAllSettingsEv+0xa>
	}
}
 800203a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800203c:	0800ebd8 	.word	0x0800ebd8
 8002040:	20000310 	.word	0x20000310

08002044 <_ZN2Ui15loadAllSettingsEv>:
void Ui::loadAllSettings(void)
{
 8002044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002048:	4680      	mov	r8, r0
 800204a:	2400      	movs	r4, #0
	uint16_t i;
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
	{
		Setting setting_ = CONFIG_ITEMS[i].option;
 800204c:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8002098 <_ZN2Ui15loadAllSettingsEv+0x54>
  inline bool paques() const {
    return paques_;
  }
  
  static const SettingMetadata& metadata(Setting setting) {
    return metadata_[setting];
 8002050:	4e0f      	ldr	r6, [pc, #60]	; (8002090 <_ZN2Ui15loadAllSettingsEv+0x4c>)
    data[setting] = value;
 8002052:	4f10      	ldr	r7, [pc, #64]	; (8002094 <_ZN2Ui15loadAllSettingsEv+0x50>)

		int16_t valMem = (int16_t)this->memory->readUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))));
 8002054:	f104 0120 	add.w	r1, r4, #32
		Setting setting_ = CONFIG_ITEMS[i].option;
 8002058:	eb09 0304 	add.w	r3, r9, r4
		int16_t valMem = (int16_t)this->memory->readUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))));
 800205c:	b289      	uxth	r1, r1
 800205e:	f8d8 001c 	ldr.w	r0, [r8, #28]
		Setting setting_ = CONFIG_ITEMS[i].option;
 8002062:	785d      	ldrb	r5, [r3, #1]
		int16_t valMem = (int16_t)this->memory->readUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))));
 8002064:	f000 fac5 	bl	80025f2 <_ZN6Memory10readUInt16Et>
    return metadata_[setting];
 8002068:	230c      	movs	r3, #12
 800206a:	436b      	muls	r3, r5
 800206c:	199a      	adds	r2, r3, r6

		int16_t value = settings.metadata(setting_).Clip(valMem);
 800206e:	7852      	ldrb	r2, [r2, #1]
		int16_t valMem = (int16_t)this->memory->readUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))));
 8002070:	b200      	sxth	r0, r0
    if (value > max_value) {
 8002072:	4290      	cmp	r0, r2
		int16_t value = settings.metadata(setting_).Clip(valMem);
 8002074:	5d9b      	ldrb	r3, [r3, r6]
 8002076:	dd06      	ble.n	8002086 <_ZN2Ui15loadAllSettingsEv+0x42>
      value = max_value;
 8002078:	b210      	sxth	r0, r2
 800207a:	3402      	adds	r4, #2
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
 800207c:	2c16      	cmp	r4, #22
		settings.SetValue(setting_, value);
 800207e:	55e8      	strb	r0, [r5, r7]
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
 8002080:	d1e8      	bne.n	8002054 <_ZN2Ui15loadAllSettingsEv+0x10>
	}
}
 8002082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    } else if (value < min_value) {
 8002086:	4298      	cmp	r0, r3
      value = min_value;
 8002088:	bfb8      	it	lt
 800208a:	b218      	sxthlt	r0, r3
 800208c:	e7f5      	b.n	800207a <_ZN2Ui15loadAllSettingsEv+0x36>
 800208e:	bf00      	nop
 8002090:	0800dcfc 	.word	0x0800dcfc
 8002094:	20000310 	.word	0x20000310
 8002098:	0800ebd8 	.word	0x0800ebd8

0800209c <_ZN2Ui4initEPN6braids3AdcEP6Memory>:
void Ui::init(Adc* adc,Memory* memory) {
 800209c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800209e:	4604      	mov	r4, r0
 80020a0:	4616      	mov	r6, r2
	state = UI_STATE_SELECT_OSCILLATOR;
 80020a2:	2500      	movs	r5, #0
void Ui::init(Adc* adc,Memory* memory) {
 80020a4:	460f      	mov	r7, r1
	display.init();
 80020a6:	f000 f9cf 	bl	8002448 <_ZN7Display4initEv>
	encoder.Init();
 80020aa:	1d20      	adds	r0, r4, #4
 80020ac:	f000 fa31 	bl	8002512 <_ZN7Encoder4InitEv>
	this->flagUncal=2;
 80020b0:	4b18      	ldr	r3, [pc, #96]	; (8002114 <_ZN2Ui4initEPN6braids3AdcEP6Memory+0x78>)
	state = UI_STATE_SELECT_OSCILLATOR;
 80020b2:	7465      	strb	r5, [r4, #17]
	timeoutCalibCounter=0;
 80020b4:	82a5      	strh	r5, [r4, #20]
	enterCalibCounter=0;
 80020b6:	75a5      	strb	r5, [r4, #22]
	this->flagUncal=2;
 80020b8:	62e3      	str	r3, [r4, #44]	; 0x2c
	this->flagJustFinishedRender=0;
 80020ba:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
	this->memory = memory;
 80020be:	e9c4 7606 	strd	r7, r6, [r4, #24]
	currentOscillator=(int8_t)memory->readUInt8(Memory::ADDR_CURRENT_OSCILLATOR);
 80020c2:	211c      	movs	r1, #28
 80020c4:	4630      	mov	r0, r6
 80020c6:	f000 fa88 	bl	80025da <_ZN6Memory9readUInt8Et>
 80020ca:	b240      	sxtb	r0, r0
	if(currentOscillator>=OSCILLATOR_INDEX_LEN)
 80020cc:	281f      	cmp	r0, #31
	currentOscillator=(int8_t)memory->readUInt8(Memory::ADDR_CURRENT_OSCILLATOR);
 80020ce:	bfd4      	ite	le
 80020d0:	7420      	strble	r0, [r4, #16]
		currentOscillator=0;
 80020d2:	7425      	strbgt	r5, [r4, #16]
	display.showChar(LIMITED_OSCILLATORS[currentOscillator].symbol);
 80020d4:	f994 3010 	ldrsb.w	r3, [r4, #16]
 80020d8:	4d0f      	ldr	r5, [pc, #60]	; (8002118 <_ZN2Ui4initEPN6braids3AdcEP6Memory+0x7c>)
 80020da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80020de:	442b      	add	r3, r5
 80020e0:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80020e4:	4620      	mov	r0, r4
 80020e6:	f000 f9b3 	bl	8002450 <_ZN7Display8showCharEa>
	display.showBank(LIMITED_OSCILLATORS[currentOscillator].bank);
 80020ea:	f994 3010 	ldrsb.w	r3, [r4, #16]
 80020ee:	4620      	mov	r0, r4
 80020f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80020f4:	441d      	add	r5, r3
 80020f6:	7869      	ldrb	r1, [r5, #1]
 80020f8:	f000 f9c4 	bl	8002484 <_ZN7Display8showBankEh>
    data[setting] = value;
 80020fc:	2228      	movs	r2, #40	; 0x28
 80020fe:	4b07      	ldr	r3, [pc, #28]	; (800211c <_ZN2Ui4initEPN6braids3AdcEP6Memory+0x80>)
	display.showConfig(0);
 8002100:	4620      	mov	r0, r4
 8002102:	701a      	strb	r2, [r3, #0]
 8002104:	2100      	movs	r1, #0
 8002106:	f000 f9d6 	bl	80024b6 <_ZN7Display10showConfigEh>
	loadAllSettings();
 800210a:	4620      	mov	r0, r4
}
 800210c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	loadAllSettings();
 8002110:	f7ff bf98 	b.w	8002044 <_ZN2Ui15loadAllSettingsEv>
 8002114:	00010002 	.word	0x00010002
 8002118:	0800ebee 	.word	0x0800ebee
 800211c:	20000310 	.word	0x20000310

08002120 <_ZN2Ui18justFinishedRenderEv>:

void Ui::justFinishedRender(void)
{
	flagJustFinishedRender=1;
 8002120:	2301      	movs	r3, #1
 8002122:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
}
 8002126:	4770      	bx	lr

08002128 <_ZN2Ui4loopEv>:

void Ui::loop(void) {
 8002128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800212c:	4604      	mov	r4, r0

	encoder.loop();
 800212e:	1d05      	adds	r5, r0, #4
 8002130:	4628      	mov	r0, r5
 8002132:	f000 f9fa 	bl	800252a <_ZN7Encoder4loopEv>

	switch(state)
 8002136:	7c63      	ldrb	r3, [r4, #17]
 8002138:	2b04      	cmp	r3, #4
 800213a:	d87a      	bhi.n	8002232 <_ZN2Ui4loopEv+0x10a>
 800213c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002140:	007b0005 	.word	0x007b0005
 8002144:	011100df 	.word	0x011100df
 8002148:	0131      	.short	0x0131
	{
		case UI_STATE_SELECT_OSCILLATOR:
		{
			if(flagJustFinishedRender)
 800214a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800214e:	b3d3      	cbz	r3, 80021c6 <_ZN2Ui4loopEv+0x9e>
			{
				flagJustFinishedRender=0;
 8002150:	2300      	movs	r3, #0
				if(fineTuneChanged)
 8002152:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
				flagJustFinishedRender=0;
 8002156:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
				if(fineTuneChanged)
 800215a:	b162      	cbz	r2, 8002176 <_ZN2Ui4loopEv+0x4e>
				{
					fineTuneChanged=0;
 800215c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
					display.showChar(LIMITED_OSCILLATORS[currentOscillator].symbol); // update display to show DOT
 8002160:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8002164:	4ab4      	ldr	r2, [pc, #720]	; (8002438 <_ZN2Ui4loopEv+0x310>)
 8002166:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800216a:	4413      	add	r3, r2
 800216c:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8002170:	4620      	mov	r0, r4
 8002172:	f000 f96d 	bl	8002450 <_ZN7Display8showCharEa>
				}
				if(oscillatorChanged)
 8002176:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800217a:	b1b3      	cbz	r3, 80021aa <_ZN2Ui4loopEv+0x82>
				{
					oscillatorChanged=0;
 800217c:	2300      	movs	r3, #0
 800217e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
					display.showChar(LIMITED_OSCILLATORS[currentOscillator].symbol);
 8002182:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8002186:	4eac      	ldr	r6, [pc, #688]	; (8002438 <_ZN2Ui4loopEv+0x310>)
 8002188:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800218c:	4433      	add	r3, r6
 800218e:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8002192:	4620      	mov	r0, r4
 8002194:	f000 f95c 	bl	8002450 <_ZN7Display8showCharEa>
					display.showBank(LIMITED_OSCILLATORS[currentOscillator].bank);
 8002198:	f994 3010 	ldrsb.w	r3, [r4, #16]
 800219c:	4620      	mov	r0, r4
 800219e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80021a2:	441e      	add	r6, r3
 80021a4:	7871      	ldrb	r1, [r6, #1]
 80021a6:	f000 f96d 	bl	8002484 <_ZN7Display8showBankEh>

				}
				if(flagPendingWriteValueInEEPROM)
 80021aa:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80021ae:	b153      	cbz	r3, 80021c6 <_ZN2Ui4loopEv+0x9e>
				{
					flagPendingWriteValueInEEPROM=0;
 80021b0:	2100      	movs	r1, #0
					//settings.SetValue(SETTING_OSCILLATOR_SHAPE, LIMITED_OSCILLATORS[currentOscillator].osc);
					display.showConfig(0);
 80021b2:	4620      	mov	r0, r4
					flagPendingWriteValueInEEPROM=0;
 80021b4:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
					display.showConfig(0);
 80021b8:	f000 f97d 	bl	80024b6 <_ZN7Display10showConfigEh>
					memory->writeUInt8NoWait(Memory::ADDR_CURRENT_OSCILLATOR, (uint8_t)currentOscillator);
 80021bc:	7c22      	ldrb	r2, [r4, #16]
 80021be:	211c      	movs	r1, #28
 80021c0:	69e0      	ldr	r0, [r4, #28]
 80021c2:	f000 fa2e 	bl	8002622 <_ZN6Memory16writeUInt8NoWaitEth>
				}
			}

			int32_t increment = encoder.increment();
 80021c6:	79a1      	ldrb	r1, [r4, #6]
 80021c8:	7960      	ldrb	r0, [r4, #5]
 80021ca:	f7ff fefd 	bl	8001fc8 <_ZNK7Encoder9incrementEv.isra.0>
			if (increment != 0)
 80021ce:	2800      	cmp	r0, #0
 80021d0:	d018      	beq.n	8002204 <_ZN2Ui4loopEv+0xdc>
 80021d2:	7c23      	ldrb	r3, [r4, #16]
				if(currentOscillator>=OSCILLATOR_INDEX_LEN)
					currentOscillator=(OSCILLATOR_INDEX_LEN-1);
				if(currentOscillator<0)
					currentOscillator=0;

				oscillatorChanged=1; // to update display later
 80021d4:	f04f 0101 	mov.w	r1, #1
					currentOscillator++;
 80021d8:	bfcc      	ite	gt
 80021da:	3301      	addgt	r3, #1
					currentOscillator--;
 80021dc:	f103 33ff 	addle.w	r3, r3, #4294967295	; 0xffffffff
 80021e0:	7423      	strb	r3, [r4, #16]
				if(currentOscillator>=OSCILLATOR_INDEX_LEN)
 80021e2:	f994 3010 	ldrsb.w	r3, [r4, #16]
				oscillatorChanged=1; // to update display later
 80021e6:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
				if(currentOscillator>=OSCILLATOR_INDEX_LEN)
 80021ea:	2b1f      	cmp	r3, #31
					currentOscillator=(OSCILLATOR_INDEX_LEN-1);
 80021ec:	bfc4      	itt	gt
 80021ee:	231f      	movgt	r3, #31
 80021f0:	7423      	strbgt	r3, [r4, #16]
				if(currentOscillator<0)
 80021f2:	f994 3010 	ldrsb.w	r3, [r4, #16]
				display.showConfig(1);
 80021f6:	4620      	mov	r0, r4
				if(currentOscillator<0)
 80021f8:	2b00      	cmp	r3, #0
					currentOscillator=0;
 80021fa:	bfbc      	itt	lt
 80021fc:	2300      	movlt	r3, #0
 80021fe:	7423      	strblt	r3, [r4, #16]
				display.showConfig(1);
 8002200:	f000 f959 	bl	80024b6 <_ZN7Display10showConfigEh>
			}
			if(encoder.pressed())
 8002204:	4628      	mov	r0, r5
 8002206:	f000 f9d8 	bl	80025ba <_ZN7Encoder7pressedEv>
 800220a:	b110      	cbz	r0, 8002212 <_ZN2Ui4loopEv+0xea>
			{
				flagPendingWriteValueInEEPROM=1;
 800220c:	2301      	movs	r3, #1
 800220e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
			}

			if(encoder.pressedLong())
 8002212:	4628      	mov	r0, r5
 8002214:	f000 f9cb 	bl	80025ae <_ZN7Encoder11pressedLongEv>
 8002218:	b158      	cbz	r0, 8002232 <_ZN2Ui4loopEv+0x10a>
			{
				state = UI_STATE_CONFIG_MENU;
 800221a:	2101      	movs	r1, #1
				display.showConfig(1);
 800221c:	4620      	mov	r0, r4
				state = UI_STATE_CONFIG_MENU;
 800221e:	7461      	strb	r1, [r4, #17]
				display.showConfig(1);
 8002220:	f000 f949 	bl	80024b6 <_ZN7Display10showConfigEh>
				display.showBank(2); // both off
 8002224:	2102      	movs	r1, #2
 8002226:	4620      	mov	r0, r4
 8002228:	f000 f92c 	bl	8002484 <_ZN7Display8showBankEh>
				configIndex=0;
 800222c:	2300      	movs	r3, #0
 800222e:	74a3      	strb	r3, [r4, #18]

				// Calibration mode detection
				if(enterCalibCounter==0)
					timeoutCalibCounter=2000;

				enterCalibCounter++;
 8002230:	75a3      	strb	r3, [r4, #22]
			}
			break;
		}
	}

}
 8002232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(encoder.pressedLong())
 8002236:	4628      	mov	r0, r5
 8002238:	f000 f9b9 	bl	80025ae <_ZN7Encoder11pressedLongEv>
 800223c:	b1e8      	cbz	r0, 800227a <_ZN2Ui4loopEv+0x152>
				state = UI_STATE_SELECT_OSCILLATOR;
 800223e:	2100      	movs	r1, #0
				display.showConfig(0);
 8002240:	4620      	mov	r0, r4
				state = UI_STATE_SELECT_OSCILLATOR;
 8002242:	7461      	strb	r1, [r4, #17]
				display.showConfig(0);
 8002244:	f000 f937 	bl	80024b6 <_ZN7Display10showConfigEh>
				display.showBank(LIMITED_OSCILLATORS[currentOscillator].bank);
 8002248:	f994 3010 	ldrsb.w	r3, [r4, #16]
 800224c:	4d7a      	ldr	r5, [pc, #488]	; (8002438 <_ZN2Ui4loopEv+0x310>)
 800224e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002252:	442b      	add	r3, r5
 8002254:	7859      	ldrb	r1, [r3, #1]
 8002256:	4620      	mov	r0, r4
 8002258:	f000 f914 	bl	8002484 <_ZN7Display8showBankEh>
				display.showChar(LIMITED_OSCILLATORS[currentOscillator].symbol);
 800225c:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8002260:	4620      	mov	r0, r4
 8002262:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002266:	441d      	add	r5, r3
 8002268:	f995 1002 	ldrsb.w	r1, [r5, #2]
 800226c:	f000 f8f0 	bl	8002450 <_ZN7Display8showCharEa>
				saveAllSettings();
 8002270:	4620      	mov	r0, r4
}
 8002272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				saveAllSettings();
 8002276:	f7ff becf 	b.w	8002018 <_ZN2Ui15saveAllSettingsEv>
			display.showChar(CONFIG_ITEMS[configIndex].symbol);
 800227a:	f994 2012 	ldrsb.w	r2, [r4, #18]
 800227e:	4b6f      	ldr	r3, [pc, #444]	; (800243c <_ZN2Ui4loopEv+0x314>)
 8002280:	4620      	mov	r0, r4
 8002282:	f913 1012 	ldrsb.w	r1, [r3, r2, lsl #1]
 8002286:	f000 f8e3 	bl	8002450 <_ZN7Display8showCharEa>
			int32_t increment = encoder.increment();
 800228a:	79a1      	ldrb	r1, [r4, #6]
 800228c:	7960      	ldrb	r0, [r4, #5]
 800228e:	f7ff fe9b 	bl	8001fc8 <_ZNK7Encoder9incrementEv.isra.0>
			if (increment != 0)
 8002292:	2800      	cmp	r0, #0
 8002294:	d011      	beq.n	80022ba <_ZN2Ui4loopEv+0x192>
 8002296:	7ca3      	ldrb	r3, [r4, #18]
					configIndex++;
 8002298:	bfcc      	ite	gt
 800229a:	3301      	addgt	r3, #1
					configIndex--;
 800229c:	f103 33ff 	addle.w	r3, r3, #4294967295	; 0xffffffff
 80022a0:	74a3      	strb	r3, [r4, #18]
				if(configIndex>=CONFIG_ITEMS_SYMBOLS_LEN)
 80022a2:	f994 3012 	ldrsb.w	r3, [r4, #18]
 80022a6:	2b0a      	cmp	r3, #10
					configIndex=CONFIG_ITEMS_SYMBOLS_LEN-1;
 80022a8:	bfc4      	itt	gt
 80022aa:	230a      	movgt	r3, #10
 80022ac:	74a3      	strbgt	r3, [r4, #18]
				if(configIndex<0)
 80022ae:	f994 3012 	ldrsb.w	r3, [r4, #18]
 80022b2:	2b00      	cmp	r3, #0
					configIndex=0;
 80022b4:	bfbc      	itt	lt
 80022b6:	2300      	movlt	r3, #0
 80022b8:	74a3      	strblt	r3, [r4, #18]
			if(encoder.pressed())
 80022ba:	4628      	mov	r0, r5
 80022bc:	f000 f97d 	bl	80025ba <_ZN7Encoder7pressedEv>
 80022c0:	2800      	cmp	r0, #0
 80022c2:	d0b6      	beq.n	8002232 <_ZN2Ui4loopEv+0x10a>
				state = UI_STATE_SET_VALUE;
 80022c4:	2302      	movs	r3, #2
 80022c6:	7463      	strb	r3, [r4, #17]
				if(enterCalibCounter==0)
 80022c8:	7da3      	ldrb	r3, [r4, #22]
 80022ca:	b913      	cbnz	r3, 80022d2 <_ZN2Ui4loopEv+0x1aa>
					timeoutCalibCounter=2000;
 80022cc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80022d0:	82a2      	strh	r2, [r4, #20]
				enterCalibCounter++;
 80022d2:	3301      	adds	r3, #1
 80022d4:	b2db      	uxtb	r3, r3
				if(enterCalibCounter>=4)
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d9aa      	bls.n	8002230 <_ZN2Ui4loopEv+0x108>
					enterCalibCounter=0;
 80022da:	2300      	movs	r3, #0
					state = UI_STATE_CALIB;
 80022dc:	2503      	movs	r5, #3
					enterCalibCounter=0;
 80022de:	75a3      	strb	r3, [r4, #22]
					display.showConfig(1);
 80022e0:	2101      	movs	r1, #1
 80022e2:	4620      	mov	r0, r4
					state = UI_STATE_CALIB;
 80022e4:	7465      	strb	r5, [r4, #17]
					display.showConfig(1);
 80022e6:	f000 f8e6 	bl	80024b6 <_ZN7Display10showConfigEh>
					display.showBank(3); // all leds ON
 80022ea:	4629      	mov	r1, r5
 80022ec:	4620      	mov	r0, r4
 80022ee:	f000 f8c9 	bl	8002484 <_ZN7Display8showBankEh>
					display.showChar('2');
 80022f2:	2132      	movs	r1, #50	; 0x32
				display.showChar('4');
 80022f4:	4620      	mov	r0, r4
}
 80022f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				display.showChar('4');
 80022fa:	f000 b8a9 	b.w	8002450 <_ZN7Display8showCharEa>
			Setting setting_ = CONFIG_ITEMS[configIndex].option;
 80022fe:	f994 2012 	ldrsb.w	r2, [r4, #18]
 8002302:	4b4e      	ldr	r3, [pc, #312]	; (800243c <_ZN2Ui4loopEv+0x314>)
    return data[setting];
 8002304:	4f4e      	ldr	r7, [pc, #312]	; (8002440 <_ZN2Ui4loopEv+0x318>)
 8002306:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800230a:	785b      	ldrb	r3, [r3, #1]
			int32_t increment = encoder.increment();
 800230c:	79a1      	ldrb	r1, [r4, #6]
 800230e:	7960      	ldrb	r0, [r4, #5]
 8002310:	5dda      	ldrb	r2, [r3, r7]
 8002312:	f7ff fe59 	bl	8001fc8 <_ZNK7Encoder9incrementEv.isra.0>
 8002316:	4e4b      	ldr	r6, [pc, #300]	; (8002444 <_ZN2Ui4loopEv+0x31c>)
			if (increment != 0)
 8002318:	b988      	cbnz	r0, 800233e <_ZN2Ui4loopEv+0x216>
			int16_t value = settings.GetValue(setting_);
 800231a:	b212      	sxth	r2, r2
			display.showValue(settings.metadata(setting_).max_value,value);
 800231c:	210c      	movs	r1, #12
 800231e:	fb01 6303 	mla	r3, r1, r3, r6
 8002322:	4620      	mov	r0, r4
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	7859      	ldrb	r1, [r3, #1]
 8002328:	f000 f8c8 	bl	80024bc <_ZN7Display9showValueEhh>
			if(encoder.pressed())
 800232c:	4628      	mov	r0, r5
 800232e:	f000 f944 	bl	80025ba <_ZN7Encoder7pressedEv>
 8002332:	2800      	cmp	r0, #0
 8002334:	f43f af7d 	beq.w	8002232 <_ZN2Ui4loopEv+0x10a>
				state = UI_STATE_CONFIG_MENU;
 8002338:	2301      	movs	r3, #1
 800233a:	7463      	strb	r3, [r4, #17]
}
 800233c:	e779      	b.n	8002232 <_ZN2Ui4loopEv+0x10a>
    return metadata_[setting];
 800233e:	210c      	movs	r1, #12
 8002340:	4359      	muls	r1, r3
 8002342:	eb06 0c01 	add.w	ip, r6, r1
				value = settings.metadata(setting_).Clip(value + increment);
 8002346:	4402      	add	r2, r0
 8002348:	f89c 0001 	ldrb.w	r0, [ip, #1]
 800234c:	b212      	sxth	r2, r2
    if (value > max_value) {
 800234e:	4290      	cmp	r0, r2
 8002350:	5c71      	ldrb	r1, [r6, r1]
 8002352:	da02      	bge.n	800235a <_ZN2Ui4loopEv+0x232>
      value = max_value;
 8002354:	b202      	sxth	r2, r0
				settings.SetValue(setting_, value);
 8002356:	55da      	strb	r2, [r3, r7]
 8002358:	e7e0      	b.n	800231c <_ZN2Ui4loopEv+0x1f4>
    } else if (value < min_value) {
 800235a:	428a      	cmp	r2, r1
      value = min_value;
 800235c:	bfb8      	it	lt
 800235e:	b20a      	sxthlt	r2, r1
 8002360:	e7f9      	b.n	8002356 <_ZN2Ui4loopEv+0x22e>
			if(encoder.pressedLong())
 8002362:	4628      	mov	r0, r5
 8002364:	f000 f923 	bl	80025ae <_ZN7Encoder11pressedLongEv>
 8002368:	b150      	cbz	r0, 8002380 <_ZN2Ui4loopEv+0x258>
				state = UI_STATE_CONFIG_MENU;
 800236a:	2101      	movs	r1, #1
				display.showConfig(1);
 800236c:	4620      	mov	r0, r4
				state = UI_STATE_CONFIG_MENU;
 800236e:	7461      	strb	r1, [r4, #17]
				display.showConfig(1);
 8002370:	f000 f8a1 	bl	80024b6 <_ZN7Display10showConfigEh>
				display.showBank(2); // all leds OFF
 8002374:	4620      	mov	r0, r4
}
 8002376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				display.showBank(2); // all leds OFF
 800237a:	2102      	movs	r1, #2
 800237c:	f000 b882 	b.w	8002484 <_ZN7Display8showBankEh>
			if(encoder.pressed())
 8002380:	4628      	mov	r0, r5
 8002382:	f000 f91a 	bl	80025ba <_ZN7Encoder7pressedEv>
 8002386:	2800      	cmp	r0, #0
 8002388:	f43f af53 	beq.w	8002232 <_ZN2Ui4loopEv+0x10a>
				adc_code_c2 = adc->channel(ADC_CHANNEL_PITCH);
 800238c:	69a3      	ldr	r3, [r4, #24]
				display.showChar('4');
 800238e:	2134      	movs	r1, #52	; 0x34
				adc_code_c2 = adc->channel(ADC_CHANNEL_PITCH);
 8002390:	891a      	ldrh	r2, [r3, #8]
 8002392:	6222      	str	r2, [r4, #32]
				adc_code_p0_min = adc->channel(ADC_CHANNEL_PARAM0);
 8002394:	885a      	ldrh	r2, [r3, #2]
 8002396:	6262      	str	r2, [r4, #36]	; 0x24
				adc_code_p1_min = adc->channel(ADC_CHANNEL_PARAM1);
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	62a3      	str	r3, [r4, #40]	; 0x28
				state = UI_STATE_CALIB_STEP_2;
 800239c:	2304      	movs	r3, #4
 800239e:	7463      	strb	r3, [r4, #17]
 80023a0:	e7a8      	b.n	80022f4 <_ZN2Ui4loopEv+0x1cc>
			if(encoder.pressedLong())
 80023a2:	4628      	mov	r0, r5
 80023a4:	f000 f903 	bl	80025ae <_ZN7Encoder11pressedLongEv>
 80023a8:	4680      	mov	r8, r0
 80023aa:	2800      	cmp	r0, #0
 80023ac:	d1dd      	bne.n	800236a <_ZN2Ui4loopEv+0x242>
			if(encoder.pressed())
 80023ae:	4628      	mov	r0, r5
 80023b0:	f000 f903 	bl	80025ba <_ZN7Encoder7pressedEv>
 80023b4:	2800      	cmp	r0, #0
 80023b6:	f43f af3c 	beq.w	8002232 <_ZN2Ui4loopEv+0x10a>
				int32_t adc_code_c4 = adc->channel(ADC_CHANNEL_PITCH);
 80023ba:	69a3      	ldr	r3, [r4, #24]
				settings.Calibrate(adc_code_c2,
 80023bc:	6a22      	ldr	r2, [r4, #32]
		  return this->currentValues[4];
 80023be:	891d      	ldrh	r5, [r3, #8]
		  return this->currentValues[1];
 80023c0:	885f      	ldrh	r7, [r3, #2]
    if (adc_code_c4 != adc_code_c2) {
 80023c2:	42aa      	cmp	r2, r5
		  return this->currentValues[0];
 80023c4:	881e      	ldrh	r6, [r3, #0]
 80023c6:	d00f      	beq.n	80023e8 <_ZN2Ui4loopEv+0x2c0>
      int32_t scale = (24 * 128 * 4096L) / (adc_code_c4 - adc_code_c2);
 80023c8:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 80023cc:	1aa9      	subs	r1, r5, r2
 80023ce:	fb93 f3f1 	sdiv	r3, r3, r1
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 80023d2:	442a      	add	r2, r5
      data_.pitch_cv_scale = scale;
 80023d4:	491a      	ldr	r1, [pc, #104]	; (8002440 <_ZN2Ui4loopEv+0x318>)
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 80023d6:	1052      	asrs	r2, r2, #1
      data_.pitch_cv_scale = scale;
 80023d8:	618b      	str	r3, [r1, #24]
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 80023da:	4353      	muls	r3, r2
 80023dc:	131b      	asrs	r3, r3, #12
      data_.pitch_cv_offset = (60 << 7) - 
 80023de:	f5c3 53f0 	rsb	r3, r3, #7680	; 0x1e00
 80023e2:	614b      	str	r3, [r1, #20]
      data_.fm_cv_offset = adc_code_fm;
 80023e4:	f8c1 801c 	str.w	r8, [r1, #28]
    Save();
 80023e8:	4815      	ldr	r0, [pc, #84]	; (8002440 <_ZN2Ui4loopEv+0x318>)
 80023ea:	f7fe ff77 	bl	80012dc <_ZN6braids8Settings4SaveEv>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_C2, adc_code_c2);
 80023ee:	6a22      	ldr	r2, [r4, #32]
 80023f0:	2100      	movs	r1, #0
 80023f2:	69e0      	ldr	r0, [r4, #28]
 80023f4:	f000 f909 	bl	800260a <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_C4, adc_code_c4);
 80023f8:	462a      	mov	r2, r5
 80023fa:	2104      	movs	r1, #4
 80023fc:	69e0      	ldr	r0, [r4, #28]
 80023fe:	f000 f904 	bl	800260a <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_FM, adc_code_fm);
 8002402:	2200      	movs	r2, #0
 8002404:	2108      	movs	r1, #8
 8002406:	69e0      	ldr	r0, [r4, #28]
 8002408:	f000 f8ff 	bl	800260a <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_P0_MIN, adc_code_p0_min);
 800240c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800240e:	210c      	movs	r1, #12
 8002410:	69e0      	ldr	r0, [r4, #28]
 8002412:	f000 f8fa 	bl	800260a <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_P0_MAX, adc_code_p0_max);
 8002416:	463a      	mov	r2, r7
 8002418:	2110      	movs	r1, #16
 800241a:	69e0      	ldr	r0, [r4, #28]
 800241c:	f000 f8f5 	bl	800260a <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_P1_MIN, adc_code_p1_min);
 8002420:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002422:	2114      	movs	r1, #20
 8002424:	69e0      	ldr	r0, [r4, #28]
 8002426:	f000 f8f0 	bl	800260a <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_P1_MAX, adc_code_p1_max);
 800242a:	4632      	mov	r2, r6
 800242c:	2118      	movs	r1, #24
 800242e:	69e0      	ldr	r0, [r4, #28]
 8002430:	f000 f8eb 	bl	800260a <_ZN6Memory11writeUInt32Etm>
 8002434:	e780      	b.n	8002338 <_ZN2Ui4loopEv+0x210>
 8002436:	bf00      	nop
 8002438:	0800ebee 	.word	0x0800ebee
 800243c:	0800ebd8 	.word	0x0800ebd8
 8002440:	20000310 	.word	0x20000310
 8002444:	0800dcfc 	.word	0x0800dcfc

08002448 <_ZN7Display4initEv>:
 8002448:	2300      	movs	r3, #0
 800244a:	7003      	strb	r3, [r0, #0]
 800244c:	4770      	bx	lr
	...

08002450 <_ZN7Display8showCharEa>:
 8002450:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b19      	cmp	r3, #25
 8002458:	bf95      	itete	ls
 800245a:	4b08      	ldrls	r3, [pc, #32]	; (800247c <_ZN7Display8showCharEa+0x2c>)
 800245c:	4b08      	ldrhi	r3, [pc, #32]	; (8002480 <_ZN7Display8showCharEa+0x30>)
 800245e:	18c9      	addls	r1, r1, r3
 8002460:	18c9      	addhi	r1, r1, r3
 8002462:	bf94      	ite	ls
 8002464:	f811 3c41 	ldrbls.w	r3, [r1, #-65]
 8002468:	f811 3c30 	ldrbhi.w	r3, [r1, #-48]
 800246c:	7800      	ldrb	r0, [r0, #0]
 800246e:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 8002472:	43c0      	mvns	r0, r0
 8002474:	b2c0      	uxtb	r0, r0
 8002476:	f000 baf9 	b.w	8002a6c <mehal_sendDataTo595>
 800247a:	bf00      	nop
 800247c:	0800ec4e 	.word	0x0800ec4e
 8002480:	0800ec68 	.word	0x0800ec68

08002484 <_ZN7Display8showBankEh>:
 8002484:	b508      	push	{r3, lr}
 8002486:	2903      	cmp	r1, #3
 8002488:	d814      	bhi.n	80024b4 <_ZN7Display8showBankEh+0x30>
 800248a:	e8df f001 	tbb	[pc, r1]
 800248e:	0a02      	.short	0x0a02
 8002490:	110f      	.short	0x110f
 8002492:	2001      	movs	r0, #1
 8002494:	f000 fb36 	bl	8002b04 <mehal_setBank0Led>
 8002498:	2000      	movs	r0, #0
 800249a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800249e:	f000 bb25 	b.w	8002aec <mehal_setBank1Led>
 80024a2:	2000      	movs	r0, #0
 80024a4:	f000 fb2e 	bl	8002b04 <mehal_setBank0Led>
 80024a8:	2001      	movs	r0, #1
 80024aa:	e7f6      	b.n	800249a <_ZN7Display8showBankEh+0x16>
 80024ac:	2000      	movs	r0, #0
 80024ae:	e7f1      	b.n	8002494 <_ZN7Display8showBankEh+0x10>
 80024b0:	2001      	movs	r0, #1
 80024b2:	e7f7      	b.n	80024a4 <_ZN7Display8showBankEh+0x20>
 80024b4:	bd08      	pop	{r3, pc}

080024b6 <_ZN7Display10showConfigEh>:
 80024b6:	4608      	mov	r0, r1
 80024b8:	f000 bb0c 	b.w	8002ad4 <mehal_setConfigLed>

080024bc <_ZN7Display9showValueEhh>:
 80024bc:	3901      	subs	r1, #1
 80024be:	2912      	cmp	r1, #18
 80024c0:	d826      	bhi.n	8002510 <_ZN7Display9showValueEhh+0x54>
 80024c2:	e8df f001 	tbb	[pc, r1]
 80024c6:	1812      	.short	0x1812
 80024c8:	25251e25 	.word	0x25251e25
 80024cc:	25252525 	.word	0x25252525
 80024d0:	2525251e 	.word	0x2525251e
 80024d4:	2525250a 	.word	0x2525250a
 80024d8:	1e          	.byte	0x1e
 80024d9:	00          	.byte	0x00
 80024da:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
 80024de:	220f      	movs	r2, #15
 80024e0:	fb91 f1f2 	sdiv	r1, r1, r2
 80024e4:	3130      	adds	r1, #48	; 0x30
 80024e6:	b249      	sxtb	r1, r1
 80024e8:	e001      	b.n	80024ee <_ZN7Display9showValueEhh+0x32>
 80024ea:	b912      	cbnz	r2, 80024f2 <_ZN7Display9showValueEhh+0x36>
 80024ec:	2130      	movs	r1, #48	; 0x30
 80024ee:	f7ff bfaf 	b.w	8002450 <_ZN7Display8showCharEa>
 80024f2:	2131      	movs	r1, #49	; 0x31
 80024f4:	e7fb      	b.n	80024ee <_ZN7Display9showValueEhh+0x32>
 80024f6:	2a00      	cmp	r2, #0
 80024f8:	d0f8      	beq.n	80024ec <_ZN7Display9showValueEhh+0x30>
 80024fa:	2a01      	cmp	r2, #1
 80024fc:	d0f9      	beq.n	80024f2 <_ZN7Display9showValueEhh+0x36>
 80024fe:	2132      	movs	r1, #50	; 0x32
 8002500:	e7f5      	b.n	80024ee <_ZN7Display9showValueEhh+0x32>
 8002502:	2a09      	cmp	r2, #9
 8002504:	bf94      	ite	ls
 8002506:	f102 0130 	addls.w	r1, r2, #48	; 0x30
 800250a:	f102 0137 	addhi.w	r1, r2, #55	; 0x37
 800250e:	e7ea      	b.n	80024e6 <_ZN7Display9showValueEhh+0x2a>
 8002510:	4770      	bx	lr

08002512 <_ZN7Encoder4InitEv>:
 8002512:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002516:	8003      	strh	r3, [r0, #0]
 8002518:	7083      	strb	r3, [r0, #2]
 800251a:	2300      	movs	r3, #0
 800251c:	7203      	strb	r3, [r0, #8]
 800251e:	4770      	bx	lr

08002520 <_ZN7Encoder7sysTickEv>:
 8002520:	6843      	ldr	r3, [r0, #4]
 8002522:	b10b      	cbz	r3, 8002528 <_ZN7Encoder7sysTickEv+0x8>
 8002524:	3b01      	subs	r3, #1
 8002526:	6043      	str	r3, [r0, #4]
 8002528:	4770      	bx	lr

0800252a <_ZN7Encoder4loopEv>:
 800252a:	b538      	push	{r3, r4, r5, lr}
 800252c:	7a03      	ldrb	r3, [r0, #8]
 800252e:	4604      	mov	r4, r0
 8002530:	2b01      	cmp	r3, #1
 8002532:	d022      	beq.n	800257a <_ZN7Encoder4loopEv+0x50>
 8002534:	d317      	bcc.n	8002566 <_ZN7Encoder4loopEv+0x3c>
 8002536:	2b02      	cmp	r3, #2
 8002538:	d030      	beq.n	800259c <_ZN7Encoder4loopEv+0x72>
 800253a:	7825      	ldrb	r5, [r4, #0]
 800253c:	f000 fa7e 	bl	8002a3c <mehal_readEncoderSwitch>
 8002540:	006d      	lsls	r5, r5, #1
 8002542:	b26d      	sxtb	r5, r5
 8002544:	4328      	orrs	r0, r5
 8002546:	7020      	strb	r0, [r4, #0]
 8002548:	7865      	ldrb	r5, [r4, #1]
 800254a:	f000 fa87 	bl	8002a5c <mehal_readEncoderB>
 800254e:	006d      	lsls	r5, r5, #1
 8002550:	b26d      	sxtb	r5, r5
 8002552:	4328      	orrs	r0, r5
 8002554:	7060      	strb	r0, [r4, #1]
 8002556:	78a5      	ldrb	r5, [r4, #2]
 8002558:	f000 fa78 	bl	8002a4c <mehal_readEncoderA>
 800255c:	006d      	lsls	r5, r5, #1
 800255e:	b26d      	sxtb	r5, r5
 8002560:	4328      	orrs	r0, r5
 8002562:	70a0      	strb	r0, [r4, #2]
 8002564:	bd38      	pop	{r3, r4, r5, pc}
 8002566:	f000 fa69 	bl	8002a3c <mehal_readEncoderSwitch>
 800256a:	2800      	cmp	r0, #0
 800256c:	d1e5      	bne.n	800253a <_ZN7Encoder4loopEv+0x10>
 800256e:	2301      	movs	r3, #1
 8002570:	7223      	strb	r3, [r4, #8]
 8002572:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002576:	6063      	str	r3, [r4, #4]
 8002578:	e7df      	b.n	800253a <_ZN7Encoder4loopEv+0x10>
 800257a:	6842      	ldr	r2, [r0, #4]
 800257c:	b922      	cbnz	r2, 8002588 <_ZN7Encoder4loopEv+0x5e>
 800257e:	7243      	strb	r3, [r0, #9]
 8002580:	2302      	movs	r3, #2
 8002582:	7203      	strb	r3, [r0, #8]
 8002584:	2364      	movs	r3, #100	; 0x64
 8002586:	6043      	str	r3, [r0, #4]
 8002588:	f000 fa58 	bl	8002a3c <mehal_readEncoderSwitch>
 800258c:	2801      	cmp	r0, #1
 800258e:	d1d4      	bne.n	800253a <_ZN7Encoder4loopEv+0x10>
 8002590:	2302      	movs	r3, #2
 8002592:	7223      	strb	r3, [r4, #8]
 8002594:	2364      	movs	r3, #100	; 0x64
 8002596:	72a0      	strb	r0, [r4, #10]
 8002598:	6063      	str	r3, [r4, #4]
 800259a:	e7ce      	b.n	800253a <_ZN7Encoder4loopEv+0x10>
 800259c:	f000 fa4e 	bl	8002a3c <mehal_readEncoderSwitch>
 80025a0:	2801      	cmp	r0, #1
 80025a2:	d1ca      	bne.n	800253a <_ZN7Encoder4loopEv+0x10>
 80025a4:	6863      	ldr	r3, [r4, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1c7      	bne.n	800253a <_ZN7Encoder4loopEv+0x10>
 80025aa:	7223      	strb	r3, [r4, #8]
 80025ac:	e7c5      	b.n	800253a <_ZN7Encoder4loopEv+0x10>

080025ae <_ZN7Encoder11pressedLongEv>:
 80025ae:	7a43      	ldrb	r3, [r0, #9]
 80025b0:	b10b      	cbz	r3, 80025b6 <_ZN7Encoder11pressedLongEv+0x8>
 80025b2:	2200      	movs	r2, #0
 80025b4:	7242      	strb	r2, [r0, #9]
 80025b6:	4618      	mov	r0, r3
 80025b8:	4770      	bx	lr

080025ba <_ZN7Encoder7pressedEv>:
 80025ba:	4603      	mov	r3, r0
 80025bc:	2200      	movs	r2, #0
 80025be:	7a80      	ldrb	r0, [r0, #10]
 80025c0:	729a      	strb	r2, [r3, #10]
 80025c2:	4770      	bx	lr

080025c4 <_ZN6Memory10readUInt32Et>:
 80025c4:	b507      	push	{r0, r1, r2, lr}
 80025c6:	2204      	movs	r2, #4
 80025c8:	4608      	mov	r0, r1
 80025ca:	eb0d 0102 	add.w	r1, sp, r2
 80025ce:	f000 fa09 	bl	80029e4 <mehal_i2cMemRead>
 80025d2:	9801      	ldr	r0, [sp, #4]
 80025d4:	b003      	add	sp, #12
 80025d6:	f85d fb04 	ldr.w	pc, [sp], #4

080025da <_ZN6Memory9readUInt8Et>:
 80025da:	b507      	push	{r0, r1, r2, lr}
 80025dc:	4608      	mov	r0, r1
 80025de:	2201      	movs	r2, #1
 80025e0:	f10d 0107 	add.w	r1, sp, #7
 80025e4:	f000 f9fe 	bl	80029e4 <mehal_i2cMemRead>
 80025e8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80025ec:	b003      	add	sp, #12
 80025ee:	f85d fb04 	ldr.w	pc, [sp], #4

080025f2 <_ZN6Memory10readUInt16Et>:
 80025f2:	b507      	push	{r0, r1, r2, lr}
 80025f4:	4608      	mov	r0, r1
 80025f6:	2202      	movs	r2, #2
 80025f8:	f10d 0106 	add.w	r1, sp, #6
 80025fc:	f000 f9f2 	bl	80029e4 <mehal_i2cMemRead>
 8002600:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8002604:	b003      	add	sp, #12
 8002606:	f85d fb04 	ldr.w	pc, [sp], #4

0800260a <_ZN6Memory11writeUInt32Etm>:
 800260a:	b507      	push	{r0, r1, r2, lr}
 800260c:	4608      	mov	r0, r1
 800260e:	a902      	add	r1, sp, #8
 8002610:	f841 2d04 	str.w	r2, [r1, #-4]!
 8002614:	2301      	movs	r3, #1
 8002616:	2204      	movs	r2, #4
 8002618:	f000 f9f6 	bl	8002a08 <mehal_i2cMemWrite>
 800261c:	b003      	add	sp, #12
 800261e:	f85d fb04 	ldr.w	pc, [sp], #4

08002622 <_ZN6Memory16writeUInt8NoWaitEth>:
 8002622:	b507      	push	{r0, r1, r2, lr}
 8002624:	4608      	mov	r0, r1
 8002626:	a902      	add	r1, sp, #8
 8002628:	f801 2d01 	strb.w	r2, [r1, #-1]!
 800262c:	2300      	movs	r3, #0
 800262e:	2201      	movs	r2, #1
 8002630:	f000 f9ea 	bl	8002a08 <mehal_i2cMemWrite>
 8002634:	b003      	add	sp, #12
 8002636:	f85d fb04 	ldr.w	pc, [sp], #4

0800263a <_ZN6Memory11writeUInt16Ett>:
 800263a:	b507      	push	{r0, r1, r2, lr}
 800263c:	4608      	mov	r0, r1
 800263e:	a902      	add	r1, sp, #8
 8002640:	f821 2d02 	strh.w	r2, [r1, #-2]!
 8002644:	2301      	movs	r3, #1
 8002646:	2202      	movs	r2, #2
 8002648:	f000 f9de 	bl	8002a08 <mehal_i2cMemWrite>
 800264c:	b003      	add	sp, #12
 800264e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002654 <DMA1_Channel5_IRQHandler>:
 8002654:	b510      	push	{r4, lr}
 8002656:	4c0b      	ldr	r4, [pc, #44]	; (8002684 <DMA1_Channel5_IRQHandler+0x30>)
 8002658:	6820      	ldr	r0, [r4, #0]
 800265a:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800265e:	d005      	beq.n	800266c <DMA1_Channel5_IRQHandler+0x18>
 8002660:	4b09      	ldr	r3, [pc, #36]	; (8002688 <DMA1_Channel5_IRQHandler+0x34>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	b14b      	cbz	r3, 800267a <DMA1_Channel5_IRQHandler+0x26>
 8002666:	2001      	movs	r0, #1
 8002668:	4798      	blx	r3
 800266a:	e006      	b.n	800267a <DMA1_Channel5_IRQHandler+0x26>
 800266c:	6823      	ldr	r3, [r4, #0]
 800266e:	035b      	lsls	r3, r3, #13
 8002670:	d503      	bpl.n	800267a <DMA1_Channel5_IRQHandler+0x26>
 8002672:	4b05      	ldr	r3, [pc, #20]	; (8002688 <DMA1_Channel5_IRQHandler+0x34>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f6      	bne.n	8002668 <DMA1_Channel5_IRQHandler+0x14>
 800267a:	6863      	ldr	r3, [r4, #4]
 800267c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002680:	6063      	str	r3, [r4, #4]
 8002682:	bd10      	pop	{r4, pc}
 8002684:	40020000 	.word	0x40020000
 8002688:	200047b8 	.word	0x200047b8

0800268c <mehal_init>:
 800268c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002690:	4bb8      	ldr	r3, [pc, #736]	; (8002974 <mehal_init+0x2e8>)
 8002692:	4db9      	ldr	r5, [pc, #740]	; (8002978 <mehal_init+0x2ec>)
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	69eb      	ldr	r3, [r5, #28]
 8002698:	4eb8      	ldr	r6, [pc, #736]	; (800297c <mehal_init+0x2f0>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	61eb      	str	r3, [r5, #28]
 80026a0:	69ab      	ldr	r3, [r5, #24]
 80026a2:	2400      	movs	r4, #0
 80026a4:	f043 0305 	orr.w	r3, r3, #5
 80026a8:	61ab      	str	r3, [r5, #24]
 80026aa:	6833      	ldr	r3, [r6, #0]
 80026ac:	22ff      	movs	r2, #255	; 0xff
 80026ae:	f023 030f 	bic.w	r3, r3, #15
 80026b2:	6033      	str	r3, [r6, #0]
 80026b4:	6833      	ldr	r3, [r6, #0]
 80026b6:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 80026ba:	f043 030b 	orr.w	r3, r3, #11
 80026be:	6033      	str	r3, [r6, #0]
 80026c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026c4:	629c      	str	r4, [r3, #40]	; 0x28
 80026c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80026c8:	2280      	movs	r2, #128	; 0x80
 80026ca:	635a      	str	r2, [r3, #52]	; 0x34
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	b087      	sub	sp, #28
 80026d0:	f042 0268 	orr.w	r2, r2, #104	; 0x68
 80026d4:	619a      	str	r2, [r3, #24]
 80026d6:	6a1a      	ldr	r2, [r3, #32]
 80026d8:	f022 0202 	bic.w	r2, r2, #2
 80026dc:	621a      	str	r2, [r3, #32]
 80026de:	6a1a      	ldr	r2, [r3, #32]
 80026e0:	f042 0201 	orr.w	r2, r2, #1
 80026e4:	621a      	str	r2, [r3, #32]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	f042 0201 	orr.w	r2, r2, #1
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	696b      	ldr	r3, [r5, #20]
 80026f0:	4aa3      	ldr	r2, [pc, #652]	; (8002980 <mehal_init+0x2f4>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	616b      	str	r3, [r5, #20]
 80026f8:	4ba2      	ldr	r3, [pc, #648]	; (8002984 <mehal_init+0x2f8>)
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	60d8      	str	r0, [r3, #12]
 80026fe:	6059      	str	r1, [r3, #4]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	f042 0210 	orr.w	r2, r2, #16
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	f042 0220 	orr.w	r2, r2, #32
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	f042 0202 	orr.w	r2, r2, #2
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	f042 0204 	orr.w	r2, r2, #4
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	4a8f      	ldr	r2, [pc, #572]	; (8002988 <mehal_init+0x2fc>)
 800274a:	f8c2 9000 	str.w	r9, [r2]
 800274e:	b662      	cpsie	i
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	2702      	movs	r7, #2
 8002754:	f042 0201 	orr.w	r2, r2, #1
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800275e:	f04f 0801 	mov.w	r8, #1
 8002762:	f44f 6b00 	mov.w	fp, #2048	; 0x800
 8002766:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
 800276a:	69ab      	ldr	r3, [r5, #24]
 800276c:	a902      	add	r1, sp, #8
 800276e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002772:	61ab      	str	r3, [r5, #24]
 8002774:	4b85      	ldr	r3, [pc, #532]	; (800298c <mehal_init+0x300>)
 8002776:	4886      	ldr	r0, [pc, #536]	; (8002990 <mehal_init+0x304>)
 8002778:	629c      	str	r4, [r3, #40]	; 0x28
 800277a:	62da      	str	r2, [r3, #44]	; 0x2c
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002782:	60da      	str	r2, [r3, #12]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	69ab      	ldr	r3, [r5, #24]
 800278e:	f043 0308 	orr.w	r3, r3, #8
 8002792:	61ab      	str	r3, [r5, #24]
 8002794:	69ab      	ldr	r3, [r5, #24]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	9b00      	ldr	r3, [sp, #0]
 800279e:	69ab      	ldr	r3, [r5, #24]
 80027a0:	f043 0304 	orr.w	r3, r3, #4
 80027a4:	61ab      	str	r3, [r5, #24]
 80027a6:	69ab      	ldr	r3, [r5, #24]
 80027a8:	9403      	str	r4, [sp, #12]
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	9301      	str	r3, [sp, #4]
 80027b0:	9b01      	ldr	r3, [sp, #4]
 80027b2:	f8cd b008 	str.w	fp, [sp, #8]
 80027b6:	e9cd 8704 	strd	r8, r7, [sp, #16]
 80027ba:	f000 fb3d 	bl	8002e38 <HAL_GPIO_Init>
 80027be:	a902      	add	r1, sp, #8
 80027c0:	4873      	ldr	r0, [pc, #460]	; (8002990 <mehal_init+0x304>)
 80027c2:	e9cd a402 	strd	sl, r4, [sp, #8]
 80027c6:	e9cd 8704 	strd	r8, r7, [sp, #16]
 80027ca:	f000 fb35 	bl	8002e38 <HAL_GPIO_Init>
 80027ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027d2:	a902      	add	r1, sp, #8
 80027d4:	486e      	ldr	r0, [pc, #440]	; (8002990 <mehal_init+0x304>)
 80027d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80027da:	e9cd 8704 	strd	r8, r7, [sp, #16]
 80027de:	f000 fb2b 	bl	8002e38 <HAL_GPIO_Init>
 80027e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027e6:	a902      	add	r1, sp, #8
 80027e8:	4869      	ldr	r0, [pc, #420]	; (8002990 <mehal_init+0x304>)
 80027ea:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80027ee:	e9cd 8704 	strd	r8, r7, [sp, #16]
 80027f2:	f000 fb21 	bl	8002e38 <HAL_GPIO_Init>
 80027f6:	a902      	add	r1, sp, #8
 80027f8:	4865      	ldr	r0, [pc, #404]	; (8002990 <mehal_init+0x304>)
 80027fa:	e9cd 9802 	strd	r9, r8, [sp, #8]
 80027fe:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8002802:	f000 fb19 	bl	8002e38 <HAL_GPIO_Init>
 8002806:	4649      	mov	r1, r9
 8002808:	f04f 0903 	mov.w	r9, #3
 800280c:	4622      	mov	r2, r4
 800280e:	4860      	ldr	r0, [pc, #384]	; (8002990 <mehal_init+0x304>)
 8002810:	f000 fc83 	bl	800311a <HAL_GPIO_WritePin>
 8002814:	a902      	add	r1, sp, #8
 8002816:	4630      	mov	r0, r6
 8002818:	e9cd 9403 	strd	r9, r4, [sp, #12]
 800281c:	9702      	str	r7, [sp, #8]
 800281e:	9705      	str	r7, [sp, #20]
 8002820:	f000 fb0a 	bl	8002e38 <HAL_GPIO_Init>
 8002824:	2304      	movs	r3, #4
 8002826:	a902      	add	r1, sp, #8
 8002828:	4630      	mov	r0, r6
 800282a:	e9cd 3902 	strd	r3, r9, [sp, #8]
 800282e:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8002832:	f000 fb01 	bl	8002e38 <HAL_GPIO_Init>
 8002836:	2308      	movs	r3, #8
 8002838:	4630      	mov	r0, r6
 800283a:	eb0d 0103 	add.w	r1, sp, r3
 800283e:	e9cd 3902 	strd	r3, r9, [sp, #8]
 8002842:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8002846:	f000 faf7 	bl	8002e38 <HAL_GPIO_Init>
 800284a:	2310      	movs	r3, #16
 800284c:	a902      	add	r1, sp, #8
 800284e:	4630      	mov	r0, r6
 8002850:	e9cd 3902 	strd	r3, r9, [sp, #8]
 8002854:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8002858:	f000 faee 	bl	8002e38 <HAL_GPIO_Init>
 800285c:	2320      	movs	r3, #32
 800285e:	e9cd 3902 	strd	r3, r9, [sp, #8]
 8002862:	f44f 7980 	mov.w	r9, #256	; 0x100
 8002866:	a902      	add	r1, sp, #8
 8002868:	4630      	mov	r0, r6
 800286a:	e9cd 4704 	strd	r4, r7, [sp, #16]
 800286e:	f000 fae3 	bl	8002e38 <HAL_GPIO_Init>
 8002872:	a902      	add	r1, sp, #8
 8002874:	4630      	mov	r0, r6
 8002876:	e9cd 9802 	strd	r9, r8, [sp, #8]
 800287a:	e9cd 4704 	strd	r4, r7, [sp, #16]
 800287e:	f000 fadb 	bl	8002e38 <HAL_GPIO_Init>
 8002882:	4649      	mov	r1, r9
 8002884:	f44f 7900 	mov.w	r9, #512	; 0x200
 8002888:	4622      	mov	r2, r4
 800288a:	4630      	mov	r0, r6
 800288c:	f000 fc45 	bl	800311a <HAL_GPIO_WritePin>
 8002890:	a902      	add	r1, sp, #8
 8002892:	4630      	mov	r0, r6
 8002894:	e9cd 9802 	strd	r9, r8, [sp, #8]
 8002898:	e9cd 4704 	strd	r4, r7, [sp, #16]
 800289c:	f000 facc 	bl	8002e38 <HAL_GPIO_Init>
 80028a0:	4649      	mov	r1, r9
 80028a2:	f44f 6980 	mov.w	r9, #1024	; 0x400
 80028a6:	4622      	mov	r2, r4
 80028a8:	4630      	mov	r0, r6
 80028aa:	f000 fc36 	bl	800311a <HAL_GPIO_WritePin>
 80028ae:	a902      	add	r1, sp, #8
 80028b0:	4630      	mov	r0, r6
 80028b2:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80028b6:	e9cd 9802 	strd	r9, r8, [sp, #8]
 80028ba:	f000 fabd 	bl	8002e38 <HAL_GPIO_Init>
 80028be:	4622      	mov	r2, r4
 80028c0:	4649      	mov	r1, r9
 80028c2:	4630      	mov	r0, r6
 80028c4:	f000 fc29 	bl	800311a <HAL_GPIO_WritePin>
 80028c8:	a902      	add	r1, sp, #8
 80028ca:	4630      	mov	r0, r6
 80028cc:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80028d0:	e9cd b802 	strd	fp, r8, [sp, #8]
 80028d4:	f000 fab0 	bl	8002e38 <HAL_GPIO_Init>
 80028d8:	4622      	mov	r2, r4
 80028da:	4659      	mov	r1, fp
 80028dc:	4630      	mov	r0, r6
 80028de:	f000 fc1c 	bl	800311a <HAL_GPIO_WritePin>
 80028e2:	a902      	add	r1, sp, #8
 80028e4:	4630      	mov	r0, r6
 80028e6:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80028ea:	e9cd a802 	strd	sl, r8, [sp, #8]
 80028ee:	f000 faa3 	bl	8002e38 <HAL_GPIO_Init>
 80028f2:	4622      	mov	r2, r4
 80028f4:	4651      	mov	r1, sl
 80028f6:	4630      	mov	r0, r6
 80028f8:	f000 fc0f 	bl	800311a <HAL_GPIO_WritePin>
 80028fc:	686b      	ldr	r3, [r5, #4]
 80028fe:	4c25      	ldr	r4, [pc, #148]	; (8002994 <mehal_init+0x308>)
 8002900:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002904:	606b      	str	r3, [r5, #4]
 8002906:	686b      	ldr	r3, [r5, #4]
 8002908:	4640      	mov	r0, r8
 800290a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800290e:	606b      	str	r3, [r5, #4]
 8002910:	69ab      	ldr	r3, [r5, #24]
 8002912:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002916:	61ab      	str	r3, [r5, #24]
 8002918:	68a3      	ldr	r3, [r4, #8]
 800291a:	ea43 0308 	orr.w	r3, r3, r8
 800291e:	60a3      	str	r3, [r4, #8]
 8002920:	68a3      	ldr	r3, [r4, #8]
 8002922:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8002926:	60a3      	str	r3, [r4, #8]
 8002928:	6923      	ldr	r3, [r4, #16]
 800292a:	f023 0307 	bic.w	r3, r3, #7
 800292e:	6123      	str	r3, [r4, #16]
 8002930:	68a3      	ldr	r3, [r4, #8]
 8002932:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002936:	60a3      	str	r3, [r4, #8]
 8002938:	f000 f978 	bl	8002c2c <HAL_Delay>
 800293c:	68a3      	ldr	r3, [r4, #8]
 800293e:	f043 0304 	orr.w	r3, r3, #4
 8002942:	60a3      	str	r3, [r4, #8]
 8002944:	68a3      	ldr	r3, [r4, #8]
 8002946:	f013 0304 	ands.w	r3, r3, #4
 800294a:	d1fb      	bne.n	8002944 <mehal_init+0x2b8>
 800294c:	4812      	ldr	r0, [pc, #72]	; (8002998 <mehal_init+0x30c>)
 800294e:	4913      	ldr	r1, [pc, #76]	; (800299c <mehal_init+0x310>)
 8002950:	4a13      	ldr	r2, [pc, #76]	; (80029a0 <mehal_init+0x314>)
 8002952:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8002956:	e9c0 1200 	strd	r1, r2, [r0]
 800295a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800295e:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8002962:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002966:	6203      	str	r3, [r0, #32]
 8002968:	f000 fbf0 	bl	800314c <HAL_I2C_Init>
 800296c:	b007      	add	sp, #28
 800296e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002972:	bf00      	nop
 8002974:	200047b8 	.word	0x200047b8
 8002978:	40021000 	.word	0x40021000
 800297c:	40010800 	.word	0x40010800
 8002980:	40000034 	.word	0x40000034
 8002984:	40020058 	.word	0x40020058
 8002988:	e000e100 	.word	0xe000e100
 800298c:	40012c00 	.word	0x40012c00
 8002990:	40010c00 	.word	0x40010c00
 8002994:	40012400 	.word	0x40012400
 8002998:	200047bc 	.word	0x200047bc
 800299c:	40005400 	.word	0x40005400
 80029a0:	00061a80 	.word	0x00061a80

080029a4 <mehal_readADC>:
 80029a4:	3001      	adds	r0, #1
 80029a6:	b2c0      	uxtb	r0, r0
 80029a8:	2811      	cmp	r0, #17
 80029aa:	d816      	bhi.n	80029da <mehal_readADC+0x36>
 80029ac:	2200      	movs	r2, #0
 80029ae:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <mehal_readADC+0x3c>)
 80029b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80029b2:	6358      	str	r0, [r3, #52]	; 0x34
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	f022 0202 	bic.w	r2, r2, #2
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	f042 0201 	orr.w	r2, r2, #1
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	0792      	lsls	r2, r2, #30
 80029d0:	d5fc      	bpl.n	80029cc <mehal_readADC+0x28>
 80029d2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80029d4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80029d8:	4770      	bx	lr
 80029da:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80029de:	4770      	bx	lr
 80029e0:	40012400 	.word	0x40012400

080029e4 <mehal_i2cMemRead>:
 80029e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80029e6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80029ea:	9100      	str	r1, [sp, #0]
 80029ec:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80029f0:	21a0      	movs	r1, #160	; 0xa0
 80029f2:	4602      	mov	r2, r0
 80029f4:	2301      	movs	r3, #1
 80029f6:	4803      	ldr	r0, [pc, #12]	; (8002a04 <mehal_i2cMemRead+0x20>)
 80029f8:	f000 fdca 	bl	8003590 <HAL_I2C_Mem_Read>
 80029fc:	b005      	add	sp, #20
 80029fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a02:	bf00      	nop
 8002a04:	200047bc 	.word	0x200047bc

08002a08 <mehal_i2cMemWrite>:
 8002a08:	b530      	push	{r4, r5, lr}
 8002a0a:	461d      	mov	r5, r3
 8002a0c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a10:	b085      	sub	sp, #20
 8002a12:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002a16:	9100      	str	r1, [sp, #0]
 8002a18:	4602      	mov	r2, r0
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	21a0      	movs	r1, #160	; 0xa0
 8002a1e:	4805      	ldr	r0, [pc, #20]	; (8002a34 <mehal_i2cMemWrite+0x2c>)
 8002a20:	f000 fcbc 	bl	800339c <HAL_I2C_Mem_Write>
 8002a24:	4604      	mov	r4, r0
 8002a26:	b115      	cbz	r5, 8002a2e <mehal_i2cMemWrite+0x26>
 8002a28:	201e      	movs	r0, #30
 8002a2a:	f000 f8ff 	bl	8002c2c <HAL_Delay>
 8002a2e:	4620      	mov	r0, r4
 8002a30:	b005      	add	sp, #20
 8002a32:	bd30      	pop	{r4, r5, pc}
 8002a34:	200047bc 	.word	0x200047bc

08002a38 <mehal_debugPinSet>:
 8002a38:	4770      	bx	lr

08002a3a <mehal_debugPinReset>:
 8002a3a:	4770      	bx	lr

08002a3c <mehal_readEncoderSwitch>:
 8002a3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a40:	4801      	ldr	r0, [pc, #4]	; (8002a48 <mehal_readEncoderSwitch+0xc>)
 8002a42:	f000 bb53 	b.w	80030ec <HAL_GPIO_ReadPin>
 8002a46:	bf00      	nop
 8002a48:	40010c00 	.word	0x40010c00

08002a4c <mehal_readEncoderA>:
 8002a4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a50:	4801      	ldr	r0, [pc, #4]	; (8002a58 <mehal_readEncoderA+0xc>)
 8002a52:	f000 bb4b 	b.w	80030ec <HAL_GPIO_ReadPin>
 8002a56:	bf00      	nop
 8002a58:	40010c00 	.word	0x40010c00

08002a5c <mehal_readEncoderB>:
 8002a5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a60:	4801      	ldr	r0, [pc, #4]	; (8002a68 <mehal_readEncoderB+0xc>)
 8002a62:	f000 bb43 	b.w	80030ec <HAL_GPIO_ReadPin>
 8002a66:	bf00      	nop
 8002a68:	40010c00 	.word	0x40010c00

08002a6c <mehal_sendDataTo595>:
 8002a6c:	b570      	push	{r4, r5, r6, lr}
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a74:	4605      	mov	r5, r0
 8002a76:	4816      	ldr	r0, [pc, #88]	; (8002ad0 <mehal_sendDataTo595+0x64>)
 8002a78:	f000 fb4f 	bl	800311a <HAL_GPIO_WritePin>
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a82:	4813      	ldr	r0, [pc, #76]	; (8002ad0 <mehal_sendDataTo595+0x64>)
 8002a84:	f000 fb49 	bl	800311a <HAL_GPIO_WritePin>
 8002a88:	2400      	movs	r4, #0
 8002a8a:	4e11      	ldr	r6, [pc, #68]	; (8002ad0 <mehal_sendDataTo595+0x64>)
 8002a8c:	2280      	movs	r2, #128	; 0x80
 8002a8e:	4122      	asrs	r2, r4
 8002a90:	402a      	ands	r2, r5
 8002a92:	bf18      	it	ne
 8002a94:	2201      	movne	r2, #1
 8002a96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a9a:	4630      	mov	r0, r6
 8002a9c:	f000 fb3d 	bl	800311a <HAL_GPIO_WritePin>
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002aa6:	480a      	ldr	r0, [pc, #40]	; (8002ad0 <mehal_sendDataTo595+0x64>)
 8002aa8:	f000 fb37 	bl	800311a <HAL_GPIO_WritePin>
 8002aac:	3401      	adds	r4, #1
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ab4:	4806      	ldr	r0, [pc, #24]	; (8002ad0 <mehal_sendDataTo595+0x64>)
 8002ab6:	f000 fb30 	bl	800311a <HAL_GPIO_WritePin>
 8002aba:	2c08      	cmp	r4, #8
 8002abc:	d1e6      	bne.n	8002a8c <mehal_sendDataTo595+0x20>
 8002abe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ac8:	4801      	ldr	r0, [pc, #4]	; (8002ad0 <mehal_sendDataTo595+0x64>)
 8002aca:	f000 bb26 	b.w	800311a <HAL_GPIO_WritePin>
 8002ace:	bf00      	nop
 8002ad0:	40010800 	.word	0x40010800

08002ad4 <mehal_setConfigLed>:
 8002ad4:	2801      	cmp	r0, #1
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002adc:	bf18      	it	ne
 8002ade:	2200      	movne	r2, #0
 8002ae0:	4801      	ldr	r0, [pc, #4]	; (8002ae8 <mehal_setConfigLed+0x14>)
 8002ae2:	f000 bb1a 	b.w	800311a <HAL_GPIO_WritePin>
 8002ae6:	bf00      	nop
 8002ae8:	40010c00 	.word	0x40010c00

08002aec <mehal_setBank1Led>:
 8002aec:	2801      	cmp	r0, #1
 8002aee:	4602      	mov	r2, r0
 8002af0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002af4:	bf18      	it	ne
 8002af6:	2200      	movne	r2, #0
 8002af8:	4801      	ldr	r0, [pc, #4]	; (8002b00 <mehal_setBank1Led+0x14>)
 8002afa:	f000 bb0e 	b.w	800311a <HAL_GPIO_WritePin>
 8002afe:	bf00      	nop
 8002b00:	40010800 	.word	0x40010800

08002b04 <mehal_setBank0Led>:
 8002b04:	2801      	cmp	r0, #1
 8002b06:	4602      	mov	r2, r0
 8002b08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b0c:	bf18      	it	ne
 8002b0e:	2200      	movne	r2, #0
 8002b10:	4801      	ldr	r0, [pc, #4]	; (8002b18 <mehal_setBank0Led+0x14>)
 8002b12:	f000 bb02 	b.w	800311a <HAL_GPIO_WritePin>
 8002b16:	bf00      	nop
 8002b18:	40010800 	.word	0x40010800

08002b1c <Reset_Handler>:
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	e003      	b.n	8002b28 <LoopCopyDataInit>

08002b20 <CopyDataInit>:
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <LoopFillZerobss+0x14>)
 8002b22:	585b      	ldr	r3, [r3, r1]
 8002b24:	5043      	str	r3, [r0, r1]
 8002b26:	3104      	adds	r1, #4

08002b28 <LoopCopyDataInit>:
 8002b28:	480a      	ldr	r0, [pc, #40]	; (8002b54 <LoopFillZerobss+0x18>)
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <LoopFillZerobss+0x1c>)
 8002b2c:	1842      	adds	r2, r0, r1
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d3f6      	bcc.n	8002b20 <CopyDataInit>
 8002b32:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <LoopFillZerobss+0x20>)
 8002b34:	e002      	b.n	8002b3c <LoopFillZerobss>

08002b36 <FillZerobss>:
 8002b36:	2300      	movs	r3, #0
 8002b38:	f842 3b04 	str.w	r3, [r2], #4

08002b3c <LoopFillZerobss>:
 8002b3c:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <LoopFillZerobss+0x24>)
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d3f9      	bcc.n	8002b36 <FillZerobss>
 8002b42:	f7fe fcdd 	bl	8001500 <SystemInit>
 8002b46:	f001 fe97 	bl	8004878 <__libc_init_array>
 8002b4a:	f7fe fbf9 	bl	8001340 <main>
 8002b4e:	4770      	bx	lr
 8002b50:	0800ec80 	.word	0x0800ec80
 8002b54:	20000000 	.word	0x20000000
 8002b58:	200002ac 	.word	0x200002ac
 8002b5c:	200002ac 	.word	0x200002ac
 8002b60:	20004814 	.word	0x20004814

08002b64 <ADC1_2_IRQHandler>:
 8002b64:	e7fe      	b.n	8002b64 <ADC1_2_IRQHandler>
	...

08002b68 <HAL_Init>:
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <HAL_Init+0x28>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a07      	ldr	r2, [pc, #28]	; (8002b90 <HAL_Init+0x28>)
 8002b72:	f043 0310 	orr.w	r3, r3, #16
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	2003      	movs	r0, #3
 8002b7a:	f000 f929 	bl	8002dd0 <HAL_NVIC_SetPriorityGrouping>
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f000 f808 	bl	8002b94 <HAL_InitTick>
 8002b84:	f7fe fc22 	bl	80013cc <HAL_MspInit>
 8002b88:	2300      	movs	r3, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40022000 	.word	0x40022000

08002b94 <HAL_InitTick>:
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	4b12      	ldr	r3, [pc, #72]	; (8002be8 <HAL_InitTick+0x54>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b12      	ldr	r3, [pc, #72]	; (8002bec <HAL_InitTick+0x58>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f933 	bl	8002e1e <HAL_SYSTICK_Config>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_InitTick+0x2e>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e00e      	b.n	8002be0 <HAL_InitTick+0x4c>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b0f      	cmp	r3, #15
 8002bc6:	d80a      	bhi.n	8002bde <HAL_InitTick+0x4a>
 8002bc8:	2200      	movs	r2, #0
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bd0:	f000 f909 	bl	8002de6 <HAL_NVIC_SetPriority>
 8002bd4:	4a06      	ldr	r2, [pc, #24]	; (8002bf0 <HAL_InitTick+0x5c>)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e000      	b.n	8002be0 <HAL_InitTick+0x4c>
 8002bde:	2301      	movs	r3, #1
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20000298 	.word	0x20000298
 8002bec:	200002a8 	.word	0x200002a8
 8002bf0:	200002a4 	.word	0x200002a4

08002bf4 <HAL_IncTick>:
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <HAL_IncTick+0x1c>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <HAL_IncTick+0x20>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4413      	add	r3, r2
 8002c04:	4a03      	ldr	r2, [pc, #12]	; (8002c14 <HAL_IncTick+0x20>)
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr
 8002c10:	200002a8 	.word	0x200002a8
 8002c14:	20004810 	.word	0x20004810

08002c18 <HAL_GetTick>:
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	4b02      	ldr	r3, [pc, #8]	; (8002c28 <HAL_GetTick+0x10>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr
 8002c28:	20004810 	.word	0x20004810

08002c2c <HAL_Delay>:
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	f7ff fff0 	bl	8002c18 <HAL_GetTick>
 8002c38:	60b8      	str	r0, [r7, #8]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c44:	d005      	beq.n	8002c52 <HAL_Delay+0x26>
 8002c46:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <HAL_Delay+0x40>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4413      	add	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	bf00      	nop
 8002c54:	f7ff ffe0 	bl	8002c18 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d8f7      	bhi.n	8002c54 <HAL_Delay+0x28>
 8002c64:	bf00      	nop
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	200002a8 	.word	0x200002a8

08002c70 <__NVIC_SetPriorityGrouping>:
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	021a      	lsls	r2, r3, #8
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	60d3      	str	r3, [r2, #12]
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	e000ed00 	.word	0xe000ed00

08002cb8 <__NVIC_GetPriorityGrouping>:
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	0a1b      	lsrs	r3, r3, #8
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	e000ed00 	.word	0xe000ed00

08002cd4 <__NVIC_SetPriority>:
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	6039      	str	r1, [r7, #0]
 8002cde:	71fb      	strb	r3, [r7, #7]
 8002ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	db0a      	blt.n	8002cfe <__NVIC_SetPriority+0x2a>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	490c      	ldr	r1, [pc, #48]	; (8002d20 <__NVIC_SetPriority+0x4c>)
 8002cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf2:	0112      	lsls	r2, r2, #4
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002cfc:	e00a      	b.n	8002d14 <__NVIC_SetPriority+0x40>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	4908      	ldr	r1, [pc, #32]	; (8002d24 <__NVIC_SetPriority+0x50>)
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	3b04      	subs	r3, #4
 8002d0c:	0112      	lsls	r2, r2, #4
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	440b      	add	r3, r1
 8002d12:	761a      	strb	r2, [r3, #24]
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	e000e100 	.word	0xe000e100
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <NVIC_EncodePriority>:
 8002d28:	b480      	push	{r7}
 8002d2a:	b089      	sub	sp, #36	; 0x24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	61fb      	str	r3, [r7, #28]
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f1c3 0307 	rsb	r3, r3, #7
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	bf28      	it	cs
 8002d46:	2304      	movcs	r3, #4
 8002d48:	61bb      	str	r3, [r7, #24]
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	2b06      	cmp	r3, #6
 8002d50:	d902      	bls.n	8002d58 <NVIC_EncodePriority+0x30>
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	3b03      	subs	r3, #3
 8002d56:	e000      	b.n	8002d5a <NVIC_EncodePriority+0x32>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43da      	mvns	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7a:	43d9      	mvns	r1, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	400b      	ands	r3, r1
 8002d80:	4313      	orrs	r3, r2
 8002d82:	4618      	mov	r0, r3
 8002d84:	3724      	adds	r7, #36	; 0x24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <SysTick_Config>:
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d9c:	d301      	bcc.n	8002da2 <SysTick_Config+0x16>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e00f      	b.n	8002dc2 <SysTick_Config+0x36>
 8002da2:	4a0a      	ldr	r2, [pc, #40]	; (8002dcc <SysTick_Config+0x40>)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	6053      	str	r3, [r2, #4]
 8002daa:	210f      	movs	r1, #15
 8002dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002db0:	f7ff ff90 	bl	8002cd4 <__NVIC_SetPriority>
 8002db4:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <SysTick_Config+0x40>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	609a      	str	r2, [r3, #8]
 8002dba:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <SysTick_Config+0x40>)
 8002dbc:	2207      	movs	r2, #7
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	e000e010 	.word	0xe000e010

08002dd0 <HAL_NVIC_SetPriorityGrouping>:
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7ff ff49 	bl	8002c70 <__NVIC_SetPriorityGrouping>
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_NVIC_SetPriority>:
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b086      	sub	sp, #24
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	4603      	mov	r3, r0
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	607a      	str	r2, [r7, #4]
 8002df2:	73fb      	strb	r3, [r7, #15]
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	f7ff ff5e 	bl	8002cb8 <__NVIC_GetPriorityGrouping>
 8002dfc:	6178      	str	r0, [r7, #20]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	68b9      	ldr	r1, [r7, #8]
 8002e02:	6978      	ldr	r0, [r7, #20]
 8002e04:	f7ff ff90 	bl	8002d28 <NVIC_EncodePriority>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e0e:	4611      	mov	r1, r2
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff ff5f 	bl	8002cd4 <__NVIC_SetPriority>
 8002e16:	bf00      	nop
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_SYSTICK_Config>:
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b082      	sub	sp, #8
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff ffb0 	bl	8002d8c <SysTick_Config>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <HAL_GPIO_Init>:
 8002e38:	b480      	push	{r7}
 8002e3a:	b08b      	sub	sp, #44	; 0x2c
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
 8002e42:	2300      	movs	r3, #0
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
 8002e46:	2300      	movs	r3, #0
 8002e48:	623b      	str	r3, [r7, #32]
 8002e4a:	e127      	b.n	800309c <HAL_GPIO_Init+0x264>
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	61fb      	str	r3, [r7, #28]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	f040 8116 	bne.w	8003096 <HAL_GPIO_Init+0x25e>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b12      	cmp	r3, #18
 8002e70:	d034      	beq.n	8002edc <HAL_GPIO_Init+0xa4>
 8002e72:	2b12      	cmp	r3, #18
 8002e74:	d80d      	bhi.n	8002e92 <HAL_GPIO_Init+0x5a>
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d02b      	beq.n	8002ed2 <HAL_GPIO_Init+0x9a>
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d804      	bhi.n	8002e88 <HAL_GPIO_Init+0x50>
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d031      	beq.n	8002ee6 <HAL_GPIO_Init+0xae>
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d01c      	beq.n	8002ec0 <HAL_GPIO_Init+0x88>
 8002e86:	e048      	b.n	8002f1a <HAL_GPIO_Init+0xe2>
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d043      	beq.n	8002f14 <HAL_GPIO_Init+0xdc>
 8002e8c:	2b11      	cmp	r3, #17
 8002e8e:	d01b      	beq.n	8002ec8 <HAL_GPIO_Init+0x90>
 8002e90:	e043      	b.n	8002f1a <HAL_GPIO_Init+0xe2>
 8002e92:	4a89      	ldr	r2, [pc, #548]	; (80030b8 <HAL_GPIO_Init+0x280>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d026      	beq.n	8002ee6 <HAL_GPIO_Init+0xae>
 8002e98:	4a87      	ldr	r2, [pc, #540]	; (80030b8 <HAL_GPIO_Init+0x280>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d806      	bhi.n	8002eac <HAL_GPIO_Init+0x74>
 8002e9e:	4a87      	ldr	r2, [pc, #540]	; (80030bc <HAL_GPIO_Init+0x284>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d020      	beq.n	8002ee6 <HAL_GPIO_Init+0xae>
 8002ea4:	4a86      	ldr	r2, [pc, #536]	; (80030c0 <HAL_GPIO_Init+0x288>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d01d      	beq.n	8002ee6 <HAL_GPIO_Init+0xae>
 8002eaa:	e036      	b.n	8002f1a <HAL_GPIO_Init+0xe2>
 8002eac:	4a85      	ldr	r2, [pc, #532]	; (80030c4 <HAL_GPIO_Init+0x28c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d019      	beq.n	8002ee6 <HAL_GPIO_Init+0xae>
 8002eb2:	4a85      	ldr	r2, [pc, #532]	; (80030c8 <HAL_GPIO_Init+0x290>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d016      	beq.n	8002ee6 <HAL_GPIO_Init+0xae>
 8002eb8:	4a84      	ldr	r2, [pc, #528]	; (80030cc <HAL_GPIO_Init+0x294>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d013      	beq.n	8002ee6 <HAL_GPIO_Init+0xae>
 8002ebe:	e02c      	b.n	8002f1a <HAL_GPIO_Init+0xe2>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	623b      	str	r3, [r7, #32]
 8002ec6:	e028      	b.n	8002f1a <HAL_GPIO_Init+0xe2>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	623b      	str	r3, [r7, #32]
 8002ed0:	e023      	b.n	8002f1a <HAL_GPIO_Init+0xe2>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	3308      	adds	r3, #8
 8002ed8:	623b      	str	r3, [r7, #32]
 8002eda:	e01e      	b.n	8002f1a <HAL_GPIO_Init+0xe2>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	330c      	adds	r3, #12
 8002ee2:	623b      	str	r3, [r7, #32]
 8002ee4:	e019      	b.n	8002f1a <HAL_GPIO_Init+0xe2>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d102      	bne.n	8002ef4 <HAL_GPIO_Init+0xbc>
 8002eee:	2304      	movs	r3, #4
 8002ef0:	623b      	str	r3, [r7, #32]
 8002ef2:	e012      	b.n	8002f1a <HAL_GPIO_Init+0xe2>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d105      	bne.n	8002f08 <HAL_GPIO_Init+0xd0>
 8002efc:	2308      	movs	r3, #8
 8002efe:	623b      	str	r3, [r7, #32]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69fa      	ldr	r2, [r7, #28]
 8002f04:	611a      	str	r2, [r3, #16]
 8002f06:	e008      	b.n	8002f1a <HAL_GPIO_Init+0xe2>
 8002f08:	2308      	movs	r3, #8
 8002f0a:	623b      	str	r3, [r7, #32]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69fa      	ldr	r2, [r7, #28]
 8002f10:	615a      	str	r2, [r3, #20]
 8002f12:	e002      	b.n	8002f1a <HAL_GPIO_Init+0xe2>
 8002f14:	2300      	movs	r3, #0
 8002f16:	623b      	str	r3, [r7, #32]
 8002f18:	bf00      	nop
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	2bff      	cmp	r3, #255	; 0xff
 8002f1e:	d801      	bhi.n	8002f24 <HAL_GPIO_Init+0xec>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	e001      	b.n	8002f28 <HAL_GPIO_Init+0xf0>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3304      	adds	r3, #4
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	2bff      	cmp	r3, #255	; 0xff
 8002f2e:	d802      	bhi.n	8002f36 <HAL_GPIO_Init+0xfe>
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	e002      	b.n	8002f3c <HAL_GPIO_Init+0x104>
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	3b08      	subs	r3, #8
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	210f      	movs	r1, #15
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	401a      	ands	r2, r3
 8002f4e:	6a39      	ldr	r1, [r7, #32]
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	431a      	orrs	r2, r3
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 8096 	beq.w	8003096 <HAL_GPIO_Init+0x25e>
 8002f6a:	4b59      	ldr	r3, [pc, #356]	; (80030d0 <HAL_GPIO_Init+0x298>)
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	4a58      	ldr	r2, [pc, #352]	; (80030d0 <HAL_GPIO_Init+0x298>)
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	6193      	str	r3, [r2, #24]
 8002f76:	4b56      	ldr	r3, [pc, #344]	; (80030d0 <HAL_GPIO_Init+0x298>)
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	4a54      	ldr	r2, [pc, #336]	; (80030d4 <HAL_GPIO_Init+0x29c>)
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	089b      	lsrs	r3, r3, #2
 8002f88:	3302      	adds	r3, #2
 8002f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	220f      	movs	r2, #15
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a4b      	ldr	r2, [pc, #300]	; (80030d8 <HAL_GPIO_Init+0x2a0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d013      	beq.n	8002fd6 <HAL_GPIO_Init+0x19e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a4a      	ldr	r2, [pc, #296]	; (80030dc <HAL_GPIO_Init+0x2a4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d00d      	beq.n	8002fd2 <HAL_GPIO_Init+0x19a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a49      	ldr	r2, [pc, #292]	; (80030e0 <HAL_GPIO_Init+0x2a8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d007      	beq.n	8002fce <HAL_GPIO_Init+0x196>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a48      	ldr	r2, [pc, #288]	; (80030e4 <HAL_GPIO_Init+0x2ac>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d101      	bne.n	8002fca <HAL_GPIO_Init+0x192>
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e006      	b.n	8002fd8 <HAL_GPIO_Init+0x1a0>
 8002fca:	2304      	movs	r3, #4
 8002fcc:	e004      	b.n	8002fd8 <HAL_GPIO_Init+0x1a0>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e002      	b.n	8002fd8 <HAL_GPIO_Init+0x1a0>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <HAL_GPIO_Init+0x1a0>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fda:	f002 0203 	and.w	r2, r2, #3
 8002fde:	0092      	lsls	r2, r2, #2
 8002fe0:	4093      	lsls	r3, r2
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	493a      	ldr	r1, [pc, #232]	; (80030d4 <HAL_GPIO_Init+0x29c>)
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	089b      	lsrs	r3, r3, #2
 8002fee:	3302      	adds	r3, #2
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d006      	beq.n	8003010 <HAL_GPIO_Init+0x1d8>
 8003002:	4b39      	ldr	r3, [pc, #228]	; (80030e8 <HAL_GPIO_Init+0x2b0>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	4938      	ldr	r1, [pc, #224]	; (80030e8 <HAL_GPIO_Init+0x2b0>)
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	4313      	orrs	r3, r2
 800300c:	600b      	str	r3, [r1, #0]
 800300e:	e006      	b.n	800301e <HAL_GPIO_Init+0x1e6>
 8003010:	4b35      	ldr	r3, [pc, #212]	; (80030e8 <HAL_GPIO_Init+0x2b0>)
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	43db      	mvns	r3, r3
 8003018:	4933      	ldr	r1, [pc, #204]	; (80030e8 <HAL_GPIO_Init+0x2b0>)
 800301a:	4013      	ands	r3, r2
 800301c:	600b      	str	r3, [r1, #0]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d006      	beq.n	8003038 <HAL_GPIO_Init+0x200>
 800302a:	4b2f      	ldr	r3, [pc, #188]	; (80030e8 <HAL_GPIO_Init+0x2b0>)
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	492e      	ldr	r1, [pc, #184]	; (80030e8 <HAL_GPIO_Init+0x2b0>)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	604b      	str	r3, [r1, #4]
 8003036:	e006      	b.n	8003046 <HAL_GPIO_Init+0x20e>
 8003038:	4b2b      	ldr	r3, [pc, #172]	; (80030e8 <HAL_GPIO_Init+0x2b0>)
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	43db      	mvns	r3, r3
 8003040:	4929      	ldr	r1, [pc, #164]	; (80030e8 <HAL_GPIO_Init+0x2b0>)
 8003042:	4013      	ands	r3, r2
 8003044:	604b      	str	r3, [r1, #4]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d006      	beq.n	8003060 <HAL_GPIO_Init+0x228>
 8003052:	4b25      	ldr	r3, [pc, #148]	; (80030e8 <HAL_GPIO_Init+0x2b0>)
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	4924      	ldr	r1, [pc, #144]	; (80030e8 <HAL_GPIO_Init+0x2b0>)
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	608b      	str	r3, [r1, #8]
 800305e:	e006      	b.n	800306e <HAL_GPIO_Init+0x236>
 8003060:	4b21      	ldr	r3, [pc, #132]	; (80030e8 <HAL_GPIO_Init+0x2b0>)
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	43db      	mvns	r3, r3
 8003068:	491f      	ldr	r1, [pc, #124]	; (80030e8 <HAL_GPIO_Init+0x2b0>)
 800306a:	4013      	ands	r3, r2
 800306c:	608b      	str	r3, [r1, #8]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d006      	beq.n	8003088 <HAL_GPIO_Init+0x250>
 800307a:	4b1b      	ldr	r3, [pc, #108]	; (80030e8 <HAL_GPIO_Init+0x2b0>)
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	491a      	ldr	r1, [pc, #104]	; (80030e8 <HAL_GPIO_Init+0x2b0>)
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	4313      	orrs	r3, r2
 8003084:	60cb      	str	r3, [r1, #12]
 8003086:	e006      	b.n	8003096 <HAL_GPIO_Init+0x25e>
 8003088:	4b17      	ldr	r3, [pc, #92]	; (80030e8 <HAL_GPIO_Init+0x2b0>)
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	43db      	mvns	r3, r3
 8003090:	4915      	ldr	r1, [pc, #84]	; (80030e8 <HAL_GPIO_Init+0x2b0>)
 8003092:	4013      	ands	r3, r2
 8003094:	60cb      	str	r3, [r1, #12]
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	3301      	adds	r3, #1
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	fa22 f303 	lsr.w	r3, r2, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f47f aed0 	bne.w	8002e4c <HAL_GPIO_Init+0x14>
 80030ac:	bf00      	nop
 80030ae:	372c      	adds	r7, #44	; 0x2c
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	10210000 	.word	0x10210000
 80030bc:	10110000 	.word	0x10110000
 80030c0:	10120000 	.word	0x10120000
 80030c4:	10310000 	.word	0x10310000
 80030c8:	10320000 	.word	0x10320000
 80030cc:	10220000 	.word	0x10220000
 80030d0:	40021000 	.word	0x40021000
 80030d4:	40010000 	.word	0x40010000
 80030d8:	40010800 	.word	0x40010800
 80030dc:	40010c00 	.word	0x40010c00
 80030e0:	40011000 	.word	0x40011000
 80030e4:	40011400 	.word	0x40011400
 80030e8:	40010400 	.word	0x40010400

080030ec <HAL_GPIO_ReadPin>:
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	460b      	mov	r3, r1
 80030f6:	807b      	strh	r3, [r7, #2]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	887b      	ldrh	r3, [r7, #2]
 80030fe:	4013      	ands	r3, r2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <HAL_GPIO_ReadPin+0x1e>
 8003104:	2301      	movs	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
 8003108:	e001      	b.n	800310e <HAL_GPIO_ReadPin+0x22>
 800310a:	2300      	movs	r3, #0
 800310c:	73fb      	strb	r3, [r7, #15]
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	4618      	mov	r0, r3
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr

0800311a <HAL_GPIO_WritePin>:
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	460b      	mov	r3, r1
 8003124:	807b      	strh	r3, [r7, #2]
 8003126:	4613      	mov	r3, r2
 8003128:	707b      	strb	r3, [r7, #1]
 800312a:	787b      	ldrb	r3, [r7, #1]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_GPIO_WritePin+0x1e>
 8003130:	887a      	ldrh	r2, [r7, #2]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	611a      	str	r2, [r3, #16]
 8003136:	e003      	b.n	8003140 <HAL_GPIO_WritePin+0x26>
 8003138:	887b      	ldrh	r3, [r7, #2]
 800313a:	041a      	lsls	r2, r3, #16
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	611a      	str	r2, [r3, #16]
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr
	...

0800314c <HAL_I2C_Init>:
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_I2C_Init+0x12>
 800315a:	2301      	movs	r3, #1
 800315c:	e10f      	b.n	800337e <HAL_I2C_Init+0x232>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d106      	bne.n	8003178 <HAL_I2C_Init+0x2c>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7fe f95c 	bl	8001430 <HAL_I2C_MspInit>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2224      	movs	r2, #36	; 0x24
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0201 	bic.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	f001 fb40 	bl	8004814 <HAL_RCC_GetPCLK1Freq>
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	4a7b      	ldr	r2, [pc, #492]	; (8003388 <HAL_I2C_Init+0x23c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d807      	bhi.n	80031b0 <HAL_I2C_Init+0x64>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4a7a      	ldr	r2, [pc, #488]	; (800338c <HAL_I2C_Init+0x240>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	bf94      	ite	ls
 80031a8:	2301      	movls	r3, #1
 80031aa:	2300      	movhi	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	e006      	b.n	80031be <HAL_I2C_Init+0x72>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4a77      	ldr	r2, [pc, #476]	; (8003390 <HAL_I2C_Init+0x244>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	bf94      	ite	ls
 80031b8:	2301      	movls	r3, #1
 80031ba:	2300      	movhi	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_I2C_Init+0x7a>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e0db      	b.n	800337e <HAL_I2C_Init+0x232>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4a72      	ldr	r2, [pc, #456]	; (8003394 <HAL_I2C_Init+0x248>)
 80031ca:	fba2 2303 	umull	r2, r3, r2, r3
 80031ce:	0c9b      	lsrs	r3, r3, #18
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	4a64      	ldr	r2, [pc, #400]	; (8003388 <HAL_I2C_Init+0x23c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d802      	bhi.n	8003200 <HAL_I2C_Init+0xb4>
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	3301      	adds	r3, #1
 80031fe:	e009      	b.n	8003214 <HAL_I2C_Init+0xc8>
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	4a63      	ldr	r2, [pc, #396]	; (8003398 <HAL_I2C_Init+0x24c>)
 800320c:	fba2 2303 	umull	r2, r3, r2, r3
 8003210:	099b      	lsrs	r3, r3, #6
 8003212:	3301      	adds	r3, #1
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	430b      	orrs	r3, r1
 800321a:	6213      	str	r3, [r2, #32]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003226:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	4956      	ldr	r1, [pc, #344]	; (8003388 <HAL_I2C_Init+0x23c>)
 8003230:	428b      	cmp	r3, r1
 8003232:	d80d      	bhi.n	8003250 <HAL_I2C_Init+0x104>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	1e59      	subs	r1, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003242:	3301      	adds	r3, #1
 8003244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003248:	2b04      	cmp	r3, #4
 800324a:	bf38      	it	cc
 800324c:	2304      	movcc	r3, #4
 800324e:	e04f      	b.n	80032f0 <HAL_I2C_Init+0x1a4>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d111      	bne.n	800327c <HAL_I2C_Init+0x130>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	1e58      	subs	r0, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6859      	ldr	r1, [r3, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	440b      	add	r3, r1
 8003266:	fbb0 f3f3 	udiv	r3, r0, r3
 800326a:	3301      	adds	r3, #1
 800326c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003270:	2b00      	cmp	r3, #0
 8003272:	bf0c      	ite	eq
 8003274:	2301      	moveq	r3, #1
 8003276:	2300      	movne	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	e012      	b.n	80032a2 <HAL_I2C_Init+0x156>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	1e58      	subs	r0, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6859      	ldr	r1, [r3, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	0099      	lsls	r1, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003292:	3301      	adds	r3, #1
 8003294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf0c      	ite	eq
 800329c:	2301      	moveq	r3, #1
 800329e:	2300      	movne	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <HAL_I2C_Init+0x15e>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e022      	b.n	80032f0 <HAL_I2C_Init+0x1a4>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10e      	bne.n	80032d0 <HAL_I2C_Init+0x184>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1e58      	subs	r0, r3, #1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6859      	ldr	r1, [r3, #4]
 80032ba:	460b      	mov	r3, r1
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	440b      	add	r3, r1
 80032c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80032c4:	3301      	adds	r3, #1
 80032c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ce:	e00f      	b.n	80032f0 <HAL_I2C_Init+0x1a4>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1e58      	subs	r0, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6859      	ldr	r1, [r3, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	0099      	lsls	r1, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032e6:	3301      	adds	r3, #1
 80032e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	6809      	ldr	r1, [r1, #0]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	61cb      	str	r3, [r1, #28]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69da      	ldr	r2, [r3, #28]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800331e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6911      	ldr	r1, [r2, #16]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	68d2      	ldr	r2, [r2, #12]
 800332a:	4311      	orrs	r1, r2
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	430b      	orrs	r3, r1
 8003332:	6093      	str	r3, [r2, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	60da      	str	r2, [r3, #12]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0201 	orr.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	641a      	str	r2, [r3, #64]	; 0x40
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2220      	movs	r2, #32
 800336a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800337c:	2300      	movs	r3, #0
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	000186a0 	.word	0x000186a0
 800338c:	001e847f 	.word	0x001e847f
 8003390:	003d08ff 	.word	0x003d08ff
 8003394:	431bde83 	.word	0x431bde83
 8003398:	10624dd3 	.word	0x10624dd3

0800339c <HAL_I2C_Mem_Write>:
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	4608      	mov	r0, r1
 80033a6:	4611      	mov	r1, r2
 80033a8:	461a      	mov	r2, r3
 80033aa:	4603      	mov	r3, r0
 80033ac:	817b      	strh	r3, [r7, #10]
 80033ae:	460b      	mov	r3, r1
 80033b0:	813b      	strh	r3, [r7, #8]
 80033b2:	4613      	mov	r3, r2
 80033b4:	80fb      	strh	r3, [r7, #6]
 80033b6:	f7ff fc2f 	bl	8002c18 <HAL_GetTick>
 80033ba:	6178      	str	r0, [r7, #20]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b20      	cmp	r3, #32
 80033c6:	f040 80d9 	bne.w	800357c <HAL_I2C_Mem_Write+0x1e0>
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	2319      	movs	r3, #25
 80033d0:	2201      	movs	r2, #1
 80033d2:	496d      	ldr	r1, [pc, #436]	; (8003588 <HAL_I2C_Mem_Write+0x1ec>)
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 fc6b 	bl	8003cb0 <I2C_WaitOnFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <HAL_I2C_Mem_Write+0x48>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e0cc      	b.n	800357e <HAL_I2C_Mem_Write+0x1e2>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_I2C_Mem_Write+0x56>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e0c5      	b.n	800357e <HAL_I2C_Mem_Write+0x1e2>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b01      	cmp	r3, #1
 8003406:	d007      	beq.n	8003418 <HAL_I2C_Mem_Write+0x7c>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2221      	movs	r2, #33	; 0x21
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2240      	movs	r2, #64	; 0x40
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	641a      	str	r2, [r3, #64]	; 0x40
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a3a      	ldr	r2, [r7, #32]
 8003442:	625a      	str	r2, [r3, #36]	; 0x24
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003448:	855a      	strh	r2, [r3, #42]	; 0x2a
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	851a      	strh	r2, [r3, #40]	; 0x28
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4a4d      	ldr	r2, [pc, #308]	; (800358c <HAL_I2C_Mem_Write+0x1f0>)
 8003458:	62da      	str	r2, [r3, #44]	; 0x2c
 800345a:	88f8      	ldrh	r0, [r7, #6]
 800345c:	893a      	ldrh	r2, [r7, #8]
 800345e:	8979      	ldrh	r1, [r7, #10]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	9301      	str	r3, [sp, #4]
 8003464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	4603      	mov	r3, r0
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 fac6 	bl	80039fc <I2C_RequestMemoryWrite>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d052      	beq.n	800351c <HAL_I2C_Mem_Write+0x180>
 8003476:	2301      	movs	r3, #1
 8003478:	e081      	b.n	800357e <HAL_I2C_Mem_Write+0x1e2>
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 fcec 	bl	8003e5c <I2C_WaitOnTXEFlagUntilTimeout>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00d      	beq.n	80034a6 <HAL_I2C_Mem_Write+0x10a>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	2b04      	cmp	r3, #4
 8003490:	d107      	bne.n	80034a2 <HAL_I2C_Mem_Write+0x106>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	2301      	movs	r3, #1
 80034a4:	e06b      	b.n	800357e <HAL_I2C_Mem_Write+0x1e2>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	781a      	ldrb	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	611a      	str	r2, [r3, #16]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	625a      	str	r2, [r3, #36]	; 0x24
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	851a      	strh	r2, [r3, #40]	; 0x28
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	3b01      	subs	r3, #1
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d11b      	bne.n	800351c <HAL_I2C_Mem_Write+0x180>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d017      	beq.n	800351c <HAL_I2C_Mem_Write+0x180>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	781a      	ldrb	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	611a      	str	r2, [r3, #16]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	625a      	str	r2, [r3, #36]	; 0x24
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003506:	3b01      	subs	r3, #1
 8003508:	b29a      	uxth	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	851a      	strh	r2, [r3, #40]	; 0x28
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003512:	b29b      	uxth	r3, r3
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1aa      	bne.n	800347a <HAL_I2C_Mem_Write+0xde>
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 fcd8 	bl	8003ede <I2C_WaitOnBTFFlagUntilTimeout>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00d      	beq.n	8003550 <HAL_I2C_Mem_Write+0x1b4>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	2b04      	cmp	r3, #4
 800353a:	d107      	bne.n	800354c <HAL_I2C_Mem_Write+0x1b0>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	2301      	movs	r3, #1
 800354e:	e016      	b.n	800357e <HAL_I2C_Mem_Write+0x1e2>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003578:	2300      	movs	r3, #0
 800357a:	e000      	b.n	800357e <HAL_I2C_Mem_Write+0x1e2>
 800357c:	2302      	movs	r3, #2
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	00100002 	.word	0x00100002
 800358c:	ffff0000 	.word	0xffff0000

08003590 <HAL_I2C_Mem_Read>:
 8003590:	b580      	push	{r7, lr}
 8003592:	b08c      	sub	sp, #48	; 0x30
 8003594:	af02      	add	r7, sp, #8
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	4608      	mov	r0, r1
 800359a:	4611      	mov	r1, r2
 800359c:	461a      	mov	r2, r3
 800359e:	4603      	mov	r3, r0
 80035a0:	817b      	strh	r3, [r7, #10]
 80035a2:	460b      	mov	r3, r1
 80035a4:	813b      	strh	r3, [r7, #8]
 80035a6:	4613      	mov	r3, r2
 80035a8:	80fb      	strh	r3, [r7, #6]
 80035aa:	f7ff fb35 	bl	8002c18 <HAL_GetTick>
 80035ae:	6278      	str	r0, [r7, #36]	; 0x24
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	f040 8218 	bne.w	80039ee <HAL_I2C_Mem_Read+0x45e>
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	2319      	movs	r3, #25
 80035c4:	2201      	movs	r2, #1
 80035c6:	4981      	ldr	r1, [pc, #516]	; (80037cc <HAL_I2C_Mem_Read+0x23c>)
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 fb71 	bl	8003cb0 <I2C_WaitOnFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <HAL_I2C_Mem_Read+0x48>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e20b      	b.n	80039f0 <HAL_I2C_Mem_Read+0x460>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_I2C_Mem_Read+0x56>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e204      	b.n	80039f0 <HAL_I2C_Mem_Read+0x460>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d007      	beq.n	800360c <HAL_I2C_Mem_Read+0x7c>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2222      	movs	r2, #34	; 0x22
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2240      	movs	r2, #64	; 0x40
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	641a      	str	r2, [r3, #64]	; 0x40
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003636:	625a      	str	r2, [r3, #36]	; 0x24
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800363c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	851a      	strh	r2, [r3, #40]	; 0x28
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4a61      	ldr	r2, [pc, #388]	; (80037d0 <HAL_I2C_Mem_Read+0x240>)
 800364c:	62da      	str	r2, [r3, #44]	; 0x2c
 800364e:	88f8      	ldrh	r0, [r7, #6]
 8003650:	893a      	ldrh	r2, [r7, #8]
 8003652:	8979      	ldrh	r1, [r7, #10]
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	9301      	str	r3, [sp, #4]
 8003658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	4603      	mov	r3, r0
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 fa56 	bl	8003b10 <I2C_RequestMemoryRead>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_I2C_Mem_Read+0xde>
 800366a:	2301      	movs	r3, #1
 800366c:	e1c0      	b.n	80039f0 <HAL_I2C_Mem_Read+0x460>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003672:	2b00      	cmp	r3, #0
 8003674:	d113      	bne.n	800369e <HAL_I2C_Mem_Read+0x10e>
 8003676:	2300      	movs	r3, #0
 8003678:	623b      	str	r3, [r7, #32]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	623b      	str	r3, [r7, #32]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	623b      	str	r3, [r7, #32]
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	e194      	b.n	80039c8 <HAL_I2C_Mem_Read+0x438>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d11d      	bne.n	80036e2 <HAL_I2C_Mem_Read+0x152>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	b672      	cpsid	i
 80036b8:	2300      	movs	r3, #0
 80036ba:	61fb      	str	r3, [r7, #28]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	61fb      	str	r3, [r7, #28]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	61fb      	str	r3, [r7, #28]
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	b662      	cpsie	i
 80036e0:	e172      	b.n	80039c8 <HAL_I2C_Mem_Read+0x438>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d11d      	bne.n	8003726 <HAL_I2C_Mem_Read+0x196>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	b672      	cpsid	i
 80036fc:	2300      	movs	r3, #0
 80036fe:	61bb      	str	r3, [r7, #24]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	61bb      	str	r3, [r7, #24]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	61bb      	str	r3, [r7, #24]
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	b662      	cpsie	i
 8003724:	e150      	b.n	80039c8 <HAL_I2C_Mem_Read+0x438>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	2300      	movs	r3, #0
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	617b      	str	r3, [r7, #20]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	e13c      	b.n	80039c8 <HAL_I2C_Mem_Read+0x438>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003752:	2b03      	cmp	r3, #3
 8003754:	f200 80f5 	bhi.w	8003942 <HAL_I2C_Mem_Read+0x3b2>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375c:	2b01      	cmp	r3, #1
 800375e:	d123      	bne.n	80037a8 <HAL_I2C_Mem_Read+0x218>
 8003760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003762:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 fbfb 	bl	8003f60 <I2C_WaitOnRXNEFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_I2C_Mem_Read+0x1e4>
 8003770:	2301      	movs	r3, #1
 8003772:	e13d      	b.n	80039f0 <HAL_I2C_Mem_Read+0x460>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691a      	ldr	r2, [r3, #16]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	701a      	strb	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	625a      	str	r2, [r3, #36]	; 0x24
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	851a      	strh	r2, [r3, #40]	; 0x28
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037a6:	e10f      	b.n	80039c8 <HAL_I2C_Mem_Read+0x438>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d150      	bne.n	8003852 <HAL_I2C_Mem_Read+0x2c2>
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b6:	2200      	movs	r2, #0
 80037b8:	4906      	ldr	r1, [pc, #24]	; (80037d4 <HAL_I2C_Mem_Read+0x244>)
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 fa78 	bl	8003cb0 <I2C_WaitOnFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d008      	beq.n	80037d8 <HAL_I2C_Mem_Read+0x248>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e112      	b.n	80039f0 <HAL_I2C_Mem_Read+0x460>
 80037ca:	bf00      	nop
 80037cc:	00100002 	.word	0x00100002
 80037d0:	ffff0000 	.word	0xffff0000
 80037d4:	00010004 	.word	0x00010004
 80037d8:	b672      	cpsid	i
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	701a      	strb	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	625a      	str	r2, [r3, #36]	; 0x24
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003806:	3b01      	subs	r3, #1
 8003808:	b29a      	uxth	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	851a      	strh	r2, [r3, #40]	; 0x28
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003812:	b29b      	uxth	r3, r3
 8003814:	3b01      	subs	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800381c:	b662      	cpsie	i
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	701a      	strb	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	625a      	str	r2, [r3, #36]	; 0x24
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	851a      	strh	r2, [r3, #40]	; 0x28
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003850:	e0ba      	b.n	80039c8 <HAL_I2C_Mem_Read+0x438>
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003858:	2200      	movs	r2, #0
 800385a:	4967      	ldr	r1, [pc, #412]	; (80039f8 <HAL_I2C_Mem_Read+0x468>)
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 fa27 	bl	8003cb0 <I2C_WaitOnFlagUntilTimeout>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_I2C_Mem_Read+0x2dc>
 8003868:	2301      	movs	r3, #1
 800386a:	e0c1      	b.n	80039f0 <HAL_I2C_Mem_Read+0x460>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	b672      	cpsid	i
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	701a      	strb	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	625a      	str	r2, [r3, #36]	; 0x24
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389a:	3b01      	subs	r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	851a      	strh	r2, [r3, #40]	; 0x28
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b6:	2200      	movs	r2, #0
 80038b8:	494f      	ldr	r1, [pc, #316]	; (80039f8 <HAL_I2C_Mem_Read+0x468>)
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 f9f8 	bl	8003cb0 <I2C_WaitOnFlagUntilTimeout>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_I2C_Mem_Read+0x33a>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e092      	b.n	80039f0 <HAL_I2C_Mem_Read+0x460>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	691a      	ldr	r2, [r3, #16]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	701a      	strb	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	625a      	str	r2, [r3, #36]	; 0x24
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	851a      	strh	r2, [r3, #40]	; 0x28
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800390c:	b662      	cpsie	i
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	701a      	strb	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	625a      	str	r2, [r3, #36]	; 0x24
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	851a      	strh	r2, [r3, #40]	; 0x28
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003940:	e042      	b.n	80039c8 <HAL_I2C_Mem_Read+0x438>
 8003942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003944:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 fb0a 	bl	8003f60 <I2C_WaitOnRXNEFlagUntilTimeout>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_I2C_Mem_Read+0x3c6>
 8003952:	2301      	movs	r3, #1
 8003954:	e04c      	b.n	80039f0 <HAL_I2C_Mem_Read+0x460>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	701a      	strb	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	625a      	str	r2, [r3, #36]	; 0x24
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	851a      	strh	r2, [r3, #40]	; 0x28
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	2b04      	cmp	r3, #4
 8003994:	d118      	bne.n	80039c8 <HAL_I2C_Mem_Read+0x438>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	701a      	strb	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	625a      	str	r2, [r3, #36]	; 0x24
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	851a      	strh	r2, [r3, #40]	; 0x28
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039be:	b29b      	uxth	r3, r3
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f47f aebe 	bne.w	800374e <HAL_I2C_Mem_Read+0x1be>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80039ea:	2300      	movs	r3, #0
 80039ec:	e000      	b.n	80039f0 <HAL_I2C_Mem_Read+0x460>
 80039ee:	2302      	movs	r3, #2
 80039f0:	4618      	mov	r0, r3
 80039f2:	3728      	adds	r7, #40	; 0x28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	00010004 	.word	0x00010004

080039fc <I2C_RequestMemoryWrite>:
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	4608      	mov	r0, r1
 8003a06:	4611      	mov	r1, r2
 8003a08:	461a      	mov	r2, r3
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	817b      	strh	r3, [r7, #10]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	813b      	strh	r3, [r7, #8]
 8003a12:	4613      	mov	r3, r2
 8003a14:	80fb      	strh	r3, [r7, #6]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f93c 	bl	8003cb0 <I2C_WaitOnFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <I2C_RequestMemoryWrite+0x46>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e05f      	b.n	8003b02 <I2C_RequestMemoryWrite+0x106>
 8003a42:	897b      	ldrh	r3, [r7, #10]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	461a      	mov	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a50:	611a      	str	r2, [r3, #16]
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	6a3a      	ldr	r2, [r7, #32]
 8003a56:	492d      	ldr	r1, [pc, #180]	; (8003b0c <I2C_RequestMemoryWrite+0x110>)
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 f980 	bl	8003d5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <I2C_RequestMemoryWrite+0x6c>
 8003a64:	2301      	movs	r3, #1
 8003a66:	e04c      	b.n	8003b02 <I2C_RequestMemoryWrite+0x106>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a80:	6a39      	ldr	r1, [r7, #32]
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 f9ea 	bl	8003e5c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00d      	beq.n	8003aaa <I2C_RequestMemoryWrite+0xae>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d107      	bne.n	8003aa6 <I2C_RequestMemoryWrite+0xaa>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e02b      	b.n	8003b02 <I2C_RequestMemoryWrite+0x106>
 8003aaa:	88fb      	ldrh	r3, [r7, #6]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d105      	bne.n	8003abc <I2C_RequestMemoryWrite+0xc0>
 8003ab0:	893b      	ldrh	r3, [r7, #8]
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	611a      	str	r2, [r3, #16]
 8003aba:	e021      	b.n	8003b00 <I2C_RequestMemoryWrite+0x104>
 8003abc:	893b      	ldrh	r3, [r7, #8]
 8003abe:	0a1b      	lsrs	r3, r3, #8
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	611a      	str	r2, [r3, #16]
 8003aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003acc:	6a39      	ldr	r1, [r7, #32]
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 f9c4 	bl	8003e5c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00d      	beq.n	8003af6 <I2C_RequestMemoryWrite+0xfa>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d107      	bne.n	8003af2 <I2C_RequestMemoryWrite+0xf6>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	2301      	movs	r3, #1
 8003af4:	e005      	b.n	8003b02 <I2C_RequestMemoryWrite+0x106>
 8003af6:	893b      	ldrh	r3, [r7, #8]
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	611a      	str	r2, [r3, #16]
 8003b00:	2300      	movs	r3, #0
 8003b02:	4618      	mov	r0, r3
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	00010002 	.word	0x00010002

08003b10 <I2C_RequestMemoryRead>:
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	4608      	mov	r0, r1
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4603      	mov	r3, r0
 8003b20:	817b      	strh	r3, [r7, #10]
 8003b22:	460b      	mov	r3, r1
 8003b24:	813b      	strh	r3, [r7, #8]
 8003b26:	4613      	mov	r3, r2
 8003b28:	80fb      	strh	r3, [r7, #6]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 f8aa 	bl	8003cb0 <I2C_WaitOnFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <I2C_RequestMemoryRead+0x56>
 8003b62:	2301      	movs	r3, #1
 8003b64:	e09e      	b.n	8003ca4 <I2C_RequestMemoryRead+0x194>
 8003b66:	897b      	ldrh	r3, [r7, #10]
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b74:	611a      	str	r2, [r3, #16]
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	6a3a      	ldr	r2, [r7, #32]
 8003b7a:	494c      	ldr	r1, [pc, #304]	; (8003cac <I2C_RequestMemoryRead+0x19c>)
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f8ee 	bl	8003d5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <I2C_RequestMemoryRead+0x7c>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e08b      	b.n	8003ca4 <I2C_RequestMemoryRead+0x194>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba4:	6a39      	ldr	r1, [r7, #32]
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 f958 	bl	8003e5c <I2C_WaitOnTXEFlagUntilTimeout>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00d      	beq.n	8003bce <I2C_RequestMemoryRead+0xbe>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d107      	bne.n	8003bca <I2C_RequestMemoryRead+0xba>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e06a      	b.n	8003ca4 <I2C_RequestMemoryRead+0x194>
 8003bce:	88fb      	ldrh	r3, [r7, #6]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d105      	bne.n	8003be0 <I2C_RequestMemoryRead+0xd0>
 8003bd4:	893b      	ldrh	r3, [r7, #8]
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	611a      	str	r2, [r3, #16]
 8003bde:	e021      	b.n	8003c24 <I2C_RequestMemoryRead+0x114>
 8003be0:	893b      	ldrh	r3, [r7, #8]
 8003be2:	0a1b      	lsrs	r3, r3, #8
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	611a      	str	r2, [r3, #16]
 8003bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf0:	6a39      	ldr	r1, [r7, #32]
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 f932 	bl	8003e5c <I2C_WaitOnTXEFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00d      	beq.n	8003c1a <I2C_RequestMemoryRead+0x10a>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d107      	bne.n	8003c16 <I2C_RequestMemoryRead+0x106>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	2301      	movs	r3, #1
 8003c18:	e044      	b.n	8003ca4 <I2C_RequestMemoryRead+0x194>
 8003c1a:	893b      	ldrh	r3, [r7, #8]
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	611a      	str	r2, [r3, #16]
 8003c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c26:	6a39      	ldr	r1, [r7, #32]
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 f917 	bl	8003e5c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00d      	beq.n	8003c50 <I2C_RequestMemoryRead+0x140>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d107      	bne.n	8003c4c <I2C_RequestMemoryRead+0x13c>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e029      	b.n	8003ca4 <I2C_RequestMemoryRead+0x194>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f81f 	bl	8003cb0 <I2C_WaitOnFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <I2C_RequestMemoryRead+0x16c>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e013      	b.n	8003ca4 <I2C_RequestMemoryRead+0x194>
 8003c7c:	897b      	ldrh	r3, [r7, #10]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	f043 0301 	orr.w	r3, r3, #1
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	611a      	str	r2, [r3, #16]
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	6a3a      	ldr	r2, [r7, #32]
 8003c90:	4906      	ldr	r1, [pc, #24]	; (8003cac <I2C_RequestMemoryRead+0x19c>)
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 f863 	bl	8003d5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <I2C_RequestMemoryRead+0x192>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <I2C_RequestMemoryRead+0x194>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	00010002 	.word	0x00010002

08003cb0 <I2C_WaitOnFlagUntilTimeout>:
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	603b      	str	r3, [r7, #0]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	71fb      	strb	r3, [r7, #7]
 8003cc0:	e025      	b.n	8003d0e <I2C_WaitOnFlagUntilTimeout+0x5e>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cc8:	d021      	beq.n	8003d0e <I2C_WaitOnFlagUntilTimeout+0x5e>
 8003cca:	f7fe ffa5 	bl	8002c18 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d302      	bcc.n	8003ce0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d116      	bne.n	8003d0e <I2C_WaitOnFlagUntilTimeout+0x5e>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	631a      	str	r2, [r3, #48]	; 0x30
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	f043 0220 	orr.w	r2, r3, #32
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	641a      	str	r2, [r3, #64]	; 0x40
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e023      	b.n	8003d56 <I2C_WaitOnFlagUntilTimeout+0xa6>
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	0c1b      	lsrs	r3, r3, #16
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d10d      	bne.n	8003d34 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	43da      	mvns	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4013      	ands	r3, r2
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	bf0c      	ite	eq
 8003d2a:	2301      	moveq	r3, #1
 8003d2c:	2300      	movne	r3, #0
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	461a      	mov	r2, r3
 8003d32:	e00c      	b.n	8003d4e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	43da      	mvns	r2, r3
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	bf0c      	ite	eq
 8003d46:	2301      	moveq	r3, #1
 8003d48:	2300      	movne	r3, #0
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	79fb      	ldrb	r3, [r7, #7]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d0b6      	beq.n	8003cc2 <I2C_WaitOnFlagUntilTimeout+0x12>
 8003d54:	2300      	movs	r3, #0
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	607a      	str	r2, [r7, #4]
 8003d6a:	603b      	str	r3, [r7, #0]
 8003d6c:	e051      	b.n	8003e12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d7c:	d123      	bne.n	8003dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d96:	615a      	str	r2, [r3, #20]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	631a      	str	r2, [r3, #48]	; 0x30
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	f043 0204 	orr.w	r2, r3, #4
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	641a      	str	r2, [r3, #64]	; 0x40
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e046      	b.n	8003e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dcc:	d021      	beq.n	8003e12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8003dce:	f7fe ff23 	bl	8002c18 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d302      	bcc.n	8003de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d116      	bne.n	8003e12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	631a      	str	r2, [r3, #48]	; 0x30
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f043 0220 	orr.w	r2, r3, #32
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	641a      	str	r2, [r3, #64]	; 0x40
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e020      	b.n	8003e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	0c1b      	lsrs	r3, r3, #16
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d10c      	bne.n	8003e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	43da      	mvns	r2, r3
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4013      	ands	r3, r2
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	bf14      	ite	ne
 8003e2e:	2301      	movne	r3, #1
 8003e30:	2300      	moveq	r3, #0
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	e00b      	b.n	8003e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	43da      	mvns	r2, r3
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	4013      	ands	r3, r2
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	bf14      	ite	ne
 8003e48:	2301      	movne	r3, #1
 8003e4a:	2300      	moveq	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d18d      	bne.n	8003d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8003e52:	2300      	movs	r3, #0
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <I2C_WaitOnTXEFlagUntilTimeout>:
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	e02d      	b.n	8003ec6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 f8ce 	bl	800400c <I2C_IsAcknowledgeFailed>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 8003e76:	2301      	movs	r3, #1
 8003e78:	e02d      	b.n	8003ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e80:	d021      	beq.n	8003ec6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8003e82:	f7fe fec9 	bl	8002c18 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d302      	bcc.n	8003e98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d116      	bne.n	8003ec6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	631a      	str	r2, [r3, #48]	; 0x30
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	f043 0220 	orr.w	r2, r3, #32
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	641a      	str	r2, [r3, #64]	; 0x40
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e007      	b.n	8003ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed0:	2b80      	cmp	r3, #128	; 0x80
 8003ed2:	d1ca      	bne.n	8003e6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <I2C_WaitOnBTFFlagUntilTimeout>:
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b084      	sub	sp, #16
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	607a      	str	r2, [r7, #4]
 8003eea:	e02d      	b.n	8003f48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 f88d 	bl	800400c <I2C_IsAcknowledgeFailed>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e02d      	b.n	8003f58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f02:	d021      	beq.n	8003f48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8003f04:	f7fe fe88 	bl	8002c18 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d302      	bcc.n	8003f1a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d116      	bne.n	8003f48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	631a      	str	r2, [r3, #48]	; 0x30
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	f043 0220 	orr.w	r2, r3, #32
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	641a      	str	r2, [r3, #64]	; 0x40
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f44:	2301      	movs	r3, #1
 8003f46:	e007      	b.n	8003f58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d1ca      	bne.n	8003eec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 8003f56:	2300      	movs	r3, #0
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <I2C_WaitOnRXNEFlagUntilTimeout>:
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
 8003f6c:	e042      	b.n	8003ff4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	f003 0310 	and.w	r3, r3, #16
 8003f78:	2b10      	cmp	r3, #16
 8003f7a:	d119      	bne.n	8003fb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f06f 0210 	mvn.w	r2, #16
 8003f84:	615a      	str	r2, [r3, #20]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	631a      	str	r2, [r3, #48]	; 0x30
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	641a      	str	r2, [r3, #64]	; 0x40
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003fac:	2301      	movs	r3, #1
 8003fae:	e029      	b.n	8004004 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8003fb0:	f7fe fe32 	bl	8002c18 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d302      	bcc.n	8003fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d116      	bne.n	8003ff4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	f043 0220 	orr.w	r2, r3, #32
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	641a      	str	r2, [r3, #64]	; 0x40
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e007      	b.n	8004004 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffe:	2b40      	cmp	r3, #64	; 0x40
 8004000:	d1b5      	bne.n	8003f6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 8004002:	2300      	movs	r3, #0
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <I2C_IsAcknowledgeFailed>:
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800401e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004022:	d11b      	bne.n	800405c <I2C_IsAcknowledgeFailed+0x50>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800402c:	615a      	str	r2, [r3, #20]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	631a      	str	r2, [r3, #48]	; 0x30
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	f043 0204 	orr.w	r2, r3, #4
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	641a      	str	r2, [r3, #64]	; 0x40
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <I2C_IsAcknowledgeFailed+0x52>
 800405c:	2300      	movs	r3, #0
 800405e:	4618      	mov	r0, r3
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr

08004068 <HAL_RCC_OscConfig>:
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_RCC_OscConfig+0x12>
 8004076:	2301      	movs	r3, #1
 8004078:	e26c      	b.n	8004554 <HAL_RCC_OscConfig+0x4ec>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 8087 	beq.w	8004196 <HAL_RCC_OscConfig+0x12e>
 8004088:	4b92      	ldr	r3, [pc, #584]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f003 030c 	and.w	r3, r3, #12
 8004090:	2b04      	cmp	r3, #4
 8004092:	d00c      	beq.n	80040ae <HAL_RCC_OscConfig+0x46>
 8004094:	4b8f      	ldr	r3, [pc, #572]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f003 030c 	and.w	r3, r3, #12
 800409c:	2b08      	cmp	r3, #8
 800409e:	d112      	bne.n	80040c6 <HAL_RCC_OscConfig+0x5e>
 80040a0:	4b8c      	ldr	r3, [pc, #560]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ac:	d10b      	bne.n	80040c6 <HAL_RCC_OscConfig+0x5e>
 80040ae:	4b89      	ldr	r3, [pc, #548]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d06c      	beq.n	8004194 <HAL_RCC_OscConfig+0x12c>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d168      	bne.n	8004194 <HAL_RCC_OscConfig+0x12c>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e246      	b.n	8004554 <HAL_RCC_OscConfig+0x4ec>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ce:	d106      	bne.n	80040de <HAL_RCC_OscConfig+0x76>
 80040d0:	4b80      	ldr	r3, [pc, #512]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a7f      	ldr	r2, [pc, #508]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 80040d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	e02e      	b.n	800413c <HAL_RCC_OscConfig+0xd4>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10c      	bne.n	8004100 <HAL_RCC_OscConfig+0x98>
 80040e6:	4b7b      	ldr	r3, [pc, #492]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a7a      	ldr	r2, [pc, #488]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 80040ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	4b78      	ldr	r3, [pc, #480]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a77      	ldr	r2, [pc, #476]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 80040f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	e01d      	b.n	800413c <HAL_RCC_OscConfig+0xd4>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004108:	d10c      	bne.n	8004124 <HAL_RCC_OscConfig+0xbc>
 800410a:	4b72      	ldr	r3, [pc, #456]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a71      	ldr	r2, [pc, #452]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 8004110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	4b6f      	ldr	r3, [pc, #444]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a6e      	ldr	r2, [pc, #440]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 800411c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	e00b      	b.n	800413c <HAL_RCC_OscConfig+0xd4>
 8004124:	4b6b      	ldr	r3, [pc, #428]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a6a      	ldr	r2, [pc, #424]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 800412a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	4b68      	ldr	r3, [pc, #416]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a67      	ldr	r2, [pc, #412]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 8004136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800413a:	6013      	str	r3, [r2, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d013      	beq.n	800416c <HAL_RCC_OscConfig+0x104>
 8004144:	f7fe fd68 	bl	8002c18 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0xf6>
 800414c:	f7fe fd64 	bl	8002c18 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b64      	cmp	r3, #100	; 0x64
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0xf6>
 800415a:	2303      	movs	r3, #3
 800415c:	e1fa      	b.n	8004554 <HAL_RCC_OscConfig+0x4ec>
 800415e:	4b5d      	ldr	r3, [pc, #372]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCC_OscConfig+0xe4>
 800416a:	e014      	b.n	8004196 <HAL_RCC_OscConfig+0x12e>
 800416c:	f7fe fd54 	bl	8002c18 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x11e>
 8004174:	f7fe fd50 	bl	8002c18 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b64      	cmp	r3, #100	; 0x64
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x11e>
 8004182:	2303      	movs	r3, #3
 8004184:	e1e6      	b.n	8004554 <HAL_RCC_OscConfig+0x4ec>
 8004186:	4b53      	ldr	r3, [pc, #332]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x10c>
 8004192:	e000      	b.n	8004196 <HAL_RCC_OscConfig+0x12e>
 8004194:	bf00      	nop
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d063      	beq.n	800426a <HAL_RCC_OscConfig+0x202>
 80041a2:	4b4c      	ldr	r3, [pc, #304]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f003 030c 	and.w	r3, r3, #12
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00b      	beq.n	80041c6 <HAL_RCC_OscConfig+0x15e>
 80041ae:	4b49      	ldr	r3, [pc, #292]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f003 030c 	and.w	r3, r3, #12
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d11c      	bne.n	80041f4 <HAL_RCC_OscConfig+0x18c>
 80041ba:	4b46      	ldr	r3, [pc, #280]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d116      	bne.n	80041f4 <HAL_RCC_OscConfig+0x18c>
 80041c6:	4b43      	ldr	r3, [pc, #268]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d005      	beq.n	80041de <HAL_RCC_OscConfig+0x176>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d001      	beq.n	80041de <HAL_RCC_OscConfig+0x176>
 80041da:	2301      	movs	r3, #1
 80041dc:	e1ba      	b.n	8004554 <HAL_RCC_OscConfig+0x4ec>
 80041de:	4b3d      	ldr	r3, [pc, #244]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	4939      	ldr	r1, [pc, #228]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	600b      	str	r3, [r1, #0]
 80041f2:	e03a      	b.n	800426a <HAL_RCC_OscConfig+0x202>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d020      	beq.n	800423e <HAL_RCC_OscConfig+0x1d6>
 80041fc:	4b36      	ldr	r3, [pc, #216]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80041fe:	2201      	movs	r2, #1
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	f7fe fd09 	bl	8002c18 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x1b4>
 800420a:	f7fe fd05 	bl	8002c18 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x1b4>
 8004218:	2303      	movs	r3, #3
 800421a:	e19b      	b.n	8004554 <HAL_RCC_OscConfig+0x4ec>
 800421c:	4b2d      	ldr	r3, [pc, #180]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0f0      	beq.n	800420a <HAL_RCC_OscConfig+0x1a2>
 8004228:	4b2a      	ldr	r3, [pc, #168]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	4927      	ldr	r1, [pc, #156]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 8004238:	4313      	orrs	r3, r2
 800423a:	600b      	str	r3, [r1, #0]
 800423c:	e015      	b.n	800426a <HAL_RCC_OscConfig+0x202>
 800423e:	4b26      	ldr	r3, [pc, #152]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	f7fe fce8 	bl	8002c18 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x1f6>
 800424c:	f7fe fce4 	bl	8002c18 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x1f6>
 800425a:	2303      	movs	r3, #3
 800425c:	e17a      	b.n	8004554 <HAL_RCC_OscConfig+0x4ec>
 800425e:	4b1d      	ldr	r3, [pc, #116]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f0      	bne.n	800424c <HAL_RCC_OscConfig+0x1e4>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d03a      	beq.n	80042ec <HAL_RCC_OscConfig+0x284>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d019      	beq.n	80042b2 <HAL_RCC_OscConfig+0x24a>
 800427e:	4b17      	ldr	r3, [pc, #92]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 8004280:	2201      	movs	r2, #1
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	f7fe fcc8 	bl	8002c18 <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x236>
 800428c:	f7fe fcc4 	bl	8002c18 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x236>
 800429a:	2303      	movs	r3, #3
 800429c:	e15a      	b.n	8004554 <HAL_RCC_OscConfig+0x4ec>
 800429e:	4b0d      	ldr	r3, [pc, #52]	; (80042d4 <HAL_RCC_OscConfig+0x26c>)
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0f0      	beq.n	800428c <HAL_RCC_OscConfig+0x224>
 80042aa:	2001      	movs	r0, #1
 80042ac:	f000 fac6 	bl	800483c <RCC_Delay>
 80042b0:	e01c      	b.n	80042ec <HAL_RCC_OscConfig+0x284>
 80042b2:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	f7fe fcae 	bl	8002c18 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]
 80042be:	e00f      	b.n	80042e0 <HAL_RCC_OscConfig+0x278>
 80042c0:	f7fe fcaa 	bl	8002c18 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d908      	bls.n	80042e0 <HAL_RCC_OscConfig+0x278>
 80042ce:	2303      	movs	r3, #3
 80042d0:	e140      	b.n	8004554 <HAL_RCC_OscConfig+0x4ec>
 80042d2:	bf00      	nop
 80042d4:	40021000 	.word	0x40021000
 80042d8:	42420000 	.word	0x42420000
 80042dc:	42420480 	.word	0x42420480
 80042e0:	4b9e      	ldr	r3, [pc, #632]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1e9      	bne.n	80042c0 <HAL_RCC_OscConfig+0x258>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 80a6 	beq.w	8004446 <HAL_RCC_OscConfig+0x3de>
 80042fa:	2300      	movs	r3, #0
 80042fc:	75fb      	strb	r3, [r7, #23]
 80042fe:	4b97      	ldr	r3, [pc, #604]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10d      	bne.n	8004326 <HAL_RCC_OscConfig+0x2be>
 800430a:	4b94      	ldr	r3, [pc, #592]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	4a93      	ldr	r2, [pc, #588]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 8004310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004314:	61d3      	str	r3, [r2, #28]
 8004316:	4b91      	ldr	r3, [pc, #580]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800431e:	60bb      	str	r3, [r7, #8]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2301      	movs	r3, #1
 8004324:	75fb      	strb	r3, [r7, #23]
 8004326:	4b8e      	ldr	r3, [pc, #568]	; (8004560 <HAL_RCC_OscConfig+0x4f8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432e:	2b00      	cmp	r3, #0
 8004330:	d118      	bne.n	8004364 <HAL_RCC_OscConfig+0x2fc>
 8004332:	4b8b      	ldr	r3, [pc, #556]	; (8004560 <HAL_RCC_OscConfig+0x4f8>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a8a      	ldr	r2, [pc, #552]	; (8004560 <HAL_RCC_OscConfig+0x4f8>)
 8004338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	f7fe fc6b 	bl	8002c18 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x2f0>
 8004346:	f7fe fc67 	bl	8002c18 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b64      	cmp	r3, #100	; 0x64
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x2f0>
 8004354:	2303      	movs	r3, #3
 8004356:	e0fd      	b.n	8004554 <HAL_RCC_OscConfig+0x4ec>
 8004358:	4b81      	ldr	r3, [pc, #516]	; (8004560 <HAL_RCC_OscConfig+0x4f8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0f0      	beq.n	8004346 <HAL_RCC_OscConfig+0x2de>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d106      	bne.n	800437a <HAL_RCC_OscConfig+0x312>
 800436c:	4b7b      	ldr	r3, [pc, #492]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	4a7a      	ldr	r2, [pc, #488]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 8004372:	f043 0301 	orr.w	r3, r3, #1
 8004376:	6213      	str	r3, [r2, #32]
 8004378:	e02d      	b.n	80043d6 <HAL_RCC_OscConfig+0x36e>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10c      	bne.n	800439c <HAL_RCC_OscConfig+0x334>
 8004382:	4b76      	ldr	r3, [pc, #472]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	4a75      	ldr	r2, [pc, #468]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 8004388:	f023 0301 	bic.w	r3, r3, #1
 800438c:	6213      	str	r3, [r2, #32]
 800438e:	4b73      	ldr	r3, [pc, #460]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	4a72      	ldr	r2, [pc, #456]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 8004394:	f023 0304 	bic.w	r3, r3, #4
 8004398:	6213      	str	r3, [r2, #32]
 800439a:	e01c      	b.n	80043d6 <HAL_RCC_OscConfig+0x36e>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	2b05      	cmp	r3, #5
 80043a2:	d10c      	bne.n	80043be <HAL_RCC_OscConfig+0x356>
 80043a4:	4b6d      	ldr	r3, [pc, #436]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	4a6c      	ldr	r2, [pc, #432]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 80043aa:	f043 0304 	orr.w	r3, r3, #4
 80043ae:	6213      	str	r3, [r2, #32]
 80043b0:	4b6a      	ldr	r3, [pc, #424]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	4a69      	ldr	r2, [pc, #420]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 80043b6:	f043 0301 	orr.w	r3, r3, #1
 80043ba:	6213      	str	r3, [r2, #32]
 80043bc:	e00b      	b.n	80043d6 <HAL_RCC_OscConfig+0x36e>
 80043be:	4b67      	ldr	r3, [pc, #412]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	4a66      	ldr	r2, [pc, #408]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 80043c4:	f023 0301 	bic.w	r3, r3, #1
 80043c8:	6213      	str	r3, [r2, #32]
 80043ca:	4b64      	ldr	r3, [pc, #400]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	4a63      	ldr	r2, [pc, #396]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 80043d0:	f023 0304 	bic.w	r3, r3, #4
 80043d4:	6213      	str	r3, [r2, #32]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d015      	beq.n	800440a <HAL_RCC_OscConfig+0x3a2>
 80043de:	f7fe fc1b 	bl	8002c18 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]
 80043e4:	e00a      	b.n	80043fc <HAL_RCC_OscConfig+0x394>
 80043e6:	f7fe fc17 	bl	8002c18 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x394>
 80043f8:	2303      	movs	r3, #3
 80043fa:	e0ab      	b.n	8004554 <HAL_RCC_OscConfig+0x4ec>
 80043fc:	4b57      	ldr	r3, [pc, #348]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0ee      	beq.n	80043e6 <HAL_RCC_OscConfig+0x37e>
 8004408:	e014      	b.n	8004434 <HAL_RCC_OscConfig+0x3cc>
 800440a:	f7fe fc05 	bl	8002c18 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]
 8004410:	e00a      	b.n	8004428 <HAL_RCC_OscConfig+0x3c0>
 8004412:	f7fe fc01 	bl	8002c18 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004420:	4293      	cmp	r3, r2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x3c0>
 8004424:	2303      	movs	r3, #3
 8004426:	e095      	b.n	8004554 <HAL_RCC_OscConfig+0x4ec>
 8004428:	4b4c      	ldr	r3, [pc, #304]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1ee      	bne.n	8004412 <HAL_RCC_OscConfig+0x3aa>
 8004434:	7dfb      	ldrb	r3, [r7, #23]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d105      	bne.n	8004446 <HAL_RCC_OscConfig+0x3de>
 800443a:	4b48      	ldr	r3, [pc, #288]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	4a47      	ldr	r2, [pc, #284]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 8004440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004444:	61d3      	str	r3, [r2, #28]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 8081 	beq.w	8004552 <HAL_RCC_OscConfig+0x4ea>
 8004450:	4b42      	ldr	r3, [pc, #264]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f003 030c 	and.w	r3, r3, #12
 8004458:	2b08      	cmp	r3, #8
 800445a:	d061      	beq.n	8004520 <HAL_RCC_OscConfig+0x4b8>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	2b02      	cmp	r3, #2
 8004462:	d146      	bne.n	80044f2 <HAL_RCC_OscConfig+0x48a>
 8004464:	4b3f      	ldr	r3, [pc, #252]	; (8004564 <HAL_RCC_OscConfig+0x4fc>)
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	f7fe fbd5 	bl	8002c18 <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x41c>
 8004472:	f7fe fbd1 	bl	8002c18 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x41c>
 8004480:	2303      	movs	r3, #3
 8004482:	e067      	b.n	8004554 <HAL_RCC_OscConfig+0x4ec>
 8004484:	4b35      	ldr	r3, [pc, #212]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1f0      	bne.n	8004472 <HAL_RCC_OscConfig+0x40a>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004498:	d108      	bne.n	80044ac <HAL_RCC_OscConfig+0x444>
 800449a:	4b30      	ldr	r3, [pc, #192]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	492d      	ldr	r1, [pc, #180]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	604b      	str	r3, [r1, #4]
 80044ac:	4b2b      	ldr	r3, [pc, #172]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a19      	ldr	r1, [r3, #32]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	430b      	orrs	r3, r1
 80044be:	4927      	ldr	r1, [pc, #156]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	604b      	str	r3, [r1, #4]
 80044c4:	4b27      	ldr	r3, [pc, #156]	; (8004564 <HAL_RCC_OscConfig+0x4fc>)
 80044c6:	2201      	movs	r2, #1
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	f7fe fba5 	bl	8002c18 <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]
 80044d0:	e008      	b.n	80044e4 <HAL_RCC_OscConfig+0x47c>
 80044d2:	f7fe fba1 	bl	8002c18 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x47c>
 80044e0:	2303      	movs	r3, #3
 80044e2:	e037      	b.n	8004554 <HAL_RCC_OscConfig+0x4ec>
 80044e4:	4b1d      	ldr	r3, [pc, #116]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0f0      	beq.n	80044d2 <HAL_RCC_OscConfig+0x46a>
 80044f0:	e02f      	b.n	8004552 <HAL_RCC_OscConfig+0x4ea>
 80044f2:	4b1c      	ldr	r3, [pc, #112]	; (8004564 <HAL_RCC_OscConfig+0x4fc>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	f7fe fb8e 	bl	8002c18 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x4aa>
 8004500:	f7fe fb8a 	bl	8002c18 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x4aa>
 800450e:	2303      	movs	r3, #3
 8004510:	e020      	b.n	8004554 <HAL_RCC_OscConfig+0x4ec>
 8004512:	4b12      	ldr	r3, [pc, #72]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f0      	bne.n	8004500 <HAL_RCC_OscConfig+0x498>
 800451e:	e018      	b.n	8004552 <HAL_RCC_OscConfig+0x4ea>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d101      	bne.n	800452c <HAL_RCC_OscConfig+0x4c4>
 8004528:	2301      	movs	r3, #1
 800452a:	e013      	b.n	8004554 <HAL_RCC_OscConfig+0x4ec>
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <HAL_RCC_OscConfig+0x4f4>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	429a      	cmp	r2, r3
 800453e:	d106      	bne.n	800454e <HAL_RCC_OscConfig+0x4e6>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	429a      	cmp	r2, r3
 800454c:	d001      	beq.n	8004552 <HAL_RCC_OscConfig+0x4ea>
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <HAL_RCC_OscConfig+0x4ec>
 8004552:	2300      	movs	r3, #0
 8004554:	4618      	mov	r0, r3
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40021000 	.word	0x40021000
 8004560:	40007000 	.word	0x40007000
 8004564:	42420060 	.word	0x42420060

08004568 <HAL_RCC_ClockConfig>:
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_RCC_ClockConfig+0x14>
 8004578:	2301      	movs	r3, #1
 800457a:	e0d0      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
 800457c:	4b6a      	ldr	r3, [pc, #424]	; (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d910      	bls.n	80045ac <HAL_RCC_ClockConfig+0x44>
 800458a:	4b67      	ldr	r3, [pc, #412]	; (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f023 0207 	bic.w	r2, r3, #7
 8004592:	4965      	ldr	r1, [pc, #404]	; (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	4313      	orrs	r3, r2
 8004598:	600b      	str	r3, [r1, #0]
 800459a:	4b63      	ldr	r3, [pc, #396]	; (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_ClockConfig+0x44>
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0b8      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d020      	beq.n	80045fa <HAL_RCC_ClockConfig+0x92>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x68>
 80045c4:	4b59      	ldr	r3, [pc, #356]	; (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	4a58      	ldr	r2, [pc, #352]	; (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80045ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045ce:	6053      	str	r3, [r2, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x80>
 80045dc:	4b53      	ldr	r3, [pc, #332]	; (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	4a52      	ldr	r2, [pc, #328]	; (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80045e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80045e6:	6053      	str	r3, [r2, #4]
 80045e8:	4b50      	ldr	r3, [pc, #320]	; (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	494d      	ldr	r1, [pc, #308]	; (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	604b      	str	r3, [r1, #4]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d040      	beq.n	8004688 <HAL_RCC_ClockConfig+0x120>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d107      	bne.n	800461e <HAL_RCC_ClockConfig+0xb6>
 800460e:	4b47      	ldr	r3, [pc, #284]	; (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d115      	bne.n	8004646 <HAL_RCC_ClockConfig+0xde>
 800461a:	2301      	movs	r3, #1
 800461c:	e07f      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d107      	bne.n	8004636 <HAL_RCC_ClockConfig+0xce>
 8004626:	4b41      	ldr	r3, [pc, #260]	; (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d109      	bne.n	8004646 <HAL_RCC_ClockConfig+0xde>
 8004632:	2301      	movs	r3, #1
 8004634:	e073      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
 8004636:	4b3d      	ldr	r3, [pc, #244]	; (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_RCC_ClockConfig+0xde>
 8004642:	2301      	movs	r3, #1
 8004644:	e06b      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
 8004646:	4b39      	ldr	r3, [pc, #228]	; (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f023 0203 	bic.w	r2, r3, #3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	4936      	ldr	r1, [pc, #216]	; (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]
 8004658:	f7fe fade 	bl	8002c18 <HAL_GetTick>
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	e00a      	b.n	8004676 <HAL_RCC_ClockConfig+0x10e>
 8004660:	f7fe fada 	bl	8002c18 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	; 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_ClockConfig+0x10e>
 8004672:	2303      	movs	r3, #3
 8004674:	e053      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
 8004676:	4b2d      	ldr	r3, [pc, #180]	; (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f003 020c 	and.w	r2, r3, #12
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	429a      	cmp	r2, r3
 8004686:	d1eb      	bne.n	8004660 <HAL_RCC_ClockConfig+0xf8>
 8004688:	4b27      	ldr	r3, [pc, #156]	; (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d210      	bcs.n	80046b8 <HAL_RCC_ClockConfig+0x150>
 8004696:	4b24      	ldr	r3, [pc, #144]	; (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f023 0207 	bic.w	r2, r3, #7
 800469e:	4922      	ldr	r1, [pc, #136]	; (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	600b      	str	r3, [r1, #0]
 80046a6:	4b20      	ldr	r3, [pc, #128]	; (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d001      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x150>
 80046b4:	2301      	movs	r3, #1
 80046b6:	e032      	b.n	800471e <HAL_RCC_ClockConfig+0x1b6>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d008      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x16e>
 80046c4:	4b19      	ldr	r3, [pc, #100]	; (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4916      	ldr	r1, [pc, #88]	; (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	604b      	str	r3, [r1, #4]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d009      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x18e>
 80046e2:	4b12      	ldr	r3, [pc, #72]	; (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	490e      	ldr	r1, [pc, #56]	; (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	604b      	str	r3, [r1, #4]
 80046f6:	f000 f821 	bl	800473c <HAL_RCC_GetSysClockFreq>
 80046fa:	4601      	mov	r1, r0
 80046fc:	4b0b      	ldr	r3, [pc, #44]	; (800472c <HAL_RCC_ClockConfig+0x1c4>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	091b      	lsrs	r3, r3, #4
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	4a0a      	ldr	r2, [pc, #40]	; (8004730 <HAL_RCC_ClockConfig+0x1c8>)
 8004708:	5cd3      	ldrb	r3, [r2, r3]
 800470a:	fa21 f303 	lsr.w	r3, r1, r3
 800470e:	4a09      	ldr	r2, [pc, #36]	; (8004734 <HAL_RCC_ClockConfig+0x1cc>)
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	4b09      	ldr	r3, [pc, #36]	; (8004738 <HAL_RCC_ClockConfig+0x1d0>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7fe fa3c 	bl	8002b94 <HAL_InitTick>
 800471c:	2300      	movs	r3, #0
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40022000 	.word	0x40022000
 800472c:	40021000 	.word	0x40021000
 8004730:	0800e3fc 	.word	0x0800e3fc
 8004734:	20000298 	.word	0x20000298
 8004738:	200002a4 	.word	0x200002a4

0800473c <HAL_RCC_GetSysClockFreq>:
 800473c:	b490      	push	{r4, r7}
 800473e:	b08a      	sub	sp, #40	; 0x28
 8004740:	af00      	add	r7, sp, #0
 8004742:	4b2a      	ldr	r3, [pc, #168]	; (80047ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8004744:	1d3c      	adds	r4, r7, #4
 8004746:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004748:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800474c:	4b28      	ldr	r3, [pc, #160]	; (80047f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	803b      	strh	r3, [r7, #0]
 8004752:	2300      	movs	r3, #0
 8004754:	61fb      	str	r3, [r7, #28]
 8004756:	2300      	movs	r3, #0
 8004758:	61bb      	str	r3, [r7, #24]
 800475a:	2300      	movs	r3, #0
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
 800475e:	2300      	movs	r3, #0
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	2300      	movs	r3, #0
 8004764:	623b      	str	r3, [r7, #32]
 8004766:	4b23      	ldr	r3, [pc, #140]	; (80047f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	61fb      	str	r3, [r7, #28]
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	f003 030c 	and.w	r3, r3, #12
 8004772:	2b04      	cmp	r3, #4
 8004774:	d002      	beq.n	800477c <HAL_RCC_GetSysClockFreq+0x40>
 8004776:	2b08      	cmp	r3, #8
 8004778:	d003      	beq.n	8004782 <HAL_RCC_GetSysClockFreq+0x46>
 800477a:	e02d      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0x9c>
 800477c:	4b1e      	ldr	r3, [pc, #120]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800477e:	623b      	str	r3, [r7, #32]
 8004780:	e02d      	b.n	80047de <HAL_RCC_GetSysClockFreq+0xa2>
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	0c9b      	lsrs	r3, r3, #18
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800478e:	4413      	add	r3, r2
 8004790:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d013      	beq.n	80047c8 <HAL_RCC_GetSysClockFreq+0x8c>
 80047a0:	4b14      	ldr	r3, [pc, #80]	; (80047f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	0c5b      	lsrs	r3, r3, #17
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80047ae:	4413      	add	r3, r2
 80047b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80047b4:	61bb      	str	r3, [r7, #24]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	4a0f      	ldr	r2, [pc, #60]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047ba:	fb02 f203 	mul.w	r2, r2, r3
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
 80047c6:	e004      	b.n	80047d2 <HAL_RCC_GetSysClockFreq+0x96>
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	4a0c      	ldr	r2, [pc, #48]	; (80047fc <HAL_RCC_GetSysClockFreq+0xc0>)
 80047cc:	fb02 f303 	mul.w	r3, r2, r3
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	623b      	str	r3, [r7, #32]
 80047d6:	e002      	b.n	80047de <HAL_RCC_GetSysClockFreq+0xa2>
 80047d8:	4b07      	ldr	r3, [pc, #28]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047da:	623b      	str	r3, [r7, #32]
 80047dc:	bf00      	nop
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	4618      	mov	r0, r3
 80047e2:	3728      	adds	r7, #40	; 0x28
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bc90      	pop	{r4, r7}
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	08004900 	.word	0x08004900
 80047f0:	08004910 	.word	0x08004910
 80047f4:	40021000 	.word	0x40021000
 80047f8:	007a1200 	.word	0x007a1200
 80047fc:	003d0900 	.word	0x003d0900

08004800 <HAL_RCC_GetHCLKFreq>:
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
 8004804:	4b02      	ldr	r3, [pc, #8]	; (8004810 <HAL_RCC_GetHCLKFreq+0x10>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr
 8004810:	20000298 	.word	0x20000298

08004814 <HAL_RCC_GetPCLK1Freq>:
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
 8004818:	f7ff fff2 	bl	8004800 <HAL_RCC_GetHCLKFreq>
 800481c:	4601      	mov	r1, r0
 800481e:	4b05      	ldr	r3, [pc, #20]	; (8004834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	0a1b      	lsrs	r3, r3, #8
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	4a03      	ldr	r2, [pc, #12]	; (8004838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800482a:	5cd3      	ldrb	r3, [r2, r3]
 800482c:	fa21 f303 	lsr.w	r3, r1, r3
 8004830:	4618      	mov	r0, r3
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40021000 	.word	0x40021000
 8004838:	0800e40c 	.word	0x0800e40c

0800483c <RCC_Delay>:
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	4b0a      	ldr	r3, [pc, #40]	; (8004870 <RCC_Delay+0x34>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a0a      	ldr	r2, [pc, #40]	; (8004874 <RCC_Delay+0x38>)
 800484a:	fba2 2303 	umull	r2, r3, r2, r3
 800484e:	0a5b      	lsrs	r3, r3, #9
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	fb02 f303 	mul.w	r3, r2, r3
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	bf00      	nop
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	1e5a      	subs	r2, r3, #1
 800485e:	60fa      	str	r2, [r7, #12]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1f9      	bne.n	8004858 <RCC_Delay+0x1c>
 8004864:	bf00      	nop
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	bc80      	pop	{r7}
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	20000298 	.word	0x20000298
 8004874:	10624dd3 	.word	0x10624dd3

08004878 <__libc_init_array>:
 8004878:	b570      	push	{r4, r5, r6, lr}
 800487a:	2500      	movs	r5, #0
 800487c:	4e0c      	ldr	r6, [pc, #48]	; (80048b0 <__libc_init_array+0x38>)
 800487e:	4c0d      	ldr	r4, [pc, #52]	; (80048b4 <__libc_init_array+0x3c>)
 8004880:	1ba4      	subs	r4, r4, r6
 8004882:	10a4      	asrs	r4, r4, #2
 8004884:	42a5      	cmp	r5, r4
 8004886:	d109      	bne.n	800489c <__libc_init_array+0x24>
 8004888:	f000 f82e 	bl	80048e8 <_init>
 800488c:	2500      	movs	r5, #0
 800488e:	4e0a      	ldr	r6, [pc, #40]	; (80048b8 <__libc_init_array+0x40>)
 8004890:	4c0a      	ldr	r4, [pc, #40]	; (80048bc <__libc_init_array+0x44>)
 8004892:	1ba4      	subs	r4, r4, r6
 8004894:	10a4      	asrs	r4, r4, #2
 8004896:	42a5      	cmp	r5, r4
 8004898:	d105      	bne.n	80048a6 <__libc_init_array+0x2e>
 800489a:	bd70      	pop	{r4, r5, r6, pc}
 800489c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048a0:	4798      	blx	r3
 80048a2:	3501      	adds	r5, #1
 80048a4:	e7ee      	b.n	8004884 <__libc_init_array+0xc>
 80048a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048aa:	4798      	blx	r3
 80048ac:	3501      	adds	r5, #1
 80048ae:	e7f2      	b.n	8004896 <__libc_init_array+0x1e>
 80048b0:	0800ec74 	.word	0x0800ec74
 80048b4:	0800ec74 	.word	0x0800ec74
 80048b8:	0800ec74 	.word	0x0800ec74
 80048bc:	0800ec7c 	.word	0x0800ec7c

080048c0 <memcpy>:
 80048c0:	b510      	push	{r4, lr}
 80048c2:	1e43      	subs	r3, r0, #1
 80048c4:	440a      	add	r2, r1
 80048c6:	4291      	cmp	r1, r2
 80048c8:	d100      	bne.n	80048cc <memcpy+0xc>
 80048ca:	bd10      	pop	{r4, pc}
 80048cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048d4:	e7f7      	b.n	80048c6 <memcpy+0x6>

080048d6 <memset>:
 80048d6:	4603      	mov	r3, r0
 80048d8:	4402      	add	r2, r0
 80048da:	4293      	cmp	r3, r2
 80048dc:	d100      	bne.n	80048e0 <memset+0xa>
 80048de:	4770      	bx	lr
 80048e0:	f803 1b01 	strb.w	r1, [r3], #1
 80048e4:	e7f9      	b.n	80048da <memset+0x4>
	...

080048e8 <_init>:
 80048e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ea:	bf00      	nop
 80048ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ee:	bc08      	pop	{r3}
 80048f0:	469e      	mov	lr, r3
 80048f2:	4770      	bx	lr

080048f4 <_fini>:
 80048f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f6:	bf00      	nop
 80048f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048fa:	bc08      	pop	{r3}
 80048fc:	469e      	mov	lr, r3
 80048fe:	4770      	bx	lr
