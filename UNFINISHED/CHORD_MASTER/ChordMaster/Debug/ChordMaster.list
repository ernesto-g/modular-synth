
ChordMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004604  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a374  08004710  08004710  00014710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea84  0800ea84  000202ac  2**0
                  CONTENTS
  4 .ARM          00000000  0800ea84  0800ea84  000202ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ea84  0800ea84  000202ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ea84  0800ea84  0001ea84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea8c  0800ea8c  0001ea8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ac  20000000  0800ea90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004560  200002ac  0800ed3c  000202ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000480c  0800ed3c  0002480c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   000269ae  00000000  00000000  000202d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004dd4  00000000  00000000  00046c83  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001072e  00000000  00000000  0004ba57  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000c28  00000000  00000000  0005c188  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00003a10  00000000  00000000  0005cdb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001880a  00000000  00000000  000607c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000ef11  00000000  00000000  00078fca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000792d8  00000000  00000000  00087edb  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001011b3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b5c  00000000  00000000  00101230  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002ac 	.word	0x200002ac
 8000128:	00000000 	.word	0x00000000
 800012c:	080046f8 	.word	0x080046f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002b0 	.word	0x200002b0
 8000148:	080046f8 	.word	0x080046f8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <_ZN6braids16AnalogOscillator21ComputePhaseIncrementEs>:
 8000160:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000164:	4299      	cmp	r1, r3
 8000166:	bfa8      	it	ge
 8000168:	4619      	movge	r1, r3
 800016a:	2000      	movs	r0, #0
 800016c:	b510      	push	{r4, lr}
 800016e:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
 8000172:	f511 61c0 	adds.w	r1, r1, #1536	; 0x600
 8000176:	f100 0001 	add.w	r0, r0, #1
 800017a:	d4fa      	bmi.n	8000172 <_ZN6braids16AnalogOscillator21ComputePhaseIncrementEs+0x12>
 800017c:	4c07      	ldr	r4, [pc, #28]	; (800019c <_ZN6braids16AnalogOscillator21ComputePhaseIncrementEs+0x3c>)
 800017e:	110a      	asrs	r2, r1, #4
 8000180:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 8000184:	3201      	adds	r2, #1
 8000186:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800018a:	f001 010f 	and.w	r1, r1, #15
 800018e:	1ad2      	subs	r2, r2, r3
 8000190:	4351      	muls	r1, r2
 8000192:	eb03 1121 	add.w	r1, r3, r1, asr #4
 8000196:	fa21 f000 	lsr.w	r0, r1, r0
 800019a:	bd10      	pop	{r4, pc}
 800019c:	08004f54 	.word	0x08004f54

080001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>:
 80001a0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001a4:	4604      	mov	r4, r0
 80001a6:	469a      	mov	sl, r3
 80001a8:	7f00      	ldrb	r0, [r0, #28]
 80001aa:	4b20      	ldr	r3, [pc, #128]	; (800022c <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x8c>)
 80001ac:	4691      	mov	r9, r2
 80001ae:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]
 80001b2:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 80001b6:	7f63      	ldrb	r3, [r4, #29]
 80001b8:	4688      	mov	r8, r1
 80001ba:	4283      	cmp	r3, r0
 80001bc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80001c0:	6857      	ldr	r7, [r2, #4]
 80001c2:	d00f      	beq.n	80001e4 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x44>
 80001c4:	2100      	movs	r1, #0
 80001c6:	2301      	movs	r3, #1
 80001c8:	e9c4 1300 	strd	r1, r3, [r4]
 80001cc:	f24c 0301 	movw	r3, #49153	; 0xc001
 80001d0:	82a3      	strh	r3, [r4, #20]
 80001d2:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80001d6:	7321      	strb	r1, [r4, #12]
 80001d8:	8221      	strh	r1, [r4, #16]
 80001da:	81e1      	strh	r1, [r4, #14]
 80001dc:	8261      	strh	r1, [r4, #18]
 80001de:	82e3      	strh	r3, [r4, #22]
 80001e0:	61a1      	str	r1, [r4, #24]
 80001e2:	7760      	strb	r0, [r4, #29]
 80001e4:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 80001e8:	4620      	mov	r0, r4
 80001ea:	4631      	mov	r1, r6
 80001ec:	f7ff ffb8 	bl	8000160 <_ZN6braids16AnalogOscillator21ComputePhaseIncrementEs>
 80001f0:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
 80001f4:	6060      	str	r0, [r4, #4]
 80001f6:	dd14      	ble.n	8000222 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x82>
 80001f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80001fc:	82e3      	strh	r3, [r4, #22]
 80001fe:	107b      	asrs	r3, r7, #1
 8000200:	07fa      	lsls	r2, r7, #31
 8000202:	eb04 0003 	add.w	r0, r4, r3
 8000206:	bf48      	it	mi
 8000208:	58e3      	ldrmi	r3, [r4, r3]
 800020a:	464a      	mov	r2, r9
 800020c:	bf48      	it	mi
 800020e:	595d      	ldrmi	r5, [r3, r5]
 8000210:	4641      	mov	r1, r8
 8000212:	4653      	mov	r3, sl
 8000214:	46ac      	mov	ip, r5
 8000216:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800021a:	b001      	add	sp, #4
 800021c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000220:	4760      	bx	ip
 8000222:	2e00      	cmp	r6, #0
 8000224:	daeb      	bge.n	80001fe <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x5e>
 8000226:	2300      	movs	r3, #0
 8000228:	e7e8      	b.n	80001fc <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x5c>
 800022a:	bf00      	nop
 800022c:	200002c8 	.word	0x200002c8

08000230 <_ZN6braids3Svf4InitEv>:
  ~Svf() { }
  
  void Init() {
    lp_ = 0;
    bp_ = 0;
    frequency_ = 33 << 7;
 8000230:	f44f 5284 	mov.w	r2, #4224	; 0x1080
 8000234:	8042      	strh	r2, [r0, #2]
    resonance_ = 16384;
 8000236:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    lp_ = 0;
 800023a:	2300      	movs	r3, #0
    resonance_ = 16384;
 800023c:	8082      	strh	r2, [r0, #4]
    dirty_ = true;
 800023e:	2201      	movs	r2, #1
    bp_ = 0;
 8000240:	e9c0 3305 	strd	r3, r3, [r0, #20]
    dirty_ = true;
 8000244:	7002      	strb	r2, [r0, #0]
    punch_ = 0;
 8000246:	6083      	str	r3, [r0, #8]
    mode_ = SVF_MODE_BP;
 8000248:	7702      	strb	r2, [r0, #28]
  }
 800024a:	4770      	bx	lr

0800024c <_ZN6stmlib6Random7GetWordEv>:
  static inline void Seed(uint32_t seed) {
    rng_state_ = seed;
  }

  static inline uint32_t GetWord() {
    rng_state_ = rng_state_ * 1664525L + 1013904223L;
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <_ZN6stmlib6Random7GetWordEv+0x10>)
 800024e:	4904      	ldr	r1, [pc, #16]	; (8000260 <_ZN6stmlib6Random7GetWordEv+0x14>)
 8000250:	6818      	ldr	r0, [r3, #0]
 8000252:	4a04      	ldr	r2, [pc, #16]	; (8000264 <_ZN6stmlib6Random7GetWordEv+0x18>)
 8000254:	fb01 2000 	mla	r0, r1, r0, r2
 8000258:	6018      	str	r0, [r3, #0]
    return state();
  }
 800025a:	4770      	bx	lr
 800025c:	200002a0 	.word	0x200002a0
 8000260:	0019660d 	.word	0x0019660d
 8000264:	3c6ef35f 	.word	0x3c6ef35f

08000268 <_ZN6stmlib6Random9GetSampleEv>:
  
  static inline int16_t GetSample() {
 8000268:	b508      	push	{r3, lr}
    return static_cast<int16_t>(GetWord() >> 16);
 800026a:	f7ff ffef 	bl	800024c <_ZN6stmlib6Random7GetWordEv>
  }
 800026e:	1400      	asrs	r0, r0, #16
 8000270:	bd08      	pop	{r3, pc}
	...

08000274 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj>:
}

void DigitalOscillator::RenderQuestionMark(
    const uint8_t* sync,
    int16_t* buffer,
    size_t size) {
 8000274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000278:	4690      	mov	r8, r2
  ClockedNoiseState* state = &state_.clk;
  
  if (strike_) {
 800027a:	7f02      	ldrb	r2, [r0, #28]
    size_t size) {
 800027c:	4604      	mov	r4, r0
 800027e:	4699      	mov	r9, r3
  if (strike_) {
 8000280:	b15a      	cbz	r2, 800029a <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x26>
    state->rng_state = 0;
    state->cycle_phase = 0;
    state->sample = 10;
 8000282:	210a      	movs	r1, #10
 8000284:	8601      	strh	r1, [r0, #48]	; 0x30
    state->cycle_phase_increment = -1;
 8000286:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    state->rng_state = 0;
 800028a:	2200      	movs	r2, #0
    state->cycle_phase_increment = -1;
 800028c:	6241      	str	r1, [r0, #36]	; 0x24
    state->seed = 32767;
 800028e:	f647 71ff 	movw	r1, #32767	; 0x7fff
    state->rng_state = 0;
 8000292:	6282      	str	r2, [r0, #40]	; 0x28
    state->cycle_phase = 0;
 8000294:	6202      	str	r2, [r0, #32]
    state->seed = 32767;
 8000296:	62c1      	str	r1, [r0, #44]	; 0x2c
    strike_ = false;
 8000298:	7702      	strb	r2, [r0, #28]
  }
  
  uint32_t phase = phase_;
  uint32_t increment = phase_increment_;
  uint32_t dit_duration = 3600 + ((32767 - parameter_[0]) >> 2);
 800029a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
  int32_t noise_threshold = 1024 + (parameter_[1] >> 3);
 800029e:	f9b4 700e 	ldrsh.w	r7, [r4, #14]
  uint32_t dit_duration = 3600 + ((32767 - parameter_[0]) >> 2);
 80002a2:	f5c6 46ff 	rsb	r6, r6, #32640	; 0x7f80
 80002a6:	367f      	adds	r6, #127	; 0x7f
 80002a8:	10b6      	asrs	r6, r6, #2
  int32_t noise_threshold = 1024 + (parameter_[1] >> 3);
 80002aa:	10ff      	asrs	r7, r7, #3
 80002ac:	f8df a138 	ldr.w	sl, [pc, #312]	; 80003e8 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x174>
  uint32_t increment = phase_increment_;
 80002b0:	e9d4 b300 	ldrd	fp, r3, [r4]
  uint32_t dit_duration = 3600 + ((32767 - parameter_[0]) >> 2);
 80002b4:	f506 6661 	add.w	r6, r6, #3600	; 0xe10
  uint32_t increment = phase_increment_;
 80002b8:	9300      	str	r3, [sp, #0]
  int32_t noise_threshold = 1024 + (parameter_[1] >> 3);
 80002ba:	f507 6780 	add.w	r7, r7, #1024	; 0x400
  while (size--) {
 80002be:	f119 39ff 	adds.w	r9, r9, #4294967295	; 0xffffffff
 80002c2:	f0c0 8085 	bcc.w	80003d0 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x15c>
    phase += increment;
 80002c6:	9b00      	ldr	r3, [sp, #0]
    int32_t sample;
    if (state->rng_state) {
 80002c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    phase += increment;
 80002ca:	449b      	add	fp, r3
    if (state->rng_state) {
 80002cc:	2800      	cmp	r0, #0
 80002ce:	d07b      	beq.n	80003c8 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x154>
  return (a * (65535 - balance) + b * balance) >> 16;
}

inline int16_t Interpolate824(const int16_t* table, uint32_t phase) {
  int32_t a = table[phase >> 24];
  int32_t b = table[(phase >> 24) + 1];
 80002d0:	4b42      	ldr	r3, [pc, #264]	; (80003dc <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x168>)
  int32_t a = table[phase >> 24];
 80002d2:	ea4f 621b 	mov.w	r2, fp, lsr #24
 80002d6:	f93a 5012 	ldrsh.w	r5, [sl, r2, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 80002da:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 80002de:	eba2 0c05 	sub.w	ip, r2, r5
 80002e2:	f3cb 220f 	ubfx	r2, fp, #8, #16
 80002e6:	fb02 f20c 	mul.w	r2, r2, ip
 80002ea:	eb05 4522 	add.w	r5, r5, r2, asr #16
      sample = (Interpolate824(wav_sine, phase) * 3) >> 2;
 80002ee:	b22d      	sxth	r5, r5
 80002f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80002f4:	10ad      	asrs	r5, r5, #2
    } else {
      sample = 0;
    }
    if (++state->cycle_phase > dit_duration) {
 80002f6:	6a22      	ldr	r2, [r4, #32]
 80002f8:	3201      	adds	r2, #1
 80002fa:	42b2      	cmp	r2, r6
 80002fc:	6222      	str	r2, [r4, #32]
 80002fe:	d92a      	bls.n	8000356 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0xe2>
      --state->sample;
 8000300:	f8b4 c030 	ldrh.w	ip, [r4, #48]	; 0x30
 8000304:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8000308:	fa0f f38c 	sxth.w	r3, ip
 800030c:	8623      	strh	r3, [r4, #48]	; 0x30
      if (state->sample == 0) {
 800030e:	bb03      	cbnz	r3, 8000352 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0xde>
        ++state->cycle_phase_increment;
        state->rng_state = !state->rng_state;
 8000310:	fab0 f080 	clz	r0, r0
        ++state->cycle_phase_increment;
 8000314:	6a62      	ldr	r2, [r4, #36]	; 0x24
        state->rng_state = !state->rng_state;
 8000316:	0940      	lsrs	r0, r0, #5
        ++state->cycle_phase_increment;
 8000318:	3201      	adds	r2, #1

        size_t address = state->cycle_phase_increment >> 2;
        size_t shift = (state->cycle_phase_increment & 0x3) << 1;
        state->sample = (2 << ((wt_code[address] >> shift) & 3)) - 1;
 800031a:	4931      	ldr	r1, [pc, #196]	; (80003e0 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x16c>)
        ++state->cycle_phase_increment;
 800031c:	6262      	str	r2, [r4, #36]	; 0x24
        state->rng_state = !state->rng_state;
 800031e:	62a0      	str	r0, [r4, #40]	; 0x28
        size_t address = state->cycle_phase_increment >> 2;
 8000320:	0890      	lsrs	r0, r2, #2
        state->sample = (2 << ((wt_code[address] >> shift) & 3)) - 1;
 8000322:	5c08      	ldrb	r0, [r1, r0]
        size_t shift = (state->cycle_phase_increment & 0x3) << 1;
 8000324:	0052      	lsls	r2, r2, #1
 8000326:	f002 0206 	and.w	r2, r2, #6
        state->sample = (2 << ((wt_code[address] >> shift) & 3)) - 1;
 800032a:	fa40 f202 	asr.w	r2, r0, r2
 800032e:	f002 0003 	and.w	r0, r2, #3
 8000332:	2202      	movs	r2, #2
 8000334:	4082      	lsls	r2, r0
 8000336:	3a01      	subs	r2, #1
 8000338:	b292      	uxth	r2, r2
        if (state->sample == 15) {
 800033a:	2a0f      	cmp	r2, #15
          state->sample = 100;
 800033c:	bf02      	ittt	eq
 800033e:	2264      	moveq	r2, #100	; 0x64
 8000340:	8622      	strheq	r2, [r4, #48]	; 0x30
          state->rng_state = 0;
          state->cycle_phase_increment = - 1;
 8000342:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
        }
        phase = 1L << 30;
 8000346:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
        state->sample = (2 << ((wt_code[address] >> shift) & 3)) - 1;
 800034a:	bf12      	itee	ne
 800034c:	8622      	strhne	r2, [r4, #48]	; 0x30
          state->rng_state = 0;
 800034e:	62a3      	streq	r3, [r4, #40]	; 0x28
          state->cycle_phase_increment = - 1;
 8000350:	6262      	streq	r2, [r4, #36]	; 0x24
      }
      state->cycle_phase = 0;
 8000352:	2200      	movs	r2, #0
 8000354:	6222      	str	r2, [r4, #32]
    }
    state->seed += Random::GetSample() >> 2;
 8000356:	f7ff ff87 	bl	8000268 <_ZN6stmlib6Random9GetSampleEv>
 800035a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800035c:	eb02 02a0 	add.w	r2, r2, r0, asr #2
 8000360:	62e2      	str	r2, [r4, #44]	; 0x2c
    int32_t noise_intensity = state->seed >> 8;
 8000362:	1212      	asrs	r2, r2, #8
 8000364:	2a00      	cmp	r2, #0
 8000366:	bfb8      	it	lt
 8000368:	4252      	neglt	r2, r2
    if (noise_intensity < 0) {
      noise_intensity = -noise_intensity;
    }
    if (noise_intensity < noise_threshold) {
 800036a:	4297      	cmp	r7, r2
 800036c:	dc2e      	bgt.n	80003cc <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x158>
 800036e:	f5b2 5f7a 	cmp.w	r2, #16000	; 0x3e80
 8000372:	bfa8      	it	ge
 8000374:	f44f 527a 	movge.w	r2, #16000	; 0x3e80
 8000378:	9201      	str	r2, [sp, #4]
      noise_intensity = noise_threshold;
    }
    if (noise_intensity > 16000) {
      noise_intensity = 16000;
    }
    int32_t noise = (Random::GetSample() * noise_intensity >> 15);
 800037a:	f7ff ff75 	bl	8000268 <_ZN6stmlib6Random9GetSampleEv>
 800037e:	f647 7eff 	movw	lr, #32767	; 0x7fff
 8000382:	9a01      	ldr	r2, [sp, #4]
    noise = noise * wav_sine[(phase >> 22) & 0xff] >> 15;
 8000384:	f3cb 5c87 	ubfx	ip, fp, #22, #8
    int32_t noise = (Random::GetSample() * noise_intensity >> 15);
 8000388:	4342      	muls	r2, r0
    noise = noise * wav_sine[(phase >> 22) & 0xff] >> 15;
 800038a:	f93a c01c 	ldrsh.w	ip, [sl, ip, lsl #1]
    int32_t noise = (Random::GetSample() * noise_intensity >> 15);
 800038e:	13d2      	asrs	r2, r2, #15
    noise = noise * wav_sine[(phase >> 22) & 0xff] >> 15;
 8000390:	fb02 f20c 	mul.w	r2, r2, ip
    sample += noise;
 8000394:	eb05 35e2 	add.w	r5, r5, r2, asr #15
 8000398:	4575      	cmp	r5, lr
 800039a:	bfa8      	it	ge
 800039c:	4675      	movge	r5, lr
 800039e:	4911      	ldr	r1, [pc, #68]	; (80003e4 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x170>)
    CLIP(sample);
    int32_t distorted = sample * sample >> 14;
    sample += distorted * parameter_[1] >> 15;
 80003a0:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 80003a4:	428d      	cmp	r5, r1
 80003a6:	bfb8      	it	lt
 80003a8:	460d      	movlt	r5, r1
    int32_t distorted = sample * sample >> 14;
 80003aa:	fb05 f005 	mul.w	r0, r5, r5
 80003ae:	1380      	asrs	r0, r0, #14
    sample += distorted * parameter_[1] >> 15;
 80003b0:	4342      	muls	r2, r0
 80003b2:	eb05 35e2 	add.w	r5, r5, r2, asr #15
 80003b6:	4575      	cmp	r5, lr
 80003b8:	bfa8      	it	ge
 80003ba:	4675      	movge	r5, lr
    CLIP(sample);
    *buffer++ = sample;
 80003bc:	428d      	cmp	r5, r1
 80003be:	bfb8      	it	lt
 80003c0:	460d      	movlt	r5, r1
 80003c2:	f828 5b02 	strh.w	r5, [r8], #2
  while (size--) {
 80003c6:	e77a      	b.n	80002be <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x4a>
      sample = 0;
 80003c8:	4605      	mov	r5, r0
 80003ca:	e794      	b.n	80002f6 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x82>
 80003cc:	463a      	mov	r2, r7
 80003ce:	e7d3      	b.n	8000378 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x104>
  }
  phase_ = phase;
 80003d0:	f8c4 b000 	str.w	fp, [r4]
}
 80003d4:	b003      	add	sp, #12
 80003d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003da:	bf00      	nop
 80003dc:	08005806 	.word	0x08005806
 80003e0:	080053dc 	.word	0x080053dc
 80003e4:	ffff8001 	.word	0xffff8001
 80003e8:	08005804 	.word	0x08005804

080003ec <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>:
  int32_t ref_pitch = midi_pitch;
 80003ec:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80003f0:	4299      	cmp	r1, r3
 80003f2:	bfa8      	it	ge
 80003f4:	4619      	movge	r1, r3
  size_t num_shifts = 0;
 80003f6:	2000      	movs	r0, #0
uint32_t DigitalOscillator::ComputePhaseIncrement(int16_t midi_pitch) {
 80003f8:	b510      	push	{r4, lr}
  ref_pitch -= kPitchTableStart;
 80003fa:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
  while (ref_pitch < 0) {
 80003fe:	f511 61c0 	adds.w	r1, r1, #1536	; 0x600
    ++num_shifts;
 8000402:	f100 0001 	add.w	r0, r0, #1
  while (ref_pitch < 0) {
 8000406:	d4fa      	bmi.n	80003fe <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs+0x12>
  uint32_t a = lut_oscillator_increments[ref_pitch >> 4];
 8000408:	4c07      	ldr	r4, [pc, #28]	; (8000428 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs+0x3c>)
 800040a:	110a      	asrs	r2, r1, #4
 800040c:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
  uint32_t b = lut_oscillator_increments[(ref_pitch >> 4) + 1];
 8000410:	3201      	adds	r2, #1
      (static_cast<int32_t>(b - a) * (ref_pitch & 0xf) >> 4);
 8000412:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8000416:	f001 010f 	and.w	r1, r1, #15
 800041a:	1ad2      	subs	r2, r2, r3
 800041c:	4351      	muls	r1, r2
  uint32_t phase_increment = a + \
 800041e:	eb03 1121 	add.w	r1, r3, r1, asr #4
}
 8000422:	fa21 f000 	lsr.w	r0, r1, r0
 8000426:	bd10      	pop	{r4, pc}
 8000428:	08004f54 	.word	0x08004f54

0800042c <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj>:
    size_t size) {
 800042c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000430:	b08f      	sub	sp, #60	; 0x3c
 8000432:	9304      	str	r3, [sp, #16]
  if (strike_) {
 8000434:	7f03      	ldrb	r3, [r0, #28]
    size_t size) {
 8000436:	4604      	mov	r4, r0
 8000438:	4615      	mov	r5, r2
  if (strike_) {
 800043a:	b15b      	cbz	r3, 8000454 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0x28>
 800043c:	f100 0620 	add.w	r6, r0, #32
 8000440:	f100 0730 	add.w	r7, r0, #48	; 0x30
      state_.saw.phase[i] = Random::GetWord();
 8000444:	f7ff ff02 	bl	800024c <_ZN6stmlib6Random7GetWordEv>
 8000448:	f846 0b04 	str.w	r0, [r6], #4
    for (size_t i = 0; i < 4; ++i) {
 800044c:	42b7      	cmp	r7, r6
 800044e:	d1f9      	bne.n	8000444 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0x18>
    strike_ = false;
 8000450:	2300      	movs	r3, #0
 8000452:	7723      	strb	r3, [r4, #28]
  for (size_t i = 0; i < 3; ++i) {
 8000454:	f04f 0800 	mov.w	r8, #0
  phase_1 = state_.saw.phase[1];
 8000458:	e9d4 6708 	ldrd	r6, r7, [r4, #32]
  phase_increment_0 = phase_increment_;
 800045c:	6863      	ldr	r3, [r4, #4]
    phase_increment[i] = ComputePhaseIncrement(pitch_ + detune);
 800045e:	f8b4 b018 	ldrh.w	fp, [r4, #24]
  phase_increment_0 = phase_increment_;
 8000462:	9308      	str	r3, [sp, #32]
  phase_2 = state_.saw.phase[2];
 8000464:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000466:	f504 79ca 	add.w	r9, r4, #404	; 0x194
 800046a:	9301      	str	r3, [sp, #4]
  phase_3 = state_.saw.phase[3];
 800046c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    phase_increment[i] = ComputePhaseIncrement(pitch_ + detune);
 800046e:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
  phase_3 = state_.saw.phase[3];
 8000472:	9300      	str	r3, [sp, #0]
    int16_t detune = chordsIntervals[i]; //chords[chord_integral][i];
 8000474:	f939 1b02 	ldrsh.w	r1, [r9], #2
    phase_increment[i] = ComputePhaseIncrement(pitch_ + detune);
 8000478:	4620      	mov	r0, r4
 800047a:	4459      	add	r1, fp
 800047c:	b209      	sxth	r1, r1
 800047e:	f7ff ffb5 	bl	80003ec <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
 8000482:	f84a 0028 	str.w	r0, [sl, r8, lsl #2]
  for (size_t i = 0; i < 3; ++i) {
 8000486:	f108 0801 	add.w	r8, r8, #1
 800048a:	f1b8 0f03 	cmp.w	r8, #3
 800048e:	d1f1      	bne.n	8000474 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0x48>
  const uint8_t* wave_1 = wt_waves + mini_wave_line[parameter_[0] >> 10] * 129;
 8000490:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8000494:	48d3      	ldr	r0, [pc, #844]	; (80007e4 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0x3b8>)
 8000496:	128b      	asrs	r3, r1, #10
  uint16_t wave_xfade = parameter_[0] << 6;
 8000498:	0189      	lsls	r1, r1, #6
 800049a:	fa1f fb81 	uxth.w	fp, r1
    phase_1 += phase_increment[0];
 800049e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  const uint8_t* wave_1 = wt_waves + mini_wave_line[parameter_[0] >> 10] * 129;
 80004a0:	5cc2      	ldrb	r2, [r0, r3]
    phase_1 += phase_increment[0];
 80004a2:	9105      	str	r1, [sp, #20]
  const uint8_t* wave_2 = wt_waves + mini_wave_line[(parameter_[0] >> 10) + 1] * 129;
 80004a4:	4418      	add	r0, r3
    phase_2 += phase_increment[1];
 80004a6:	990c      	ldr	r1, [sp, #48]	; 0x30
  const uint8_t* wave_2 = wt_waves + mini_wave_line[(parameter_[0] >> 10) + 1] * 129;
 80004a8:	7843      	ldrb	r3, [r0, #1]
  const uint8_t* wave_1 = wt_waves + mini_wave_line[parameter_[0] >> 10] * 129;
 80004aa:	f8df c33c 	ldr.w	ip, [pc, #828]	; 80007e8 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0x3bc>
    phase_2 += phase_increment[1];
 80004ae:	9106      	str	r1, [sp, #24]
    phase_3 += phase_increment[2];
 80004b0:	990d      	ldr	r1, [sp, #52]	; 0x34
  const uint8_t* wave_1 = wt_waves + mini_wave_line[parameter_[0] >> 10] * 129;
 80004b2:	eb02 12c2 	add.w	r2, r2, r2, lsl #7
  const uint8_t* wave_2 = wt_waves + mini_wave_line[(parameter_[0] >> 10) + 1] * 129;
 80004b6:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
  const uint8_t* wave_1 = wt_waves + mini_wave_line[parameter_[0] >> 10] * 129;
 80004ba:	4462      	add	r2, ip
  const uint8_t* wave_2 = wt_waves + mini_wave_line[(parameter_[0] >> 10) + 1] * 129;
 80004bc:	4463      	add	r3, ip
    phase_3 += phase_increment[2];
 80004be:	9107      	str	r1, [sp, #28]
 80004c0:	9502      	str	r5, [sp, #8]
 80004c2:	9902      	ldr	r1, [sp, #8]
 80004c4:	3104      	adds	r1, #4
 80004c6:	9102      	str	r1, [sp, #8]
  while (size) {
 80004c8:	9904      	ldr	r1, [sp, #16]
 80004ca:	2900      	cmp	r1, #0
 80004cc:	f000 8181 	beq.w	80007d2 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0x3a6>
    phase_0 += phase_increment_0;
 80004d0:	9908      	ldr	r1, [sp, #32]
 80004d2:	9806      	ldr	r0, [sp, #24]
 80004d4:	440e      	add	r6, r1
 80004d6:	9905      	ldr	r1, [sp, #20]
  uint32_t b = table[(phase >> 24) + 1];
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
}

inline int16_t Interpolate824(const uint8_t* table, uint32_t phase) {
  int32_t a = table[phase >> 24];
 80004d8:	0e75      	lsrs	r5, r6, #25
 80004da:	4439      	add	r1, r7
 80004dc:	9103      	str	r1, [sp, #12]
 80004de:	9901      	ldr	r1, [sp, #4]
  int32_t b = table[(phase >> 24) + 1];
  return (a << 8) + \
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80004e0:	f3c6 0957 	ubfx	r9, r6, #1, #24
 80004e4:	4401      	add	r1, r0
 80004e6:	9101      	str	r1, [sp, #4]
 80004e8:	9807      	ldr	r0, [sp, #28]
 80004ea:	9900      	ldr	r1, [sp, #0]
 80004ec:	4401      	add	r1, r0
 80004ee:	468a      	mov	sl, r1
  int32_t b = table[(phase >> 24) + 1];
 80004f0:	1c69      	adds	r1, r5, #1
  int32_t a = table[phase >> 24];
 80004f2:	5d50      	ldrb	r0, [r2, r5]
  int32_t b = table[(phase >> 24) + 1];
 80004f4:	5c57      	ldrb	r7, [r2, r1]
 80004f6:	9109      	str	r1, [sp, #36]	; 0x24
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80004f8:	1a3f      	subs	r7, r7, r0
 80004fa:	fb09 f707 	mul.w	r7, r9, r7
  return (a << 8) + \
 80004fe:	0201      	lsls	r1, r0, #8
  int32_t a = table[phase >> 24];
 8000500:	9803      	ldr	r0, [sp, #12]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000502:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
  int32_t a = table[phase >> 24];
 8000506:	ea4f 6c50 	mov.w	ip, r0, lsr #25
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800050a:	eb01 4127 	add.w	r1, r1, r7, asr #16
 800050e:	9f03      	ldr	r7, [sp, #12]
  int32_t b = table[(phase >> 24) + 1];
 8000510:	f10c 0801 	add.w	r8, ip, #1
  int32_t a = table[phase >> 24];
 8000514:	f812 000c 	ldrb.w	r0, [r2, ip]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000518:	f3c7 0e57 	ubfx	lr, r7, #1, #24
  int32_t b = table[(phase >> 24) + 1];
 800051c:	f812 7008 	ldrb.w	r7, [r2, r8]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000520:	b289      	uxth	r1, r1
 8000522:	1a3f      	subs	r7, r7, r0
 8000524:	fb0e f707 	mul.w	r7, lr, r7
 8000528:	9100      	str	r1, [sp, #0]
  return (a << 8) + \
 800052a:	0200      	lsls	r0, r0, #8
  int32_t b = table[(phase >> 24) + 1];
 800052c:	9909      	ldr	r1, [sp, #36]	; 0x24
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800052e:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
  int32_t a = table[phase >> 24];
 8000532:	5d5d      	ldrb	r5, [r3, r5]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000534:	eb00 4727 	add.w	r7, r0, r7, asr #16
  int32_t a = table[phase >> 24];
 8000538:	f813 000c 	ldrb.w	r0, [r3, ip]
  int32_t b = table[(phase >> 24) + 1];
 800053c:	f813 c001 	ldrb.w	ip, [r3, r1]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000540:	b2bf      	uxth	r7, r7
 8000542:	ebac 0c05 	sub.w	ip, ip, r5
 8000546:	fb09 f90c 	mul.w	r9, r9, ip
  return (a << 8) + \
 800054a:	022d      	lsls	r5, r5, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800054c:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
 8000550:	eb05 4929 	add.w	r9, r5, r9, asr #16
  int32_t b = table[(phase >> 24) + 1];
 8000554:	f813 5008 	ldrb.w	r5, [r3, r8]
inline int16_t Crossfade(
    const uint8_t* table_a,
    const uint8_t* table_b,
    uint32_t phase,
    uint16_t balance) {
  int32_t a = Interpolate824(table_a, phase);
 8000558:	f9bd c000 	ldrsh.w	ip, [sp]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800055c:	1a2d      	subs	r5, r5, r0
 800055e:	fb0e fe05 	mul.w	lr, lr, r5
  return (a << 8) + \
 8000562:	0200      	lsls	r0, r0, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000564:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 8000568:	eb00 4e2e 	add.w	lr, r0, lr, asr #16
  int32_t a = Interpolate824(table_a, phase);
 800056c:	b23d      	sxth	r5, r7
  int32_t b = Interpolate824(table_b, phase);
 800056e:	fa0f fe8e 	sxth.w	lr, lr
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 8000572:	ebae 0e05 	sub.w	lr, lr, r5
  int32_t a = table[phase >> 24];
 8000576:	9801      	ldr	r0, [sp, #4]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 8000578:	fb0b fe0e 	mul.w	lr, fp, lr
  int32_t b = Interpolate824(table_b, phase);
 800057c:	fa0f f989 	sxth.w	r9, r9
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000580:	9d01      	ldr	r5, [sp, #4]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 8000582:	eba9 090c 	sub.w	r9, r9, ip
  int32_t a = table[phase >> 24];
 8000586:	ea4f 6c50 	mov.w	ip, r0, lsr #25
  int32_t b = table[(phase >> 24) + 1];
 800058a:	f10c 0801 	add.w	r8, ip, #1
  int32_t a = table[phase >> 24];
 800058e:	f812 000c 	ldrb.w	r0, [r2, ip]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 8000592:	eb07 472e 	add.w	r7, r7, lr, asr #16
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000596:	f3c5 0e57 	ubfx	lr, r5, #1, #24
  int32_t b = table[(phase >> 24) + 1];
 800059a:	f812 5008 	ldrb.w	r5, [r2, r8]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 800059e:	fb0b f909 	mul.w	r9, fp, r9
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80005a2:	1a2d      	subs	r5, r5, r0
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 80005a4:	9900      	ldr	r1, [sp, #0]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80005a6:	fb0e f505 	mul.w	r5, lr, r5
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 80005aa:	eb01 4129 	add.w	r1, r1, r9, asr #16
  return (a << 8) + \
 80005ae:	0200      	lsls	r0, r0, #8
    sample += Crossfade(wave_1, wave_2, phase_1 >> 1, wave_xfade);
 80005b0:	b23f      	sxth	r7, r7
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80005b2:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
    sample += Crossfade(wave_1, wave_2, phase_0 >> 1, wave_xfade);
 80005b6:	b209      	sxth	r1, r1
    sample += Crossfade(wave_1, wave_2, phase_1 >> 1, wave_xfade);
 80005b8:	4439      	add	r1, r7
 80005ba:	eb00 4525 	add.w	r5, r0, r5, asr #16
  int32_t b = table[(phase >> 24) + 1];
 80005be:	f813 7008 	ldrb.w	r7, [r3, r8]
  int32_t a = table[phase >> 24];
 80005c2:	f813 000c 	ldrb.w	r0, [r3, ip]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80005c6:	b2ad      	uxth	r5, r5
 80005c8:	1a3f      	subs	r7, r7, r0
 80005ca:	fb0e fe07 	mul.w	lr, lr, r7
  return (a << 8) + \
 80005ce:	0200      	lsls	r0, r0, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80005d0:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 80005d4:	eb00 4e2e 	add.w	lr, r0, lr, asr #16
  int32_t b = Interpolate824(table_b, phase);
 80005d8:	fa0f fe8e 	sxth.w	lr, lr
  int32_t a = Interpolate824(table_a, phase);
 80005dc:	b22f      	sxth	r7, r5
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 80005de:	ebae 0707 	sub.w	r7, lr, r7
 80005e2:	fb0b f707 	mul.w	r7, fp, r7
 80005e6:	eb05 4727 	add.w	r7, r5, r7, asr #16
  int32_t a = table[phase >> 24];
 80005ea:	ea4f 655a 	mov.w	r5, sl, lsr #25
  int32_t b = table[(phase >> 24) + 1];
 80005ee:	f105 0e01 	add.w	lr, r5, #1
    sample += Crossfade(wave_1, wave_2, phase_2 >> 1, wave_xfade);
 80005f2:	b23f      	sxth	r7, r7
 80005f4:	440f      	add	r7, r1
 80005f6:	f812 000e 	ldrb.w	r0, [r2, lr]
  int32_t a = table[phase >> 24];
 80005fa:	5d51      	ldrb	r1, [r2, r5]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80005fc:	f3ca 0c57 	ubfx	ip, sl, #1, #24
 8000600:	1a40      	subs	r0, r0, r1
 8000602:	fb0c f000 	mul.w	r0, ip, r0
  return (a << 8) + \
 8000606:	0209      	lsls	r1, r1, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000608:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 800060c:	eb01 4020 	add.w	r0, r1, r0, asr #16
  int32_t a = table[phase >> 24];
 8000610:	5d59      	ldrb	r1, [r3, r5]
  int32_t b = table[(phase >> 24) + 1];
 8000612:	f813 500e 	ldrb.w	r5, [r3, lr]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000616:	b280      	uxth	r0, r0
 8000618:	1a6d      	subs	r5, r5, r1
 800061a:	fb0c fc05 	mul.w	ip, ip, r5
  return (a << 8) + \
 800061e:	0209      	lsls	r1, r1, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000620:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8000624:	eb01 4c2c 	add.w	ip, r1, ip, asr #16
  int32_t a = Interpolate824(table_a, phase);
 8000628:	b205      	sxth	r5, r0
  int32_t b = Interpolate824(table_b, phase);
 800062a:	fa0f fc8c 	sxth.w	ip, ip
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 800062e:	ebac 0c05 	sub.w	ip, ip, r5
 8000632:	fb0b fc0c 	mul.w	ip, fp, ip
 8000636:	eb00 402c 	add.w	r0, r0, ip, asr #16
    sample += Crossfade(wave_1, wave_2, phase_3 >> 1, wave_xfade);
 800063a:	b200      	sxth	r0, r0
    *buffer++ = sample >> 2;
 800063c:	9902      	ldr	r1, [sp, #8]
    sample += Crossfade(wave_1, wave_2, phase_3 >> 1, wave_xfade);
 800063e:	4438      	add	r0, r7
    *buffer++ = sample >> 2;
 8000640:	1080      	asrs	r0, r0, #2
 8000642:	f821 0c04 	strh.w	r0, [r1, #-4]
 8000646:	9908      	ldr	r1, [sp, #32]
 8000648:	9803      	ldr	r0, [sp, #12]
 800064a:	440e      	add	r6, r1
 800064c:	9905      	ldr	r1, [sp, #20]
  int32_t a = table[phase >> 24];
 800064e:	0e75      	lsrs	r5, r6, #25
 8000650:	180f      	adds	r7, r1, r0
 8000652:	9801      	ldr	r0, [sp, #4]
 8000654:	9906      	ldr	r1, [sp, #24]
 8000656:	ea4f 6e57 	mov.w	lr, r7, lsr #25
 800065a:	4401      	add	r1, r0
 800065c:	9101      	str	r1, [sp, #4]
 800065e:	9907      	ldr	r1, [sp, #28]
 8000660:	5d50      	ldrb	r0, [r2, r5]
 8000662:	4451      	add	r1, sl
 8000664:	9100      	str	r1, [sp, #0]
  int32_t b = table[(phase >> 24) + 1];
 8000666:	1c69      	adds	r1, r5, #1
 8000668:	f812 c001 	ldrb.w	ip, [r2, r1]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800066c:	f3c6 0a57 	ubfx	sl, r6, #1, #24
 8000670:	ebac 0c00 	sub.w	ip, ip, r0
 8000674:	fb0a fc0c 	mul.w	ip, sl, ip
  int32_t b = table[(phase >> 24) + 1];
 8000678:	9109      	str	r1, [sp, #36]	; 0x24
  return (a << 8) + \
 800067a:	0201      	lsls	r1, r0, #8
  int32_t b = table[(phase >> 24) + 1];
 800067c:	f10e 0901 	add.w	r9, lr, #1
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000680:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
  int32_t a = table[phase >> 24];
 8000684:	f812 000e 	ldrb.w	r0, [r2, lr]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000688:	eb01 412c 	add.w	r1, r1, ip, asr #16
  int32_t b = table[(phase >> 24) + 1];
 800068c:	f812 c009 	ldrb.w	ip, [r2, r9]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000690:	f3c7 0857 	ubfx	r8, r7, #1, #24
 8000694:	ebac 0c00 	sub.w	ip, ip, r0
 8000698:	fb08 fc0c 	mul.w	ip, r8, ip
 800069c:	b289      	uxth	r1, r1
 800069e:	9103      	str	r1, [sp, #12]
  return (a << 8) + \
 80006a0:	0200      	lsls	r0, r0, #8
  int32_t b = table[(phase >> 24) + 1];
 80006a2:	9909      	ldr	r1, [sp, #36]	; 0x24
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006a4:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
  int32_t a = table[phase >> 24];
 80006a8:	5d5d      	ldrb	r5, [r3, r5]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006aa:	eb00 4c2c 	add.w	ip, r0, ip, asr #16
  int32_t a = table[phase >> 24];
 80006ae:	f813 000e 	ldrb.w	r0, [r3, lr]
  int32_t b = table[(phase >> 24) + 1];
 80006b2:	f813 e001 	ldrb.w	lr, [r3, r1]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006b6:	fa1f fc8c 	uxth.w	ip, ip
 80006ba:	ebae 0e05 	sub.w	lr, lr, r5
 80006be:	fb0a fa0e 	mul.w	sl, sl, lr
  return (a << 8) + \
 80006c2:	022d      	lsls	r5, r5, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006c4:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
 80006c8:	eb05 4a2a 	add.w	sl, r5, sl, asr #16
  int32_t b = table[(phase >> 24) + 1];
 80006cc:	f813 5009 	ldrb.w	r5, [r3, r9]
  int32_t a = Interpolate824(table_a, phase);
 80006d0:	f9bd e00c 	ldrsh.w	lr, [sp, #12]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006d4:	1a2d      	subs	r5, r5, r0
 80006d6:	fb08 f805 	mul.w	r8, r8, r5
  return (a << 8) + \
 80006da:	0200      	lsls	r0, r0, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006dc:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 80006e0:	eb00 4828 	add.w	r8, r0, r8, asr #16
  int32_t a = Interpolate824(table_a, phase);
 80006e4:	fa0f f58c 	sxth.w	r5, ip
  int32_t b = Interpolate824(table_b, phase);
 80006e8:	fa0f f888 	sxth.w	r8, r8
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 80006ec:	eba8 0805 	sub.w	r8, r8, r5
  int32_t a = table[phase >> 24];
 80006f0:	9801      	ldr	r0, [sp, #4]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 80006f2:	fb0b f808 	mul.w	r8, fp, r8
  int32_t b = Interpolate824(table_b, phase);
 80006f6:	fa0f fa8a 	sxth.w	sl, sl
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006fa:	9d01      	ldr	r5, [sp, #4]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 80006fc:	ebaa 0a0e 	sub.w	sl, sl, lr
  int32_t a = table[phase >> 24];
 8000700:	ea4f 6e50 	mov.w	lr, r0, lsr #25
  int32_t b = table[(phase >> 24) + 1];
 8000704:	f10e 0901 	add.w	r9, lr, #1
  int32_t a = table[phase >> 24];
 8000708:	f812 000e 	ldrb.w	r0, [r2, lr]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 800070c:	eb0c 4c28 	add.w	ip, ip, r8, asr #16
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000710:	f3c5 0857 	ubfx	r8, r5, #1, #24
  int32_t b = table[(phase >> 24) + 1];
 8000714:	f812 5009 	ldrb.w	r5, [r2, r9]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 8000718:	fb0b fa0a 	mul.w	sl, fp, sl
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800071c:	1a2d      	subs	r5, r5, r0
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 800071e:	9903      	ldr	r1, [sp, #12]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000720:	fb08 f505 	mul.w	r5, r8, r5
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 8000724:	eb01 412a 	add.w	r1, r1, sl, asr #16
  return (a << 8) + \
 8000728:	0200      	lsls	r0, r0, #8
    sample += Crossfade(wave_1, wave_2, phase_1 >> 1, wave_xfade);
 800072a:	fa0f fc8c 	sxth.w	ip, ip
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800072e:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
    sample += Crossfade(wave_1, wave_2, phase_0 >> 1, wave_xfade);
 8000732:	b209      	sxth	r1, r1
    sample += Crossfade(wave_1, wave_2, phase_1 >> 1, wave_xfade);
 8000734:	4461      	add	r1, ip
 8000736:	eb00 4525 	add.w	r5, r0, r5, asr #16
  int32_t b = table[(phase >> 24) + 1];
 800073a:	f813 c009 	ldrb.w	ip, [r3, r9]
  int32_t a = table[phase >> 24];
 800073e:	f813 000e 	ldrb.w	r0, [r3, lr]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000742:	b2ad      	uxth	r5, r5
 8000744:	ebac 0c00 	sub.w	ip, ip, r0
 8000748:	fb08 f80c 	mul.w	r8, r8, ip
  return (a << 8) + \
 800074c:	0200      	lsls	r0, r0, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800074e:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 8000752:	eb00 4828 	add.w	r8, r0, r8, asr #16
  int32_t b = Interpolate824(table_b, phase);
 8000756:	fa0f f888 	sxth.w	r8, r8
  int32_t a = Interpolate824(table_a, phase);
 800075a:	fa0f fc85 	sxth.w	ip, r5
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 800075e:	eba8 0c0c 	sub.w	ip, r8, ip
 8000762:	fb0b fc0c 	mul.w	ip, fp, ip
 8000766:	eb05 4c2c 	add.w	ip, r5, ip, asr #16
    sample += Crossfade(wave_1, wave_2, phase_2 >> 1, wave_xfade);
 800076a:	fa0f fc8c 	sxth.w	ip, ip
 800076e:	448c      	add	ip, r1
  int32_t a = table[phase >> 24];
 8000770:	9900      	ldr	r1, [sp, #0]
 8000772:	0e4d      	lsrs	r5, r1, #25
 8000774:	5d51      	ldrb	r1, [r2, r5]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000776:	9800      	ldr	r0, [sp, #0]
  int32_t b = table[(phase >> 24) + 1];
 8000778:	f105 0801 	add.w	r8, r5, #1
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800077c:	f3c0 0e57 	ubfx	lr, r0, #1, #24
  int32_t b = table[(phase >> 24) + 1];
 8000780:	f812 0008 	ldrb.w	r0, [r2, r8]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000784:	1a40      	subs	r0, r0, r1
 8000786:	fb0e f000 	mul.w	r0, lr, r0
  return (a << 8) + \
 800078a:	0209      	lsls	r1, r1, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800078c:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8000790:	eb01 4020 	add.w	r0, r1, r0, asr #16
  int32_t a = table[phase >> 24];
 8000794:	5d59      	ldrb	r1, [r3, r5]
  int32_t b = table[(phase >> 24) + 1];
 8000796:	f813 5008 	ldrb.w	r5, [r3, r8]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800079a:	b280      	uxth	r0, r0
 800079c:	1a6d      	subs	r5, r5, r1
 800079e:	fb0e fe05 	mul.w	lr, lr, r5
  return (a << 8) + \
 80007a2:	0209      	lsls	r1, r1, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80007a4:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 80007a8:	eb01 4e2e 	add.w	lr, r1, lr, asr #16
  int32_t a = Interpolate824(table_a, phase);
 80007ac:	b205      	sxth	r5, r0
  int32_t b = Interpolate824(table_b, phase);
 80007ae:	fa0f fe8e 	sxth.w	lr, lr
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 80007b2:	ebae 0e05 	sub.w	lr, lr, r5
 80007b6:	fb0b fe0e 	mul.w	lr, fp, lr
 80007ba:	eb00 402e 	add.w	r0, r0, lr, asr #16
    sample += Crossfade(wave_1, wave_2, phase_3 >> 1, wave_xfade);
 80007be:	b200      	sxth	r0, r0
    *buffer++ = sample >> 2;
 80007c0:	9902      	ldr	r1, [sp, #8]
    sample += Crossfade(wave_1, wave_2, phase_3 >> 1, wave_xfade);
 80007c2:	4460      	add	r0, ip
    *buffer++ = sample >> 2;
 80007c4:	1080      	asrs	r0, r0, #2
 80007c6:	f821 0c02 	strh.w	r0, [r1, #-2]
    size -= 2;
 80007ca:	9904      	ldr	r1, [sp, #16]
 80007cc:	3902      	subs	r1, #2
 80007ce:	9104      	str	r1, [sp, #16]
  while (size) {
 80007d0:	e677      	b.n	80004c2 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0x96>
  state_.saw.phase[2] = phase_2;
 80007d2:	9b01      	ldr	r3, [sp, #4]
  state_.saw.phase[1] = phase_1;
 80007d4:	e9c4 6708 	strd	r6, r7, [r4, #32]
  state_.saw.phase[2] = phase_2;
 80007d8:	62a3      	str	r3, [r4, #40]	; 0x28
  state_.saw.phase[3] = phase_3;
 80007da:	9b00      	ldr	r3, [sp, #0]
 80007dc:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80007de:	b00f      	add	sp, #60	; 0x3c
 80007e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007e4:	08004722 	.word	0x08004722
 80007e8:	08005a06 	.word	0x08005a06

080007ec <_ZN6braids17DigitalOscillator12ComputeDelayEs>:
  int32_t ref_pitch = midi_pitch;
 80007ec:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80007f0:	bfa8      	it	ge
 80007f2:	f44f 4180 	movge.w	r1, #16384	; 0x4000
  size_t num_shifts = 0;
 80007f6:	2300      	movs	r3, #0
uint32_t DigitalOscillator::ComputeDelay(int16_t midi_pitch) {
 80007f8:	b510      	push	{r4, lr}
  ref_pitch -= kPitchTableStart;
 80007fa:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
  while (ref_pitch < 0) {
 80007fe:	2900      	cmp	r1, #0
 8000800:	da03      	bge.n	800080a <_ZN6braids17DigitalOscillator12ComputeDelayEs+0x1e>
    ref_pitch += kOctave;
 8000802:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
    ++num_shifts;
 8000806:	3301      	adds	r3, #1
  while (ref_pitch < 0) {
 8000808:	e7f9      	b.n	80007fe <_ZN6braids17DigitalOscillator12ComputeDelayEs+0x12>
  uint32_t a = lut_oscillator_delays[ref_pitch >> 4];
 800080a:	4c08      	ldr	r4, [pc, #32]	; (800082c <_ZN6braids17DigitalOscillator12ComputeDelayEs+0x40>)
 800080c:	110a      	asrs	r2, r1, #4
 800080e:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
  uint32_t b = lut_oscillator_delays[(ref_pitch >> 4) + 1];
 8000812:	3201      	adds	r2, #1
  uint32_t delay = a + (static_cast<int32_t>(b - a) * (ref_pitch & 0xf) >> 4);  
 8000814:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8000818:	f001 010f 	and.w	r1, r1, #15
 800081c:	1a12      	subs	r2, r2, r0
 800081e:	4351      	muls	r1, r2
  delay >>= 12 - num_shifts;
 8000820:	f1c3 030c 	rsb	r3, r3, #12
  uint32_t delay = a + (static_cast<int32_t>(b - a) * (ref_pitch & 0xf) >> 4);  
 8000824:	eb00 1021 	add.w	r0, r0, r1, asr #4
}
 8000828:	40d8      	lsrs	r0, r3
 800082a:	bd10      	pop	{r4, pc}
 800082c:	08004dd0 	.word	0x08004dd0

08000830 <_ZN6braids17DigitalOscillator6RenderEPKhPsj>:
    size_t size) {
 8000830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000834:	4617      	mov	r7, r2
  if (shape_ >= OSC_SHAPE_FM &&
 8000836:	7f42      	ldrb	r2, [r0, #29]
    size_t size) {
 8000838:	4698      	mov	r8, r3
  if (shape_ >= OSC_SHAPE_FM &&
 800083a:	f1a2 030c 	sub.w	r3, r2, #12
 800083e:	2b02      	cmp	r3, #2
    size_t size) {
 8000840:	4604      	mov	r4, r0
 8000842:	460e      	mov	r6, r1
  if (shape_ >= OSC_SHAPE_FM &&
 8000844:	d810      	bhi.n	8000868 <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0x38>
    uint16_t integral = parameter_[1] >> 8;
 8000846:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    int16_t a = lut_fm_frequency_quantizer[integral];
 800084a:	4d3b      	ldr	r5, [pc, #236]	; (8000938 <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0x108>)
 800084c:	f3c3 200f 	ubfx	r0, r3, #8, #16
 8000850:	f835 1010 	ldrh.w	r1, [r5, r0, lsl #1]
    int16_t b = lut_fm_frequency_quantizer[integral + 1];
 8000854:	3001      	adds	r0, #1
    parameter_[1] = a + ((b - a) * fractional >> 8);
 8000856:	f935 0010 	ldrsh.w	r0, [r5, r0, lsl #1]
 800085a:	b20d      	sxth	r5, r1
 800085c:	1b40      	subs	r0, r0, r5
 800085e:	b2db      	uxtb	r3, r3
 8000860:	4343      	muls	r3, r0
 8000862:	eb01 2323 	add.w	r3, r1, r3, asr #8
 8000866:	81e3      	strh	r3, [r4, #14]
  RenderFn fn = fn_table_[shape_];
 8000868:	4b34      	ldr	r3, [pc, #208]	; (800093c <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0x10c>)
 800086a:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800086e:	f853 9032 	ldr.w	r9, [r3, r2, lsl #3]
  if (shape_ != previous_shape_) {
 8000872:	7fa3      	ldrb	r3, [r4, #30]
  RenderFn fn = fn_table_[shape_];
 8000874:	f8d1 a004 	ldr.w	sl, [r1, #4]
  if (shape_ != previous_shape_) {
 8000878:	4293      	cmp	r3, r2
 800087a:	d034      	beq.n	80008e6 <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0xb6>

  DigitalOscillator() { }
  ~DigitalOscillator() { }
  
  inline void Init() {
    memset(&state_, 0, sizeof(state_));
 800087c:	22c4      	movs	r2, #196	; 0xc4
 800087e:	2100      	movs	r1, #0
 8000880:	f104 0020 	add.w	r0, r4, #32
 8000884:	f003 ff2f 	bl	80046e6 <memset>
  Excitation() { }
  ~Excitation() { }

  void Init() {
    delay_ = 0;
    decay_ = 4093;
 8000888:	2500      	movs	r5, #0
 800088a:	f640 73fd 	movw	r3, #4093	; 0xffd
    pulse_[0].Init();
    pulse_[1].Init();
    pulse_[2].Init();
    pulse_[3].Init();
    svf_[0].Init();
 800088e:	f504 709a 	add.w	r0, r4, #308	; 0x134
 8000892:	e9c4 5339 	strd	r5, r3, [r4, #228]	; 0xe4
 8000896:	e9c4 533e 	strd	r5, r3, [r4, #248]	; 0xf8
 800089a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800089e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    counter_ = 0;
    state_ = 0;
 80008a2:	e9c4 553b 	strd	r5, r5, [r4, #236]	; 0xec
    counter_ = 0;
 80008a6:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    state_ = 0;
 80008aa:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    delay_ = 0;
 80008ae:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
    counter_ = 0;
 80008b2:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
    state_ = 0;
 80008b6:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
    delay_ = 0;
 80008ba:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
    counter_ = 0;
 80008be:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
    state_ = 0;
 80008c2:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 80008c6:	f7ff fcb3 	bl	8000230 <_ZN6braids3Svf4InitEv>
    svf_[1].Init();
 80008ca:	f504 70aa 	add.w	r0, r4, #340	; 0x154
 80008ce:	f7ff fcaf 	bl	8000230 <_ZN6braids3Svf4InitEv>
    svf_[2].Init();
 80008d2:	f504 70ba 	add.w	r0, r4, #372	; 0x174
 80008d6:	f7ff fcab 	bl	8000230 <_ZN6braids3Svf4InitEv>
    phase_ = 0;
    strike_ = true;
 80008da:	2301      	movs	r3, #1
 80008dc:	7723      	strb	r3, [r4, #28]
    init_ = true;
 80008de:	76e3      	strb	r3, [r4, #27]
    previous_shape_ = shape_;
 80008e0:	7f63      	ldrb	r3, [r4, #29]
    phase_ = 0;
 80008e2:	6025      	str	r5, [r4, #0]
 80008e4:	77a3      	strb	r3, [r4, #30]
  phase_increment_ = ComputePhaseIncrement(pitch_);
 80008e6:	f9b4 5018 	ldrsh.w	r5, [r4, #24]
 80008ea:	4620      	mov	r0, r4
 80008ec:	4629      	mov	r1, r5
 80008ee:	f7ff fd7d 	bl	80003ec <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
  delay_ = ComputeDelay(pitch_);
 80008f2:	4629      	mov	r1, r5
  phase_increment_ = ComputePhaseIncrement(pitch_);
 80008f4:	6060      	str	r0, [r4, #4]
  delay_ = ComputeDelay(pitch_);
 80008f6:	4620      	mov	r0, r4
 80008f8:	f7ff ff78 	bl	80007ec <_ZN6braids17DigitalOscillator12ComputeDelayEs>
  if (pitch_ > kHighestNote) {
 80008fc:	f5b5 4f8c 	cmp.w	r5, #17920	; 0x4600
  delay_ = ComputeDelay(pitch_);
 8000900:	60a0      	str	r0, [r4, #8]
  if (pitch_ > kHighestNote) {
 8000902:	dd14      	ble.n	800092e <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0xfe>
    pitch_ = kHighestNote;
 8000904:	f44f 438c 	mov.w	r3, #17920	; 0x4600
    pitch_ = 0;
 8000908:	8323      	strh	r3, [r4, #24]
  (this->*fn)(sync, buffer, size);
 800090a:	ea4f 036a 	mov.w	r3, sl, asr #1
 800090e:	f01a 0f01 	tst.w	sl, #1
 8000912:	eb04 0003 	add.w	r0, r4, r3
 8000916:	bf18      	it	ne
 8000918:	58e3      	ldrne	r3, [r4, r3]
 800091a:	463a      	mov	r2, r7
 800091c:	bf18      	it	ne
 800091e:	f853 9009 	ldrne.w	r9, [r3, r9]
 8000922:	4631      	mov	r1, r6
 8000924:	4643      	mov	r3, r8
 8000926:	46cc      	mov	ip, r9
}
 8000928:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  (this->*fn)(sync, buffer, size);
 800092c:	4760      	bx	ip
  } else if (pitch_ < 0) {
 800092e:	2d00      	cmp	r5, #0
 8000930:	daeb      	bge.n	800090a <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0xda>
    pitch_ = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	e7e8      	b.n	8000908 <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0xd8>
 8000936:	bf00      	nop
 8000938:	080050d8 	.word	0x080050d8
 800093c:	20000000 	.word	0x20000000

08000940 <_ZN6braids17DigitalOscillator18set_chordIntervalsEsss>:
	chordsIntervals[0] = interval1;
 8000940:	f8a0 1194 	strh.w	r1, [r0, #404]	; 0x194
	chordsIntervals[1] = interval2;
 8000944:	f8a0 2196 	strh.w	r2, [r0, #406]	; 0x196
	chordsIntervals[2] = interval3;
 8000948:	f8a0 3198 	strh.w	r3, [r0, #408]	; 0x198
}
 800094c:	4770      	bx	lr

0800094e <_ZN6braids15MacroOscillator10RenderBuzzEPKhPsj>:
}

void MacroOscillator::RenderBuzz(
    const uint8_t* sync,
    int16_t* buffer,
    size_t size) {
 800094e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  analog_oscillator_[0].set_parameter(parameter_[0]);
 8000952:	f9b0 7000 	ldrsh.w	r7, [r0]
    size_t size) {
 8000956:	4604      	mov	r4, r0
  inline void set_pitch(int16_t pitch) {
    pitch_ = pitch;
  }

  inline void set_parameter(int16_t parameter) {
    parameter_ = parameter;
 8000958:	f8a0 7066 	strh.w	r7, [r0, #102]	; 0x66
    shape_ = shape;
 800095c:	2008      	movs	r0, #8
 800095e:	461e      	mov	r6, r3
 8000960:	4688      	mov	r8, r1
 8000962:	4615      	mov	r5, r2
  analog_oscillator_[0].set_shape(OSC_SHAPE_BUZZ);
  analog_oscillator_[0].set_pitch(pitch_);
 8000964:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000968:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
 800096c:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94

  analog_oscillator_[1].set_parameter(parameter_[0]);
  analog_oscillator_[1].set_shape(OSC_SHAPE_BUZZ);
  analog_oscillator_[1].set_pitch(pitch_ + (parameter_[1] >> 8));
 8000970:	f994 0003 	ldrsb.w	r0, [r4, #3]
    pitch_ = pitch;
 8000974:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8000978:	4403      	add	r3, r0
    parameter_ = parameter;
 800097a:	f8a4 7086 	strh.w	r7, [r4, #134]	; 0x86
    pitch_ = pitch;
 800097e:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e

  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8000982:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000986:	2300      	movs	r3, #0
 8000988:	9600      	str	r6, [sp, #0]
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 800098a:	f104 0722 	add.w	r7, r4, #34	; 0x22
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 800098e:	f7ff fc07 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 8000992:	463a      	mov	r2, r7
 8000994:	9600      	str	r6, [sp, #0]
 8000996:	2300      	movs	r3, #0
 8000998:	4641      	mov	r1, r8
 800099a:	f104 0078 	add.w	r0, r4, #120	; 0x78
 800099e:	f7ff fbff 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
 80009a2:	1eaa      	subs	r2, r5, #2
  int16_t* temp_buffer = temp_buffer_;
  while (size--) {
 80009a4:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 80009a8:	d309      	bcc.n	80009be <_ZN6braids15MacroOscillator10RenderBuzzEPKhPsj+0x70>
    *buffer >>= 1;
 80009aa:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 80009ae:	105b      	asrs	r3, r3, #1
 80009b0:	8013      	strh	r3, [r2, #0]
    *buffer += *temp_buffer >> 1;
 80009b2:	f937 1b02 	ldrsh.w	r1, [r7], #2
 80009b6:	eb03 0361 	add.w	r3, r3, r1, asr #1
 80009ba:	8013      	strh	r3, [r2, #0]
  while (size--) {
 80009bc:	e7f2      	b.n	80009a4 <_ZN6braids15MacroOscillator10RenderBuzzEPKhPsj+0x56>
    buffer++;
    temp_buffer++;
  }
}
 80009be:	b002      	add	sp, #8
 80009c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080009c4 <_ZN6braids15MacroOscillator10RenderCSawEPKhPsj>:
    size_t size) {
 80009c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80009c6:	461d      	mov	r5, r3
 80009c8:	8903      	ldrh	r3, [r0, #8]
 80009ca:	4604      	mov	r4, r0
 80009cc:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
    shape_ = shape;
 80009d0:	2302      	movs	r3, #2
 80009d2:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    parameter_ = parameter;
 80009d6:	8803      	ldrh	r3, [r0, #0]
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 80009d8:	3058      	adds	r0, #88	; 0x58
 80009da:	81c3      	strh	r3, [r0, #14]
  }

  inline void set_aux_parameter(int16_t parameter) {
    aux_parameter_ = parameter;
 80009dc:	f830 3c56 	ldrh.w	r3, [r0, #-86]
    size_t size) {
 80009e0:	4616      	mov	r6, r2
 80009e2:	8243      	strh	r3, [r0, #18]
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 80009e4:	2300      	movs	r3, #0
 80009e6:	9500      	str	r5, [sp, #0]
 80009e8:	f7ff fbda 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
    *buffer++ = (s * 13) >> 3;
 80009ec:	210d      	movs	r1, #13
  int16_t shift = -(parameter_[1] - 32767) >> 4;
 80009ee:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80009f2:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 80009f6:	337f      	adds	r3, #127	; 0x7f
 80009f8:	111a      	asrs	r2, r3, #4
  while (size--) {
 80009fa:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 80009fe:	d307      	bcc.n	8000a10 <_ZN6braids15MacroOscillator10RenderCSawEPKhPsj+0x4c>
    int32_t s = *buffer + shift;
 8000a00:	f9b6 3000 	ldrsh.w	r3, [r6]
 8000a04:	4413      	add	r3, r2
    *buffer++ = (s * 13) >> 3;
 8000a06:	434b      	muls	r3, r1
 8000a08:	10db      	asrs	r3, r3, #3
 8000a0a:	f826 3b02 	strh.w	r3, [r6], #2
  while (size--) {
 8000a0e:	e7f4      	b.n	80009fa <_ZN6braids15MacroOscillator10RenderCSawEPKhPsj+0x36>
}
 8000a10:	b002      	add	sp, #8
 8000a12:	bd70      	pop	{r4, r5, r6, pc}

08000a14 <_ZN6braids15MacroOscillator15RenderSawSquareEPKhPsj>:
    size_t size) {
 8000a14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000a18:	461d      	mov	r5, r3
  analog_oscillator_[0].set_parameter(parameter_[0]);
 8000a1a:	f9b0 3000 	ldrsh.w	r3, [r0]
    size_t size) {
 8000a1e:	4604      	mov	r4, r0
    parameter_ = parameter;
 8000a20:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
 8000a24:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
  analog_oscillator_[0].set_pitch(pitch_);
 8000a28:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    size_t size) {
 8000a2c:	4688      	mov	r8, r1
    pitch_ = pitch;
 8000a2e:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
 8000a32:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
    shape_ = shape;
 8000a36:	2301      	movs	r3, #1
 8000a38:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
 8000a3c:	2303      	movs	r3, #3
  int16_t* square_buffer = temp_buffer_;
 8000a3e:	f100 0722 	add.w	r7, r0, #34	; 0x22
 8000a42:	f880 3094 	strb.w	r3, [r0, #148]	; 0x94
  analog_oscillator_[0].Render(sync, saw_buffer, NULL, size);
 8000a46:	2300      	movs	r3, #0
 8000a48:	3058      	adds	r0, #88	; 0x58
 8000a4a:	9500      	str	r5, [sp, #0]
    size_t size) {
 8000a4c:	4616      	mov	r6, r2
  analog_oscillator_[0].Render(sync, saw_buffer, NULL, size);
 8000a4e:	f7ff fba7 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync, square_buffer, NULL, size);
 8000a52:	2300      	movs	r3, #0
 8000a54:	463a      	mov	r2, r7
 8000a56:	4641      	mov	r1, r8
 8000a58:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8000a5c:	9500      	str	r5, [sp, #0]
 8000a5e:	f7ff fb9f 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  BEGIN_INTERPOLATE_PARAMETER_1
 8000a62:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8000a66:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
          *square_buffer++) * 148 >> 8;
 8000a6a:	f04f 0e94 	mov.w	lr, #148	; 0x94
  BEGIN_INTERPOLATE_PARAMETER_1
 8000a6e:	1a13      	subs	r3, r2, r0
 8000a70:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000a74:	fbb2 f2f5 	udiv	r2, r2, r5
 8000a78:	435a      	muls	r2, r3
  return (a * (65535 - balance) + b * balance) >> 16;
 8000a7a:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8000a7e:	4611      	mov	r1, r2
  while (size--) {
 8000a80:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 8000a84:	d316      	bcc.n	8000ab4 <_ZN6braids15MacroOscillator15RenderSawSquareEPKhPsj+0xa0>
    INTERPOLATE_PARAMETER_1
 8000a86:	eb00 33e1 	add.w	r3, r0, r1, asr #15
    uint16_t balance = parameter_1 << 1;
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	fa1f f883 	uxth.w	r8, r3
    int16_t attenuated_square = static_cast<int32_t>(
 8000a90:	f937 3b02 	ldrsh.w	r3, [r7], #2
 8000a94:	f936 ab02 	ldrsh.w	sl, [r6], #2
          *square_buffer++) * 148 >> 8;
 8000a98:	fb0e f303 	mul.w	r3, lr, r3
 8000a9c:	ebac 0908 	sub.w	r9, ip, r8
 8000aa0:	fb09 f90a 	mul.w	r9, r9, sl
 8000aa4:	121b      	asrs	r3, r3, #8
 8000aa6:	fb08 9303 	mla	r3, r8, r3, r9
 8000aaa:	141b      	asrs	r3, r3, #16
 8000aac:	f826 3c02 	strh.w	r3, [r6, #-2]
 8000ab0:	4411      	add	r1, r2
  while (size--) {
 8000ab2:	e7e5      	b.n	8000a80 <_ZN6braids15MacroOscillator15RenderSawSquareEPKhPsj+0x6c>
  END_INTERPOLATE_PARAMETER_1
 8000ab4:	8863      	ldrh	r3, [r4, #2]
 8000ab6:	80e3      	strh	r3, [r4, #6]
}
 8000ab8:	b002      	add	sp, #8
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000abe <_ZN6braids15MacroOscillator9RenderSubEPKhPsj>:
    size_t size) {
 8000abe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac2:	461d      	mov	r5, r3
  AnalogOscillatorShape base_shape = shape_ == MACRO_OSC_SHAPE_SQUARE_SUB ?
 8000ac4:	f244 2354 	movw	r3, #16980	; 0x4254
    size_t size) {
 8000ac8:	4604      	mov	r4, r0
  AnalogOscillatorShape base_shape = shape_ == MACRO_OSC_SHAPE_SQUARE_SUB ?
 8000aca:	5cc3      	ldrb	r3, [r0, r3]
    parameter_ = parameter;
 8000acc:	8800      	ldrh	r0, [r0, #0]
 8000ace:	2b05      	cmp	r3, #5
 8000ad0:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
    shape_ = shape;
 8000ad4:	f04f 0003 	mov.w	r0, #3
 8000ad8:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
  int16_t octave = parameter_[1] < 16384 ? (24 << 7) : (12 << 7);
 8000adc:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
  AnalogOscillatorShape base_shape = shape_ == MACRO_OSC_SHAPE_SQUARE_SUB ?
 8000ae0:	bf14      	ite	ne
 8000ae2:	2301      	movne	r3, #1
 8000ae4:	2303      	moveq	r3, #3
  int16_t octave = parameter_[1] < 16384 ? (24 << 7) : (12 << 7);
 8000ae6:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8000aea:	bfac      	ite	ge
 8000aec:	f44f 60c0 	movge.w	r0, #1536	; 0x600
 8000af0:	f44f 6040 	movlt.w	r0, #3072	; 0xc00
    parameter_ = parameter;
 8000af4:	2700      	movs	r7, #0
    size_t size) {
 8000af6:	4689      	mov	r9, r1
    shape_ = shape;
 8000af8:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  analog_oscillator_[0].set_pitch(pitch_);
 8000afc:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    parameter_ = parameter;
 8000b00:	f8a4 7086 	strh.w	r7, [r4, #134]	; 0x86
    pitch_ = pitch;
 8000b04:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
  analog_oscillator_[1].set_pitch(pitch_ - octave);
 8000b08:	1a1b      	subs	r3, r3, r0
 8000b0a:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8000b0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000b12:	463b      	mov	r3, r7
 8000b14:	9500      	str	r5, [sp, #0]
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 8000b16:	f104 0622 	add.w	r6, r4, #34	; 0x22
    size_t size) {
 8000b1a:	4690      	mov	r8, r2
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8000b1c:	f7ff fb40 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 8000b20:	463b      	mov	r3, r7
 8000b22:	4632      	mov	r2, r6
 8000b24:	4649      	mov	r1, r9
 8000b26:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8000b2a:	9500      	str	r5, [sp, #0]
 8000b2c:	f7ff fb38 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  BEGIN_INTERPOLATE_PARAMETER_1
 8000b30:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8000b34:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
        ? (16383 - parameter_1) : (parameter_1 - 16384)) << 1;
 8000b38:	f643 7eff 	movw	lr, #16383	; 0x3fff
  BEGIN_INTERPOLATE_PARAMETER_1
 8000b3c:	1bcb      	subs	r3, r1, r7
 8000b3e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000b42:	fbb1 f1f5 	udiv	r1, r1, r5
 8000b46:	4359      	muls	r1, r3
 8000b48:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8000b4c:	4608      	mov	r0, r1
 8000b4e:	f1a8 0202 	sub.w	r2, r8, #2
  while (size--) {
 8000b52:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 8000b56:	d31a      	bcc.n	8000b8e <_ZN6braids15MacroOscillator9RenderSubEPKhPsj+0xd0>
    INTERPOLATE_PARAMETER_1
 8000b58:	eb07 38e0 	add.w	r8, r7, r0, asr #15
 8000b5c:	fa1f f388 	uxth.w	r3, r8
    uint16_t sub_gain = (parameter_1 < 16384
 8000b60:	f5b8 4f80 	cmp.w	r8, #16384	; 0x4000
        ? (16383 - parameter_1) : (parameter_1 - 16384)) << 1;
 8000b64:	bfb4      	ite	lt
 8000b66:	ebae 0303 	sublt.w	r3, lr, r3
 8000b6a:	f5a3 4380 	subge.w	r3, r3, #16384	; 0x4000
 8000b6e:	f936 ab02 	ldrsh.w	sl, [r6], #2
    uint16_t sub_gain = (parameter_1 < 16384
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	ebac 0903 	sub.w	r9, ip, r3
 8000b7a:	fb03 f30a 	mul.w	r3, r3, sl
 8000b7e:	f932 8f02 	ldrsh.w	r8, [r2, #2]!
 8000b82:	4408      	add	r0, r1
 8000b84:	fb09 3308 	mla	r3, r9, r8, r3
 8000b88:	141b      	asrs	r3, r3, #16
 8000b8a:	8013      	strh	r3, [r2, #0]
  while (size--) {
 8000b8c:	e7e1      	b.n	8000b52 <_ZN6braids15MacroOscillator9RenderSubEPKhPsj+0x94>
  END_INTERPOLATE_PARAMETER_1
 8000b8e:	8863      	ldrh	r3, [r4, #2]
 8000b90:	80e3      	strh	r3, [r4, #6]
}
 8000b92:	b002      	add	sp, #8
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000b98 <_ZN6braids15MacroOscillator14RenderDualSyncEPKhPsj>:
    size_t size) {
 8000b98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000b9c:	461d      	mov	r5, r3
  AnalogOscillatorShape base_shape = shape_ == MACRO_OSC_SHAPE_SQUARE_SYNC ?
 8000b9e:	f244 2354 	movw	r3, #16980	; 0x4254
 8000ba2:	f04f 0800 	mov.w	r8, #0
 8000ba6:	5cc3      	ldrb	r3, [r0, r3]
    size_t size) {
 8000ba8:	4604      	mov	r4, r0
  AnalogOscillatorShape base_shape = shape_ == MACRO_OSC_SHAPE_SQUARE_SYNC ?
 8000baa:	2b07      	cmp	r3, #7
 8000bac:	bf0c      	ite	eq
 8000bae:	2003      	moveq	r0, #3
 8000bb0:	4640      	movne	r0, r8
  analog_oscillator_[0].set_pitch(pitch_);
 8000bb2:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    shape_ = shape;
 8000bb6:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
 8000bba:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
  analog_oscillator_[1].set_pitch(pitch_ + (parameter_[0] >> 2));
 8000bbe:	f9b4 0000 	ldrsh.w	r0, [r4]
    pitch_ = pitch;
 8000bc2:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
  analog_oscillator_[0].Render(sync, buffer, sync_buffer_, size);
 8000bc6:	f104 090a 	add.w	r9, r4, #10
  analog_oscillator_[1].set_pitch(pitch_ + (parameter_[0] >> 2));
 8000bca:	eb03 03a0 	add.w	r3, r3, r0, asr #2
 8000bce:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
  analog_oscillator_[0].Render(sync, buffer, sync_buffer_, size);
 8000bd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000bd6:	464b      	mov	r3, r9
    parameter_ = parameter;
 8000bd8:	f8a4 8066 	strh.w	r8, [r4, #102]	; 0x66
 8000bdc:	f8a4 8086 	strh.w	r8, [r4, #134]	; 0x86
 8000be0:	9500      	str	r5, [sp, #0]
  analog_oscillator_[1].Render(sync_buffer_, temp_buffer_, NULL, size);
 8000be2:	f104 0622 	add.w	r6, r4, #34	; 0x22
    size_t size) {
 8000be6:	4617      	mov	r7, r2
  analog_oscillator_[0].Render(sync, buffer, sync_buffer_, size);
 8000be8:	f7ff fada 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync_buffer_, temp_buffer_, NULL, size);
 8000bec:	4643      	mov	r3, r8
 8000bee:	4632      	mov	r2, r6
 8000bf0:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8000bf4:	9500      	str	r5, [sp, #0]
 8000bf6:	4649      	mov	r1, r9
 8000bf8:	f7ff fad2 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  BEGIN_INTERPOLATE_PARAMETER_1
 8000bfc:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8000c00:	f9b4 c006 	ldrsh.w	ip, [r4, #6]
 8000c04:	1eba      	subs	r2, r7, #2
 8000c06:	eba0 030c 	sub.w	r3, r0, ip
 8000c0a:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8000c0e:	fbb0 f0f5 	udiv	r0, r0, r5
 8000c12:	4358      	muls	r0, r3
 8000c14:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8000c18:	4607      	mov	r7, r0
  while (size--) {
 8000c1a:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 8000c1e:	d313      	bcc.n	8000c48 <_ZN6braids15MacroOscillator14RenderDualSyncEPKhPsj+0xb0>
    INTERPOLATE_PARAMETER_1
 8000c20:	eb0c 31e7 	add.w	r1, ip, r7, asr #15
 8000c24:	f936 9b02 	ldrsh.w	r9, [r6], #2
    uint16_t balance = parameter_1 << 1;
 8000c28:	0049      	lsls	r1, r1, #1
 8000c2a:	b289      	uxth	r1, r1
 8000c2c:	ebae 0801 	sub.w	r8, lr, r1
 8000c30:	fb01 f109 	mul.w	r1, r1, r9
 8000c34:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 8000c38:	4407      	add	r7, r0
 8000c3a:	fb08 1303 	mla	r3, r8, r3, r1
    *buffer = (Mix(*buffer, *temp_buffer, balance) >> 2) * 3;
 8000c3e:	149b      	asrs	r3, r3, #18
 8000c40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000c44:	8013      	strh	r3, [r2, #0]
  while (size--) {
 8000c46:	e7e8      	b.n	8000c1a <_ZN6braids15MacroOscillator14RenderDualSyncEPKhPsj+0x82>
  END_INTERPOLATE_PARAMETER_1
 8000c48:	8863      	ldrh	r3, [r4, #2]
 8000c4a:	80e3      	strh	r3, [r4, #6]
}
 8000c4c:	b003      	add	sp, #12
 8000c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c52 <_ZN6braids15MacroOscillator18RenderSineTriangleEPKhPsj>:
    size_t size) {
 8000c52:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  int32_t attenuation_sine = 32767 - 6 * (pitch_ - (92 << 7));
 8000c56:	f06f 0c05 	mvn.w	ip, #5
 8000c5a:	f647 75ff 	movw	r5, #32767	; 0x7fff
    size_t size) {
 8000c5e:	4604      	mov	r4, r0
  int32_t attenuation_sine = 32767 - 6 * (pitch_ - (92 << 7));
 8000c60:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
    size_t size) {
 8000c64:	461e      	mov	r6, r3
  int32_t attenuation_sine = 32767 - 6 * (pitch_ - (92 << 7));
 8000c66:	f5a0 5338 	sub.w	r3, r0, #11776	; 0x2e00
 8000c6a:	fb0c 5303 	mla	r3, ip, r3, r5
 8000c6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  analog_oscillator_[0].set_parameter(timbre * attenuation_sine >> 15);
 8000c72:	42ab      	cmp	r3, r5
 8000c74:	bfa8      	it	ge
 8000c76:	462b      	movge	r3, r5
  int32_t timbre = parameter_[0];
 8000c78:	f9b4 e000 	ldrsh.w	lr, [r4]
  int32_t attenuation_tri = 32767 - 7 * (pitch_ - (80 << 7));
 8000c7c:	f5a0 5c20 	sub.w	ip, r0, #10240	; 0x2800
  analog_oscillator_[0].set_parameter(timbre * attenuation_sine >> 15);
 8000c80:	fb0e f303 	mul.w	r3, lr, r3
 8000c84:	13db      	asrs	r3, r3, #15
 8000c86:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    shape_ = shape;
 8000c8a:	2307      	movs	r3, #7
  int32_t attenuation_tri = 32767 - 7 * (pitch_ - (80 << 7));
 8000c8c:	ebac 0ccc 	sub.w	ip, ip, ip, lsl #3
 8000c90:	44ac      	add	ip, r5
 8000c92:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
  analog_oscillator_[1].set_parameter(timbre * attenuation_tri >> 15);
 8000c96:	45ac      	cmp	ip, r5
 8000c98:	bfa8      	it	ge
 8000c9a:	46ac      	movge	ip, r5
 8000c9c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
 8000ca0:	2306      	movs	r3, #6
    size_t size) {
 8000ca2:	4688      	mov	r8, r1
  analog_oscillator_[1].set_parameter(timbre * attenuation_tri >> 15);
 8000ca4:	fb0e fe0c 	mul.w	lr, lr, ip
 8000ca8:	ea4f 3eee 	mov.w	lr, lr, asr #15
 8000cac:	f8a4 e086 	strh.w	lr, [r4, #134]	; 0x86
    pitch_ = pitch;
 8000cb0:	f8a4 006e 	strh.w	r0, [r4, #110]	; 0x6e
 8000cb4:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    shape_ = shape;
 8000cb8:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8000cbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	9600      	str	r6, [sp, #0]
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 8000cc4:	f104 0922 	add.w	r9, r4, #34	; 0x22
    size_t size) {
 8000cc8:	4617      	mov	r7, r2
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8000cca:	f7ff fa69 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 8000cce:	2300      	movs	r3, #0
 8000cd0:	464a      	mov	r2, r9
 8000cd2:	4641      	mov	r1, r8
 8000cd4:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8000cd8:	9600      	str	r6, [sp, #0]
 8000cda:	f7ff fa61 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  BEGIN_INTERPOLATE_PARAMETER_1
 8000cde:	fbb5 f5f6 	udiv	r5, r5, r6
 8000ce2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8000ce6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8000cea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000cee:	1a9b      	subs	r3, r3, r2
 8000cf0:	435d      	muls	r5, r3
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	3f02      	subs	r7, #2
  while (size--) {
 8000cf6:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 8000cfa:	d311      	bcc.n	8000d20 <_ZN6braids15MacroOscillator18RenderSineTriangleEPKhPsj+0xce>
    INTERPOLATE_PARAMETER_1
 8000cfc:	eb02 33e1 	add.w	r3, r2, r1, asr #15
 8000d00:	f939 8b02 	ldrsh.w	r8, [r9], #2
    uint16_t balance = parameter_1 << 1;
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	eba0 0e03 	sub.w	lr, r0, r3
 8000d0c:	fb03 f308 	mul.w	r3, r3, r8
 8000d10:	f937 cf02 	ldrsh.w	ip, [r7, #2]!
 8000d14:	4429      	add	r1, r5
 8000d16:	fb0e 330c 	mla	r3, lr, ip, r3
 8000d1a:	141b      	asrs	r3, r3, #16
 8000d1c:	803b      	strh	r3, [r7, #0]
  while (size--) {
 8000d1e:	e7ea      	b.n	8000cf6 <_ZN6braids15MacroOscillator18RenderSineTriangleEPKhPsj+0xa4>
  END_INTERPOLATE_PARAMETER_1
 8000d20:	8863      	ldrh	r3, [r4, #2]
 8000d22:	80e3      	strh	r3, [r4, #6]
}
 8000d24:	b003      	add	sp, #12
 8000d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08000d2c <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj>:
    size_t size) {
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	4617      	mov	r7, r2
  if (parameter_[0] <= 10922) {
 8000d32:	f642 22aa 	movw	r2, #10922	; 0x2aaa
    size_t size) {
 8000d36:	461e      	mov	r6, r3
  analog_oscillator_[0].set_pitch(pitch_);
 8000d38:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    size_t size) {
 8000d3c:	b087      	sub	sp, #28
    pitch_ = pitch;
 8000d3e:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
 8000d42:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
  if (parameter_[0] <= 10922) {
 8000d46:	f9b0 3000 	ldrsh.w	r3, [r0]
    size_t size) {
 8000d4a:	4604      	mov	r4, r0
  if (parameter_[0] <= 10922) {
 8000d4c:	4293      	cmp	r3, r2
    size_t size) {
 8000d4e:	4689      	mov	r9, r1
 8000d50:	f04f 0500 	mov.w	r5, #0
  if (parameter_[0] <= 10922) {
 8000d54:	f300 808b 	bgt.w	8000e6e <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x142>
    shape_ = shape;
 8000d58:	2204      	movs	r2, #4
    parameter_ = parameter;
 8000d5a:	f8a0 5066 	strh.w	r5, [r0, #102]	; 0x66
 8000d5e:	f8a0 5086 	strh.w	r5, [r0, #134]	; 0x86
    shape_ = shape;
 8000d62:	f880 5094 	strb.w	r5, [r0, #148]	; 0x94
    balance = parameter_[0] * 6;
 8000d66:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8000d6a:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
 8000d6e:	006d      	lsls	r5, r5, #1
    balance = 65535 - (parameter_[0] - 10923) * 6;
 8000d70:	b2ad      	uxth	r5, r5
  analog_oscillator_[0].Render(sync, shape_1, NULL, size);
 8000d72:	4649      	mov	r1, r9
 8000d74:	2300      	movs	r3, #0
 8000d76:	463a      	mov	r2, r7
 8000d78:	f104 0058 	add.w	r0, r4, #88	; 0x58
  int16_t* shape_2 = temp_buffer_;
 8000d7c:	f104 0822 	add.w	r8, r4, #34	; 0x22
  analog_oscillator_[0].Render(sync, shape_1, NULL, size);
 8000d80:	9600      	str	r6, [sp, #0]
 8000d82:	f7ff fa0d 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync, shape_2, NULL, size);
 8000d86:	4649      	mov	r1, r9
 8000d88:	2300      	movs	r3, #0
 8000d8a:	4642      	mov	r2, r8
 8000d8c:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8000d90:	9600      	str	r6, [sp, #0]
 8000d92:	f7ff fa05 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  int32_t lp_cutoff = pitch_ - (parameter_[1] >> 1) + 128 * 128;
 8000d96:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8000d9a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
  uint32_t a = table[phase >> 24];
 8000d9e:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8000ecc <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x1a0>
 8000da2:	eba2 0361 	sub.w	r3, r2, r1, asr #1
 8000da6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
  int32_t f = Interpolate824(lut_svf_cutoff, lp_cutoff << 17);
 8000daa:	f383 030f 	usat	r3, #15, r3
 8000dae:	045b      	lsls	r3, r3, #17
 8000db0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8000db4:	f83c 001e 	ldrh.w	r0, [ip, lr, lsl #1]
  uint32_t b = table[(phase >> 24) + 1];
 8000db8:	f10c 0c02 	add.w	ip, ip, #2
 8000dbc:	f83c c01e 	ldrh.w	ip, [ip, lr, lsl #1]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	ebac 0c00 	sub.w	ip, ip, r0
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	fb03 f30c 	mul.w	r3, r3, ip
 8000dcc:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  if (pitch_ > (80 << 7)) {
 8000dd0:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
  int32_t f = Interpolate824(lut_svf_cutoff, lp_cutoff << 17);
 8000dd4:	b283      	uxth	r3, r0
    fuzz_amount -= (pitch_ - (80 << 7)) << 4;
 8000dd6:	bfc8      	it	gt
 8000dd8:	f5a2 5220 	subgt.w	r2, r2, #10240	; 0x2800
  int32_t f = Interpolate824(lut_svf_cutoff, lp_cutoff << 17);
 8000ddc:	9303      	str	r3, [sp, #12]
  int32_t fuzz_amount = parameter_[1] << 1;
 8000dde:	ea4f 0341 	mov.w	r3, r1, lsl #1
    fuzz_amount -= (pitch_ - (80 << 7)) << 4;
 8000de2:	bfc4      	itt	gt
 8000de4:	eba3 1302 	subgt.w	r3, r3, r2, lsl #4
 8000de8:	ea23 73e3 	bicgt.w	r3, r3, r3, asr #31
  return (a * (65535 - balance) + b * balance) >> 16;
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	f647 7bff 	movw	fp, #32767	; 0x7fff
 8000df4:	f5c5 497f 	rsb	r9, r5, #65280	; 0xff00
 8000df8:	b29b      	uxth	r3, r3
  int32_t lp_state = lp_state_;
 8000dfa:	f8d4 c054 	ldr.w	ip, [r4, #84]	; 0x54
  int32_t a = table[index >> 8];
 8000dfe:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8000ed0 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x1a4>
  return (a * (65535 - balance) + b * balance) >> 16;
 8000e02:	f109 09ff 	add.w	r9, r9, #255	; 0xff
 8000e06:	9204      	str	r2, [sp, #16]
 8000e08:	9305      	str	r3, [sp, #20]
  while (size--) {
 8000e0a:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 8000e0e:	d353      	bcc.n	8000eb8 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x18c>
 8000e10:	f938 3b02 	ldrsh.w	r3, [r8], #2
 8000e14:	f937 2b02 	ldrsh.w	r2, [r7], #2
 8000e18:	436b      	muls	r3, r5
 8000e1a:	fb09 3202 	mla	r2, r9, r2, r3
    lp_state += (sample - lp_state) * f >> 15;
 8000e1e:	9903      	ldr	r1, [sp, #12]
 8000e20:	1412      	asrs	r2, r2, #16
 8000e22:	eba2 030c 	sub.w	r3, r2, ip
 8000e26:	434b      	muls	r3, r1
 8000e28:	eb0c 3ce3 	add.w	ip, ip, r3, asr #15
 8000e2c:	45dc      	cmp	ip, fp
 8000e2e:	bfa8      	it	ge
 8000e30:	46dc      	movge	ip, fp
 8000e32:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x198>)
  int32_t b = table[(index >> 8) + 1];
 8000e34:	4824      	ldr	r0, [pc, #144]	; (8000ec8 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x19c>)
 8000e36:	459c      	cmp	ip, r3
 8000e38:	bfb8      	it	lt
 8000e3a:	469c      	movlt	ip, r3
    shifted_sample = lp_state + 32768;
 8000e3c:	f50c 4100 	add.w	r1, ip, #32768	; 0x8000
  int32_t a = table[index >> 8];
 8000e40:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8000e44:	f93a 301e 	ldrsh.w	r3, [sl, lr, lsl #1]
  int32_t b = table[(index >> 8) + 1];
 8000e48:	f930 e01e 	ldrsh.w	lr, [r0, lr, lsl #1]
  return a + ((b - a) * static_cast<int32_t>(index & 0xff) >> 8);
 8000e4c:	b2c9      	uxtb	r1, r1
 8000e4e:	ebae 0e03 	sub.w	lr, lr, r3
 8000e52:	fb01 f10e 	mul.w	r1, r1, lr
 8000e56:	eb03 2121 	add.w	r1, r3, r1, asr #8
  return (a * (65535 - balance) + b * balance) >> 16;
 8000e5a:	9b05      	ldr	r3, [sp, #20]
 8000e5c:	b209      	sxth	r1, r1
 8000e5e:	435a      	muls	r2, r3
 8000e60:	9b04      	ldr	r3, [sp, #16]
 8000e62:	fb03 2101 	mla	r1, r3, r1, r2
 8000e66:	1409      	asrs	r1, r1, #16
 8000e68:	f827 1c02 	strh.w	r1, [r7, #-2]
  while (size--) {
 8000e6c:	e7cd      	b.n	8000e0a <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0xde>
  } else if (parameter_[0] <= 21845) {
 8000e6e:	f245 5255 	movw	r2, #21845	; 0x5555
 8000e72:	4293      	cmp	r3, r2
 8000e74:	dc10      	bgt.n	8000e98 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x16c>
 8000e76:	2203      	movs	r2, #3
    balance = 65535 - (parameter_[0] - 10923) * 6;
 8000e78:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 8000e7c:	3b2b      	subs	r3, #43	; 0x2b
 8000e7e:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
    parameter_ = parameter;
 8000e82:	f8a0 5066 	strh.w	r5, [r0, #102]	; 0x66
 8000e86:	f8a0 5086 	strh.w	r5, [r0, #134]	; 0x86
    shape_ = shape;
 8000e8a:	f880 5094 	strb.w	r5, [r0, #148]	; 0x94
 8000e8e:	005d      	lsls	r5, r3, #1
 8000e90:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
 8000e94:	3d01      	subs	r5, #1
 8000e96:	e76b      	b.n	8000d70 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x44>
    analog_oscillator_[0].set_parameter((parameter_[0] - 21846) * 3);
 8000e98:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 8000e9c:	3b56      	subs	r3, #86	; 0x56
 8000e9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    parameter_ = parameter;
 8000ea2:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
    shape_ = shape;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
 8000eac:	2305      	movs	r3, #5
    parameter_ = parameter;
 8000eae:	f8a0 5086 	strh.w	r5, [r0, #134]	; 0x86
    shape_ = shape;
 8000eb2:	f880 3094 	strb.w	r3, [r0, #148]	; 0x94
 8000eb6:	e75c      	b.n	8000d72 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x46>
  lp_state_ = lp_state;
 8000eb8:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
}
 8000ebc:	b007      	add	sp, #28
 8000ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ec2:	bf00      	nop
 8000ec4:	ffff8001 	.word	0xffff8001
 8000ec8:	08004bce 	.word	0x08004bce
 8000ecc:	080049ca 	.word	0x080049ca
 8000ed0:	08004bcc 	.word	0x08004bcc

08000ed4 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj>:
    size_t size) {
 8000ed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ed8:	461d      	mov	r5, r3
  switch (shape_) {
 8000eda:	f244 2354 	movw	r3, #16980	; 0x4254
 8000ede:	5cc3      	ldrb	r3, [r0, r3]
    size_t size) {
 8000ee0:	4614      	mov	r4, r2
 8000ee2:	3b09      	subs	r3, #9
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	bf98      	it	ls
 8000eea:	4a3c      	ldrls	r2, [pc, #240]	; (8000fdc <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0x108>)
 8000eec:	460e      	mov	r6, r1
 8000eee:	bf98      	it	ls
 8000ef0:	5cd1      	ldrbls	r1, [r2, r3]
    int16_t detune_1 = intervals[parameter_[i] >> 9];
 8000ef2:	f9b0 3000 	ldrsh.w	r3, [r0]
 8000ef6:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8000fe0 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0x10c>
 8000efa:	ea4f 2e63 	mov.w	lr, r3, asr #9
 8000efe:	f93c 801e 	ldrsh.w	r8, [ip, lr, lsl #1]
    int16_t detune_2 = intervals[((parameter_[i] >> 8) + 1) >> 1];
 8000f02:	ea4f 2e23 	mov.w	lr, r3, asr #8
 8000f06:	f10e 0e01 	add.w	lr, lr, #1
 8000f0a:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    int16_t detune = detune_1 + ((detune_2 - detune_1) * xfade >> 16);
 8000f0e:	f93c e01e 	ldrsh.w	lr, [ip, lr, lsl #1]
    uint16_t xfade = parameter_[i] << 8;
 8000f12:	ea4f 2303 	mov.w	r3, r3, lsl #8
    int16_t detune = detune_1 + ((detune_2 - detune_1) * xfade >> 16);
 8000f16:	ebae 0e08 	sub.w	lr, lr, r8
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	fb03 f30e 	mul.w	r3, r3, lr
  analog_oscillator_[0].set_pitch(pitch_);
 8000f20:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  switch (shape_) {
 8000f24:	bf88      	it	hi
 8000f26:	2105      	movhi	r1, #5
    pitch_ = pitch;
 8000f28:	f8a0 706e 	strh.w	r7, [r0, #110]	; 0x6e
    analog_oscillator_[i + 1].set_pitch(pitch_ + detune);
 8000f2c:	4447      	add	r7, r8
 8000f2e:	eb07 4323 	add.w	r3, r7, r3, asr #16
 8000f32:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
    int16_t detune_1 = intervals[parameter_[i] >> 9];
 8000f36:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    parameter_ = parameter;
 8000f3a:	2200      	movs	r2, #0
    int16_t detune_2 = intervals[((parameter_[i] >> 8) + 1) >> 1];
 8000f3c:	ea4f 2e23 	mov.w	lr, r3, asr #8
 8000f40:	f10e 0e01 	add.w	lr, lr, #1
    int16_t detune_1 = intervals[parameter_[i] >> 9];
 8000f44:	125f      	asrs	r7, r3, #9
    int16_t detune_2 = intervals[((parameter_[i] >> 8) + 1) >> 1];
 8000f46:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    int16_t detune_1 = intervals[parameter_[i] >> 9];
 8000f4a:	f93c 7017 	ldrsh.w	r7, [ip, r7, lsl #1]
    int16_t detune = detune_1 + ((detune_2 - detune_1) * xfade >> 16);
 8000f4e:	f93c c01e 	ldrsh.w	ip, [ip, lr, lsl #1]
    uint16_t xfade = parameter_[i] << 8;
 8000f52:	021b      	lsls	r3, r3, #8
    int16_t detune = detune_1 + ((detune_2 - detune_1) * xfade >> 16);
 8000f54:	ebac 0c07 	sub.w	ip, ip, r7
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	fb03 f30c 	mul.w	r3, r3, ip
    analog_oscillator_[i + 1].set_pitch(pitch_ + detune);
 8000f5e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8000f62:	f8a0 2066 	strh.w	r2, [r0, #102]	; 0x66
 8000f66:	4467      	add	r7, ip
 8000f68:	eb07 4323 	add.w	r3, r7, r3, asr #16
    pitch_ = pitch;
 8000f6c:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
  std::fill(&buffer[0], &buffer[size], 0);
 8000f70:	4623      	mov	r3, r4
    parameter_ = parameter;
 8000f72:	f8a0 2086 	strh.w	r2, [r0, #134]	; 0x86
 8000f76:	f8a0 20a6 	strh.w	r2, [r0, #166]	; 0xa6
    shape_ = shape;
 8000f7a:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 8000f7e:	f880 1094 	strb.w	r1, [r0, #148]	; 0x94
 8000f82:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
 8000f86:	eb04 0845 	add.w	r8, r4, r5, lsl #1
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 8000f8a:	4598      	cmp	r8, r3
 8000f8c:	d002      	beq.n	8000f94 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xc0>
	*__first = __tmp;
 8000f8e:	f823 2b02 	strh.w	r2, [r3], #2
 8000f92:	e7fa      	b.n	8000f8a <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xb6>
      buffer[j] += temp_buffer_[j] * 21 >> 6;
 8000f94:	f04f 0b15 	mov.w	fp, #21
 8000f98:	f100 0758 	add.w	r7, r0, #88	; 0x58
 8000f9c:	f100 0ab8 	add.w	sl, r0, #184	; 0xb8
    analog_oscillator_[i].Render(sync, temp_buffer_, NULL, size);
 8000fa0:	f100 0922 	add.w	r9, r0, #34	; 0x22
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	4638      	mov	r0, r7
 8000fa8:	9500      	str	r5, [sp, #0]
 8000faa:	464a      	mov	r2, r9
 8000fac:	4631      	mov	r1, r6
 8000fae:	f7ff f8f7 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
 8000fb2:	4648      	mov	r0, r9
 8000fb4:	4623      	mov	r3, r4
    for (size_t j = 0; j < size; ++j) {
 8000fb6:	4598      	cmp	r8, r3
 8000fb8:	d00a      	beq.n	8000fd0 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xfc>
      buffer[j] += temp_buffer_[j] * 21 >> 6;
 8000fba:	f930 1b02 	ldrsh.w	r1, [r0], #2
 8000fbe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fc2:	fb0b f101 	mul.w	r1, fp, r1
 8000fc6:	eb02 12a1 	add.w	r2, r2, r1, asr #6
 8000fca:	f823 2b02 	strh.w	r2, [r3], #2
    for (size_t j = 0; j < size; ++j) {
 8000fce:	e7f2      	b.n	8000fb6 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xe2>
 8000fd0:	3720      	adds	r7, #32
  for (size_t i = 0; i < 3; ++i) {
 8000fd2:	4557      	cmp	r7, sl
 8000fd4:	d1e6      	bne.n	8000fa4 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xd0>
}
 8000fd6:	b003      	add	sp, #12
 8000fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fdc:	08004743 	.word	0x08004743
 8000fe0:	08004746 	.word	0x08004746

08000fe4 <_ZN6braids15MacroOscillator13RenderSawCombEPKhPsj>:
}

void MacroOscillator::RenderSawComb(
  const uint8_t* sync,
  int16_t* buffer,
  size_t size) {
 8000fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000fe6:	461d      	mov	r5, r3
    parameter_ = parameter;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	4604      	mov	r4, r0
 8000fec:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
    pitch_ = pitch;
 8000ff0:	8900      	ldrh	r0, [r0, #8]
    shape_ = shape;
 8000ff2:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    pitch_ = pitch;
 8000ff6:	f8a4 006e 	strh.w	r0, [r4, #110]	; 0x6e
  analog_oscillator_[0].set_parameter(0);
  analog_oscillator_[0].set_pitch(pitch_);
  analog_oscillator_[0].set_shape(OSC_SHAPE_SAW);
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8000ffa:	9500      	str	r5, [sp, #0]
 8000ffc:	f104 0058 	add.w	r0, r4, #88	; 0x58
  size_t size) {
 8001000:	4617      	mov	r7, r2
 8001002:	460e      	mov	r6, r1
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8001004:	f7ff f8cc 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  
  digital_oscillator_.set_parameters(parameter_[0], parameter_[1]);
 8001008:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  }

  inline void set_parameters(
      int16_t parameter_1,
      int16_t parameter_2) {
    parameter_[0] = parameter_1;
 800100c:	8822      	ldrh	r2, [r4, #0]
    parameter_[1] = parameter_2;
 800100e:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
    if (pitch_ > (90 << 7) && pitch > (90 << 7)) {
 8001012:	f9b4 30d0 	ldrsh.w	r3, [r4, #208]	; 0xd0
    parameter_[0] = parameter_1;
 8001016:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
    if (pitch_ > (90 << 7) && pitch > (90 << 7)) {
 800101a:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 800101e:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
  digital_oscillator_.set_pitch(pitch_);
 8001022:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8001026:	dd11      	ble.n	800104c <_ZN6braids15MacroOscillator13RenderSawCombEPKhPsj+0x68>
 8001028:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 800102c:	dd0e      	ble.n	800104c <_ZN6braids15MacroOscillator13RenderSawCombEPKhPsj+0x68>
      pitch_ = (static_cast<int32_t>(pitch_) + pitch) >> 1;
 800102e:	4413      	add	r3, r2
 8001030:	105b      	asrs	r3, r3, #1
 8001032:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
    shape_ = shape;
 8001036:	2302      	movs	r3, #2
  digital_oscillator_.set_shape(OSC_SHAPE_COMB_FILTER);
  digital_oscillator_.Render(sync, buffer, size);
 8001038:	463a      	mov	r2, r7
 800103a:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
 800103e:	4631      	mov	r1, r6
 8001040:	462b      	mov	r3, r5
}
 8001042:	b003      	add	sp, #12
 8001044:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  digital_oscillator_.Render(sync, buffer, size);
 8001048:	f7ff bbf2 	b.w	8000830 <_ZN6braids17DigitalOscillator6RenderEPKhPsj>
      pitch_ = pitch;
 800104c:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
 8001050:	e7f1      	b.n	8001036 <_ZN6braids15MacroOscillator13RenderSawCombEPKhPsj+0x52>

08001052 <_ZN6braids15MacroOscillator13RenderDigitalEPKhPsj>:
    size_t size) {
 8001052:	b470      	push	{r4, r5, r6}
  digital_oscillator_.set_parameters(parameter_[0], parameter_[1]);
 8001054:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
    parameter_[0] = parameter_1;
 8001058:	8805      	ldrh	r5, [r0, #0]
    parameter_[1] = parameter_2;
 800105a:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
    if (pitch_ > (90 << 7) && pitch > (90 << 7)) {
 800105e:	f9b0 40d0 	ldrsh.w	r4, [r0, #208]	; 0xd0
    parameter_[0] = parameter_1;
 8001062:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
    if (pitch_ > (90 << 7) && pitch > (90 << 7)) {
 8001066:	f5b4 5f34 	cmp.w	r4, #11520	; 0x2d00
 800106a:	f100 06b8 	add.w	r6, r0, #184	; 0xb8
  digital_oscillator_.set_pitch(pitch_);
 800106e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8001072:	dd10      	ble.n	8001096 <_ZN6braids15MacroOscillator13RenderDigitalEPKhPsj+0x44>
 8001074:	f5b5 5f34 	cmp.w	r5, #11520	; 0x2d00
 8001078:	dd0d      	ble.n	8001096 <_ZN6braids15MacroOscillator13RenderDigitalEPKhPsj+0x44>
      pitch_ = (static_cast<int32_t>(pitch_) + pitch) >> 1;
 800107a:	442c      	add	r4, r5
 800107c:	1064      	asrs	r4, r4, #1
 800107e:	f8a0 40d0 	strh.w	r4, [r0, #208]	; 0xd0
      shape_ - MACRO_OSC_SHAPE_TRIPLE_RING_MOD));
 8001082:	f244 2454 	movw	r4, #16980	; 0x4254
 8001086:	5d04      	ldrb	r4, [r0, r4]
 8001088:	3c0d      	subs	r4, #13
    shape_ = shape;
 800108a:	f880 40d5 	strb.w	r4, [r0, #213]	; 0xd5
  digital_oscillator_.Render(sync, buffer, size);
 800108e:	4630      	mov	r0, r6
}
 8001090:	bc70      	pop	{r4, r5, r6}
  digital_oscillator_.Render(sync, buffer, size);
 8001092:	f7ff bbcd 	b.w	8000830 <_ZN6braids17DigitalOscillator6RenderEPKhPsj>
      pitch_ = pitch;
 8001096:	f8a0 50d0 	strh.w	r5, [r0, #208]	; 0xd0
 800109a:	e7f2      	b.n	8001082 <_ZN6braids15MacroOscillator13RenderDigitalEPKhPsj+0x30>

0800109c <_ZN6braids15MacroOscillator6RenderEPKhPsj>:
    size_t size) {
 800109c:	b4f0      	push	{r4, r5, r6, r7}
  RenderFn fn = fn_table_[shape_];
 800109e:	f244 2554 	movw	r5, #16980	; 0x4254
 80010a2:	4c09      	ldr	r4, [pc, #36]	; (80010c8 <_ZN6braids15MacroOscillator6RenderEPKhPsj+0x2c>)
 80010a4:	5d45      	ldrb	r5, [r0, r5]
 80010a6:	eb04 06c5 	add.w	r6, r4, r5, lsl #3
 80010aa:	6876      	ldr	r6, [r6, #4]
 80010ac:	f854 4035 	ldr.w	r4, [r4, r5, lsl #3]
  (this->*fn)(sync, buffer, size);
 80010b0:	1075      	asrs	r5, r6, #1
 80010b2:	07f6      	lsls	r6, r6, #31
 80010b4:	eb00 0705 	add.w	r7, r0, r5
 80010b8:	bf44      	itt	mi
 80010ba:	5940      	ldrmi	r0, [r0, r5]
 80010bc:	5904      	ldrmi	r4, [r0, r4]
 80010be:	4638      	mov	r0, r7
 80010c0:	46a4      	mov	ip, r4
}
 80010c2:	bcf0      	pop	{r4, r5, r6, r7}
  (this->*fn)(sync, buffer, size);
 80010c4:	4760      	bx	ip
 80010c6:	bf00      	nop
 80010c8:	20000118 	.word	0x20000118

080010cc <_ZN6braids9Quantizer4InitEv>:
 80010cc:	2301      	movs	r3, #1
 80010ce:	7003      	strb	r3, [r0, #0]
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80010d6:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 80010da:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 80010de:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80010e2:	3002      	adds	r0, #2
 80010e4:	f820 3b02 	strh.w	r3, [r0], #2
 80010e8:	3380      	adds	r3, #128	; 0x80
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010f0:	d1f8      	bne.n	80010e4 <_ZN6braids9Quantizer4InitEv+0x18>
 80010f2:	4770      	bx	lr

080010f4 <_ZN6braids9Quantizer9ConfigureEPKssj>:
 80010f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010f8:	b3a1      	cbz	r1, 8001164 <_ZN6braids9Quantizer9ConfigureEPKssj+0x70>
 80010fa:	b39b      	cbz	r3, 8001164 <_ZN6braids9Quantizer9ConfigureEPKssj+0x70>
 80010fc:	b392      	cbz	r2, 8001164 <_ZN6braids9Quantizer9ConfigureEPKssj+0x70>
 80010fe:	2401      	movs	r4, #1
 8001100:	4607      	mov	r7, r0
 8001102:	f807 4b82 	strb.w	r4, [r7], #130
 8001106:	2400      	movs	r4, #0
 8001108:	f647 78ff 	movw	r8, #32767	; 0x7fff
 800110c:	4626      	mov	r6, r4
 800110e:	f103 4e00 	add.w	lr, r3, #2147483648	; 0x80000000
 8001112:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800116c <_ZN6braids9Quantizer9ConfigureEPKssj+0x78>
 8001116:	f100 0c80 	add.w	ip, r0, #128	; 0x80
 800111a:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800111e:	ebae 0504 	sub.w	r5, lr, r4
 8001122:	f931 b015 	ldrsh.w	fp, [r1, r5, lsl #1]
 8001126:	43f5      	mvns	r5, r6
 8001128:	f931 a014 	ldrsh.w	sl, [r1, r4, lsl #1]
 800112c:	fb02 b505 	mla	r5, r2, r5, fp
 8001130:	fb06 aa02 	mla	sl, r6, r2, sl
 8001134:	45c2      	cmp	sl, r8
 8001136:	bfa8      	it	ge
 8001138:	46c2      	movge	sl, r8
 800113a:	4545      	cmp	r5, r8
 800113c:	bfa8      	it	ge
 800113e:	4645      	movge	r5, r8
 8001140:	45ca      	cmp	sl, r9
 8001142:	bfb8      	it	lt
 8001144:	46ca      	movlt	sl, r9
 8001146:	454d      	cmp	r5, r9
 8001148:	bfb8      	it	lt
 800114a:	464d      	movlt	r5, r9
 800114c:	3401      	adds	r4, #1
 800114e:	42a3      	cmp	r3, r4
 8001150:	f827 ab02 	strh.w	sl, [r7], #2
 8001154:	f82c 5902 	strh.w	r5, [ip], #-2
 8001158:	bf9c      	itt	ls
 800115a:	3601      	addls	r6, #1
 800115c:	2400      	movls	r4, #0
 800115e:	4560      	cmp	r0, ip
 8001160:	d1dd      	bne.n	800111e <_ZN6braids9Quantizer9ConfigureEPKssj+0x2a>
 8001162:	e001      	b.n	8001168 <_ZN6braids9Quantizer9ConfigureEPKssj+0x74>
 8001164:	2300      	movs	r3, #0
 8001166:	7003      	strb	r3, [r0, #0]
 8001168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800116c:	ffff8001 	.word	0xffff8001

08001170 <_ZN6braids9Quantizer7ProcessEll>:
 8001170:	7803      	ldrb	r3, [r0, #0]
 8001172:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001174:	b15b      	cbz	r3, 800118e <_ZN6braids9Quantizer7ProcessEll+0x1e>
 8001176:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800117a:	1a89      	subs	r1, r1, r2
 800117c:	428b      	cmp	r3, r1
 800117e:	dc08      	bgt.n	8001192 <_ZN6braids9Quantizer7ProcessEll+0x22>
 8001180:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8001184:	428b      	cmp	r3, r1
 8001186:	db04      	blt.n	8001192 <_ZN6braids9Quantizer7ProcessEll+0x22>
 8001188:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
 800118c:	4411      	add	r1, r2
 800118e:	4608      	mov	r0, r1
 8001190:	bdf0      	pop	{r4, r5, r6, r7, pc}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 8001192:	247b      	movs	r4, #123	; 0x7b
 8001194:	b20f      	sxth	r7, r1
 8001196:	f100 0308 	add.w	r3, r0, #8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 800119a:	2c00      	cmp	r4, #0
 800119c:	dd0c      	ble.n	80011b8 <_ZN6braids9Quantizer7ProcessEll+0x48>
	{
	  _DistanceType __half = __len >> 1;
 800119e:	1065      	asrs	r5, r4, #1
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__val, __middle))
 80011a0:	f933 c015 	ldrsh.w	ip, [r3, r5, lsl #1]
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
 80011a4:	eb03 0645 	add.w	r6, r3, r5, lsl #1
 80011a8:	45bc      	cmp	ip, r7
 80011aa:	dc03      	bgt.n	80011b4 <_ZN6braids9Quantizer7ProcessEll+0x44>
	    __len = __half;
	  else
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 80011ac:	1b64      	subs	r4, r4, r5
	      ++__first;
 80011ae:	1cb3      	adds	r3, r6, #2
	      __len = __len - __half - 1;
 80011b0:	3c01      	subs	r4, #1
 80011b2:	e7f2      	b.n	800119a <_ZN6braids9Quantizer7ProcessEll+0x2a>
	  _DistanceType __half = __len >> 1;
 80011b4:	462c      	mov	r4, r5
 80011b6:	e7f0      	b.n	800119a <_ZN6braids9Quantizer7ProcessEll+0x2a>
 80011b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80011bc:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 80011c0:	1c84      	adds	r4, r0, #2
 80011c2:	1b1b      	subs	r3, r3, r4
 80011c4:	105b      	asrs	r3, r3, #1
 80011c6:	b21f      	sxth	r7, r3
 80011c8:	3b02      	subs	r3, #2
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	42bb      	cmp	r3, r7
 80011ce:	dc11      	bgt.n	80011f4 <_ZN6braids9Quantizer7ProcessEll+0x84>
 80011d0:	eb00 0443 	add.w	r4, r0, r3, lsl #1
 80011d4:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 80011d8:	1b0c      	subs	r4, r1, r4
 80011da:	2c00      	cmp	r4, #0
 80011dc:	bfb8      	it	lt
 80011de:	4264      	neglt	r4, r4
 80011e0:	b224      	sxth	r4, r4
 80011e2:	42a6      	cmp	r6, r4
 80011e4:	bfc8      	it	gt
 80011e6:	461d      	movgt	r5, r3
 80011e8:	f103 0301 	add.w	r3, r3, #1
 80011ec:	bfc8      	it	gt
 80011ee:	4626      	movgt	r6, r4
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	e7eb      	b.n	80011cc <_ZN6braids9Quantizer7ProcessEll+0x5c>
 80011f4:	eb00 0345 	add.w	r3, r0, r5, lsl #1
 80011f8:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 80011fc:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
 8001200:	f930 4015 	ldrsh.w	r4, [r0, r5, lsl #1]
 8001204:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 8001208:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800120c:	4434      	add	r4, r6
 800120e:	1124      	asrs	r4, r4, #4
 8001210:	f8c0 4108 	str.w	r4, [r0, #264]	; 0x108
 8001214:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001218:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800121c:	4433      	add	r3, r6
 800121e:	111b      	asrs	r3, r3, #4
 8001220:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8001224:	e7b2      	b.n	800118c <_ZN6braids9Quantizer7ProcessEll+0x1c>
	...

08001228 <_ZN6braids8Settings5ResetEv>:
  }
  CheckPaques();
}

void Settings::Reset() {
  memcpy(&data_, &kInitSettings, sizeof(SettingsData));
 8001228:	2260      	movs	r2, #96	; 0x60
void Settings::Reset() {
 800122a:	b508      	push	{r3, lr}
  memcpy(&data_, &kInitSettings, sizeof(SettingsData));
 800122c:	4903      	ldr	r1, [pc, #12]	; (800123c <_ZN6braids8Settings5ResetEv+0x14>)
 800122e:	f003 fa4f 	bl	80046d0 <memcpy>
  data_.magic_byte = 'M';
 8001232:	224d      	movs	r2, #77	; 0x4d
 8001234:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
}
 8001238:	bd08      	pop	{r3, pc}
 800123a:	bf00      	nop
 800123c:	0800dd50 	.word	0x0800dd50

08001240 <_ZN6braids8Settings11CheckPaquesEv>:
  data_.magic_byte = 'M';
  //storage.ParsimoniousSave(data_, &version_token_);
  CheckPaques();
}

void Settings::CheckPaques() {
 8001240:	b510      	push	{r4, lr}
  paques_ = !strcmp(data_.marquee_text, "49");
 8001242:	4905      	ldr	r1, [pc, #20]	; (8001258 <_ZN6braids8Settings11CheckPaquesEv+0x18>)
void Settings::CheckPaques() {
 8001244:	4604      	mov	r4, r0
  paques_ = !strcmp(data_.marquee_text, "49");
 8001246:	3028      	adds	r0, #40	; 0x28
 8001248:	f7fe ff80 	bl	800014c <strcmp>
 800124c:	fab0 f080 	clz	r0, r0
 8001250:	0940      	lsrs	r0, r0, #5
 8001252:	f884 0062 	strb.w	r0, [r4, #98]	; 0x62
}
 8001256:	bd10      	pop	{r4, pc}
 8001258:	0800db06 	.word	0x0800db06

0800125c <_ZN6braids8Settings4InitEv>:
void Settings::Init() {
 800125c:	b570      	push	{r4, r5, r6, lr}
 800125e:	4604      	mov	r4, r0
 8001260:	260c      	movs	r6, #12
    Reset();
 8001262:	f7ff ffe1 	bl	8001228 <_ZN6braids8Settings5ResetEv>
  for (int32_t i = 0; i <= SETTING_LAST_EDITABLE_SETTING; ++i) {
 8001266:	2200      	movs	r2, #0
  bool settings_within_range = true;
 8001268:	2301      	movs	r3, #1
        value >= setting_metadata.min_value && \
 800126a:	481b      	ldr	r0, [pc, #108]	; (80012d8 <_ZN6braids8Settings4InitEv+0x7c>)
 800126c:	b15b      	cbz	r3, 8001286 <_ZN6braids8Settings4InitEv+0x2a>
 800126e:	fb06 f102 	mul.w	r1, r6, r2
  }
  
  uint8_t GetValue(Setting setting) const {
    const uint8_t* data = static_cast<const uint8_t*>(
        static_cast<const void*>(&data_));
    return data[setting];
 8001272:	5ca5      	ldrb	r5, [r4, r2]
    settings_within_range = settings_within_range && \
 8001274:	5c0b      	ldrb	r3, [r1, r0]
 8001276:	42ab      	cmp	r3, r5
 8001278:	d82b      	bhi.n	80012d2 <_ZN6braids8Settings4InitEv+0x76>
        value <= setting_metadata.max_value;
 800127a:	4401      	add	r1, r0
        value >= setting_metadata.min_value && \
 800127c:	784b      	ldrb	r3, [r1, #1]
 800127e:	42ab      	cmp	r3, r5
 8001280:	bf34      	ite	cc
 8001282:	2300      	movcc	r3, #0
 8001284:	2301      	movcs	r3, #1
  for (int32_t i = 0; i <= SETTING_LAST_EDITABLE_SETTING; ++i) {
 8001286:	3201      	adds	r2, #1
 8001288:	2a14      	cmp	r2, #20
 800128a:	d1ef      	bne.n	800126c <_ZN6braids8Settings4InitEv+0x10>
  settings_within_range = settings_within_range && data_.magic_byte == 'M';
 800128c:	b1cb      	cbz	r3, 80012c2 <_ZN6braids8Settings4InitEv+0x66>
 800128e:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
 8001292:	2b4d      	cmp	r3, #77	; 0x4d
 8001294:	d115      	bne.n	80012c2 <_ZN6braids8Settings4InitEv+0x66>
    settings_within_range = settings_within_range && \
 8001296:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8001298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800129c:	d911      	bls.n	80012c2 <_ZN6braids8Settings4InitEv+0x66>
    settings_within_range = settings_within_range && \
 800129e:	f641 733f 	movw	r3, #7999	; 0x1f3f
 80012a2:	f643 617e 	movw	r1, #15998	; 0x3e7e
 80012a6:	8c22      	ldrh	r2, [r4, #32]
 80012a8:	441a      	add	r2, r3
 80012aa:	b292      	uxth	r2, r2
 80012ac:	428a      	cmp	r2, r1
 80012ae:	d808      	bhi.n	80012c2 <_ZN6braids8Settings4InitEv+0x66>
    settings_within_range = settings_within_range && \
 80012b0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80012b2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80012b6:	d904      	bls.n	80012c2 <_ZN6braids8Settings4InitEv+0x66>
    settings_within_range = settings_within_range && \
 80012b8:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 80012ba:	4413      	add	r3, r2
 80012bc:	b29b      	uxth	r3, r3
 80012be:	428b      	cmp	r3, r1
 80012c0:	d902      	bls.n	80012c8 <_ZN6braids8Settings4InitEv+0x6c>
    Reset();
 80012c2:	4620      	mov	r0, r4
 80012c4:	f7ff ffb0 	bl	8001228 <_ZN6braids8Settings5ResetEv>
  CheckPaques();
 80012c8:	4620      	mov	r0, r4
}
 80012ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  CheckPaques();
 80012ce:	f7ff bfb7 	b.w	8001240 <_ZN6braids8Settings11CheckPaquesEv>
        value >= setting_metadata.min_value && \
 80012d2:	2300      	movs	r3, #0
 80012d4:	e7d7      	b.n	8001286 <_ZN6braids8Settings4InitEv+0x2a>
 80012d6:	bf00      	nop
 80012d8:	0800db0c 	.word	0x0800db0c

080012dc <_ZN6braids8Settings4SaveEv>:
  data_.magic_byte = 'M';
 80012dc:	234d      	movs	r3, #77	; 0x4d
 80012de:	f880 305f 	strb.w	r3, [r0, #95]	; 0x5f
  CheckPaques();
 80012e2:	f7ff bfad 	b.w	8001240 <_ZN6braids8Settings11CheckPaquesEv>

080012e6 <_ZN6braids3Adc4InitEv>:
 80012e6:	4770      	bx	lr

080012e8 <_Z18SystemClock_Configv>:
 80012e8:	b510      	push	{r4, lr}
 80012ea:	2414      	movs	r4, #20
 80012ec:	b090      	sub	sp, #64	; 0x40
 80012ee:	4622      	mov	r2, r4
 80012f0:	2100      	movs	r1, #0
 80012f2:	a808      	add	r0, sp, #32
 80012f4:	f003 f9f7 	bl	80046e6 <memset>
 80012f8:	4622      	mov	r2, r4
 80012fa:	2100      	movs	r1, #0
 80012fc:	a801      	add	r0, sp, #4
 80012fe:	f003 f9f2 	bl	80046e6 <memset>
 8001302:	2402      	movs	r4, #2
 8001304:	2201      	movs	r2, #1
 8001306:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800130a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800130e:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
 8001312:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001316:	a806      	add	r0, sp, #24
 8001318:	920a      	str	r2, [sp, #40]	; 0x28
 800131a:	930f      	str	r3, [sp, #60]	; 0x3c
 800131c:	f002 fdac 	bl	8003e78 <HAL_RCC_OscConfig>
 8001320:	230f      	movs	r3, #15
 8001322:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001326:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800132a:	2300      	movs	r3, #0
 800132c:	4621      	mov	r1, r4
 800132e:	a801      	add	r0, sp, #4
 8001330:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8001334:	9305      	str	r3, [sp, #20]
 8001336:	f003 f81f 	bl	8004378 <HAL_RCC_ClockConfig>
 800133a:	b010      	add	sp, #64	; 0x40
 800133c:	bd10      	pop	{r4, pc}
	...

08001340 <main>:
 8001340:	b500      	push	{lr}
 8001342:	b089      	sub	sp, #36	; 0x24
 8001344:	f001 fb18 	bl	8002978 <HAL_Init>
 8001348:	f7ff ffce 	bl	80012e8 <_Z18SystemClock_Configv>
 800134c:	2210      	movs	r2, #16
 800134e:	2100      	movs	r1, #0
 8001350:	eb0d 0002 	add.w	r0, sp, r2
 8001354:	f003 f9c7 	bl	80046e6 <memset>
 8001358:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <main+0x84>)
 800135a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800135e:	699a      	ldr	r2, [r3, #24]
 8001360:	4819      	ldr	r0, [pc, #100]	; (80013c8 <main+0x88>)
 8001362:	f042 0210 	orr.w	r2, r2, #16
 8001366:	619a      	str	r2, [r3, #24]
 8001368:	699a      	ldr	r2, [r3, #24]
 800136a:	f002 0210 	and.w	r2, r2, #16
 800136e:	9201      	str	r2, [sp, #4]
 8001370:	9a01      	ldr	r2, [sp, #4]
 8001372:	699a      	ldr	r2, [r3, #24]
 8001374:	f042 0220 	orr.w	r2, r2, #32
 8001378:	619a      	str	r2, [r3, #24]
 800137a:	699a      	ldr	r2, [r3, #24]
 800137c:	f002 0220 	and.w	r2, r2, #32
 8001380:	9202      	str	r2, [sp, #8]
 8001382:	9a02      	ldr	r2, [sp, #8]
 8001384:	699a      	ldr	r2, [r3, #24]
 8001386:	f042 0204 	orr.w	r2, r2, #4
 800138a:	619a      	str	r2, [r3, #24]
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	2200      	movs	r2, #0
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	9303      	str	r3, [sp, #12]
 8001396:	9b03      	ldr	r3, [sp, #12]
 8001398:	f001 fdc7 	bl	8002f2a <HAL_GPIO_WritePin>
 800139c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013a0:	2301      	movs	r3, #1
 80013a2:	2100      	movs	r1, #0
 80013a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013a8:	2302      	movs	r3, #2
 80013aa:	4807      	ldr	r0, [pc, #28]	; (80013c8 <main+0x88>)
 80013ac:	e9cd 1306 	strd	r1, r3, [sp, #24]
 80013b0:	a904      	add	r1, sp, #16
 80013b2:	f001 fc49 	bl	8002c48 <HAL_GPIO_Init>
 80013b6:	a804      	add	r0, sp, #16
 80013b8:	f000 fa82 	bl	80018c0 <_ZN8MainLoop4initEv>
 80013bc:	a804      	add	r0, sp, #16
 80013be:	f000 fca5 	bl	8001d0c <_ZN8MainLoop4loopEv>
 80013c2:	e7fb      	b.n	80013bc <main+0x7c>
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40011000 	.word	0x40011000

080013cc <HAL_MspInit>:
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <HAL_MspInit+0x5c>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	4a14      	ldr	r2, [pc, #80]	; (8001428 <HAL_MspInit+0x5c>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6193      	str	r3, [r2, #24]
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_MspInit+0x5c>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <HAL_MspInit+0x5c>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	4a0e      	ldr	r2, [pc, #56]	; (8001428 <HAL_MspInit+0x5c>)
 80013f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f4:	61d3      	str	r3, [r2, #28]
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <HAL_MspInit+0x5c>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <HAL_MspInit+0x60>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <HAL_MspInit+0x60>)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6053      	str	r3, [r2, #4]
 800141e:	bf00      	nop
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	40021000 	.word	0x40021000
 800142c:	40010000 	.word	0x40010000

08001430 <HAL_I2C_MspInit>:
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	f107 0310 	add.w	r3, r7, #16
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a15      	ldr	r2, [pc, #84]	; (80014a0 <HAL_I2C_MspInit+0x70>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d123      	bne.n	8001498 <HAL_I2C_MspInit+0x68>
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <HAL_I2C_MspInit+0x74>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a13      	ldr	r2, [pc, #76]	; (80014a4 <HAL_I2C_MspInit+0x74>)
 8001456:	f043 0308 	orr.w	r3, r3, #8
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <HAL_I2C_MspInit+0x74>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	23c0      	movs	r3, #192	; 0xc0
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	2312      	movs	r3, #18
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	2303      	movs	r3, #3
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	f107 0310 	add.w	r3, r7, #16
 8001478:	4619      	mov	r1, r3
 800147a:	480b      	ldr	r0, [pc, #44]	; (80014a8 <HAL_I2C_MspInit+0x78>)
 800147c:	f001 fbe4 	bl	8002c48 <HAL_GPIO_Init>
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_I2C_MspInit+0x74>)
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_I2C_MspInit+0x74>)
 8001486:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800148a:	61d3      	str	r3, [r2, #28]
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_I2C_MspInit+0x74>)
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	bf00      	nop
 800149a:	3720      	adds	r7, #32
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40005400 	.word	0x40005400
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40010c00 	.word	0x40010c00

080014ac <NMI_Handler>:
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <HardFault_Handler>:
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	e7fe      	b.n	80014bc <HardFault_Handler+0x4>

080014be <MemManage_Handler>:
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	e7fe      	b.n	80014c2 <MemManage_Handler+0x4>

080014c4 <BusFault_Handler>:
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	e7fe      	b.n	80014c8 <BusFault_Handler+0x4>

080014ca <UsageFault_Handler>:
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	e7fe      	b.n	80014ce <UsageFault_Handler+0x4>

080014d0 <SVC_Handler>:
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <DebugMon_Handler>:
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <PendSV_Handler>:
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <SysTick_Handler>:
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	f001 fa84 	bl	8002a04 <HAL_IncTick>
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}

08001500 <SystemInit>:
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <SystemInit+0x5c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a14      	ldr	r2, [pc, #80]	; (800155c <SystemInit+0x5c>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <SystemInit+0x5c>)
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	4911      	ldr	r1, [pc, #68]	; (800155c <SystemInit+0x5c>)
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <SystemInit+0x60>)
 8001518:	4013      	ands	r3, r2
 800151a:	604b      	str	r3, [r1, #4]
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <SystemInit+0x5c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0e      	ldr	r2, [pc, #56]	; (800155c <SystemInit+0x5c>)
 8001522:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <SystemInit+0x5c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0a      	ldr	r2, [pc, #40]	; (800155c <SystemInit+0x5c>)
 8001532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <SystemInit+0x5c>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <SystemInit+0x5c>)
 800153e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001542:	6053      	str	r3, [r2, #4]
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <SystemInit+0x5c>)
 8001546:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <SystemInit+0x64>)
 800154e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	40021000 	.word	0x40021000
 8001560:	f8ff0000 	.word	0xf8ff0000
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <_ZN12ChordManager4initEv>:



void ChordManager::init(void) {

	this->currentChordIntervals[0]=0;
 8001568:	2300      	movs	r3, #0
 800156a:	6003      	str	r3, [r0, #0]
	this->currentChordIntervals[1]=0;
 800156c:	8083      	strh	r3, [r0, #4]
	this->currentChordIntervals[2]=0;
	this->pitch=0;
 800156e:	6083      	str	r3, [r0, #8]
}
 8001570:	4770      	bx	lr
	...

08001574 <_ZN12ChordManager17calculateVoicingsElttt>:


void ChordManager::calculateVoicings(int32_t pitchValueIn, uint16_t qualityValueIn,uint16_t variationValueIn,uint16_t voicingValue)
{
 8001574:	b510      	push	{r4, lr}
	// 820-1640  = 1
	// 1640-2460 = 2
	// 2460-3280 = 3
	// 3280-4100 = 4
	// 4100-4095 = 5
	if(param>4100)
 8001576:	f241 0404 	movw	r4, #4100	; 0x1004
	uint8_t quality = calculateQuality(qualityValueIn>>2);
 800157a:	0892      	lsrs	r2, r2, #2
	if(param>4100)
 800157c:	42a2      	cmp	r2, r4
 800157e:	dd09      	ble.n	8001594 <_ZN12ChordManager17calculateVoicingsElttt+0x20>
		return 5;
 8001580:	2405      	movs	r4, #5
	uint8_t variation = calculateVariation(variationValueIn>>2,quality);
 8001582:	089b      	lsrs	r3, r3, #2
	}

	if(quality==3 ||quality==5)
	{
		// 0 - 2
		if(param>2730)
 8001584:	f640 22aa 	movw	r2, #2730	; 0xaaa
 8001588:	4293      	cmp	r3, r2
 800158a:	d83f      	bhi.n	800160c <_ZN12ChordManager17calculateVoicingsElttt+0x98>
			return 3;
 800158c:	f240 5255 	movw	r2, #1365	; 0x555
 8001590:	4293      	cmp	r3, r2
 8001592:	e034      	b.n	80015fe <_ZN12ChordManager17calculateVoicingsElttt+0x8a>
	if(param>3280)
 8001594:	f5b2 6f4d 	cmp.w	r2, #3280	; 0xcd0
	uint8_t quality = calculateQuality(qualityValueIn>>2);
 8001598:	b294      	uxth	r4, r2
	if(param>3280)
 800159a:	dc16      	bgt.n	80015ca <_ZN12ChordManager17calculateVoicingsElttt+0x56>
	if(param>2460)
 800159c:	f640 129c 	movw	r2, #2460	; 0x99c
 80015a0:	4294      	cmp	r4, r2
 80015a2:	d80f      	bhi.n	80015c4 <_ZN12ChordManager17calculateVoicingsElttt+0x50>
	if(param>1640)
 80015a4:	f5b4 6fcd 	cmp.w	r4, #1640	; 0x668
 80015a8:	d82d      	bhi.n	8001606 <_ZN12ChordManager17calculateVoicingsElttt+0x92>
		return 1;
 80015aa:	f5b4 7f4d 	cmp.w	r4, #820	; 0x334
 80015ae:	ea4f 02a3 	mov.w	r2, r3, asr #2
 80015b2:	bf94      	ite	ls
 80015b4:	2400      	movls	r4, #0
 80015b6:	2401      	movhi	r4, #1
		if(param>3072)
 80015b8:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80015bc:	b293      	uxth	r3, r2
 80015be:	dd19      	ble.n	80015f4 <_ZN12ChordManager17calculateVoicingsElttt+0x80>
			return 3;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e008      	b.n	80015d6 <_ZN12ChordManager17calculateVoicingsElttt+0x62>
	uint8_t variation = calculateVariation(variationValueIn>>2,quality);
 80015c4:	089b      	lsrs	r3, r3, #2
		return 3;
 80015c6:	2403      	movs	r4, #3
 80015c8:	e7dc      	b.n	8001584 <_ZN12ChordManager17calculateVoicingsElttt+0x10>
			return 3;
 80015ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015ce:	bf34      	ite	cc
 80015d0:	2300      	movcc	r3, #0
 80015d2:	2301      	movcs	r3, #1
 80015d4:	2404      	movs	r4, #4
	uint8_t r = param>>9;
 80015d6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80015da:	3c01      	subs	r4, #1
 80015dc:	1252      	asrs	r2, r2, #9
	if(r>=8)
 80015de:	2a07      	cmp	r2, #7
 80015e0:	f300 809d 	bgt.w	800171e <_ZN12ChordManager17calculateVoicingsElttt+0x1aa>
	uint8_t r = param>>9;
 80015e4:	b2d2      	uxtb	r2, r2
	switch(quality)
 80015e6:	2c04      	cmp	r4, #4
 80015e8:	d813      	bhi.n	8001612 <_ZN12ChordManager17calculateVoicingsElttt+0x9e>
 80015ea:	e8df f004 	tbb	[pc, r4]
 80015ee:	3023      	.short	0x3023
 80015f0:	4c33      	.short	0x4c33
 80015f2:	54          	.byte	0x54
 80015f3:	00          	.byte	0x00
		if(param>2048)
 80015f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015f8:	d808      	bhi.n	800160c <_ZN12ChordManager17calculateVoicingsElttt+0x98>
			return 3;
 80015fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015fe:	bf94      	ite	ls
 8001600:	2300      	movls	r3, #0
 8001602:	2301      	movhi	r3, #1
 8001604:	e7e7      	b.n	80015d6 <_ZN12ChordManager17calculateVoicingsElttt+0x62>
		return 2;
 8001606:	2402      	movs	r4, #2
		if(param<2048)
			return 0;
		return 1;
	}

	return 0;
 8001608:	2300      	movs	r3, #0
 800160a:	e7e4      	b.n	80015d6 <_ZN12ChordManager17calculateVoicingsElttt+0x62>
			return 2;
 800160c:	2302      	movs	r3, #2
 800160e:	e7e2      	b.n	80015d6 <_ZN12ChordManager17calculateVoicingsElttt+0x62>
		r=7;
 8001610:	2207      	movs	r2, #7
			switch(variation){
 8001612:	2b02      	cmp	r3, #2
 8001614:	d044      	beq.n	80016a0 <_ZN12ChordManager17calculateVoicingsElttt+0x12c>
 8001616:	2b03      	cmp	r3, #3
 8001618:	d006      	beq.n	8001628 <_ZN12ChordManager17calculateVoicingsElttt+0xb4>
 800161a:	2b01      	cmp	r3, #1
 800161c:	4b48      	ldr	r3, [pc, #288]	; (8001740 <_ZN12ChordManager17calculateVoicingsElttt+0x1cc>)
					currentChordIntervals[0]=4 SEMI;
 800161e:	6003      	str	r3, [r0, #0]
			switch(variation){
 8001620:	d010      	beq.n	8001644 <_ZN12ChordManager17calculateVoicingsElttt+0xd0>
					currentChordIntervals[1]=8 SEMI;
 8001622:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001626:	e00f      	b.n	8001648 <_ZN12ChordManager17calculateVoicingsElttt+0xd4>
					currentChordIntervals[0]=4 SEMI;
 8001628:	4b46      	ldr	r3, [pc, #280]	; (8001744 <_ZN12ChordManager17calculateVoicingsElttt+0x1d0>)
					currentChordIntervals[0]=4 SEMI;
 800162a:	6003      	str	r3, [r0, #0]
					currentChordIntervals[1]=8 SEMI;
 800162c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001630:	e00a      	b.n	8001648 <_ZN12ChordManager17calculateVoicingsElttt+0xd4>
		r=7;
 8001632:	2207      	movs	r2, #7
 8001634:	4c44      	ldr	r4, [pc, #272]	; (8001748 <_ZN12ChordManager17calculateVoicingsElttt+0x1d4>)
			switch(variation){
 8001636:	2b02      	cmp	r3, #2
					currentChordIntervals[0]=3 SEMI;
 8001638:	6004      	str	r4, [r0, #0]
			switch(variation){
 800163a:	d01e      	beq.n	800167a <_ZN12ChordManager17calculateVoicingsElttt+0x106>
 800163c:	2b03      	cmp	r3, #3
 800163e:	d001      	beq.n	8001644 <_ZN12ChordManager17calculateVoicingsElttt+0xd0>
 8001640:	2b01      	cmp	r3, #1
 8001642:	e7ed      	b.n	8001620 <_ZN12ChordManager17calculateVoicingsElttt+0xac>
					currentChordIntervals[1]=7 SEMI;
 8001644:	f44f 63b0 	mov.w	r3, #1408	; 0x580
					currentChordIntervals[1]=7 SEMI;
 8001648:	8083      	strh	r3, [r0, #4]
					break;
 800164a:	e008      	b.n	800165e <_ZN12ChordManager17calculateVoicingsElttt+0xea>
		r=7;
 800164c:	2207      	movs	r2, #7
			currentChordIntervals[0]=4 SEMI;
 800164e:	4b3c      	ldr	r3, [pc, #240]	; (8001740 <_ZN12ChordManager17calculateVoicingsElttt+0x1cc>)
 8001650:	e7eb      	b.n	800162a <_ZN12ChordManager17calculateVoicingsElttt+0xb6>
		r=7;
 8001652:	2207      	movs	r2, #7
			switch(variation){
 8001654:	2b01      	cmp	r3, #1
 8001656:	d00e      	beq.n	8001676 <_ZN12ChordManager17calculateVoicingsElttt+0x102>
 8001658:	d30a      	bcc.n	8001670 <_ZN12ChordManager17calculateVoicingsElttt+0xfc>
 800165a:	2b02      	cmp	r3, #2
 800165c:	d010      	beq.n	8001680 <_ZN12ChordManager17calculateVoicingsElttt+0x10c>
	switch(voicing)
 800165e:	3a01      	subs	r2, #1
 8001660:	2a06      	cmp	r2, #6
 8001662:	d85a      	bhi.n	800171a <_ZN12ChordManager17calculateVoicingsElttt+0x1a6>
 8001664:	e8df f002 	tbb	[pc, r2]
 8001668:	3a363222 	.word	0x3a363222
 800166c:	4640      	.short	0x4640
 800166e:	55          	.byte	0x55
 800166f:	00          	.byte	0x00
					currentChordIntervals[0]=3 SEMI;
 8001670:	4b36      	ldr	r3, [pc, #216]	; (800174c <_ZN12ChordManager17calculateVoicingsElttt+0x1d8>)
					currentChordIntervals[0]=4 SEMI;
 8001672:	6003      	str	r3, [r0, #0]
 8001674:	e7d5      	b.n	8001622 <_ZN12ChordManager17calculateVoicingsElttt+0xae>
					currentChordIntervals[0]=3 SEMI;
 8001676:	4b35      	ldr	r3, [pc, #212]	; (800174c <_ZN12ChordManager17calculateVoicingsElttt+0x1d8>)
					currentChordIntervals[0]=4 SEMI;
 8001678:	6003      	str	r3, [r0, #0]
					currentChordIntervals[1]=7 SEMI;
 800167a:	f44f 6390 	mov.w	r3, #1152	; 0x480
 800167e:	e7e3      	b.n	8001648 <_ZN12ChordManager17calculateVoicingsElttt+0xd4>
					currentChordIntervals[0]=3 SEMI;
 8001680:	4b32      	ldr	r3, [pc, #200]	; (800174c <_ZN12ChordManager17calculateVoicingsElttt+0x1d8>)
 8001682:	e7d2      	b.n	800162a <_ZN12ChordManager17calculateVoicingsElttt+0xb6>
		r=7;
 8001684:	2207      	movs	r2, #7
			switch(variation){
 8001686:	b11b      	cbz	r3, 8001690 <_ZN12ChordManager17calculateVoicingsElttt+0x11c>
 8001688:	2b01      	cmp	r3, #1
 800168a:	d1e8      	bne.n	800165e <_ZN12ChordManager17calculateVoicingsElttt+0xea>
					currentChordIntervals[0]=5 SEMI;
 800168c:	4b30      	ldr	r3, [pc, #192]	; (8001750 <_ZN12ChordManager17calculateVoicingsElttt+0x1dc>)
 800168e:	e7f0      	b.n	8001672 <_ZN12ChordManager17calculateVoicingsElttt+0xfe>
					currentChordIntervals[0]=2 SEMI;
 8001690:	4b30      	ldr	r3, [pc, #192]	; (8001754 <_ZN12ChordManager17calculateVoicingsElttt+0x1e0>)
 8001692:	e7ee      	b.n	8001672 <_ZN12ChordManager17calculateVoicingsElttt+0xfe>
		r=7;
 8001694:	2207      	movs	r2, #7
			switch(variation){
 8001696:	2b01      	cmp	r3, #1
 8001698:	d006      	beq.n	80016a8 <_ZN12ChordManager17calculateVoicingsElttt+0x134>
 800169a:	d303      	bcc.n	80016a4 <_ZN12ChordManager17calculateVoicingsElttt+0x130>
 800169c:	2b02      	cmp	r3, #2
 800169e:	d1de      	bne.n	800165e <_ZN12ChordManager17calculateVoicingsElttt+0xea>
					currentChordIntervals[0]=4 SEMI;
 80016a0:	4b27      	ldr	r3, [pc, #156]	; (8001740 <_ZN12ChordManager17calculateVoicingsElttt+0x1cc>)
 80016a2:	e7e9      	b.n	8001678 <_ZN12ChordManager17calculateVoicingsElttt+0x104>
					currentChordIntervals[0]=4 SEMI;
 80016a4:	4b2c      	ldr	r3, [pc, #176]	; (8001758 <_ZN12ChordManager17calculateVoicingsElttt+0x1e4>)
 80016a6:	e7e4      	b.n	8001672 <_ZN12ChordManager17calculateVoicingsElttt+0xfe>
					currentChordIntervals[0]=4 SEMI;
 80016a8:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <_ZN12ChordManager17calculateVoicingsElttt+0x1e4>)
 80016aa:	e7be      	b.n	800162a <_ZN12ChordManager17calculateVoicingsElttt+0xb6>
			currentChordIntervals[0] = currentChordIntervals[0] - 12 SEMI;
 80016ac:	8803      	ldrh	r3, [r0, #0]
			this->pitch = voice0 + 12 SEMI;
 80016ae:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
			currentChordIntervals[0] = currentChordIntervals[0] - 12 SEMI;
 80016b2:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
			this->pitch = voice0 + 12 SEMI;
 80016b6:	6081      	str	r1, [r0, #8]
			currentChordIntervals[0] = currentChordIntervals[0] - 12 SEMI;
 80016b8:	8003      	strh	r3, [r0, #0]
			currentChordIntervals[1] = currentChordIntervals[1] - 12 SEMI;
 80016ba:	8843      	ldrh	r3, [r0, #2]
 80016bc:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 80016c0:	8043      	strh	r3, [r0, #2]
			currentChordIntervals[2] = currentChordIntervals[2] - 12 SEMI;
 80016c2:	8883      	ldrh	r3, [r0, #4]
 80016c4:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
			currentChordIntervals[2] = currentChordIntervals[2] + 24 SEMI;
 80016c8:	8083      	strh	r3, [r0, #4]
			break;
 80016ca:	e00c      	b.n	80016e6 <_ZN12ChordManager17calculateVoicingsElttt+0x172>
			this->pitch = voice0 + 12 SEMI;
 80016cc:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
 80016d0:	6081      	str	r1, [r0, #8]
 80016d2:	e7f2      	b.n	80016ba <_ZN12ChordManager17calculateVoicingsElttt+0x146>
			this->pitch = voice0 + 12 SEMI;
 80016d4:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
 80016d8:	6081      	str	r1, [r0, #8]
 80016da:	e7f2      	b.n	80016c2 <_ZN12ChordManager17calculateVoicingsElttt+0x14e>
			currentChordIntervals[1] = currentChordIntervals[1] - 12 SEMI;
 80016dc:	8843      	ldrh	r3, [r0, #2]
			this->pitch = voice0;
 80016de:	6081      	str	r1, [r0, #8]
			currentChordIntervals[1] = currentChordIntervals[1] - 12 SEMI;
 80016e0:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 80016e4:	8043      	strh	r3, [r0, #2]
}
 80016e6:	bd10      	pop	{r4, pc}
			currentChordIntervals[0] = currentChordIntervals[0] - 12 SEMI;
 80016e8:	8803      	ldrh	r3, [r0, #0]
			this->pitch = voice0;
 80016ea:	6081      	str	r1, [r0, #8]
			currentChordIntervals[0] = currentChordIntervals[0] - 12 SEMI;
 80016ec:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 80016f0:	8003      	strh	r3, [r0, #0]
			break;
 80016f2:	e7f8      	b.n	80016e6 <_ZN12ChordManager17calculateVoicingsElttt+0x172>
			currentChordIntervals[0] = currentChordIntervals[0] + 12 SEMI;
 80016f4:	8803      	ldrh	r3, [r0, #0]
			this->pitch = voice0 - 12 SEMI ;
 80016f6:	f5a1 61c0 	sub.w	r1, r1, #1536	; 0x600
			currentChordIntervals[0] = currentChordIntervals[0] + 12 SEMI;
 80016fa:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
			this->pitch = voice0 - 12 SEMI ;
 80016fe:	6081      	str	r1, [r0, #8]
			currentChordIntervals[0] = currentChordIntervals[0] + 12 SEMI;
 8001700:	8003      	strh	r3, [r0, #0]
			currentChordIntervals[1] = currentChordIntervals[1] + 12 SEMI;
 8001702:	8843      	ldrh	r3, [r0, #2]
 8001704:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8001708:	8043      	strh	r3, [r0, #2]
			currentChordIntervals[2] = currentChordIntervals[2] + 24 SEMI;
 800170a:	8883      	ldrh	r3, [r0, #4]
 800170c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001710:	e7da      	b.n	80016c8 <_ZN12ChordManager17calculateVoicingsElttt+0x154>
			this->pitch = voice0 - 12 SEMI ;
 8001712:	f5a1 61c0 	sub.w	r1, r1, #1536	; 0x600
 8001716:	6081      	str	r1, [r0, #8]
 8001718:	e7f3      	b.n	8001702 <_ZN12ChordManager17calculateVoicingsElttt+0x18e>
			this->pitch = voice0;
 800171a:	6081      	str	r1, [r0, #8]
}
 800171c:	e7e3      	b.n	80016e6 <_ZN12ChordManager17calculateVoicingsElttt+0x172>
	switch(quality)
 800171e:	2c04      	cmp	r4, #4
 8001720:	f63f af76 	bhi.w	8001610 <_ZN12ChordManager17calculateVoicingsElttt+0x9c>
 8001724:	a201      	add	r2, pc, #4	; (adr r2, 800172c <_ZN12ChordManager17calculateVoicingsElttt+0x1b8>)
 8001726:	f852 f024 	ldr.w	pc, [r2, r4, lsl #2]
 800172a:	bf00      	nop
 800172c:	08001633 	.word	0x08001633
 8001730:	0800164d 	.word	0x0800164d
 8001734:	08001653 	.word	0x08001653
 8001738:	08001685 	.word	0x08001685
 800173c:	08001695 	.word	0x08001695
 8001740:	03800200 	.word	0x03800200
 8001744:	03000200 	.word	0x03000200
 8001748:	03800180 	.word	0x03800180
 800174c:	03000180 	.word	0x03000180
 8001750:	03800280 	.word	0x03800280
 8001754:	03800100 	.word	0x03800100
 8001758:	04000200 	.word	0x04000200

0800175c <_ZN12ChordManager9getChord1Ev>:
}
 800175c:	f9b0 0000 	ldrsh.w	r0, [r0]
 8001760:	4770      	bx	lr

08001762 <_ZN12ChordManager9getChord2Ev>:
}
 8001762:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8001766:	4770      	bx	lr

08001768 <_ZN12ChordManager9getChord3Ev>:
}
 8001768:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800176c:	4770      	bx	lr

0800176e <_ZN12ChordManager8getPitchEv>:
}
 800176e:	6880      	ldr	r0, [r0, #8]
 8001770:	4770      	bx	lr
	...

08001774 <_ZL14callbackRenderi>:



static void callbackRender(int flagEndHalf)
{
	flagRender = 1;
 8001774:	2201      	movs	r2, #1
 8001776:	4b05      	ldr	r3, [pc, #20]	; (800178c <_ZL14callbackRenderi+0x18>)
	if(flagEndHalf==1)
 8001778:	4290      	cmp	r0, r2
	flagRender = 1;
 800177a:	701a      	strb	r2, [r3, #0]
		indexBufferRender=1;
	}
	else
	{
		// transfer reach half, so I can start writing the first half
		indexBufferRender=0;
 800177c:	bf18      	it	ne
 800177e:	2200      	movne	r2, #0
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <_ZL14callbackRenderi+0x1c>)
		indexBufferRender=1;
 8001782:	bf0c      	ite	eq
 8001784:	7018      	strbeq	r0, [r3, #0]
		indexBufferRender=0;
 8001786:	701a      	strbne	r2, [r3, #0]
	}
}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20000374 	.word	0x20000374
 8001790:	20000405 	.word	0x20000405

08001794 <_ZN6braids15MacroOscillator4InitEv>:
  typedef void (MacroOscillator::*RenderFn)(const uint8_t*, int16_t*, size_t);

  MacroOscillator() { }
  ~MacroOscillator() { }
  
  inline void Init() {
 8001794:	b570      	push	{r4, r5, r6, lr}
    pitch_ = 60 << 7;
 8001796:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
    phase_increment_ = 1;
 800179a:	2500      	movs	r5, #0
 800179c:	2601      	movs	r6, #1
    discontinuity_depth_ = -16383;
 800179e:	f24c 0201 	movw	r2, #49153	; 0xc001
 80017a2:	4604      	mov	r4, r0
 80017a4:	f8a0 206c 	strh.w	r2, [r0, #108]	; 0x6c
    pitch_ = 60 << 7;
 80017a8:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
    discontinuity_depth_ = -16383;
 80017ac:	f8a0 208c 	strh.w	r2, [r0, #140]	; 0x8c
    pitch_ = 60 << 7;
 80017b0:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
    discontinuity_depth_ = -16383;
 80017b4:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
    pitch_ = 60 << 7;
 80017b8:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
    phase_increment_ = 1;
 80017bc:	e9c0 5616 	strd	r5, r6, [r0, #88]	; 0x58
    high_ = false;
 80017c0:	f880 5064 	strb.w	r5, [r0, #100]	; 0x64
    parameter_ = previous_parameter_ = 0;
 80017c4:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
 80017c8:	f8a0 5066 	strh.w	r5, [r0, #102]	; 0x66
    aux_parameter_ = 0;
 80017cc:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
    next_sample_ = 0;
 80017d0:	6705      	str	r5, [r0, #112]	; 0x70
    phase_increment_ = 1;
 80017d2:	e9c0 561e 	strd	r5, r6, [r0, #120]	; 0x78
    high_ = false;
 80017d6:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    parameter_ = previous_parameter_ = 0;
 80017da:	f8a0 5088 	strh.w	r5, [r0, #136]	; 0x88
 80017de:	f8a0 5086 	strh.w	r5, [r0, #134]	; 0x86
    aux_parameter_ = 0;
 80017e2:	f8a0 508a 	strh.w	r5, [r0, #138]	; 0x8a
    next_sample_ = 0;
 80017e6:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    phase_increment_ = 1;
 80017ea:	e9c0 5626 	strd	r5, r6, [r0, #152]	; 0x98
    high_ = false;
 80017ee:	f880 50a4 	strb.w	r5, [r0, #164]	; 0xa4
    parameter_ = previous_parameter_ = 0;
 80017f2:	f8a0 50a8 	strh.w	r5, [r0, #168]	; 0xa8
 80017f6:	f8a0 50a6 	strh.w	r5, [r0, #166]	; 0xa6
    aux_parameter_ = 0;
 80017fa:	f8a0 50aa 	strh.w	r5, [r0, #170]	; 0xaa
    next_sample_ = 0;
 80017fe:	f8c0 50b0 	str.w	r5, [r0, #176]	; 0xb0
    memset(&state_, 0, sizeof(state_));
 8001802:	22c4      	movs	r2, #196	; 0xc4
 8001804:	4629      	mov	r1, r5
 8001806:	30d8      	adds	r0, #216	; 0xd8
 8001808:	f002 ff6d 	bl	80046e6 <memset>
    decay_ = 4093;
 800180c:	f640 73fd 	movw	r3, #4093	; 0xffd
    frequency_ = 33 << 7;
 8001810:	f44f 5284 	mov.w	r2, #4224	; 0x1080
 8001814:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
 8001818:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
 800181c:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
 8001820:	f8c4 31dc 	str.w	r3, [r4, #476]	; 0x1dc
    resonance_ = 16384;
 8001824:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    delay_ = 0;
 8001828:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
    counter_ = 0;
 800182c:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
    state_ = 0;
 8001830:	f8c4 51a8 	str.w	r5, [r4, #424]	; 0x1a8
    delay_ = 0;
 8001834:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
    counter_ = 0;
 8001838:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    state_ = 0;
 800183c:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
    delay_ = 0;
 8001840:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    counter_ = 0;
 8001844:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
    state_ = 0;
 8001848:	f8c4 51d0 	str.w	r5, [r4, #464]	; 0x1d0
    delay_ = 0;
 800184c:	f8c4 51d8 	str.w	r5, [r4, #472]	; 0x1d8
    counter_ = 0;
 8001850:	f8c4 51e0 	str.w	r5, [r4, #480]	; 0x1e0
    state_ = 0;
 8001854:	f8c4 51e4 	str.w	r5, [r4, #484]	; 0x1e4
    lp_ = 0;
 8001858:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    bp_ = 0;
 800185c:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
    frequency_ = 33 << 7;
 8001860:	f8a4 21ee 	strh.w	r2, [r4, #494]	; 0x1ee
    resonance_ = 16384;
 8001864:	f8a4 31f0 	strh.w	r3, [r4, #496]	; 0x1f0
    dirty_ = true;
 8001868:	f884 61ec 	strb.w	r6, [r4, #492]	; 0x1ec
    punch_ = 0;
 800186c:	f8c4 51f4 	str.w	r5, [r4, #500]	; 0x1f4
    mode_ = SVF_MODE_BP;
 8001870:	f884 6208 	strb.w	r6, [r4, #520]	; 0x208
    lp_ = 0;
 8001874:	f8c4 5220 	str.w	r5, [r4, #544]	; 0x220
    bp_ = 0;
 8001878:	f8c4 5224 	str.w	r5, [r4, #548]	; 0x224
    frequency_ = 33 << 7;
 800187c:	f8a4 220e 	strh.w	r2, [r4, #526]	; 0x20e
    resonance_ = 16384;
 8001880:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
    dirty_ = true;
 8001884:	f884 620c 	strb.w	r6, [r4, #524]	; 0x20c
    punch_ = 0;
 8001888:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
    mode_ = SVF_MODE_BP;
 800188c:	f884 6228 	strb.w	r6, [r4, #552]	; 0x228
    lp_ = 0;
 8001890:	f8c4 5240 	str.w	r5, [r4, #576]	; 0x240
    bp_ = 0;
 8001894:	f8c4 5244 	str.w	r5, [r4, #580]	; 0x244
    frequency_ = 33 << 7;
 8001898:	f8a4 222e 	strh.w	r2, [r4, #558]	; 0x22e
    resonance_ = 16384;
 800189c:	f8a4 3230 	strh.w	r3, [r4, #560]	; 0x230
    dirty_ = true;
 80018a0:	f884 622c 	strb.w	r6, [r4, #556]	; 0x22c
    punch_ = 0;
 80018a4:	f8c4 5234 	str.w	r5, [r4, #564]	; 0x234
    mode_ = SVF_MODE_BP;
 80018a8:	f884 6248 	strb.w	r6, [r4, #584]	; 0x248
    phase_ = 0;
 80018ac:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
    strike_ = true;
 80018b0:	f884 60d4 	strb.w	r6, [r4, #212]	; 0xd4
    init_ = true;
 80018b4:	f884 60d3 	strb.w	r6, [r4, #211]	; 0xd3
    analog_oscillator_[0].Init();
    analog_oscillator_[1].Init();
    analog_oscillator_[2].Init();
    digital_oscillator_.Init();
    lp_state_ = 0;
 80018b8:	6565      	str	r5, [r4, #84]	; 0x54
    previous_parameter_[0] = 0;
 80018ba:	6065      	str	r5, [r4, #4]
    previous_parameter_[1] = 0;
  }
 80018bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080018c0 <_ZN8MainLoop4initEv>:


void MainLoop::init(void)
{
 80018c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;
	for(i=0; i<SAMPLES_BUFFER_SIZE; i++)
 80018c2:	2400      	movs	r4, #0
	{
		samplesBuffer[i] = 0;
 80018c4:	4625      	mov	r5, r4
 80018c6:	4b37      	ldr	r3, [pc, #220]	; (80019a4 <_ZN8MainLoop4initEv+0xe4>)
 80018c8:	54e5      	strb	r5, [r4, r3]
	for(i=0; i<SAMPLES_BUFFER_SIZE; i++)
 80018ca:	3401      	adds	r4, #1
 80018cc:	2c30      	cmp	r4, #48	; 0x30
 80018ce:	d1fb      	bne.n	80018c8 <_ZN8MainLoop4initEv+0x8>
	}
    memset(sync_samples, 0, SAMPLES_BUFFER_SIZE/2);
 80018d0:	2218      	movs	r2, #24
 80018d2:	2100      	movs	r1, #0
 80018d4:	4834      	ldr	r0, [pc, #208]	; (80019a8 <_ZN8MainLoop4initEv+0xe8>)
 80018d6:	f002 ff06 	bl	80046e6 <memset>

	mehal_init((uint32_t*)samplesBuffer,SAMPLES_BUFFER_SIZE,callbackRender);
 80018da:	4621      	mov	r1, r4
 80018dc:	4a33      	ldr	r2, [pc, #204]	; (80019ac <_ZN8MainLoop4initEv+0xec>)
 80018de:	4831      	ldr	r0, [pc, #196]	; (80019a4 <_ZN8MainLoop4initEv+0xe4>)
 80018e0:	f000 fddc 	bl	800249c <mehal_init>

	settings.Init();
 80018e4:	4832      	ldr	r0, [pc, #200]	; (80019b0 <_ZN8MainLoop4initEv+0xf0>)
 80018e6:	f7ff fcb9 	bl	800125c <_ZN6braids8Settings4InitEv>
	osc.Init();
 80018ea:	4832      	ldr	r0, [pc, #200]	; (80019b4 <_ZN8MainLoop4initEv+0xf4>)
 80018ec:	f7ff ff52 	bl	8001794 <_ZN6braids15MacroOscillator4InitEv>
	quantizer.Init();
 80018f0:	4831      	ldr	r0, [pc, #196]	; (80019b8 <_ZN8MainLoop4initEv+0xf8>)
 80018f2:	f7ff fbeb 	bl	80010cc <_ZN6braids9Quantizer4InitEv>

  void Init() {
    target_[ENV_SEGMENT_ATTACK] = 65535;
    target_[ENV_SEGMENT_DECAY] = 0;
    target_[ENV_SEGMENT_DEAD] = 0;
    increment_[ENV_SEGMENT_DEAD] = 0;
 80018f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018fa:	4b30      	ldr	r3, [pc, #192]	; (80019bc <_ZN8MainLoop4initEv+0xfc>)
	envelope.Init();
	//jitter_source.Init();
	adc.Init();
 80018fc:	4830      	ldr	r0, [pc, #192]	; (80019c0 <_ZN8MainLoop4initEv+0x100>)
 80018fe:	609d      	str	r5, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
    target_[ENV_SEGMENT_DECAY] = 0;
 8001902:	821d      	strh	r5, [r3, #16]
 8001904:	f7ff fcef 	bl	80012e6 <_ZN6braids3Adc4InitEv>
	userInterface.init(&adc,&memory);
 8001908:	4a2e      	ldr	r2, [pc, #184]	; (80019c4 <_ZN8MainLoop4initEv+0x104>)
 800190a:	492d      	ldr	r1, [pc, #180]	; (80019c0 <_ZN8MainLoop4initEv+0x100>)
 800190c:	482e      	ldr	r0, [pc, #184]	; (80019c8 <_ZN8MainLoop4initEv+0x108>)
 800190e:	f000 facd 	bl	8001eac <_ZN2Ui4initEPN6braids3AdcEP6Memory>
	//ws.Init(GetUniqueId(1));
	chordManager.init();
 8001912:	482e      	ldr	r0, [pc, #184]	; (80019cc <_ZN8MainLoop4initEv+0x10c>)
 8001914:	f7ff fe28 	bl	8001568 <_ZN12ChordManager4initEv>


	// calibration
	int32_t adc_code_c2=memory.readUInt32(Memory::ADDR_ADC_CODE_C2);
 8001918:	2100      	movs	r1, #0
 800191a:	482a      	ldr	r0, [pc, #168]	; (80019c4 <_ZN8MainLoop4initEv+0x104>)
 800191c:	f000 fd5a 	bl	80023d4 <_ZN6Memory10readUInt32Et>
	if(adc_code_c2<0 || adc_code_c2>4095) adc_code_c2=82;

	int32_t adc_code_c4=memory.readUInt32(Memory::ADDR_ADC_CODE_C4);
 8001920:	2104      	movs	r1, #4
 8001922:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8001926:	bf34      	ite	cc
 8001928:	4604      	movcc	r4, r0
 800192a:	2452      	movcs	r4, #82	; 0x52
 800192c:	4825      	ldr	r0, [pc, #148]	; (80019c4 <_ZN8MainLoop4initEv+0x104>)
 800192e:	f000 fd51 	bl	80023d4 <_ZN6Memory10readUInt32Et>
 8001932:	f240 279f 	movw	r7, #671	; 0x29f
	if(adc_code_c4<0 || adc_code_c4>4095) adc_code_c4=671;

	int32_t adc_code_fm=memory.readUInt32(Memory::ADDR_ADC_CODE_FM);
 8001936:	2108      	movs	r1, #8
 8001938:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800193c:	bf38      	it	cc
 800193e:	4607      	movcc	r7, r0
 8001940:	4820      	ldr	r0, [pc, #128]	; (80019c4 <_ZN8MainLoop4initEv+0x104>)
 8001942:	f000 fd47 	bl	80023d4 <_ZN6Memory10readUInt32Et>
	if(adc_code_fm<0 || adc_code_fm>4095) adc_code_fm=0;

	int32_t adc_code_p0_min= memory.readUInt32(Memory::ADDR_ADC_CODE_P0_MIN);
 8001946:	210c      	movs	r1, #12
 8001948:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800194c:	bf34      	ite	cc
 800194e:	4606      	movcc	r6, r0
 8001950:	2600      	movcs	r6, #0
 8001952:	481c      	ldr	r0, [pc, #112]	; (80019c4 <_ZN8MainLoop4initEv+0x104>)
 8001954:	f000 fd3e 	bl	80023d4 <_ZN6Memory10readUInt32Et>
	if(adc_code_p0_min<0 || adc_code_p0_min>4095) adc_code_p0_min=0;

	int32_t adc_code_p0_max= memory.readUInt32(Memory::ADDR_ADC_CODE_P0_MAX);
 8001958:	2110      	movs	r1, #16
 800195a:	481a      	ldr	r0, [pc, #104]	; (80019c4 <_ZN8MainLoop4initEv+0x104>)
 800195c:	f000 fd3a 	bl	80023d4 <_ZN6Memory10readUInt32Et>
	if(adc_code_p0_max<0 || adc_code_p0_max>4095) adc_code_p0_max=4095;

	int32_t adc_code_p1_min= memory.readUInt32(Memory::ADDR_ADC_CODE_P1_MIN);
 8001960:	2114      	movs	r1, #20
 8001962:	4818      	ldr	r0, [pc, #96]	; (80019c4 <_ZN8MainLoop4initEv+0x104>)
 8001964:	f000 fd36 	bl	80023d4 <_ZN6Memory10readUInt32Et>
	if(adc_code_p1_min<0 || adc_code_p1_min>4095) adc_code_p1_min=0;

	int32_t adc_code_p1_max= memory.readUInt32(Memory::ADDR_ADC_CODE_P1_MAX);
 8001968:	2118      	movs	r1, #24
 800196a:	4816      	ldr	r0, [pc, #88]	; (80019c4 <_ZN8MainLoop4initEv+0x104>)
 800196c:	f000 fd32 	bl	80023d4 <_ZN6Memory10readUInt32Et>
      int32_t adc_code_fm,
      int32_t adc_code_p0_min,
      int32_t adc_code_p0_max,
      int32_t adc_code_p1_min,
      int32_t adc_code_p1_max) {
    if (adc_code_c4 != adc_code_c2) {
 8001970:	42bc      	cmp	r4, r7
 8001972:	4d0f      	ldr	r5, [pc, #60]	; (80019b0 <_ZN8MainLoop4initEv+0xf0>)
 8001974:	d00d      	beq.n	8001992 <_ZN8MainLoop4initEv+0xd2>
      int32_t scale = (24 * 128 * 4096L) / (adc_code_c4 - adc_code_c2);
 8001976:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 800197a:	1b3a      	subs	r2, r7, r4
 800197c:	fb93 f3f2 	sdiv	r3, r3, r2
      data_.pitch_cv_scale = scale;
      data_.pitch_cv_offset = (60 << 7) - 
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 8001980:	443c      	add	r4, r7
 8001982:	1064      	asrs	r4, r4, #1
      data_.pitch_cv_scale = scale;
 8001984:	61ab      	str	r3, [r5, #24]
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 8001986:	4363      	muls	r3, r4
 8001988:	131b      	asrs	r3, r3, #12
      data_.pitch_cv_offset = (60 << 7) - 
 800198a:	f5c3 53f0 	rsb	r3, r3, #7680	; 0x1e00
 800198e:	616b      	str	r3, [r5, #20]
      data_.fm_cv_offset = adc_code_fm;
 8001990:	61ee      	str	r6, [r5, #28]
    //     int32_t offset = -(min_code[i] * scale >> 12) - 40;
    //     data_.parameter_cv_offset[i] = offset;
    //     data_.parameter_cv_scale[i] = scale;
    //   }
    // }
    Save();
 8001992:	4807      	ldr	r0, [pc, #28]	; (80019b0 <_ZN8MainLoop4initEv+0xf0>)
 8001994:	f7ff fca2 	bl	80012dc <_ZN6braids8Settings4SaveEv>
    data[setting] = value;
 8001998:	2304      	movs	r3, #4
 800199a:	706b      	strb	r3, [r5, #1]
 800199c:	2301      	movs	r3, #1
 800199e:	722b      	strb	r3, [r5, #8]
	//________________________________

	settings.SetValue(SETTING_RESOLUTION,RESOLUTION_8_BIT);
	settings.SetValue(SETTING_PITCH_OCTAVE,1); // C2: Lowest octave

}
 80019a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019a2:	bf00      	nop
 80019a4:	2000039d 	.word	0x2000039d
 80019a8:	20000384 	.word	0x20000384
 80019ac:	08001775 	.word	0x08001775
 80019b0:	20000310 	.word	0x20000310
 80019b4:	20000418 	.word	0x20000418
 80019b8:	20004698 	.word	0x20004698
 80019bc:	20004674 	.word	0x20004674
 80019c0:	2000040c 	.word	0x2000040c
 80019c4:	20004670 	.word	0x20004670
 80019c8:	200003d0 	.word	0x200003d0
 80019cc:	20000378 	.word	0x20000378

080019d0 <_ZN8MainLoop6renderEPhm>:
	}
	//______________
}

void MainLoop::render(uint8_t* out, uint32_t outSize)
{
 80019d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019d4:	b085      	sub	sp, #20
    return data[setting];
 80019d6:	4daf      	ldr	r5, [pc, #700]	; (8001c94 <_ZN8MainLoop6renderEPhm+0x2c4>)
 80019d8:	468a      	mov	sl, r1
	  static uint16_t gain_lp;

	  // Envelope management
	  envelope.Update(
	      settings.GetValue(SETTING_AD_ATTACK) * 8,
	      settings.GetValue(SETTING_AD_DECAY) * 8);
 80019da:	7beb      	ldrb	r3, [r5, #15]
  inline EnvelopeSegment segment() const {
    return static_cast<EnvelopeSegment>(segment_);
  }

  inline void Update(int32_t a, int32_t d) {
    increment_[ENV_SEGMENT_ATTACK] = lut_env_portamento_increments[a];
 80019dc:	49ae      	ldr	r1, [pc, #696]	; (8001c98 <_ZN8MainLoop6renderEPhm+0x2c8>)
{
 80019de:	4690      	mov	r8, r2
	      settings.GetValue(SETTING_AD_ATTACK) * 8,
 80019e0:	7baa      	ldrb	r2, [r5, #14]
	      settings.GetValue(SETTING_AD_DECAY) * 8);
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	4cad      	ldr	r4, [pc, #692]	; (8001c9c <_ZN8MainLoop6renderEPhm+0x2cc>)
    increment_[ENV_SEGMENT_DECAY] = lut_env_portamento_increments[d];
 80019e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    increment_[ENV_SEGMENT_ATTACK] = lut_env_portamento_increments[a];
 80019ea:	00d2      	lsls	r2, r2, #3
 80019ec:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    increment_[ENV_SEGMENT_DECAY] = lut_env_portamento_increments[d];
 80019f0:	6063      	str	r3, [r4, #4]
    segment_ = segment;
    phase_ = 0;
  }

  inline uint16_t Render() {
    uint32_t increment = increment_[segment_];
 80019f2:	6963      	ldr	r3, [r4, #20]
    increment_[ENV_SEGMENT_ATTACK] = lut_env_portamento_increments[a];
 80019f4:	6022      	str	r2, [r4, #0]
 80019f6:	6a21      	ldr	r1, [r4, #32]
 80019f8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 80019fc:	2000      	movs	r0, #0
 80019fe:	1852      	adds	r2, r2, r1
 8001a00:	bf28      	it	cs
 8001a02:	2001      	movcs	r0, #1
{
 8001a04:	af02      	add	r7, sp, #8
    phase_ += increment;
 8001a06:	6222      	str	r2, [r4, #32]
    if (phase_ < increment) {
 8001a08:	b198      	cbz	r0, 8001a32 <_ZN8MainLoop6renderEPhm+0x62>
      value_ = Mix(a_, b_, 65535);
      Trigger(static_cast<EnvelopeSegment>(segment_ + 1));
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	b2db      	uxtb	r3, r3
    if (segment == ENV_SEGMENT_DEAD) {
 8001a0e:	2b02      	cmp	r3, #2
      value_ = 0;
 8001a10:	bf0c      	ite	eq
 8001a12:	2200      	moveq	r2, #0
  return (a * (65535 - balance) + b * balance) >> 16;
 8001a14:	8b62      	ldrhne	r2, [r4, #26]
    segment_ = segment;
 8001a16:	6163      	str	r3, [r4, #20]
 8001a18:	bf1c      	itt	ne
 8001a1a:	ebc2 4202 	rsbne	r2, r2, r2, lsl #16
 8001a1e:	1412      	asrne	r2, r2, #16
      value_ = 0;
 8001a20:	83a2      	strh	r2, [r4, #28]
    a_ = value_;
 8001a22:	8ba2      	ldrh	r2, [r4, #28]
 8001a24:	8322      	strh	r2, [r4, #24]
    b_ = target_[segment];
 8001a26:	eb04 0243 	add.w	r2, r4, r3, lsl #1
    phase_ = 0;
 8001a2a:	2300      	movs	r3, #0
    b_ = target_[segment];
 8001a2c:	8992      	ldrh	r2, [r2, #12]
    phase_ = 0;
 8001a2e:	6223      	str	r3, [r4, #32]
    b_ = target_[segment];
 8001a30:	8362      	strh	r2, [r4, #26]
    }
    if (increment_[segment_]) {
 8001a32:	6963      	ldr	r3, [r4, #20]
 8001a34:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001a38:	b1c3      	cbz	r3, 8001a6c <_ZN8MainLoop6renderEPhm+0x9c>
      value_ = Mix(a_, b_, Interpolate824(lut_env_expo, phase_));
 8001a3a:	6a22      	ldr	r2, [r4, #32]
  uint32_t a = table[phase >> 24];
 8001a3c:	4998      	ldr	r1, [pc, #608]	; (8001ca0 <_ZN8MainLoop6renderEPhm+0x2d0>)
 8001a3e:	0e10      	lsrs	r0, r2, #24
 8001a40:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
  uint32_t b = table[(phase >> 24) + 1];
 8001a44:	3102      	adds	r1, #2
 8001a46:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 8001a4a:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8001a4e:	1ac9      	subs	r1, r1, r3
 8001a50:	434a      	muls	r2, r1
  return (a * (65535 - balance) + b * balance) >> 16;
 8001a52:	8b60      	ldrh	r0, [r4, #26]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 8001a54:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  return (a * (65535 - balance) + b * balance) >> 16;
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	f5c3 417f 	rsb	r1, r3, #65280	; 0xff00
 8001a5e:	4343      	muls	r3, r0
 8001a60:	8b22      	ldrh	r2, [r4, #24]
 8001a62:	31ff      	adds	r1, #255	; 0xff
 8001a64:	fb01 3302 	mla	r3, r1, r2, r3
 8001a68:	141b      	asrs	r3, r3, #16
 8001a6a:	83a3      	strh	r3, [r4, #28]
  
  inline void set_shape(MacroOscillatorShape shape) {
    if (shape != shape_) {
 8001a6c:	f244 2354 	movw	r3, #16980	; 0x4254
 8001a70:	4e8c      	ldr	r6, [pc, #560]	; (8001ca4 <_ZN8MainLoop6renderEPhm+0x2d4>)
	  uint32_t ad_value = envelope.Render();
	  //____________________

	  // Set shape (not used)
	  osc.set_shape(settings.shape());
 8001a72:	782a      	ldrb	r2, [r5, #0]
 8001a74:	5cf1      	ldrb	r1, [r6, r3]
	  // Set waveform with param0
	  osc.set_parameters(userInterface.getParamFromCurrentWaveTable(),0);
 8001a76:	488c      	ldr	r0, [pc, #560]	; (8001ca8 <_ZN8MainLoop6renderEPhm+0x2d8>)
 8001a78:	4291      	cmp	r1, r2
  inline uint32_t phase_increment() const {
    return phase_increment_;
  }
  
  inline void Strike() {
    strike_ = true;
 8001a7a:	bf1c      	itt	ne
 8001a7c:	2101      	movne	r1, #1
 8001a7e:	f886 10d4 	strbne.w	r1, [r6, #212]	; 0xd4
      Strike();
    }
    shape_ = shape;
 8001a82:	54f2      	strb	r2, [r6, r3]
    }
    return value_;
 8001a84:	f8b4 901c 	ldrh.w	r9, [r4, #28]
 8001a88:	f000 f9b8 	bl	8001dfc <_ZN2Ui28getParamFromCurrentWaveTableEv>

  inline void set_parameters(
      int16_t parameter_1,
      int16_t parameter_2) {
    parameter_[0] = parameter_1;
    parameter_[1] = parameter_2;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	8073      	strh	r3, [r6, #2]
  }
  
  inline int32_t adc_to_pitch(int32_t pitch_adc_code) const {
    if (data_.pitch_range == PITCH_RANGE_EXTERNAL ||
 8001a90:	79eb      	ldrb	r3, [r5, #7]
		  return this->currentValues[0];
	  }
	  else if(index==2)
	  {
		  ///pitch
		  return this->currentValues[4];
 8001a92:	4a86      	ldr	r2, [pc, #536]	; (8001cac <_ZN8MainLoop6renderEPhm+0x2dc>)
 8001a94:	f013 0ffb 	tst.w	r3, #251	; 0xfb
    parameter_[0] = parameter_1;
 8001a98:	8030      	strh	r0, [r6, #0]


	  // SET PITCH
	  // Apply hysteresis to ADC reading to prevent a single bit error to move
	  // the quantized pitch up and down the quantization boundary.
	  int32_t pitch = quantizer.Process(
 8001a9a:	8911      	ldrh	r1, [r2, #8]
 8001a9c:	4693      	mov	fp, r2
 8001a9e:	f040 808e 	bne.w	8001bbe <_ZN8MainLoop6renderEPhm+0x1ee>
        data_.pitch_range == PITCH_RANGE_LFO) {
      pitch_adc_code = pitch_adc_code * data_.pitch_cv_scale >> 12;
 8001aa2:	69ab      	ldr	r3, [r5, #24]
 8001aa4:	434b      	muls	r3, r1
      pitch_adc_code += data_.pitch_cv_offset;
 8001aa6:	6969      	ldr	r1, [r5, #20]
 8001aa8:	eb01 3123 	add.w	r1, r1, r3, asr #12
    return data_.quantizer_root;
 8001aac:	7cea      	ldrb	r2, [r5, #19]
	      settings.adc_to_pitch(adc.channel(ADC_CHANNEL_PITCH)),
	      (60 + settings.quantizer_root()) << 7);
 8001aae:	4880      	ldr	r0, [pc, #512]	; (8001cb0 <_ZN8MainLoop6renderEPhm+0x2e0>)
 8001ab0:	323c      	adds	r2, #60	; 0x3c
 8001ab2:	01d2      	lsls	r2, r2, #7
 8001ab4:	f7ff fb5c 	bl	8001170 <_ZN6braids9Quantizer7ProcessEll>
	  // Check if the pitch has changed to cause an auto-retrigger
	  int32_t pitch_delta = pitch - previous_pitch;
	  if (settings.data().auto_trig &&
 8001ab8:	792b      	ldrb	r3, [r5, #4]
 8001aba:	4a7e      	ldr	r2, [pc, #504]	; (8001cb4 <_ZN8MainLoop6renderEPhm+0x2e4>)
 8001abc:	b143      	cbz	r3, 8001ad0 <_ZN8MainLoop6renderEPhm+0x100>
	  int32_t pitch_delta = pitch - previous_pitch;
 8001abe:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001ac2:	1ac3      	subs	r3, r0, r3
	      //(pitch_delta >= 0x40 || -pitch_delta >= 0x40)) {
			(pitch_delta >= 0x70 || -pitch_delta >= 0x70)) { // too much noise in this hardware
 8001ac4:	336f      	adds	r3, #111	; 0x6f
	  if (settings.data().auto_trig &&
 8001ac6:	2bde      	cmp	r3, #222	; 0xde
		  trigger_flag = true;
 8001ac8:	bf82      	ittt	hi
 8001aca:	2101      	movhi	r1, #1
 8001acc:	4b7a      	ldrhi	r3, [pc, #488]	; (8001cb8 <_ZN8MainLoop6renderEPhm+0x2e8>)
 8001ace:	7019      	strbhi	r1, [r3, #0]
	  }
	  //_________________________________________________________________


	  // Set chords and pitch
	  int32_t qualityValue = settings.adc_to_parameter(0, adc.channel(ADC_CHANNEL_PARAM0));
 8001ad0:	f8bb 3002 	ldrh.w	r3, [fp, #2]
	  previous_pitch = pitch;
 8001ad4:	8010      	strh	r0, [r2, #0]
    }
    return fm_adc_code;
  }
  
  inline int32_t adc_to_parameter(int index, int32_t adc_code) const {
    int32_t scale = static_cast<int32_t>(data_.parameter_cv_scale[index]);
 8001ad6:	8caa      	ldrh	r2, [r5, #36]	; 0x24
	  int32_t variationValue = settings.adc_to_parameter(1, adc.channel(ADC_CHANNEL_PARAM1));
 8001ad8:	f8bb 1000 	ldrh.w	r1, [fp]
    int32_t offset = static_cast<int32_t>(data_.parameter_cv_offset[index]);
    return (scale * adc_code >> 12) + offset;
 8001adc:	435a      	muls	r2, r3
    int32_t offset = static_cast<int32_t>(data_.parameter_cv_offset[index]);
 8001ade:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 8001ae2:	f380 0e0e 	usat	lr, #14, r0
    return (scale * adc_code >> 12) + offset;
 8001ae6:	eb03 3222 	add.w	r2, r3, r2, asr #12
    int32_t scale = static_cast<int32_t>(data_.parameter_cv_scale[index]);
 8001aea:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    if (data_.pitch_range == PITCH_RANGE_440) {
 8001aec:	79e8      	ldrb	r0, [r5, #7]
    return (scale * adc_code >> 12) + offset;
 8001aee:	434b      	muls	r3, r1
    int32_t offset = static_cast<int32_t>(data_.parameter_cv_offset[index]);
 8001af0:	f9b5 1022 	ldrsh.w	r1, [r5, #34]	; 0x22
	  }
	  else if(index==3)
	  {
		  // FM
		  return this->currentValues[3];
 8001af4:	f8bb c006 	ldrh.w	ip, [fp, #6]
    return (scale * adc_code >> 12) + offset;
 8001af8:	eb01 3323 	add.w	r3, r1, r3, asr #12
    fm_adc_code -= data_.fm_cv_offset;
 8001afc:	69e9      	ldr	r1, [r5, #28]
    if (data_.pitch_range == PITCH_RANGE_440) {
 8001afe:	2803      	cmp	r0, #3
    fm_adc_code -= data_.fm_cv_offset;
 8001b00:	bf1d      	ittte	ne
 8001b02:	ebac 0101 	subne.w	r1, ip, r1
    fm_adc_code = fm_adc_code * 1538 >> 9;
 8001b06:	f240 6c02 	movwne	ip, #1538	; 0x602
 8001b0a:	fb0c fc01 	mulne.w	ip, ip, r1
      fm_adc_code = 0;
 8001b0e:	f04f 0c00 	moveq.w	ip, #0
    fm_adc_code = fm_adc_code * 1538 >> 9;
 8001b12:	bf18      	it	ne
 8001b14:	ea4f 2c6c 	movne.w	ip, ip, asr #9
    int32_t t = data_.pitch_range == PITCH_RANGE_LFO ? -36 << 7 : 0;
 8001b18:	2804      	cmp	r0, #4
    t += (static_cast<int32_t>(data_.pitch_octave) - 2) * 12 * 128;
 8001b1a:	f44f 6bc0 	mov.w	fp, #1536	; 0x600
    int32_t t = data_.pitch_range == PITCH_RANGE_LFO ? -36 << 7 : 0;
 8001b1e:	4867      	ldr	r0, [pc, #412]	; (8001cbc <_ZN8MainLoop6renderEPhm+0x2ec>)
 8001b20:	bf18      	it	ne
 8001b22:	2000      	movne	r0, #0
	  int32_t voicingValue = settings.adc_to_fm(adc.channel(ADC_CHANNEL_FM));

	  chordManager.calculateVoicings( pitch + settings.pitch_transposition(),
 8001b24:	7a29      	ldrb	r1, [r5, #8]
 8001b26:	b29b      	uxth	r3, r3
    t += (static_cast<int32_t>(data_.pitch_octave) - 2) * 12 * 128;
 8001b28:	3902      	subs	r1, #2
 8001b2a:	fb0b 0101 	mla	r1, fp, r1, r0
 8001b2e:	fa1f f08c 	uxth.w	r0, ip
 8001b32:	4471      	add	r1, lr
 8001b34:	b292      	uxth	r2, r2
 8001b36:	9000      	str	r0, [sp, #0]
 8001b38:	4861      	ldr	r0, [pc, #388]	; (8001cc0 <_ZN8MainLoop6renderEPhm+0x2f0>)
 8001b3a:	f7ff fd1b 	bl	8001574 <_ZN12ChordManager17calculateVoicingsElttt>
			  	  	  	  	  	  	  qualityValue,
									  variationValue,
									  voicingValue);
	  osc.set_chords_parameters(chordManager.getChord1(),chordManager.getChord2(),chordManager.getChord3());
 8001b3e:	4860      	ldr	r0, [pc, #384]	; (8001cc0 <_ZN8MainLoop6renderEPhm+0x2f0>)
 8001b40:	f7ff fe0c 	bl	800175c <_ZN12ChordManager9getChord1Ev>
 8001b44:	4683      	mov	fp, r0
 8001b46:	485e      	ldr	r0, [pc, #376]	; (8001cc0 <_ZN8MainLoop6renderEPhm+0x2f0>)
 8001b48:	f7ff fe0b 	bl	8001762 <_ZN12ChordManager9getChord2Ev>
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	485c      	ldr	r0, [pc, #368]	; (8001cc0 <_ZN8MainLoop6renderEPhm+0x2f0>)
 8001b50:	f7ff fe0a 	bl	8001768 <_ZN12ChordManager9getChord3Ev>
  }
  inline void set_chords_parameters(
      int16_t parameter_1,
      int16_t parameter_2,
	  int16_t parameter_3) {
	  digital_oscillator_.set_chordIntervals(parameter_1,parameter_2,parameter_3);
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	4603      	mov	r3, r0
 8001b58:	4659      	mov	r1, fp
 8001b5a:	485a      	ldr	r0, [pc, #360]	; (8001cc4 <_ZN8MainLoop6renderEPhm+0x2f4>)
 8001b5c:	f7fe fef0 	bl	8000940 <_ZN6braids17DigitalOscillator18set_chordIntervalsEsss>
	  osc.set_pitch(chordManager.getPitch());
 8001b60:	4857      	ldr	r0, [pc, #348]	; (8001cc0 <_ZN8MainLoop6renderEPhm+0x2f0>)
 8001b62:	f7ff fe04 	bl	800176e <_ZN12ChordManager8getPitchEv>
	  //_________________________________________________



	  // TRIGGER
	  if (trigger_flag) {
 8001b66:	4a54      	ldr	r2, [pc, #336]	; (8001cb8 <_ZN8MainLoop6renderEPhm+0x2e8>)
	  osc.set_pitch(chordManager.getPitch());
 8001b68:	8130      	strh	r0, [r6, #8]
	  if (trigger_flag) {
 8001b6a:	7813      	ldrb	r3, [r2, #0]
 8001b6c:	b153      	cbz	r3, 8001b84 <_ZN8MainLoop6renderEPhm+0x1b4>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	f886 30d4 	strb.w	r3, [r6, #212]	; 0xd4
    a_ = value_;
 8001b74:	8ba3      	ldrh	r3, [r4, #28]
 8001b76:	8323      	strh	r3, [r4, #24]
    b_ = target_[segment];
 8001b78:	89a3      	ldrh	r3, [r4, #12]
 8001b7a:	8363      	strh	r3, [r4, #26]
    segment_ = segment;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	6163      	str	r3, [r4, #20]
    phase_ = 0;
 8001b80:	6223      	str	r3, [r4, #32]
	    osc.Strike();
	    envelope.Trigger(ENV_SEGMENT_ATTACK);
	    trigger_flag = false;
 8001b82:	7013      	strb	r3, [r2, #0]
	  }
	  //_________


	  // RENDER
	  int16_t audio_samples[outSize];
 8001b84:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8001b88:	3308      	adds	r3, #8
 8001b8a:	f023 0307 	bic.w	r3, r3, #7
 8001b8e:	ebad 0d03 	sub.w	sp, sp, r3
	  int16_t* render_buffer = audio_samples;

	  if (settings.GetValue(SETTING_AD_VCA) != 0
	    || settings.GetValue(SETTING_AD_TIMBRE) != 0
	    || settings.GetValue(SETTING_AD_COLOR) != 0
	    || settings.GetValue(SETTING_AD_FM) != 0) {
 8001b92:	7cab      	ldrb	r3, [r5, #18]
	  int16_t audio_samples[outSize];
 8001b94:	ac02      	add	r4, sp, #8
	    || settings.GetValue(SETTING_AD_FM) != 0) {
 8001b96:	bb3b      	cbnz	r3, 8001be8 <_ZN8MainLoop6renderEPhm+0x218>
	    || settings.GetValue(SETTING_AD_TIMBRE) != 0
 8001b98:	78eb      	ldrb	r3, [r5, #3]
 8001b9a:	bb2b      	cbnz	r3, 8001be8 <_ZN8MainLoop6renderEPhm+0x218>
	    || settings.GetValue(SETTING_AD_COLOR) != 0
 8001b9c:	7c6b      	ldrb	r3, [r5, #17]
 8001b9e:	bb1b      	cbnz	r3, 8001be8 <_ZN8MainLoop6renderEPhm+0x218>
	    || settings.GetValue(SETTING_AD_FM) != 0) {
 8001ba0:	7c2e      	ldrb	r6, [r5, #16]
 8001ba2:	bb0e      	cbnz	r6, 8001be8 <_ZN8MainLoop6renderEPhm+0x218>
	    memset(sync_buffer, 0, outSize);
	  }
	  else
	  {
		  //Trigger in sync event (this is placed in sampler interrupt timer in braids)
		  memset(sync_buffer, 0, outSize);
 8001ba4:	4b48      	ldr	r3, [pc, #288]	; (8001cc8 <_ZN8MainLoop6renderEPhm+0x2f8>)
 8001ba6:	4642      	mov	r2, r8
 8001ba8:	4631      	mov	r1, r6
 8001baa:	4618      	mov	r0, r3
 8001bac:	f002 fd9b 	bl	80046e6 <memset>
		  if(flagTriggerInEvent==1)
 8001bb0:	4946      	ldr	r1, [pc, #280]	; (8001ccc <_ZN8MainLoop6renderEPhm+0x2fc>)
 8001bb2:	680a      	ldr	r2, [r1, #0]
 8001bb4:	2a01      	cmp	r2, #1
 8001bb6:	d11c      	bne.n	8001bf2 <_ZN8MainLoop6renderEPhm+0x222>
		  {
			  flagTriggerInEvent=0;
 8001bb8:	600e      	str	r6, [r1, #0]
			  sync_buffer[0]=1;
 8001bba:	7002      	strb	r2, [r0, #0]
 8001bbc:	e019      	b.n	8001bf2 <_ZN8MainLoop6renderEPhm+0x222>
    } else if (data_.pitch_range == PITCH_RANGE_FREE) {
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d107      	bne.n	8001bd2 <_ZN8MainLoop6renderEPhm+0x202>
      pitch_adc_code = pitch_adc_code * data_.pitch_cv_scale >> 12;
 8001bc2:	69ab      	ldr	r3, [r5, #24]
      pitch_adc_code = (pitch_adc_code - 1638);
 8001bc4:	f2a1 6166 	subw	r1, r1, #1638	; 0x666
      pitch_adc_code = pitch_adc_code * data_.pitch_cv_scale >> 12;
 8001bc8:	4359      	muls	r1, r3
 8001bca:	1309      	asrs	r1, r1, #12
      pitch_adc_code += 60 << 7;
 8001bcc:	f501 51f0 	add.w	r1, r1, #7680	; 0x1e00
 8001bd0:	e76c      	b.n	8001aac <_ZN8MainLoop6renderEPhm+0xdc>
    } else if (data_.pitch_range == PITCH_RANGE_440) {
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d005      	beq.n	8001be2 <_ZN8MainLoop6renderEPhm+0x212>
      pitch_adc_code = (pitch_adc_code - 1638) * 9 >> 1;
 8001bd6:	f2a1 6166 	subw	r1, r1, #1638	; 0x666
 8001bda:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001bde:	1049      	asrs	r1, r1, #1
 8001be0:	e7f4      	b.n	8001bcc <_ZN8MainLoop6renderEPhm+0x1fc>
      pitch_adc_code = 69 << 7;
 8001be2:	f44f 510a 	mov.w	r1, #8832	; 0x2280
 8001be6:	e761      	b.n	8001aac <_ZN8MainLoop6renderEPhm+0xdc>
	    memset(sync_buffer, 0, outSize);
 8001be8:	4642      	mov	r2, r8
 8001bea:	2100      	movs	r1, #0
 8001bec:	4836      	ldr	r0, [pc, #216]	; (8001cc8 <_ZN8MainLoop6renderEPhm+0x2f8>)
 8001bee:	f002 fd7a 	bl	80046e6 <memset>
		  }
		  //______________________
	  }

	  osc.Render(sync_buffer, render_buffer, outSize);
 8001bf2:	4643      	mov	r3, r8
 8001bf4:	4622      	mov	r2, r4
 8001bf6:	4934      	ldr	r1, [pc, #208]	; (8001cc8 <_ZN8MainLoop6renderEPhm+0x2f8>)
 8001bf8:	482a      	ldr	r0, [pc, #168]	; (8001ca4 <_ZN8MainLoop6renderEPhm+0x2d4>)
 8001bfa:	f7ff fa4f 	bl	800109c <_ZN6braids15MacroOscillator6RenderEPKhPsj>

	  // Copy to DAC buffer with sample rate and bit reduction applied.
	    int16_t sample = 0;
	    size_t decimation_factor = decimation_factors[settings.data().sample_rate];
	    uint16_t bit_mask = bit_reduction_masks[settings.data().resolution];
	    int32_t gain = settings.GetValue(SETTING_AD_VCA) ? ad_value : 65535;
 8001bfe:	f64f 7eff 	movw	lr, #65535	; 0xffff
	    size_t decimation_factor = decimation_factors[settings.data().sample_rate];
 8001c02:	78aa      	ldrb	r2, [r5, #2]
 8001c04:	4b32      	ldr	r3, [pc, #200]	; (8001cd0 <_ZN8MainLoop6renderEPhm+0x300>)
 8001c06:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8001cd8 <_ZN8MainLoop6renderEPhm+0x308>
 8001c0a:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
	    uint16_t bit_mask = bit_reduction_masks[settings.data().resolution];
 8001c0e:	786a      	ldrb	r2, [r5, #1]
 8001c10:	4b30      	ldr	r3, [pc, #192]	; (8001cd4 <_ZN8MainLoop6renderEPhm+0x304>)
 8001c12:	f8bb 0000 	ldrh.w	r0, [fp]
 8001c16:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
	    int32_t gain = settings.GetValue(SETTING_AD_VCA) ? ad_value : 65535;
 8001c1a:	7cab      	ldrb	r3, [r5, #18]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bf08      	it	eq
 8001c20:	46f1      	moveq	r9, lr
	    uint16_t signature = settings.signature() * settings.signature() * 4095;
 8001c22:	7b2b      	ldrb	r3, [r5, #12]
 8001c24:	2500      	movs	r5, #0
	    for (size_t i = 0; i < outSize; ++i) {
 8001c26:	462a      	mov	r2, r5
	    int16_t sample = 0;
 8001c28:	4629      	mov	r1, r5
	    uint16_t signature = settings.signature() * settings.signature() * 4095;
 8001c2a:	435b      	muls	r3, r3
 8001c2c:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 8001c30:	b29b      	uxth	r3, r3
  return (a * (65535 - balance) + b * balance) >> 16;
 8001c32:	ebae 0303 	sub.w	r3, lr, r3
	    for (size_t i = 0; i < outSize; ++i) {
 8001c36:	4542      	cmp	r2, r8
 8001c38:	d10f      	bne.n	8001c5a <_ZN8MainLoop6renderEPhm+0x28a>
 8001c3a:	b10d      	cbz	r5, 8001c40 <_ZN8MainLoop6renderEPhm+0x270>
 8001c3c:	f8ab 0000 	strh.w	r0, [fp]
	      render_buffer[i] = Mix(sample, warped, signature);
	    }

	  // Copy rendered buffer to DMA buffer (8bits)
	  uint32_t i;
	  for(i=0; i<outSize; i++)
 8001c40:	2300      	movs	r3, #0
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d022      	beq.n	8001c8c <_ZN8MainLoop6renderEPhm+0x2bc>
	  {
		  out[i] = (uint8_t) (((uint16_t)(  -(render_buffer[i]) + 32768U )) >>8)  ;
 8001c46:	f834 1013 	ldrh.w	r1, [r4, r3, lsl #1]
 8001c4a:	f5c1 4100 	rsb	r1, r1, #32768	; 0x8000
 8001c4e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8001c52:	f80a 1003 	strb.w	r1, [sl, r3]
	  for(i=0; i<outSize; i++)
 8001c56:	3301      	adds	r3, #1
 8001c58:	e7f3      	b.n	8001c42 <_ZN8MainLoop6renderEPhm+0x272>
	      if ((i % decimation_factor) == 0) {
 8001c5a:	fbb2 f5f6 	udiv	r5, r2, r6
 8001c5e:	fb06 2515 	mls	r5, r6, r5, r2
 8001c62:	b925      	cbnz	r5, 8001c6e <_ZN8MainLoop6renderEPhm+0x29e>
	        sample = render_buffer[i] & bit_mask;
 8001c64:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
 8001c68:	ea0c 0101 	and.w	r1, ip, r1
 8001c6c:	b209      	sxth	r1, r1
	      sample = sample * gain_lp >> 16;
 8001c6e:	4341      	muls	r1, r0
 8001c70:	140d      	asrs	r5, r1, #16
 8001c72:	b229      	sxth	r1, r5
 8001c74:	435d      	muls	r5, r3
	      gain_lp += (gain - gain_lp) >> 4;
 8001c76:	eba9 0e00 	sub.w	lr, r9, r0
 8001c7a:	142d      	asrs	r5, r5, #16
 8001c7c:	eb00 102e 	add.w	r0, r0, lr, asr #4
 8001c80:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
 8001c84:	b280      	uxth	r0, r0
	    for (size_t i = 0; i < outSize; ++i) {
 8001c86:	3201      	adds	r2, #1
 8001c88:	2501      	movs	r5, #1
 8001c8a:	e7d4      	b.n	8001c36 <_ZN8MainLoop6renderEPhm+0x266>
	  }
	  //___________________________________________

}
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c94:	20000310 	.word	0x20000310
 8001c98:	080051dc 	.word	0x080051dc
 8001c9c:	20004674 	.word	0x20004674
 8001ca0:	080047c8 	.word	0x080047c8
 8001ca4:	20000418 	.word	0x20000418
 8001ca8:	200003d0 	.word	0x200003d0
 8001cac:	2000040c 	.word	0x2000040c
 8001cb0:	20004698 	.word	0x20004698
 8001cb4:	200047aa 	.word	0x200047aa
 8001cb8:	2000039c 	.word	0x2000039c
 8001cbc:	ffffee00 	.word	0xffffee00
 8001cc0:	20000378 	.word	0x20000378
 8001cc4:	200004d0 	.word	0x200004d0
 8001cc8:	20000384 	.word	0x20000384
 8001ccc:	20000408 	.word	0x20000408
 8001cd0:	0800e224 	.word	0x0800e224
 8001cd4:	0800e232 	.word	0x0800e232
 8001cd8:	200047ac 	.word	0x200047ac

08001cdc <_ZN8MainLoop15adcStateMachineEv>:


void MainLoop::adcStateMachine(void)
{
 8001cdc:	b538      	push	{r3, r4, r5, lr}
	static uint8_t chn=0;

	adc.updateChannelValue(chn,mehal_readADC(chn));
 8001cde:	4c09      	ldr	r4, [pc, #36]	; (8001d04 <_ZN8MainLoop15adcStateMachineEv+0x28>)
 8001ce0:	7825      	ldrb	r5, [r4, #0]
 8001ce2:	4628      	mov	r0, r5
 8001ce4:	f000 fd66 	bl	80027b4 <mehal_readADC>

  }

  void updateChannelValue(uint8_t chn,uint16_t value)
  {
	  if(chn<ADC_CHANNELS)
 8001ce8:	2d04      	cmp	r5, #4
	  {
		  this->currentValues[chn] = value;
 8001cea:	bf9c      	itt	ls
 8001cec:	4a06      	ldrls	r2, [pc, #24]	; (8001d08 <_ZN8MainLoop15adcStateMachineEv+0x2c>)
 8001cee:	f822 0015 	strhls.w	r0, [r2, r5, lsl #1]

	chn++;
 8001cf2:	7822      	ldrb	r2, [r4, #0]
 8001cf4:	3201      	adds	r2, #1
 8001cf6:	b2d2      	uxtb	r2, r2
	if(chn>=ADC_CHANNELS)
 8001cf8:	2a04      	cmp	r2, #4
	{
		chn=0;
 8001cfa:	bf88      	it	hi
 8001cfc:	2200      	movhi	r2, #0
 8001cfe:	7022      	strb	r2, [r4, #0]
	}

}
 8001d00:	bd38      	pop	{r3, r4, r5, pc}
 8001d02:	bf00      	nop
 8001d04:	200047a8 	.word	0x200047a8
 8001d08:	2000040c 	.word	0x2000040c

08001d0c <_ZN8MainLoop4loopEv>:
{
 8001d0c:	b570      	push	{r4, r5, r6, lr}
 8001d0e:	4605      	mov	r5, r0
	userInterface.loop();
 8001d10:	481f      	ldr	r0, [pc, #124]	; (8001d90 <_ZN8MainLoop4loopEv+0x84>)
 8001d12:	f000 f911 	bl	8001f38 <_ZN2Ui4loopEv>
    return data[setting];
 8001d16:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <_ZN8MainLoop4loopEv+0x88>)
    if (current_scale != settings.GetValue(SETTING_QUANTIZER_SCALE)) {
 8001d18:	4a1f      	ldr	r2, [pc, #124]	; (8001d98 <_ZN8MainLoop4loopEv+0x8c>)
 8001d1a:	7a5b      	ldrb	r3, [r3, #9]
 8001d1c:	7811      	ldrb	r1, [r2, #0]
 8001d1e:	4299      	cmp	r1, r3
 8001d20:	d00c      	beq.n	8001d3c <_ZN8MainLoop4loopEv+0x30>
      current_scale = settings.GetValue(SETTING_QUANTIZER_SCALE);
 8001d22:	7013      	strb	r3, [r2, #0]
  }
  
  int32_t Process(int32_t pitch, int32_t root);
  
  void Configure(const Scale& scale) {
    Configure(scale.notes, scale.span, scale.num_notes);
 8001d24:	2228      	movs	r2, #40	; 0x28
 8001d26:	435a      	muls	r2, r3
 8001d28:	491c      	ldr	r1, [pc, #112]	; (8001d9c <_ZN8MainLoop4loopEv+0x90>)
 8001d2a:	f102 0008 	add.w	r0, r2, #8
 8001d2e:	188b      	adds	r3, r1, r2
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	5e8a      	ldrsh	r2, [r1, r2]
 8001d34:	4401      	add	r1, r0
 8001d36:	481a      	ldr	r0, [pc, #104]	; (8001da0 <_ZN8MainLoop4loopEv+0x94>)
 8001d38:	f7ff f9dc 	bl	80010f4 <_ZN6braids9Quantizer9ConfigureEPKssj>
	if(flagRender==1)
 8001d3c:	4e19      	ldr	r6, [pc, #100]	; (8001da4 <_ZN8MainLoop4loopEv+0x98>)
    this->adcStateMachine();
 8001d3e:	4628      	mov	r0, r5
 8001d40:	f7ff ffcc 	bl	8001cdc <_ZN8MainLoop15adcStateMachineEv>
	if(flagRender==1)
 8001d44:	7832      	ldrb	r2, [r6, #0]
 8001d46:	2a01      	cmp	r2, #1
 8001d48:	d121      	bne.n	8001d8e <_ZN8MainLoop4loopEv+0x82>
		if(indexBufferRender==0)
 8001d4a:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <_ZN8MainLoop4loopEv+0x9c>)
 8001d4c:	7819      	ldrb	r1, [r3, #0]
			out = samplesBuffer+(SAMPLES_BUFFER_SIZE/2);
 8001d4e:	4b17      	ldr	r3, [pc, #92]	; (8001dac <_ZN8MainLoop4loopEv+0xa0>)
 8001d50:	f103 0418 	add.w	r4, r3, #24
 8001d54:	2900      	cmp	r1, #0
 8001d56:	bf08      	it	eq
 8001d58:	461c      	moveq	r4, r3
		mehal_debugPinSet();
 8001d5a:	f000 fd75 	bl	8002848 <mehal_debugPinSet>
		this->render(out,SAMPLES_BUFFER_SIZE/2);
 8001d5e:	4621      	mov	r1, r4
		sysTickDivisor++;
 8001d60:	4c13      	ldr	r4, [pc, #76]	; (8001db0 <_ZN8MainLoop4loopEv+0xa4>)
		this->render(out,SAMPLES_BUFFER_SIZE/2);
 8001d62:	2218      	movs	r2, #24
 8001d64:	4628      	mov	r0, r5
 8001d66:	f7ff fe33 	bl	80019d0 <_ZN8MainLoop6renderEPhm>
		mehal_debugPinReset();
 8001d6a:	f000 fd6e 	bl	800284a <mehal_debugPinReset>
		sysTickDivisor++;
 8001d6e:	7823      	ldrb	r3, [r4, #0]
 8001d70:	3301      	adds	r3, #1
 8001d72:	b2db      	uxtb	r3, r3
		if(sysTickDivisor>=4)
 8001d74:	2b03      	cmp	r3, #3
		sysTickDivisor++;
 8001d76:	7023      	strb	r3, [r4, #0]
		if(sysTickDivisor>=4)
 8001d78:	d904      	bls.n	8001d84 <_ZN8MainLoop4loopEv+0x78>
			userInterface.sysTick(); // 1ms
 8001d7a:	4805      	ldr	r0, [pc, #20]	; (8001d90 <_ZN8MainLoop4loopEv+0x84>)
 8001d7c:	f000 f844 	bl	8001e08 <_ZN2Ui7sysTickEv>
			sysTickDivisor=0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	7023      	strb	r3, [r4, #0]
		userInterface.justFinishedRender(); // notify the UI the render has finished. Now there is time to update the display
 8001d84:	4802      	ldr	r0, [pc, #8]	; (8001d90 <_ZN8MainLoop4loopEv+0x84>)
 8001d86:	f000 f8d3 	bl	8001f30 <_ZN2Ui18justFinishedRenderEv>
		flagRender=0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	7033      	strb	r3, [r6, #0]
}
 8001d8e:	bd70      	pop	{r4, r5, r6, pc}
 8001d90:	200003d0 	.word	0x200003d0
 8001d94:	20000310 	.word	0x20000310
 8001d98:	2000029c 	.word	0x2000029c
 8001d9c:	0800e240 	.word	0x0800e240
 8001da0:	20004698 	.word	0x20004698
 8001da4:	20000374 	.word	0x20000374
 8001da8:	20000405 	.word	0x20000405
 8001dac:	2000039d 	.word	0x2000039d
 8001db0:	20000404 	.word	0x20000404

08001db4 <_GLOBAL__sub_I__ZN6stmlib11GetUniqueIdEh>:
  Adc() { }
 8001db4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <_GLOBAL__sub_I__ZN6stmlib11GetUniqueIdEh+0x1c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	8019      	strh	r1, [r3, #0]
 8001dbe:	8059      	strh	r1, [r3, #2]
 8001dc0:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001dc4:	f8c3 2006 	str.w	r2, [r3, #6]
 8001dc8:	8099      	strh	r1, [r3, #4]

#define OSCILLATOR_INDEX_LEN	32

using namespace braids;

class Ui
 8001dca:	4b02      	ldr	r3, [pc, #8]	; (8001dd4 <_GLOBAL__sub_I__ZN6stmlib11GetUniqueIdEh+0x20>)
 8001dcc:	759a      	strb	r2, [r3, #22]
}
 8001dce:	4770      	bx	lr
 8001dd0:	2000040c 	.word	0x2000040c
 8001dd4:	200003d0 	.word	0x200003d0

08001dd8 <_ZNK7Encoder9incrementEv.isra.0>:
  inline bool pressed_immediate() const {
    //return !GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13);
	  return !mehal_readEncoderSwitch();
  }
  
  inline int32_t increment() const {
 8001dd8:	f000 0003 	and.w	r0, r0, #3
    int32_t increment = 0;
    uint8_t a = quadrature_decoding_state_[0];
    uint8_t b = quadrature_decoding_state_[1];
    if ((a & 0x03) == 0x02 && (b & 0x03) == 0x00) {
 8001ddc:	2802      	cmp	r0, #2
 8001dde:	f001 0103 	and.w	r1, r1, #3
 8001de2:	d100      	bne.n	8001de6 <_ZNK7Encoder9incrementEv.isra.0+0xe>
 8001de4:	b129      	cbz	r1, 8001df2 <_ZNK7Encoder9incrementEv.isra.0+0x1a>
      increment = -1;
    } else {
      if ((b & 0x03) == 0x02 && (a & 0x03) == 0x00) {
 8001de6:	2902      	cmp	r1, #2
 8001de8:	d106      	bne.n	8001df8 <_ZNK7Encoder9incrementEv.isra.0+0x20>
 8001dea:	fab0 f080 	clz	r0, r0
 8001dee:	0940      	lsrs	r0, r0, #5
 8001df0:	4770      	bx	lr
      increment = -1;
 8001df2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001df6:	4770      	bx	lr
    int32_t increment = 0;
 8001df8:	2000      	movs	r0, #0
        increment = 1;
      }
    }
    return increment;
  }
 8001dfa:	4770      	bx	lr

08001dfc <_ZN2Ui28getParamFromCurrentWaveTableEv>:



uint16_t Ui::getParamFromCurrentWaveTable(void)
{
	return (((uint16_t)currentOscillator)<<10);
 8001dfc:	f990 0010 	ldrsb.w	r0, [r0, #16]
 8001e00:	0280      	lsls	r0, r0, #10
}
 8001e02:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 8001e06:	4770      	bx	lr

08001e08 <_ZN2Ui7sysTickEv>:
		fineTuneChanged=1;
	}
}

void Ui::sysTick(void)
{
 8001e08:	b510      	push	{r4, lr}
 8001e0a:	4604      	mov	r4, r0
	encoder.sysTick();
 8001e0c:	3004      	adds	r0, #4
 8001e0e:	f000 fa8f 	bl	8002330 <_ZN7Encoder7sysTickEv>

	if(timeoutCalibCounter>0)
 8001e12:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	dd04      	ble.n	8001e24 <_ZN2Ui7sysTickEv+0x1c>
	{
		timeoutCalibCounter--;
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	82a3      	strh	r3, [r4, #20]
		if(timeoutCalibCounter==0)
 8001e20:	b903      	cbnz	r3, 8001e24 <_ZN2Ui7sysTickEv+0x1c>
		{
			enterCalibCounter=0;
 8001e22:	75a3      	strb	r3, [r4, #22]
		}
	}
}
 8001e24:	bd10      	pop	{r4, pc}
	...

08001e28 <_ZN2Ui15saveAllSettingsEv>:

void Ui::saveAllSettings(void)
{
 8001e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e2a:	4605      	mov	r5, r0
 8001e2c:	2400      	movs	r4, #0
	uint16_t i;
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
	{
		Setting setting_ = CONFIG_ITEMS[i].option;
 8001e2e:	4f07      	ldr	r7, [pc, #28]	; (8001e4c <_ZN2Ui15saveAllSettingsEv+0x24>)
 8001e30:	4e07      	ldr	r6, [pc, #28]	; (8001e50 <_ZN2Ui15saveAllSettingsEv+0x28>)
 8001e32:	193b      	adds	r3, r7, r4
 8001e34:	785b      	ldrb	r3, [r3, #1]
		int16_t value = settings.GetValue(setting_);
		this->memory->writeUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))), (uint16_t)value);
 8001e36:	f104 0120 	add.w	r1, r4, #32
 8001e3a:	5cf2      	ldrb	r2, [r6, r3]
 8001e3c:	b289      	uxth	r1, r1
 8001e3e:	69e8      	ldr	r0, [r5, #28]
 8001e40:	3402      	adds	r4, #2
 8001e42:	f000 fb02 	bl	800244a <_ZN6Memory11writeUInt16Ett>
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
 8001e46:	2c16      	cmp	r4, #22
 8001e48:	d1f3      	bne.n	8001e32 <_ZN2Ui15saveAllSettingsEv+0xa>
	}
}
 8001e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e4c:	0800e9e8 	.word	0x0800e9e8
 8001e50:	20000310 	.word	0x20000310

08001e54 <_ZN2Ui15loadAllSettingsEv>:
void Ui::loadAllSettings(void)
{
 8001e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e58:	4680      	mov	r8, r0
 8001e5a:	2400      	movs	r4, #0
	uint16_t i;
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
	{
		Setting setting_ = CONFIG_ITEMS[i].option;
 8001e5c:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8001ea8 <_ZN2Ui15loadAllSettingsEv+0x54>
  inline bool paques() const {
    return paques_;
  }
  
  static const SettingMetadata& metadata(Setting setting) {
    return metadata_[setting];
 8001e60:	4e0f      	ldr	r6, [pc, #60]	; (8001ea0 <_ZN2Ui15loadAllSettingsEv+0x4c>)
    data[setting] = value;
 8001e62:	4f10      	ldr	r7, [pc, #64]	; (8001ea4 <_ZN2Ui15loadAllSettingsEv+0x50>)

		int16_t valMem = (int16_t)this->memory->readUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))));
 8001e64:	f104 0120 	add.w	r1, r4, #32
		Setting setting_ = CONFIG_ITEMS[i].option;
 8001e68:	eb09 0304 	add.w	r3, r9, r4
		int16_t valMem = (int16_t)this->memory->readUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))));
 8001e6c:	b289      	uxth	r1, r1
 8001e6e:	f8d8 001c 	ldr.w	r0, [r8, #28]
		Setting setting_ = CONFIG_ITEMS[i].option;
 8001e72:	785d      	ldrb	r5, [r3, #1]
		int16_t valMem = (int16_t)this->memory->readUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))));
 8001e74:	f000 fac5 	bl	8002402 <_ZN6Memory10readUInt16Et>
    return metadata_[setting];
 8001e78:	230c      	movs	r3, #12
 8001e7a:	436b      	muls	r3, r5
 8001e7c:	199a      	adds	r2, r3, r6

		int16_t value = settings.metadata(setting_).Clip(valMem);
 8001e7e:	7852      	ldrb	r2, [r2, #1]
		int16_t valMem = (int16_t)this->memory->readUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))));
 8001e80:	b200      	sxth	r0, r0
    if (value > max_value) {
 8001e82:	4290      	cmp	r0, r2
		int16_t value = settings.metadata(setting_).Clip(valMem);
 8001e84:	5d9b      	ldrb	r3, [r3, r6]
 8001e86:	dd06      	ble.n	8001e96 <_ZN2Ui15loadAllSettingsEv+0x42>
      value = max_value;
 8001e88:	b210      	sxth	r0, r2
 8001e8a:	3402      	adds	r4, #2
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
 8001e8c:	2c16      	cmp	r4, #22
		settings.SetValue(setting_, value);
 8001e8e:	55e8      	strb	r0, [r5, r7]
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
 8001e90:	d1e8      	bne.n	8001e64 <_ZN2Ui15loadAllSettingsEv+0x10>
	}
}
 8001e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    } else if (value < min_value) {
 8001e96:	4298      	cmp	r0, r3
      value = min_value;
 8001e98:	bfb8      	it	lt
 8001e9a:	b218      	sxthlt	r0, r3
 8001e9c:	e7f5      	b.n	8001e8a <_ZN2Ui15loadAllSettingsEv+0x36>
 8001e9e:	bf00      	nop
 8001ea0:	0800db0c 	.word	0x0800db0c
 8001ea4:	20000310 	.word	0x20000310
 8001ea8:	0800e9e8 	.word	0x0800e9e8

08001eac <_ZN2Ui4initEPN6braids3AdcEP6Memory>:
void Ui::init(Adc* adc,Memory* memory) {
 8001eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eae:	4604      	mov	r4, r0
 8001eb0:	4616      	mov	r6, r2
	state = UI_STATE_SELECT_OSCILLATOR;
 8001eb2:	2500      	movs	r5, #0
void Ui::init(Adc* adc,Memory* memory) {
 8001eb4:	460f      	mov	r7, r1
	display.init();
 8001eb6:	f000 f9cf 	bl	8002258 <_ZN7Display4initEv>
	encoder.Init();
 8001eba:	1d20      	adds	r0, r4, #4
 8001ebc:	f000 fa31 	bl	8002322 <_ZN7Encoder4InitEv>
	this->flagUncal=2;
 8001ec0:	4b18      	ldr	r3, [pc, #96]	; (8001f24 <_ZN2Ui4initEPN6braids3AdcEP6Memory+0x78>)
	state = UI_STATE_SELECT_OSCILLATOR;
 8001ec2:	7465      	strb	r5, [r4, #17]
	timeoutCalibCounter=0;
 8001ec4:	82a5      	strh	r5, [r4, #20]
	enterCalibCounter=0;
 8001ec6:	75a5      	strb	r5, [r4, #22]
	this->flagUncal=2;
 8001ec8:	62e3      	str	r3, [r4, #44]	; 0x2c
	this->flagJustFinishedRender=0;
 8001eca:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
	this->memory = memory;
 8001ece:	e9c4 7606 	strd	r7, r6, [r4, #24]
	currentOscillator=(int8_t)memory->readUInt8(Memory::ADDR_CURRENT_OSCILLATOR);
 8001ed2:	211c      	movs	r1, #28
 8001ed4:	4630      	mov	r0, r6
 8001ed6:	f000 fa88 	bl	80023ea <_ZN6Memory9readUInt8Et>
 8001eda:	b240      	sxtb	r0, r0
	if(currentOscillator>=OSCILLATOR_INDEX_LEN)
 8001edc:	281f      	cmp	r0, #31
	currentOscillator=(int8_t)memory->readUInt8(Memory::ADDR_CURRENT_OSCILLATOR);
 8001ede:	bfd4      	ite	le
 8001ee0:	7420      	strble	r0, [r4, #16]
		currentOscillator=0;
 8001ee2:	7425      	strbgt	r5, [r4, #16]
	display.showChar(LIMITED_OSCILLATORS[currentOscillator].symbol);
 8001ee4:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8001ee8:	4d0f      	ldr	r5, [pc, #60]	; (8001f28 <_ZN2Ui4initEPN6braids3AdcEP6Memory+0x7c>)
 8001eea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001eee:	442b      	add	r3, r5
 8001ef0:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	f000 f9b3 	bl	8002260 <_ZN7Display8showCharEa>
	display.showBank(LIMITED_OSCILLATORS[currentOscillator].bank);
 8001efa:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8001efe:	4620      	mov	r0, r4
 8001f00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001f04:	441d      	add	r5, r3
 8001f06:	7869      	ldrb	r1, [r5, #1]
 8001f08:	f000 f9c4 	bl	8002294 <_ZN7Display8showBankEh>
    data[setting] = value;
 8001f0c:	2228      	movs	r2, #40	; 0x28
 8001f0e:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <_ZN2Ui4initEPN6braids3AdcEP6Memory+0x80>)
	display.showConfig(0);
 8001f10:	4620      	mov	r0, r4
 8001f12:	701a      	strb	r2, [r3, #0]
 8001f14:	2100      	movs	r1, #0
 8001f16:	f000 f9d6 	bl	80022c6 <_ZN7Display10showConfigEh>
	loadAllSettings();
 8001f1a:	4620      	mov	r0, r4
}
 8001f1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	loadAllSettings();
 8001f20:	f7ff bf98 	b.w	8001e54 <_ZN2Ui15loadAllSettingsEv>
 8001f24:	00010002 	.word	0x00010002
 8001f28:	0800e9fe 	.word	0x0800e9fe
 8001f2c:	20000310 	.word	0x20000310

08001f30 <_ZN2Ui18justFinishedRenderEv>:

void Ui::justFinishedRender(void)
{
	flagJustFinishedRender=1;
 8001f30:	2301      	movs	r3, #1
 8001f32:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
}
 8001f36:	4770      	bx	lr

08001f38 <_ZN2Ui4loopEv>:

void Ui::loop(void) {
 8001f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f3c:	4604      	mov	r4, r0

	encoder.loop();
 8001f3e:	1d05      	adds	r5, r0, #4
 8001f40:	4628      	mov	r0, r5
 8001f42:	f000 f9fa 	bl	800233a <_ZN7Encoder4loopEv>

	switch(state)
 8001f46:	7c63      	ldrb	r3, [r4, #17]
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d87a      	bhi.n	8002042 <_ZN2Ui4loopEv+0x10a>
 8001f4c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001f50:	007b0005 	.word	0x007b0005
 8001f54:	011100df 	.word	0x011100df
 8001f58:	0131      	.short	0x0131
	{
		case UI_STATE_SELECT_OSCILLATOR:
		{
			if(flagJustFinishedRender)
 8001f5a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8001f5e:	b3d3      	cbz	r3, 8001fd6 <_ZN2Ui4loopEv+0x9e>
			{
				flagJustFinishedRender=0;
 8001f60:	2300      	movs	r3, #0
				if(fineTuneChanged)
 8001f62:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
				flagJustFinishedRender=0;
 8001f66:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
				if(fineTuneChanged)
 8001f6a:	b162      	cbz	r2, 8001f86 <_ZN2Ui4loopEv+0x4e>
				{
					fineTuneChanged=0;
 8001f6c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
					display.showChar(LIMITED_OSCILLATORS[currentOscillator].symbol); // update display to show DOT
 8001f70:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8001f74:	4ab4      	ldr	r2, [pc, #720]	; (8002248 <_ZN2Ui4loopEv+0x310>)
 8001f76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8001f80:	4620      	mov	r0, r4
 8001f82:	f000 f96d 	bl	8002260 <_ZN7Display8showCharEa>
				}
				if(oscillatorChanged)
 8001f86:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8001f8a:	b1b3      	cbz	r3, 8001fba <_ZN2Ui4loopEv+0x82>
				{
					oscillatorChanged=0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
					display.showChar(LIMITED_OSCILLATORS[currentOscillator].symbol);
 8001f92:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8001f96:	4eac      	ldr	r6, [pc, #688]	; (8002248 <_ZN2Ui4loopEv+0x310>)
 8001f98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001f9c:	4433      	add	r3, r6
 8001f9e:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	f000 f95c 	bl	8002260 <_ZN7Display8showCharEa>
					display.showBank(LIMITED_OSCILLATORS[currentOscillator].bank);
 8001fa8:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8001fac:	4620      	mov	r0, r4
 8001fae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001fb2:	441e      	add	r6, r3
 8001fb4:	7871      	ldrb	r1, [r6, #1]
 8001fb6:	f000 f96d 	bl	8002294 <_ZN7Display8showBankEh>

				}
				if(flagPendingSetCurrentOscillator)
 8001fba:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8001fbe:	b153      	cbz	r3, 8001fd6 <_ZN2Ui4loopEv+0x9e>
				{
					flagPendingSetCurrentOscillator=0;
 8001fc0:	2100      	movs	r1, #0
					//settings.SetValue(SETTING_OSCILLATOR_SHAPE, LIMITED_OSCILLATORS[currentOscillator].osc);
					display.showConfig(0);
 8001fc2:	4620      	mov	r0, r4
					flagPendingSetCurrentOscillator=0;
 8001fc4:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
					display.showConfig(0);
 8001fc8:	f000 f97d 	bl	80022c6 <_ZN7Display10showConfigEh>
					memory->writeUInt8NoWait(Memory::ADDR_CURRENT_OSCILLATOR, (uint8_t)currentOscillator);
 8001fcc:	7c22      	ldrb	r2, [r4, #16]
 8001fce:	211c      	movs	r1, #28
 8001fd0:	69e0      	ldr	r0, [r4, #28]
 8001fd2:	f000 fa2e 	bl	8002432 <_ZN6Memory16writeUInt8NoWaitEth>
				}
			}

			int32_t increment = encoder.increment();
 8001fd6:	79a1      	ldrb	r1, [r4, #6]
 8001fd8:	7960      	ldrb	r0, [r4, #5]
 8001fda:	f7ff fefd 	bl	8001dd8 <_ZNK7Encoder9incrementEv.isra.0>
			if (increment != 0)
 8001fde:	2800      	cmp	r0, #0
 8001fe0:	d018      	beq.n	8002014 <_ZN2Ui4loopEv+0xdc>
 8001fe2:	7c23      	ldrb	r3, [r4, #16]
				if(currentOscillator>=OSCILLATOR_INDEX_LEN)
					currentOscillator=(OSCILLATOR_INDEX_LEN-1);
				if(currentOscillator<0)
					currentOscillator=0;

				oscillatorChanged=1; // to update display later
 8001fe4:	f04f 0101 	mov.w	r1, #1
					currentOscillator++;
 8001fe8:	bfcc      	ite	gt
 8001fea:	3301      	addgt	r3, #1
					currentOscillator--;
 8001fec:	f103 33ff 	addle.w	r3, r3, #4294967295	; 0xffffffff
 8001ff0:	7423      	strb	r3, [r4, #16]
				if(currentOscillator>=OSCILLATOR_INDEX_LEN)
 8001ff2:	f994 3010 	ldrsb.w	r3, [r4, #16]
				oscillatorChanged=1; // to update display later
 8001ff6:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
				if(currentOscillator>=OSCILLATOR_INDEX_LEN)
 8001ffa:	2b1f      	cmp	r3, #31
					currentOscillator=(OSCILLATOR_INDEX_LEN-1);
 8001ffc:	bfc4      	itt	gt
 8001ffe:	231f      	movgt	r3, #31
 8002000:	7423      	strbgt	r3, [r4, #16]
				if(currentOscillator<0)
 8002002:	f994 3010 	ldrsb.w	r3, [r4, #16]
				display.showConfig(1);
 8002006:	4620      	mov	r0, r4
				if(currentOscillator<0)
 8002008:	2b00      	cmp	r3, #0
					currentOscillator=0;
 800200a:	bfbc      	itt	lt
 800200c:	2300      	movlt	r3, #0
 800200e:	7423      	strblt	r3, [r4, #16]
				display.showConfig(1);
 8002010:	f000 f959 	bl	80022c6 <_ZN7Display10showConfigEh>
			}
			if(encoder.pressed())
 8002014:	4628      	mov	r0, r5
 8002016:	f000 f9d8 	bl	80023ca <_ZN7Encoder7pressedEv>
 800201a:	b110      	cbz	r0, 8002022 <_ZN2Ui4loopEv+0xea>
			{
				flagPendingSetCurrentOscillator=1;
 800201c:	2301      	movs	r3, #1
 800201e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
			}

			if(encoder.pressedLong())
 8002022:	4628      	mov	r0, r5
 8002024:	f000 f9cb 	bl	80023be <_ZN7Encoder11pressedLongEv>
 8002028:	b158      	cbz	r0, 8002042 <_ZN2Ui4loopEv+0x10a>
			{
				state = UI_STATE_CONFIG_MENU;
 800202a:	2101      	movs	r1, #1
				display.showConfig(1);
 800202c:	4620      	mov	r0, r4
				state = UI_STATE_CONFIG_MENU;
 800202e:	7461      	strb	r1, [r4, #17]
				display.showConfig(1);
 8002030:	f000 f949 	bl	80022c6 <_ZN7Display10showConfigEh>
				display.showBank(2); // both off
 8002034:	2102      	movs	r1, #2
 8002036:	4620      	mov	r0, r4
 8002038:	f000 f92c 	bl	8002294 <_ZN7Display8showBankEh>
				configIndex=0;
 800203c:	2300      	movs	r3, #0
 800203e:	74a3      	strb	r3, [r4, #18]

				// Calibration mode detection
				if(enterCalibCounter==0)
					timeoutCalibCounter=2000;

				enterCalibCounter++;
 8002040:	75a3      	strb	r3, [r4, #22]
			}
			break;
		}
	}

}
 8002042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(encoder.pressedLong())
 8002046:	4628      	mov	r0, r5
 8002048:	f000 f9b9 	bl	80023be <_ZN7Encoder11pressedLongEv>
 800204c:	b1e8      	cbz	r0, 800208a <_ZN2Ui4loopEv+0x152>
				state = UI_STATE_SELECT_OSCILLATOR;
 800204e:	2100      	movs	r1, #0
				display.showConfig(0);
 8002050:	4620      	mov	r0, r4
				state = UI_STATE_SELECT_OSCILLATOR;
 8002052:	7461      	strb	r1, [r4, #17]
				display.showConfig(0);
 8002054:	f000 f937 	bl	80022c6 <_ZN7Display10showConfigEh>
				display.showBank(LIMITED_OSCILLATORS[currentOscillator].bank);
 8002058:	f994 3010 	ldrsb.w	r3, [r4, #16]
 800205c:	4d7a      	ldr	r5, [pc, #488]	; (8002248 <_ZN2Ui4loopEv+0x310>)
 800205e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002062:	442b      	add	r3, r5
 8002064:	7859      	ldrb	r1, [r3, #1]
 8002066:	4620      	mov	r0, r4
 8002068:	f000 f914 	bl	8002294 <_ZN7Display8showBankEh>
				display.showChar(LIMITED_OSCILLATORS[currentOscillator].symbol);
 800206c:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8002070:	4620      	mov	r0, r4
 8002072:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002076:	441d      	add	r5, r3
 8002078:	f995 1002 	ldrsb.w	r1, [r5, #2]
 800207c:	f000 f8f0 	bl	8002260 <_ZN7Display8showCharEa>
				saveAllSettings();
 8002080:	4620      	mov	r0, r4
}
 8002082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				saveAllSettings();
 8002086:	f7ff becf 	b.w	8001e28 <_ZN2Ui15saveAllSettingsEv>
			display.showChar(CONFIG_ITEMS[configIndex].symbol);
 800208a:	f994 2012 	ldrsb.w	r2, [r4, #18]
 800208e:	4b6f      	ldr	r3, [pc, #444]	; (800224c <_ZN2Ui4loopEv+0x314>)
 8002090:	4620      	mov	r0, r4
 8002092:	f913 1012 	ldrsb.w	r1, [r3, r2, lsl #1]
 8002096:	f000 f8e3 	bl	8002260 <_ZN7Display8showCharEa>
			int32_t increment = encoder.increment();
 800209a:	79a1      	ldrb	r1, [r4, #6]
 800209c:	7960      	ldrb	r0, [r4, #5]
 800209e:	f7ff fe9b 	bl	8001dd8 <_ZNK7Encoder9incrementEv.isra.0>
			if (increment != 0)
 80020a2:	2800      	cmp	r0, #0
 80020a4:	d011      	beq.n	80020ca <_ZN2Ui4loopEv+0x192>
 80020a6:	7ca3      	ldrb	r3, [r4, #18]
					configIndex++;
 80020a8:	bfcc      	ite	gt
 80020aa:	3301      	addgt	r3, #1
					configIndex--;
 80020ac:	f103 33ff 	addle.w	r3, r3, #4294967295	; 0xffffffff
 80020b0:	74a3      	strb	r3, [r4, #18]
				if(configIndex>=CONFIG_ITEMS_SYMBOLS_LEN)
 80020b2:	f994 3012 	ldrsb.w	r3, [r4, #18]
 80020b6:	2b0a      	cmp	r3, #10
					configIndex=CONFIG_ITEMS_SYMBOLS_LEN-1;
 80020b8:	bfc4      	itt	gt
 80020ba:	230a      	movgt	r3, #10
 80020bc:	74a3      	strbgt	r3, [r4, #18]
				if(configIndex<0)
 80020be:	f994 3012 	ldrsb.w	r3, [r4, #18]
 80020c2:	2b00      	cmp	r3, #0
					configIndex=0;
 80020c4:	bfbc      	itt	lt
 80020c6:	2300      	movlt	r3, #0
 80020c8:	74a3      	strblt	r3, [r4, #18]
			if(encoder.pressed())
 80020ca:	4628      	mov	r0, r5
 80020cc:	f000 f97d 	bl	80023ca <_ZN7Encoder7pressedEv>
 80020d0:	2800      	cmp	r0, #0
 80020d2:	d0b6      	beq.n	8002042 <_ZN2Ui4loopEv+0x10a>
				state = UI_STATE_SET_VALUE;
 80020d4:	2302      	movs	r3, #2
 80020d6:	7463      	strb	r3, [r4, #17]
				if(enterCalibCounter==0)
 80020d8:	7da3      	ldrb	r3, [r4, #22]
 80020da:	b913      	cbnz	r3, 80020e2 <_ZN2Ui4loopEv+0x1aa>
					timeoutCalibCounter=2000;
 80020dc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80020e0:	82a2      	strh	r2, [r4, #20]
				enterCalibCounter++;
 80020e2:	3301      	adds	r3, #1
 80020e4:	b2db      	uxtb	r3, r3
				if(enterCalibCounter>=4)
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d9aa      	bls.n	8002040 <_ZN2Ui4loopEv+0x108>
					enterCalibCounter=0;
 80020ea:	2300      	movs	r3, #0
					state = UI_STATE_CALIB;
 80020ec:	2503      	movs	r5, #3
					enterCalibCounter=0;
 80020ee:	75a3      	strb	r3, [r4, #22]
					display.showConfig(1);
 80020f0:	2101      	movs	r1, #1
 80020f2:	4620      	mov	r0, r4
					state = UI_STATE_CALIB;
 80020f4:	7465      	strb	r5, [r4, #17]
					display.showConfig(1);
 80020f6:	f000 f8e6 	bl	80022c6 <_ZN7Display10showConfigEh>
					display.showBank(3); // all leds ON
 80020fa:	4629      	mov	r1, r5
 80020fc:	4620      	mov	r0, r4
 80020fe:	f000 f8c9 	bl	8002294 <_ZN7Display8showBankEh>
					display.showChar('2');
 8002102:	2132      	movs	r1, #50	; 0x32
				display.showChar('4');
 8002104:	4620      	mov	r0, r4
}
 8002106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				display.showChar('4');
 800210a:	f000 b8a9 	b.w	8002260 <_ZN7Display8showCharEa>
			Setting setting_ = CONFIG_ITEMS[configIndex].option;
 800210e:	f994 2012 	ldrsb.w	r2, [r4, #18]
 8002112:	4b4e      	ldr	r3, [pc, #312]	; (800224c <_ZN2Ui4loopEv+0x314>)
    return data[setting];
 8002114:	4f4e      	ldr	r7, [pc, #312]	; (8002250 <_ZN2Ui4loopEv+0x318>)
 8002116:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800211a:	785b      	ldrb	r3, [r3, #1]
			int32_t increment = encoder.increment();
 800211c:	79a1      	ldrb	r1, [r4, #6]
 800211e:	7960      	ldrb	r0, [r4, #5]
 8002120:	5dda      	ldrb	r2, [r3, r7]
 8002122:	f7ff fe59 	bl	8001dd8 <_ZNK7Encoder9incrementEv.isra.0>
 8002126:	4e4b      	ldr	r6, [pc, #300]	; (8002254 <_ZN2Ui4loopEv+0x31c>)
			if (increment != 0)
 8002128:	b988      	cbnz	r0, 800214e <_ZN2Ui4loopEv+0x216>
			int16_t value = settings.GetValue(setting_);
 800212a:	b212      	sxth	r2, r2
			display.showValue(settings.metadata(setting_).max_value,value);
 800212c:	210c      	movs	r1, #12
 800212e:	fb01 6303 	mla	r3, r1, r3, r6
 8002132:	4620      	mov	r0, r4
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	7859      	ldrb	r1, [r3, #1]
 8002138:	f000 f8c8 	bl	80022cc <_ZN7Display9showValueEhh>
			if(encoder.pressed())
 800213c:	4628      	mov	r0, r5
 800213e:	f000 f944 	bl	80023ca <_ZN7Encoder7pressedEv>
 8002142:	2800      	cmp	r0, #0
 8002144:	f43f af7d 	beq.w	8002042 <_ZN2Ui4loopEv+0x10a>
				state = UI_STATE_CONFIG_MENU;
 8002148:	2301      	movs	r3, #1
 800214a:	7463      	strb	r3, [r4, #17]
}
 800214c:	e779      	b.n	8002042 <_ZN2Ui4loopEv+0x10a>
    return metadata_[setting];
 800214e:	210c      	movs	r1, #12
 8002150:	4359      	muls	r1, r3
 8002152:	eb06 0c01 	add.w	ip, r6, r1
				value = settings.metadata(setting_).Clip(value + increment);
 8002156:	4402      	add	r2, r0
 8002158:	f89c 0001 	ldrb.w	r0, [ip, #1]
 800215c:	b212      	sxth	r2, r2
    if (value > max_value) {
 800215e:	4290      	cmp	r0, r2
 8002160:	5c71      	ldrb	r1, [r6, r1]
 8002162:	da02      	bge.n	800216a <_ZN2Ui4loopEv+0x232>
      value = max_value;
 8002164:	b202      	sxth	r2, r0
				settings.SetValue(setting_, value);
 8002166:	55da      	strb	r2, [r3, r7]
 8002168:	e7e0      	b.n	800212c <_ZN2Ui4loopEv+0x1f4>
    } else if (value < min_value) {
 800216a:	428a      	cmp	r2, r1
      value = min_value;
 800216c:	bfb8      	it	lt
 800216e:	b20a      	sxthlt	r2, r1
 8002170:	e7f9      	b.n	8002166 <_ZN2Ui4loopEv+0x22e>
			if(encoder.pressedLong())
 8002172:	4628      	mov	r0, r5
 8002174:	f000 f923 	bl	80023be <_ZN7Encoder11pressedLongEv>
 8002178:	b150      	cbz	r0, 8002190 <_ZN2Ui4loopEv+0x258>
				state = UI_STATE_CONFIG_MENU;
 800217a:	2101      	movs	r1, #1
				display.showConfig(1);
 800217c:	4620      	mov	r0, r4
				state = UI_STATE_CONFIG_MENU;
 800217e:	7461      	strb	r1, [r4, #17]
				display.showConfig(1);
 8002180:	f000 f8a1 	bl	80022c6 <_ZN7Display10showConfigEh>
				display.showBank(2); // all leds OFF
 8002184:	4620      	mov	r0, r4
}
 8002186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				display.showBank(2); // all leds OFF
 800218a:	2102      	movs	r1, #2
 800218c:	f000 b882 	b.w	8002294 <_ZN7Display8showBankEh>
			if(encoder.pressed())
 8002190:	4628      	mov	r0, r5
 8002192:	f000 f91a 	bl	80023ca <_ZN7Encoder7pressedEv>
 8002196:	2800      	cmp	r0, #0
 8002198:	f43f af53 	beq.w	8002042 <_ZN2Ui4loopEv+0x10a>
				adc_code_c2 = adc->channel(ADC_CHANNEL_PITCH);
 800219c:	69a3      	ldr	r3, [r4, #24]
				display.showChar('4');
 800219e:	2134      	movs	r1, #52	; 0x34
				adc_code_c2 = adc->channel(ADC_CHANNEL_PITCH);
 80021a0:	891a      	ldrh	r2, [r3, #8]
 80021a2:	6222      	str	r2, [r4, #32]
				adc_code_p0_min = adc->channel(ADC_CHANNEL_PARAM0);
 80021a4:	885a      	ldrh	r2, [r3, #2]
 80021a6:	6262      	str	r2, [r4, #36]	; 0x24
				adc_code_p1_min = adc->channel(ADC_CHANNEL_PARAM1);
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	62a3      	str	r3, [r4, #40]	; 0x28
				state = UI_STATE_CALIB_STEP_2;
 80021ac:	2304      	movs	r3, #4
 80021ae:	7463      	strb	r3, [r4, #17]
 80021b0:	e7a8      	b.n	8002104 <_ZN2Ui4loopEv+0x1cc>
			if(encoder.pressedLong())
 80021b2:	4628      	mov	r0, r5
 80021b4:	f000 f903 	bl	80023be <_ZN7Encoder11pressedLongEv>
 80021b8:	4680      	mov	r8, r0
 80021ba:	2800      	cmp	r0, #0
 80021bc:	d1dd      	bne.n	800217a <_ZN2Ui4loopEv+0x242>
			if(encoder.pressed())
 80021be:	4628      	mov	r0, r5
 80021c0:	f000 f903 	bl	80023ca <_ZN7Encoder7pressedEv>
 80021c4:	2800      	cmp	r0, #0
 80021c6:	f43f af3c 	beq.w	8002042 <_ZN2Ui4loopEv+0x10a>
				int32_t adc_code_c4 = adc->channel(ADC_CHANNEL_PITCH);
 80021ca:	69a3      	ldr	r3, [r4, #24]
				settings.Calibrate(adc_code_c2,
 80021cc:	6a22      	ldr	r2, [r4, #32]
		  return this->currentValues[4];
 80021ce:	891d      	ldrh	r5, [r3, #8]
		  return this->currentValues[1];
 80021d0:	885f      	ldrh	r7, [r3, #2]
    if (adc_code_c4 != adc_code_c2) {
 80021d2:	42aa      	cmp	r2, r5
		  return this->currentValues[0];
 80021d4:	881e      	ldrh	r6, [r3, #0]
 80021d6:	d00f      	beq.n	80021f8 <_ZN2Ui4loopEv+0x2c0>
      int32_t scale = (24 * 128 * 4096L) / (adc_code_c4 - adc_code_c2);
 80021d8:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 80021dc:	1aa9      	subs	r1, r5, r2
 80021de:	fb93 f3f1 	sdiv	r3, r3, r1
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 80021e2:	442a      	add	r2, r5
      data_.pitch_cv_scale = scale;
 80021e4:	491a      	ldr	r1, [pc, #104]	; (8002250 <_ZN2Ui4loopEv+0x318>)
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 80021e6:	1052      	asrs	r2, r2, #1
      data_.pitch_cv_scale = scale;
 80021e8:	618b      	str	r3, [r1, #24]
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 80021ea:	4353      	muls	r3, r2
 80021ec:	131b      	asrs	r3, r3, #12
      data_.pitch_cv_offset = (60 << 7) - 
 80021ee:	f5c3 53f0 	rsb	r3, r3, #7680	; 0x1e00
 80021f2:	614b      	str	r3, [r1, #20]
      data_.fm_cv_offset = adc_code_fm;
 80021f4:	f8c1 801c 	str.w	r8, [r1, #28]
    Save();
 80021f8:	4815      	ldr	r0, [pc, #84]	; (8002250 <_ZN2Ui4loopEv+0x318>)
 80021fa:	f7ff f86f 	bl	80012dc <_ZN6braids8Settings4SaveEv>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_C2, adc_code_c2);
 80021fe:	6a22      	ldr	r2, [r4, #32]
 8002200:	2100      	movs	r1, #0
 8002202:	69e0      	ldr	r0, [r4, #28]
 8002204:	f000 f909 	bl	800241a <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_C4, adc_code_c4);
 8002208:	462a      	mov	r2, r5
 800220a:	2104      	movs	r1, #4
 800220c:	69e0      	ldr	r0, [r4, #28]
 800220e:	f000 f904 	bl	800241a <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_FM, adc_code_fm);
 8002212:	2200      	movs	r2, #0
 8002214:	2108      	movs	r1, #8
 8002216:	69e0      	ldr	r0, [r4, #28]
 8002218:	f000 f8ff 	bl	800241a <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_P0_MIN, adc_code_p0_min);
 800221c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800221e:	210c      	movs	r1, #12
 8002220:	69e0      	ldr	r0, [r4, #28]
 8002222:	f000 f8fa 	bl	800241a <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_P0_MAX, adc_code_p0_max);
 8002226:	463a      	mov	r2, r7
 8002228:	2110      	movs	r1, #16
 800222a:	69e0      	ldr	r0, [r4, #28]
 800222c:	f000 f8f5 	bl	800241a <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_P1_MIN, adc_code_p1_min);
 8002230:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002232:	2114      	movs	r1, #20
 8002234:	69e0      	ldr	r0, [r4, #28]
 8002236:	f000 f8f0 	bl	800241a <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_P1_MAX, adc_code_p1_max);
 800223a:	4632      	mov	r2, r6
 800223c:	2118      	movs	r1, #24
 800223e:	69e0      	ldr	r0, [r4, #28]
 8002240:	f000 f8eb 	bl	800241a <_ZN6Memory11writeUInt32Etm>
 8002244:	e780      	b.n	8002148 <_ZN2Ui4loopEv+0x210>
 8002246:	bf00      	nop
 8002248:	0800e9fe 	.word	0x0800e9fe
 800224c:	0800e9e8 	.word	0x0800e9e8
 8002250:	20000310 	.word	0x20000310
 8002254:	0800db0c 	.word	0x0800db0c

08002258 <_ZN7Display4initEv>:
 8002258:	2300      	movs	r3, #0
 800225a:	7003      	strb	r3, [r0, #0]
 800225c:	4770      	bx	lr
	...

08002260 <_ZN7Display8showCharEa>:
 8002260:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b19      	cmp	r3, #25
 8002268:	bf95      	itete	ls
 800226a:	4b08      	ldrls	r3, [pc, #32]	; (800228c <_ZN7Display8showCharEa+0x2c>)
 800226c:	4b08      	ldrhi	r3, [pc, #32]	; (8002290 <_ZN7Display8showCharEa+0x30>)
 800226e:	18c9      	addls	r1, r1, r3
 8002270:	18c9      	addhi	r1, r1, r3
 8002272:	bf94      	ite	ls
 8002274:	f811 3c41 	ldrbls.w	r3, [r1, #-65]
 8002278:	f811 3c30 	ldrbhi.w	r3, [r1, #-48]
 800227c:	7800      	ldrb	r0, [r0, #0]
 800227e:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 8002282:	43c0      	mvns	r0, r0
 8002284:	b2c0      	uxtb	r0, r0
 8002286:	f000 baf9 	b.w	800287c <mehal_sendDataTo595>
 800228a:	bf00      	nop
 800228c:	0800ea5e 	.word	0x0800ea5e
 8002290:	0800ea78 	.word	0x0800ea78

08002294 <_ZN7Display8showBankEh>:
 8002294:	b508      	push	{r3, lr}
 8002296:	2903      	cmp	r1, #3
 8002298:	d814      	bhi.n	80022c4 <_ZN7Display8showBankEh+0x30>
 800229a:	e8df f001 	tbb	[pc, r1]
 800229e:	0a02      	.short	0x0a02
 80022a0:	110f      	.short	0x110f
 80022a2:	2001      	movs	r0, #1
 80022a4:	f000 fb36 	bl	8002914 <mehal_setBank0Led>
 80022a8:	2000      	movs	r0, #0
 80022aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80022ae:	f000 bb25 	b.w	80028fc <mehal_setBank1Led>
 80022b2:	2000      	movs	r0, #0
 80022b4:	f000 fb2e 	bl	8002914 <mehal_setBank0Led>
 80022b8:	2001      	movs	r0, #1
 80022ba:	e7f6      	b.n	80022aa <_ZN7Display8showBankEh+0x16>
 80022bc:	2000      	movs	r0, #0
 80022be:	e7f1      	b.n	80022a4 <_ZN7Display8showBankEh+0x10>
 80022c0:	2001      	movs	r0, #1
 80022c2:	e7f7      	b.n	80022b4 <_ZN7Display8showBankEh+0x20>
 80022c4:	bd08      	pop	{r3, pc}

080022c6 <_ZN7Display10showConfigEh>:
 80022c6:	4608      	mov	r0, r1
 80022c8:	f000 bb0c 	b.w	80028e4 <mehal_setConfigLed>

080022cc <_ZN7Display9showValueEhh>:
 80022cc:	3901      	subs	r1, #1
 80022ce:	2912      	cmp	r1, #18
 80022d0:	d826      	bhi.n	8002320 <_ZN7Display9showValueEhh+0x54>
 80022d2:	e8df f001 	tbb	[pc, r1]
 80022d6:	1812      	.short	0x1812
 80022d8:	25251e25 	.word	0x25251e25
 80022dc:	25252525 	.word	0x25252525
 80022e0:	2525251e 	.word	0x2525251e
 80022e4:	2525250a 	.word	0x2525250a
 80022e8:	1e          	.byte	0x1e
 80022e9:	00          	.byte	0x00
 80022ea:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
 80022ee:	220f      	movs	r2, #15
 80022f0:	fb91 f1f2 	sdiv	r1, r1, r2
 80022f4:	3130      	adds	r1, #48	; 0x30
 80022f6:	b249      	sxtb	r1, r1
 80022f8:	e001      	b.n	80022fe <_ZN7Display9showValueEhh+0x32>
 80022fa:	b912      	cbnz	r2, 8002302 <_ZN7Display9showValueEhh+0x36>
 80022fc:	2130      	movs	r1, #48	; 0x30
 80022fe:	f7ff bfaf 	b.w	8002260 <_ZN7Display8showCharEa>
 8002302:	2131      	movs	r1, #49	; 0x31
 8002304:	e7fb      	b.n	80022fe <_ZN7Display9showValueEhh+0x32>
 8002306:	2a00      	cmp	r2, #0
 8002308:	d0f8      	beq.n	80022fc <_ZN7Display9showValueEhh+0x30>
 800230a:	2a01      	cmp	r2, #1
 800230c:	d0f9      	beq.n	8002302 <_ZN7Display9showValueEhh+0x36>
 800230e:	2132      	movs	r1, #50	; 0x32
 8002310:	e7f5      	b.n	80022fe <_ZN7Display9showValueEhh+0x32>
 8002312:	2a09      	cmp	r2, #9
 8002314:	bf94      	ite	ls
 8002316:	f102 0130 	addls.w	r1, r2, #48	; 0x30
 800231a:	f102 0137 	addhi.w	r1, r2, #55	; 0x37
 800231e:	e7ea      	b.n	80022f6 <_ZN7Display9showValueEhh+0x2a>
 8002320:	4770      	bx	lr

08002322 <_ZN7Encoder4InitEv>:
 8002322:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002326:	8003      	strh	r3, [r0, #0]
 8002328:	7083      	strb	r3, [r0, #2]
 800232a:	2300      	movs	r3, #0
 800232c:	7203      	strb	r3, [r0, #8]
 800232e:	4770      	bx	lr

08002330 <_ZN7Encoder7sysTickEv>:
 8002330:	6843      	ldr	r3, [r0, #4]
 8002332:	b10b      	cbz	r3, 8002338 <_ZN7Encoder7sysTickEv+0x8>
 8002334:	3b01      	subs	r3, #1
 8002336:	6043      	str	r3, [r0, #4]
 8002338:	4770      	bx	lr

0800233a <_ZN7Encoder4loopEv>:
 800233a:	b538      	push	{r3, r4, r5, lr}
 800233c:	7a03      	ldrb	r3, [r0, #8]
 800233e:	4604      	mov	r4, r0
 8002340:	2b01      	cmp	r3, #1
 8002342:	d022      	beq.n	800238a <_ZN7Encoder4loopEv+0x50>
 8002344:	d317      	bcc.n	8002376 <_ZN7Encoder4loopEv+0x3c>
 8002346:	2b02      	cmp	r3, #2
 8002348:	d030      	beq.n	80023ac <_ZN7Encoder4loopEv+0x72>
 800234a:	7825      	ldrb	r5, [r4, #0]
 800234c:	f000 fa7e 	bl	800284c <mehal_readEncoderSwitch>
 8002350:	006d      	lsls	r5, r5, #1
 8002352:	b26d      	sxtb	r5, r5
 8002354:	4328      	orrs	r0, r5
 8002356:	7020      	strb	r0, [r4, #0]
 8002358:	7865      	ldrb	r5, [r4, #1]
 800235a:	f000 fa87 	bl	800286c <mehal_readEncoderB>
 800235e:	006d      	lsls	r5, r5, #1
 8002360:	b26d      	sxtb	r5, r5
 8002362:	4328      	orrs	r0, r5
 8002364:	7060      	strb	r0, [r4, #1]
 8002366:	78a5      	ldrb	r5, [r4, #2]
 8002368:	f000 fa78 	bl	800285c <mehal_readEncoderA>
 800236c:	006d      	lsls	r5, r5, #1
 800236e:	b26d      	sxtb	r5, r5
 8002370:	4328      	orrs	r0, r5
 8002372:	70a0      	strb	r0, [r4, #2]
 8002374:	bd38      	pop	{r3, r4, r5, pc}
 8002376:	f000 fa69 	bl	800284c <mehal_readEncoderSwitch>
 800237a:	2800      	cmp	r0, #0
 800237c:	d1e5      	bne.n	800234a <_ZN7Encoder4loopEv+0x10>
 800237e:	2301      	movs	r3, #1
 8002380:	7223      	strb	r3, [r4, #8]
 8002382:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002386:	6063      	str	r3, [r4, #4]
 8002388:	e7df      	b.n	800234a <_ZN7Encoder4loopEv+0x10>
 800238a:	6842      	ldr	r2, [r0, #4]
 800238c:	b922      	cbnz	r2, 8002398 <_ZN7Encoder4loopEv+0x5e>
 800238e:	7243      	strb	r3, [r0, #9]
 8002390:	2302      	movs	r3, #2
 8002392:	7203      	strb	r3, [r0, #8]
 8002394:	2364      	movs	r3, #100	; 0x64
 8002396:	6043      	str	r3, [r0, #4]
 8002398:	f000 fa58 	bl	800284c <mehal_readEncoderSwitch>
 800239c:	2801      	cmp	r0, #1
 800239e:	d1d4      	bne.n	800234a <_ZN7Encoder4loopEv+0x10>
 80023a0:	2302      	movs	r3, #2
 80023a2:	7223      	strb	r3, [r4, #8]
 80023a4:	2364      	movs	r3, #100	; 0x64
 80023a6:	72a0      	strb	r0, [r4, #10]
 80023a8:	6063      	str	r3, [r4, #4]
 80023aa:	e7ce      	b.n	800234a <_ZN7Encoder4loopEv+0x10>
 80023ac:	f000 fa4e 	bl	800284c <mehal_readEncoderSwitch>
 80023b0:	2801      	cmp	r0, #1
 80023b2:	d1ca      	bne.n	800234a <_ZN7Encoder4loopEv+0x10>
 80023b4:	6863      	ldr	r3, [r4, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1c7      	bne.n	800234a <_ZN7Encoder4loopEv+0x10>
 80023ba:	7223      	strb	r3, [r4, #8]
 80023bc:	e7c5      	b.n	800234a <_ZN7Encoder4loopEv+0x10>

080023be <_ZN7Encoder11pressedLongEv>:
 80023be:	7a43      	ldrb	r3, [r0, #9]
 80023c0:	b10b      	cbz	r3, 80023c6 <_ZN7Encoder11pressedLongEv+0x8>
 80023c2:	2200      	movs	r2, #0
 80023c4:	7242      	strb	r2, [r0, #9]
 80023c6:	4618      	mov	r0, r3
 80023c8:	4770      	bx	lr

080023ca <_ZN7Encoder7pressedEv>:
 80023ca:	4603      	mov	r3, r0
 80023cc:	2200      	movs	r2, #0
 80023ce:	7a80      	ldrb	r0, [r0, #10]
 80023d0:	729a      	strb	r2, [r3, #10]
 80023d2:	4770      	bx	lr

080023d4 <_ZN6Memory10readUInt32Et>:
 80023d4:	b507      	push	{r0, r1, r2, lr}
 80023d6:	2204      	movs	r2, #4
 80023d8:	4608      	mov	r0, r1
 80023da:	eb0d 0102 	add.w	r1, sp, r2
 80023de:	f000 fa09 	bl	80027f4 <mehal_i2cMemRead>
 80023e2:	9801      	ldr	r0, [sp, #4]
 80023e4:	b003      	add	sp, #12
 80023e6:	f85d fb04 	ldr.w	pc, [sp], #4

080023ea <_ZN6Memory9readUInt8Et>:
 80023ea:	b507      	push	{r0, r1, r2, lr}
 80023ec:	4608      	mov	r0, r1
 80023ee:	2201      	movs	r2, #1
 80023f0:	f10d 0107 	add.w	r1, sp, #7
 80023f4:	f000 f9fe 	bl	80027f4 <mehal_i2cMemRead>
 80023f8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80023fc:	b003      	add	sp, #12
 80023fe:	f85d fb04 	ldr.w	pc, [sp], #4

08002402 <_ZN6Memory10readUInt16Et>:
 8002402:	b507      	push	{r0, r1, r2, lr}
 8002404:	4608      	mov	r0, r1
 8002406:	2202      	movs	r2, #2
 8002408:	f10d 0106 	add.w	r1, sp, #6
 800240c:	f000 f9f2 	bl	80027f4 <mehal_i2cMemRead>
 8002410:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8002414:	b003      	add	sp, #12
 8002416:	f85d fb04 	ldr.w	pc, [sp], #4

0800241a <_ZN6Memory11writeUInt32Etm>:
 800241a:	b507      	push	{r0, r1, r2, lr}
 800241c:	4608      	mov	r0, r1
 800241e:	a902      	add	r1, sp, #8
 8002420:	f841 2d04 	str.w	r2, [r1, #-4]!
 8002424:	2301      	movs	r3, #1
 8002426:	2204      	movs	r2, #4
 8002428:	f000 f9f6 	bl	8002818 <mehal_i2cMemWrite>
 800242c:	b003      	add	sp, #12
 800242e:	f85d fb04 	ldr.w	pc, [sp], #4

08002432 <_ZN6Memory16writeUInt8NoWaitEth>:
 8002432:	b507      	push	{r0, r1, r2, lr}
 8002434:	4608      	mov	r0, r1
 8002436:	a902      	add	r1, sp, #8
 8002438:	f801 2d01 	strb.w	r2, [r1, #-1]!
 800243c:	2300      	movs	r3, #0
 800243e:	2201      	movs	r2, #1
 8002440:	f000 f9ea 	bl	8002818 <mehal_i2cMemWrite>
 8002444:	b003      	add	sp, #12
 8002446:	f85d fb04 	ldr.w	pc, [sp], #4

0800244a <_ZN6Memory11writeUInt16Ett>:
 800244a:	b507      	push	{r0, r1, r2, lr}
 800244c:	4608      	mov	r0, r1
 800244e:	a902      	add	r1, sp, #8
 8002450:	f821 2d02 	strh.w	r2, [r1, #-2]!
 8002454:	2301      	movs	r3, #1
 8002456:	2202      	movs	r2, #2
 8002458:	f000 f9de 	bl	8002818 <mehal_i2cMemWrite>
 800245c:	b003      	add	sp, #12
 800245e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002464 <DMA1_Channel5_IRQHandler>:
 8002464:	b510      	push	{r4, lr}
 8002466:	4c0b      	ldr	r4, [pc, #44]	; (8002494 <DMA1_Channel5_IRQHandler+0x30>)
 8002468:	6820      	ldr	r0, [r4, #0]
 800246a:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800246e:	d005      	beq.n	800247c <DMA1_Channel5_IRQHandler+0x18>
 8002470:	4b09      	ldr	r3, [pc, #36]	; (8002498 <DMA1_Channel5_IRQHandler+0x34>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	b14b      	cbz	r3, 800248a <DMA1_Channel5_IRQHandler+0x26>
 8002476:	2001      	movs	r0, #1
 8002478:	4798      	blx	r3
 800247a:	e006      	b.n	800248a <DMA1_Channel5_IRQHandler+0x26>
 800247c:	6823      	ldr	r3, [r4, #0]
 800247e:	035b      	lsls	r3, r3, #13
 8002480:	d503      	bpl.n	800248a <DMA1_Channel5_IRQHandler+0x26>
 8002482:	4b05      	ldr	r3, [pc, #20]	; (8002498 <DMA1_Channel5_IRQHandler+0x34>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f6      	bne.n	8002478 <DMA1_Channel5_IRQHandler+0x14>
 800248a:	6863      	ldr	r3, [r4, #4]
 800248c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002490:	6063      	str	r3, [r4, #4]
 8002492:	bd10      	pop	{r4, pc}
 8002494:	40020000 	.word	0x40020000
 8002498:	200047b0 	.word	0x200047b0

0800249c <mehal_init>:
 800249c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024a0:	4bb8      	ldr	r3, [pc, #736]	; (8002784 <mehal_init+0x2e8>)
 80024a2:	4db9      	ldr	r5, [pc, #740]	; (8002788 <mehal_init+0x2ec>)
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	69eb      	ldr	r3, [r5, #28]
 80024a8:	4eb8      	ldr	r6, [pc, #736]	; (800278c <mehal_init+0x2f0>)
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	61eb      	str	r3, [r5, #28]
 80024b0:	69ab      	ldr	r3, [r5, #24]
 80024b2:	2400      	movs	r4, #0
 80024b4:	f043 0305 	orr.w	r3, r3, #5
 80024b8:	61ab      	str	r3, [r5, #24]
 80024ba:	6833      	ldr	r3, [r6, #0]
 80024bc:	22ff      	movs	r2, #255	; 0xff
 80024be:	f023 030f 	bic.w	r3, r3, #15
 80024c2:	6033      	str	r3, [r6, #0]
 80024c4:	6833      	ldr	r3, [r6, #0]
 80024c6:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 80024ca:	f043 030b 	orr.w	r3, r3, #11
 80024ce:	6033      	str	r3, [r6, #0]
 80024d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024d4:	629c      	str	r4, [r3, #40]	; 0x28
 80024d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80024d8:	2280      	movs	r2, #128	; 0x80
 80024da:	635a      	str	r2, [r3, #52]	; 0x34
 80024dc:	699a      	ldr	r2, [r3, #24]
 80024de:	b087      	sub	sp, #28
 80024e0:	f042 0268 	orr.w	r2, r2, #104	; 0x68
 80024e4:	619a      	str	r2, [r3, #24]
 80024e6:	6a1a      	ldr	r2, [r3, #32]
 80024e8:	f022 0202 	bic.w	r2, r2, #2
 80024ec:	621a      	str	r2, [r3, #32]
 80024ee:	6a1a      	ldr	r2, [r3, #32]
 80024f0:	f042 0201 	orr.w	r2, r2, #1
 80024f4:	621a      	str	r2, [r3, #32]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	f042 0201 	orr.w	r2, r2, #1
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	696b      	ldr	r3, [r5, #20]
 8002500:	4aa3      	ldr	r2, [pc, #652]	; (8002790 <mehal_init+0x2f4>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	616b      	str	r3, [r5, #20]
 8002508:	4ba2      	ldr	r3, [pc, #648]	; (8002794 <mehal_init+0x2f8>)
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60d8      	str	r0, [r3, #12]
 800250e:	6059      	str	r1, [r3, #4]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	f042 0210 	orr.w	r2, r2, #16
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	f042 0220 	orr.w	r2, r2, #32
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	f042 0202 	orr.w	r2, r2, #2
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	f042 0204 	orr.w	r2, r2, #4
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	4a8f      	ldr	r2, [pc, #572]	; (8002798 <mehal_init+0x2fc>)
 800255a:	f8c2 9000 	str.w	r9, [r2]
 800255e:	b662      	cpsie	i
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	2702      	movs	r7, #2
 8002564:	f042 0201 	orr.w	r2, r2, #1
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800256e:	f04f 0801 	mov.w	r8, #1
 8002572:	f44f 6b00 	mov.w	fp, #2048	; 0x800
 8002576:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
 800257a:	69ab      	ldr	r3, [r5, #24]
 800257c:	a902      	add	r1, sp, #8
 800257e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002582:	61ab      	str	r3, [r5, #24]
 8002584:	4b85      	ldr	r3, [pc, #532]	; (800279c <mehal_init+0x300>)
 8002586:	4886      	ldr	r0, [pc, #536]	; (80027a0 <mehal_init+0x304>)
 8002588:	629c      	str	r4, [r3, #40]	; 0x28
 800258a:	62da      	str	r2, [r3, #44]	; 0x2c
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002592:	60da      	str	r2, [r3, #12]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	69ab      	ldr	r3, [r5, #24]
 800259e:	f043 0308 	orr.w	r3, r3, #8
 80025a2:	61ab      	str	r3, [r5, #24]
 80025a4:	69ab      	ldr	r3, [r5, #24]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	9b00      	ldr	r3, [sp, #0]
 80025ae:	69ab      	ldr	r3, [r5, #24]
 80025b0:	f043 0304 	orr.w	r3, r3, #4
 80025b4:	61ab      	str	r3, [r5, #24]
 80025b6:	69ab      	ldr	r3, [r5, #24]
 80025b8:	9403      	str	r4, [sp, #12]
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	9b01      	ldr	r3, [sp, #4]
 80025c2:	f8cd b008 	str.w	fp, [sp, #8]
 80025c6:	e9cd 8704 	strd	r8, r7, [sp, #16]
 80025ca:	f000 fb3d 	bl	8002c48 <HAL_GPIO_Init>
 80025ce:	a902      	add	r1, sp, #8
 80025d0:	4873      	ldr	r0, [pc, #460]	; (80027a0 <mehal_init+0x304>)
 80025d2:	e9cd a402 	strd	sl, r4, [sp, #8]
 80025d6:	e9cd 8704 	strd	r8, r7, [sp, #16]
 80025da:	f000 fb35 	bl	8002c48 <HAL_GPIO_Init>
 80025de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025e2:	a902      	add	r1, sp, #8
 80025e4:	486e      	ldr	r0, [pc, #440]	; (80027a0 <mehal_init+0x304>)
 80025e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80025ea:	e9cd 8704 	strd	r8, r7, [sp, #16]
 80025ee:	f000 fb2b 	bl	8002c48 <HAL_GPIO_Init>
 80025f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025f6:	a902      	add	r1, sp, #8
 80025f8:	4869      	ldr	r0, [pc, #420]	; (80027a0 <mehal_init+0x304>)
 80025fa:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80025fe:	e9cd 8704 	strd	r8, r7, [sp, #16]
 8002602:	f000 fb21 	bl	8002c48 <HAL_GPIO_Init>
 8002606:	a902      	add	r1, sp, #8
 8002608:	4865      	ldr	r0, [pc, #404]	; (80027a0 <mehal_init+0x304>)
 800260a:	e9cd 9802 	strd	r9, r8, [sp, #8]
 800260e:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8002612:	f000 fb19 	bl	8002c48 <HAL_GPIO_Init>
 8002616:	4649      	mov	r1, r9
 8002618:	f04f 0903 	mov.w	r9, #3
 800261c:	4622      	mov	r2, r4
 800261e:	4860      	ldr	r0, [pc, #384]	; (80027a0 <mehal_init+0x304>)
 8002620:	f000 fc83 	bl	8002f2a <HAL_GPIO_WritePin>
 8002624:	a902      	add	r1, sp, #8
 8002626:	4630      	mov	r0, r6
 8002628:	e9cd 9403 	strd	r9, r4, [sp, #12]
 800262c:	9702      	str	r7, [sp, #8]
 800262e:	9705      	str	r7, [sp, #20]
 8002630:	f000 fb0a 	bl	8002c48 <HAL_GPIO_Init>
 8002634:	2304      	movs	r3, #4
 8002636:	a902      	add	r1, sp, #8
 8002638:	4630      	mov	r0, r6
 800263a:	e9cd 3902 	strd	r3, r9, [sp, #8]
 800263e:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8002642:	f000 fb01 	bl	8002c48 <HAL_GPIO_Init>
 8002646:	2308      	movs	r3, #8
 8002648:	4630      	mov	r0, r6
 800264a:	eb0d 0103 	add.w	r1, sp, r3
 800264e:	e9cd 3902 	strd	r3, r9, [sp, #8]
 8002652:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8002656:	f000 faf7 	bl	8002c48 <HAL_GPIO_Init>
 800265a:	2310      	movs	r3, #16
 800265c:	a902      	add	r1, sp, #8
 800265e:	4630      	mov	r0, r6
 8002660:	e9cd 3902 	strd	r3, r9, [sp, #8]
 8002664:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8002668:	f000 faee 	bl	8002c48 <HAL_GPIO_Init>
 800266c:	2320      	movs	r3, #32
 800266e:	e9cd 3902 	strd	r3, r9, [sp, #8]
 8002672:	f44f 7980 	mov.w	r9, #256	; 0x100
 8002676:	a902      	add	r1, sp, #8
 8002678:	4630      	mov	r0, r6
 800267a:	e9cd 4704 	strd	r4, r7, [sp, #16]
 800267e:	f000 fae3 	bl	8002c48 <HAL_GPIO_Init>
 8002682:	a902      	add	r1, sp, #8
 8002684:	4630      	mov	r0, r6
 8002686:	e9cd 9802 	strd	r9, r8, [sp, #8]
 800268a:	e9cd 4704 	strd	r4, r7, [sp, #16]
 800268e:	f000 fadb 	bl	8002c48 <HAL_GPIO_Init>
 8002692:	4649      	mov	r1, r9
 8002694:	f44f 7900 	mov.w	r9, #512	; 0x200
 8002698:	4622      	mov	r2, r4
 800269a:	4630      	mov	r0, r6
 800269c:	f000 fc45 	bl	8002f2a <HAL_GPIO_WritePin>
 80026a0:	a902      	add	r1, sp, #8
 80026a2:	4630      	mov	r0, r6
 80026a4:	e9cd 9802 	strd	r9, r8, [sp, #8]
 80026a8:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80026ac:	f000 facc 	bl	8002c48 <HAL_GPIO_Init>
 80026b0:	4649      	mov	r1, r9
 80026b2:	f44f 6980 	mov.w	r9, #1024	; 0x400
 80026b6:	4622      	mov	r2, r4
 80026b8:	4630      	mov	r0, r6
 80026ba:	f000 fc36 	bl	8002f2a <HAL_GPIO_WritePin>
 80026be:	a902      	add	r1, sp, #8
 80026c0:	4630      	mov	r0, r6
 80026c2:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80026c6:	e9cd 9802 	strd	r9, r8, [sp, #8]
 80026ca:	f000 fabd 	bl	8002c48 <HAL_GPIO_Init>
 80026ce:	4622      	mov	r2, r4
 80026d0:	4649      	mov	r1, r9
 80026d2:	4630      	mov	r0, r6
 80026d4:	f000 fc29 	bl	8002f2a <HAL_GPIO_WritePin>
 80026d8:	a902      	add	r1, sp, #8
 80026da:	4630      	mov	r0, r6
 80026dc:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80026e0:	e9cd b802 	strd	fp, r8, [sp, #8]
 80026e4:	f000 fab0 	bl	8002c48 <HAL_GPIO_Init>
 80026e8:	4622      	mov	r2, r4
 80026ea:	4659      	mov	r1, fp
 80026ec:	4630      	mov	r0, r6
 80026ee:	f000 fc1c 	bl	8002f2a <HAL_GPIO_WritePin>
 80026f2:	a902      	add	r1, sp, #8
 80026f4:	4630      	mov	r0, r6
 80026f6:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80026fa:	e9cd a802 	strd	sl, r8, [sp, #8]
 80026fe:	f000 faa3 	bl	8002c48 <HAL_GPIO_Init>
 8002702:	4622      	mov	r2, r4
 8002704:	4651      	mov	r1, sl
 8002706:	4630      	mov	r0, r6
 8002708:	f000 fc0f 	bl	8002f2a <HAL_GPIO_WritePin>
 800270c:	686b      	ldr	r3, [r5, #4]
 800270e:	4c25      	ldr	r4, [pc, #148]	; (80027a4 <mehal_init+0x308>)
 8002710:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002714:	606b      	str	r3, [r5, #4]
 8002716:	686b      	ldr	r3, [r5, #4]
 8002718:	4640      	mov	r0, r8
 800271a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800271e:	606b      	str	r3, [r5, #4]
 8002720:	69ab      	ldr	r3, [r5, #24]
 8002722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002726:	61ab      	str	r3, [r5, #24]
 8002728:	68a3      	ldr	r3, [r4, #8]
 800272a:	ea43 0308 	orr.w	r3, r3, r8
 800272e:	60a3      	str	r3, [r4, #8]
 8002730:	68a3      	ldr	r3, [r4, #8]
 8002732:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8002736:	60a3      	str	r3, [r4, #8]
 8002738:	6923      	ldr	r3, [r4, #16]
 800273a:	f023 0307 	bic.w	r3, r3, #7
 800273e:	6123      	str	r3, [r4, #16]
 8002740:	68a3      	ldr	r3, [r4, #8]
 8002742:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002746:	60a3      	str	r3, [r4, #8]
 8002748:	f000 f978 	bl	8002a3c <HAL_Delay>
 800274c:	68a3      	ldr	r3, [r4, #8]
 800274e:	f043 0304 	orr.w	r3, r3, #4
 8002752:	60a3      	str	r3, [r4, #8]
 8002754:	68a3      	ldr	r3, [r4, #8]
 8002756:	f013 0304 	ands.w	r3, r3, #4
 800275a:	d1fb      	bne.n	8002754 <mehal_init+0x2b8>
 800275c:	4812      	ldr	r0, [pc, #72]	; (80027a8 <mehal_init+0x30c>)
 800275e:	4913      	ldr	r1, [pc, #76]	; (80027ac <mehal_init+0x310>)
 8002760:	4a13      	ldr	r2, [pc, #76]	; (80027b0 <mehal_init+0x314>)
 8002762:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8002766:	e9c0 1200 	strd	r1, r2, [r0]
 800276a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800276e:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8002772:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002776:	6203      	str	r3, [r0, #32]
 8002778:	f000 fbf0 	bl	8002f5c <HAL_I2C_Init>
 800277c:	b007      	add	sp, #28
 800277e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002782:	bf00      	nop
 8002784:	200047b0 	.word	0x200047b0
 8002788:	40021000 	.word	0x40021000
 800278c:	40010800 	.word	0x40010800
 8002790:	40000034 	.word	0x40000034
 8002794:	40020058 	.word	0x40020058
 8002798:	e000e100 	.word	0xe000e100
 800279c:	40012c00 	.word	0x40012c00
 80027a0:	40010c00 	.word	0x40010c00
 80027a4:	40012400 	.word	0x40012400
 80027a8:	200047b4 	.word	0x200047b4
 80027ac:	40005400 	.word	0x40005400
 80027b0:	00061a80 	.word	0x00061a80

080027b4 <mehal_readADC>:
 80027b4:	3001      	adds	r0, #1
 80027b6:	b2c0      	uxtb	r0, r0
 80027b8:	2811      	cmp	r0, #17
 80027ba:	d816      	bhi.n	80027ea <mehal_readADC+0x36>
 80027bc:	2200      	movs	r2, #0
 80027be:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <mehal_readADC+0x3c>)
 80027c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80027c2:	6358      	str	r0, [r3, #52]	; 0x34
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	f022 0202 	bic.w	r2, r2, #2
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	f042 0201 	orr.w	r2, r2, #1
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	0792      	lsls	r2, r2, #30
 80027e0:	d5fc      	bpl.n	80027dc <mehal_readADC+0x28>
 80027e2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80027e4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80027e8:	4770      	bx	lr
 80027ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80027ee:	4770      	bx	lr
 80027f0:	40012400 	.word	0x40012400

080027f4 <mehal_i2cMemRead>:
 80027f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80027f6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80027fa:	9100      	str	r1, [sp, #0]
 80027fc:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002800:	21a0      	movs	r1, #160	; 0xa0
 8002802:	4602      	mov	r2, r0
 8002804:	2301      	movs	r3, #1
 8002806:	4803      	ldr	r0, [pc, #12]	; (8002814 <mehal_i2cMemRead+0x20>)
 8002808:	f000 fdca 	bl	80033a0 <HAL_I2C_Mem_Read>
 800280c:	b005      	add	sp, #20
 800280e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002812:	bf00      	nop
 8002814:	200047b4 	.word	0x200047b4

08002818 <mehal_i2cMemWrite>:
 8002818:	b530      	push	{r4, r5, lr}
 800281a:	461d      	mov	r5, r3
 800281c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002820:	b085      	sub	sp, #20
 8002822:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002826:	9100      	str	r1, [sp, #0]
 8002828:	4602      	mov	r2, r0
 800282a:	2301      	movs	r3, #1
 800282c:	21a0      	movs	r1, #160	; 0xa0
 800282e:	4805      	ldr	r0, [pc, #20]	; (8002844 <mehal_i2cMemWrite+0x2c>)
 8002830:	f000 fcbc 	bl	80031ac <HAL_I2C_Mem_Write>
 8002834:	4604      	mov	r4, r0
 8002836:	b115      	cbz	r5, 800283e <mehal_i2cMemWrite+0x26>
 8002838:	201e      	movs	r0, #30
 800283a:	f000 f8ff 	bl	8002a3c <HAL_Delay>
 800283e:	4620      	mov	r0, r4
 8002840:	b005      	add	sp, #20
 8002842:	bd30      	pop	{r4, r5, pc}
 8002844:	200047b4 	.word	0x200047b4

08002848 <mehal_debugPinSet>:
 8002848:	4770      	bx	lr

0800284a <mehal_debugPinReset>:
 800284a:	4770      	bx	lr

0800284c <mehal_readEncoderSwitch>:
 800284c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002850:	4801      	ldr	r0, [pc, #4]	; (8002858 <mehal_readEncoderSwitch+0xc>)
 8002852:	f000 bb53 	b.w	8002efc <HAL_GPIO_ReadPin>
 8002856:	bf00      	nop
 8002858:	40010c00 	.word	0x40010c00

0800285c <mehal_readEncoderA>:
 800285c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002860:	4801      	ldr	r0, [pc, #4]	; (8002868 <mehal_readEncoderA+0xc>)
 8002862:	f000 bb4b 	b.w	8002efc <HAL_GPIO_ReadPin>
 8002866:	bf00      	nop
 8002868:	40010c00 	.word	0x40010c00

0800286c <mehal_readEncoderB>:
 800286c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002870:	4801      	ldr	r0, [pc, #4]	; (8002878 <mehal_readEncoderB+0xc>)
 8002872:	f000 bb43 	b.w	8002efc <HAL_GPIO_ReadPin>
 8002876:	bf00      	nop
 8002878:	40010c00 	.word	0x40010c00

0800287c <mehal_sendDataTo595>:
 800287c:	b570      	push	{r4, r5, r6, lr}
 800287e:	2200      	movs	r2, #0
 8002880:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002884:	4605      	mov	r5, r0
 8002886:	4816      	ldr	r0, [pc, #88]	; (80028e0 <mehal_sendDataTo595+0x64>)
 8002888:	f000 fb4f 	bl	8002f2a <HAL_GPIO_WritePin>
 800288c:	2200      	movs	r2, #0
 800288e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002892:	4813      	ldr	r0, [pc, #76]	; (80028e0 <mehal_sendDataTo595+0x64>)
 8002894:	f000 fb49 	bl	8002f2a <HAL_GPIO_WritePin>
 8002898:	2400      	movs	r4, #0
 800289a:	4e11      	ldr	r6, [pc, #68]	; (80028e0 <mehal_sendDataTo595+0x64>)
 800289c:	2280      	movs	r2, #128	; 0x80
 800289e:	4122      	asrs	r2, r4
 80028a0:	402a      	ands	r2, r5
 80028a2:	bf18      	it	ne
 80028a4:	2201      	movne	r2, #1
 80028a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028aa:	4630      	mov	r0, r6
 80028ac:	f000 fb3d 	bl	8002f2a <HAL_GPIO_WritePin>
 80028b0:	2201      	movs	r2, #1
 80028b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028b6:	480a      	ldr	r0, [pc, #40]	; (80028e0 <mehal_sendDataTo595+0x64>)
 80028b8:	f000 fb37 	bl	8002f2a <HAL_GPIO_WritePin>
 80028bc:	3401      	adds	r4, #1
 80028be:	2200      	movs	r2, #0
 80028c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028c4:	4806      	ldr	r0, [pc, #24]	; (80028e0 <mehal_sendDataTo595+0x64>)
 80028c6:	f000 fb30 	bl	8002f2a <HAL_GPIO_WritePin>
 80028ca:	2c08      	cmp	r4, #8
 80028cc:	d1e6      	bne.n	800289c <mehal_sendDataTo595+0x20>
 80028ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80028d2:	2201      	movs	r2, #1
 80028d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028d8:	4801      	ldr	r0, [pc, #4]	; (80028e0 <mehal_sendDataTo595+0x64>)
 80028da:	f000 bb26 	b.w	8002f2a <HAL_GPIO_WritePin>
 80028de:	bf00      	nop
 80028e0:	40010800 	.word	0x40010800

080028e4 <mehal_setConfigLed>:
 80028e4:	2801      	cmp	r0, #1
 80028e6:	4602      	mov	r2, r0
 80028e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ec:	bf18      	it	ne
 80028ee:	2200      	movne	r2, #0
 80028f0:	4801      	ldr	r0, [pc, #4]	; (80028f8 <mehal_setConfigLed+0x14>)
 80028f2:	f000 bb1a 	b.w	8002f2a <HAL_GPIO_WritePin>
 80028f6:	bf00      	nop
 80028f8:	40010c00 	.word	0x40010c00

080028fc <mehal_setBank1Led>:
 80028fc:	2801      	cmp	r0, #1
 80028fe:	4602      	mov	r2, r0
 8002900:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002904:	bf18      	it	ne
 8002906:	2200      	movne	r2, #0
 8002908:	4801      	ldr	r0, [pc, #4]	; (8002910 <mehal_setBank1Led+0x14>)
 800290a:	f000 bb0e 	b.w	8002f2a <HAL_GPIO_WritePin>
 800290e:	bf00      	nop
 8002910:	40010800 	.word	0x40010800

08002914 <mehal_setBank0Led>:
 8002914:	2801      	cmp	r0, #1
 8002916:	4602      	mov	r2, r0
 8002918:	f44f 7100 	mov.w	r1, #512	; 0x200
 800291c:	bf18      	it	ne
 800291e:	2200      	movne	r2, #0
 8002920:	4801      	ldr	r0, [pc, #4]	; (8002928 <mehal_setBank0Led+0x14>)
 8002922:	f000 bb02 	b.w	8002f2a <HAL_GPIO_WritePin>
 8002926:	bf00      	nop
 8002928:	40010800 	.word	0x40010800

0800292c <Reset_Handler>:
 800292c:	2100      	movs	r1, #0
 800292e:	e003      	b.n	8002938 <LoopCopyDataInit>

08002930 <CopyDataInit>:
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <LoopFillZerobss+0x14>)
 8002932:	585b      	ldr	r3, [r3, r1]
 8002934:	5043      	str	r3, [r0, r1]
 8002936:	3104      	adds	r1, #4

08002938 <LoopCopyDataInit>:
 8002938:	480a      	ldr	r0, [pc, #40]	; (8002964 <LoopFillZerobss+0x18>)
 800293a:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <LoopFillZerobss+0x1c>)
 800293c:	1842      	adds	r2, r0, r1
 800293e:	429a      	cmp	r2, r3
 8002940:	d3f6      	bcc.n	8002930 <CopyDataInit>
 8002942:	4a0a      	ldr	r2, [pc, #40]	; (800296c <LoopFillZerobss+0x20>)
 8002944:	e002      	b.n	800294c <LoopFillZerobss>

08002946 <FillZerobss>:
 8002946:	2300      	movs	r3, #0
 8002948:	f842 3b04 	str.w	r3, [r2], #4

0800294c <LoopFillZerobss>:
 800294c:	4b08      	ldr	r3, [pc, #32]	; (8002970 <LoopFillZerobss+0x24>)
 800294e:	429a      	cmp	r2, r3
 8002950:	d3f9      	bcc.n	8002946 <FillZerobss>
 8002952:	f7fe fdd5 	bl	8001500 <SystemInit>
 8002956:	f001 fe97 	bl	8004688 <__libc_init_array>
 800295a:	f7fe fcf1 	bl	8001340 <main>
 800295e:	4770      	bx	lr
 8002960:	0800ea90 	.word	0x0800ea90
 8002964:	20000000 	.word	0x20000000
 8002968:	200002ac 	.word	0x200002ac
 800296c:	200002ac 	.word	0x200002ac
 8002970:	2000480c 	.word	0x2000480c

08002974 <ADC1_2_IRQHandler>:
 8002974:	e7fe      	b.n	8002974 <ADC1_2_IRQHandler>
	...

08002978 <HAL_Init>:
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
 800297c:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HAL_Init+0x28>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a07      	ldr	r2, [pc, #28]	; (80029a0 <HAL_Init+0x28>)
 8002982:	f043 0310 	orr.w	r3, r3, #16
 8002986:	6013      	str	r3, [r2, #0]
 8002988:	2003      	movs	r0, #3
 800298a:	f000 f929 	bl	8002be0 <HAL_NVIC_SetPriorityGrouping>
 800298e:	2000      	movs	r0, #0
 8002990:	f000 f808 	bl	80029a4 <HAL_InitTick>
 8002994:	f7fe fd1a 	bl	80013cc <HAL_MspInit>
 8002998:	2300      	movs	r3, #0
 800299a:	4618      	mov	r0, r3
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40022000 	.word	0x40022000

080029a4 <HAL_InitTick>:
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <HAL_InitTick+0x54>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4b12      	ldr	r3, [pc, #72]	; (80029fc <HAL_InitTick+0x58>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	4619      	mov	r1, r3
 80029b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80029be:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 f933 	bl	8002c2e <HAL_SYSTICK_Config>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_InitTick+0x2e>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e00e      	b.n	80029f0 <HAL_InitTick+0x4c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b0f      	cmp	r3, #15
 80029d6:	d80a      	bhi.n	80029ee <HAL_InitTick+0x4a>
 80029d8:	2200      	movs	r2, #0
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029e0:	f000 f909 	bl	8002bf6 <HAL_NVIC_SetPriority>
 80029e4:	4a06      	ldr	r2, [pc, #24]	; (8002a00 <HAL_InitTick+0x5c>)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	2300      	movs	r3, #0
 80029ec:	e000      	b.n	80029f0 <HAL_InitTick+0x4c>
 80029ee:	2301      	movs	r3, #1
 80029f0:	4618      	mov	r0, r3
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20000298 	.word	0x20000298
 80029fc:	200002a8 	.word	0x200002a8
 8002a00:	200002a4 	.word	0x200002a4

08002a04 <HAL_IncTick>:
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_IncTick+0x1c>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <HAL_IncTick+0x20>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4413      	add	r3, r2
 8002a14:	4a03      	ldr	r2, [pc, #12]	; (8002a24 <HAL_IncTick+0x20>)
 8002a16:	6013      	str	r3, [r2, #0]
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr
 8002a20:	200002a8 	.word	0x200002a8
 8002a24:	20004808 	.word	0x20004808

08002a28 <HAL_GetTick>:
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	4b02      	ldr	r3, [pc, #8]	; (8002a38 <HAL_GetTick+0x10>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr
 8002a38:	20004808 	.word	0x20004808

08002a3c <HAL_Delay>:
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	f7ff fff0 	bl	8002a28 <HAL_GetTick>
 8002a48:	60b8      	str	r0, [r7, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a54:	d005      	beq.n	8002a62 <HAL_Delay+0x26>
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <HAL_Delay+0x40>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4413      	add	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	bf00      	nop
 8002a64:	f7ff ffe0 	bl	8002a28 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d8f7      	bhi.n	8002a64 <HAL_Delay+0x28>
 8002a74:	bf00      	nop
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	200002a8 	.word	0x200002a8

08002a80 <__NVIC_SetPriorityGrouping>:
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	021a      	lsls	r2, r3, #8
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab0:	60bb      	str	r3, [r7, #8]
 8002ab2:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	60d3      	str	r3, [r2, #12]
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	e000ed00 	.word	0xe000ed00

08002ac8 <__NVIC_GetPriorityGrouping>:
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	0a1b      	lsrs	r3, r3, #8
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	e000ed00 	.word	0xe000ed00

08002ae4 <__NVIC_SetPriority>:
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	6039      	str	r1, [r7, #0]
 8002aee:	71fb      	strb	r3, [r7, #7]
 8002af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	db0a      	blt.n	8002b0e <__NVIC_SetPriority+0x2a>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	490c      	ldr	r1, [pc, #48]	; (8002b30 <__NVIC_SetPriority+0x4c>)
 8002afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b02:	0112      	lsls	r2, r2, #4
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	440b      	add	r3, r1
 8002b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002b0c:	e00a      	b.n	8002b24 <__NVIC_SetPriority+0x40>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	4908      	ldr	r1, [pc, #32]	; (8002b34 <__NVIC_SetPriority+0x50>)
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	3b04      	subs	r3, #4
 8002b1c:	0112      	lsls	r2, r2, #4
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	440b      	add	r3, r1
 8002b22:	761a      	strb	r2, [r3, #24]
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	e000e100 	.word	0xe000e100
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <NVIC_EncodePriority>:
 8002b38:	b480      	push	{r7}
 8002b3a:	b089      	sub	sp, #36	; 0x24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	61fb      	str	r3, [r7, #28]
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f1c3 0307 	rsb	r3, r3, #7
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	bf28      	it	cs
 8002b56:	2304      	movcs	r3, #4
 8002b58:	61bb      	str	r3, [r7, #24]
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	2b06      	cmp	r3, #6
 8002b60:	d902      	bls.n	8002b68 <NVIC_EncodePriority+0x30>
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3b03      	subs	r3, #3
 8002b66:	e000      	b.n	8002b6a <NVIC_EncodePriority+0x32>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43da      	mvns	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	401a      	ands	r2, r3
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8a:	43d9      	mvns	r1, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	400b      	ands	r3, r1
 8002b90:	4313      	orrs	r3, r2
 8002b92:	4618      	mov	r0, r3
 8002b94:	3724      	adds	r7, #36	; 0x24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <SysTick_Config>:
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bac:	d301      	bcc.n	8002bb2 <SysTick_Config+0x16>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e00f      	b.n	8002bd2 <SysTick_Config+0x36>
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <SysTick_Config+0x40>)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	6053      	str	r3, [r2, #4]
 8002bba:	210f      	movs	r1, #15
 8002bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bc0:	f7ff ff90 	bl	8002ae4 <__NVIC_SetPriority>
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <SysTick_Config+0x40>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
 8002bca:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <SysTick_Config+0x40>)
 8002bcc:	2207      	movs	r2, #7
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	e000e010 	.word	0xe000e010

08002be0 <HAL_NVIC_SetPriorityGrouping>:
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff ff49 	bl	8002a80 <__NVIC_SetPriorityGrouping>
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_NVIC_SetPriority>:
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b086      	sub	sp, #24
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	607a      	str	r2, [r7, #4]
 8002c02:	73fb      	strb	r3, [r7, #15]
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	f7ff ff5e 	bl	8002ac8 <__NVIC_GetPriorityGrouping>
 8002c0c:	6178      	str	r0, [r7, #20]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68b9      	ldr	r1, [r7, #8]
 8002c12:	6978      	ldr	r0, [r7, #20]
 8002c14:	f7ff ff90 	bl	8002b38 <NVIC_EncodePriority>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c1e:	4611      	mov	r1, r2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ff5f 	bl	8002ae4 <__NVIC_SetPriority>
 8002c26:	bf00      	nop
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_SYSTICK_Config>:
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff ffb0 	bl	8002b9c <SysTick_Config>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <HAL_GPIO_Init>:
 8002c48:	b480      	push	{r7}
 8002c4a:	b08b      	sub	sp, #44	; 0x2c
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
 8002c52:	2300      	movs	r3, #0
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
 8002c56:	2300      	movs	r3, #0
 8002c58:	623b      	str	r3, [r7, #32]
 8002c5a:	e127      	b.n	8002eac <HAL_GPIO_Init+0x264>
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	61fb      	str	r3, [r7, #28]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	69fa      	ldr	r2, [r7, #28]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	f040 8116 	bne.w	8002ea6 <HAL_GPIO_Init+0x25e>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b12      	cmp	r3, #18
 8002c80:	d034      	beq.n	8002cec <HAL_GPIO_Init+0xa4>
 8002c82:	2b12      	cmp	r3, #18
 8002c84:	d80d      	bhi.n	8002ca2 <HAL_GPIO_Init+0x5a>
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d02b      	beq.n	8002ce2 <HAL_GPIO_Init+0x9a>
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d804      	bhi.n	8002c98 <HAL_GPIO_Init+0x50>
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d031      	beq.n	8002cf6 <HAL_GPIO_Init+0xae>
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d01c      	beq.n	8002cd0 <HAL_GPIO_Init+0x88>
 8002c96:	e048      	b.n	8002d2a <HAL_GPIO_Init+0xe2>
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d043      	beq.n	8002d24 <HAL_GPIO_Init+0xdc>
 8002c9c:	2b11      	cmp	r3, #17
 8002c9e:	d01b      	beq.n	8002cd8 <HAL_GPIO_Init+0x90>
 8002ca0:	e043      	b.n	8002d2a <HAL_GPIO_Init+0xe2>
 8002ca2:	4a89      	ldr	r2, [pc, #548]	; (8002ec8 <HAL_GPIO_Init+0x280>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d026      	beq.n	8002cf6 <HAL_GPIO_Init+0xae>
 8002ca8:	4a87      	ldr	r2, [pc, #540]	; (8002ec8 <HAL_GPIO_Init+0x280>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d806      	bhi.n	8002cbc <HAL_GPIO_Init+0x74>
 8002cae:	4a87      	ldr	r2, [pc, #540]	; (8002ecc <HAL_GPIO_Init+0x284>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d020      	beq.n	8002cf6 <HAL_GPIO_Init+0xae>
 8002cb4:	4a86      	ldr	r2, [pc, #536]	; (8002ed0 <HAL_GPIO_Init+0x288>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01d      	beq.n	8002cf6 <HAL_GPIO_Init+0xae>
 8002cba:	e036      	b.n	8002d2a <HAL_GPIO_Init+0xe2>
 8002cbc:	4a85      	ldr	r2, [pc, #532]	; (8002ed4 <HAL_GPIO_Init+0x28c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d019      	beq.n	8002cf6 <HAL_GPIO_Init+0xae>
 8002cc2:	4a85      	ldr	r2, [pc, #532]	; (8002ed8 <HAL_GPIO_Init+0x290>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d016      	beq.n	8002cf6 <HAL_GPIO_Init+0xae>
 8002cc8:	4a84      	ldr	r2, [pc, #528]	; (8002edc <HAL_GPIO_Init+0x294>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_GPIO_Init+0xae>
 8002cce:	e02c      	b.n	8002d2a <HAL_GPIO_Init+0xe2>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	623b      	str	r3, [r7, #32]
 8002cd6:	e028      	b.n	8002d2a <HAL_GPIO_Init+0xe2>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	623b      	str	r3, [r7, #32]
 8002ce0:	e023      	b.n	8002d2a <HAL_GPIO_Init+0xe2>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	3308      	adds	r3, #8
 8002ce8:	623b      	str	r3, [r7, #32]
 8002cea:	e01e      	b.n	8002d2a <HAL_GPIO_Init+0xe2>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	330c      	adds	r3, #12
 8002cf2:	623b      	str	r3, [r7, #32]
 8002cf4:	e019      	b.n	8002d2a <HAL_GPIO_Init+0xe2>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d102      	bne.n	8002d04 <HAL_GPIO_Init+0xbc>
 8002cfe:	2304      	movs	r3, #4
 8002d00:	623b      	str	r3, [r7, #32]
 8002d02:	e012      	b.n	8002d2a <HAL_GPIO_Init+0xe2>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d105      	bne.n	8002d18 <HAL_GPIO_Init+0xd0>
 8002d0c:	2308      	movs	r3, #8
 8002d0e:	623b      	str	r3, [r7, #32]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69fa      	ldr	r2, [r7, #28]
 8002d14:	611a      	str	r2, [r3, #16]
 8002d16:	e008      	b.n	8002d2a <HAL_GPIO_Init+0xe2>
 8002d18:	2308      	movs	r3, #8
 8002d1a:	623b      	str	r3, [r7, #32]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69fa      	ldr	r2, [r7, #28]
 8002d20:	615a      	str	r2, [r3, #20]
 8002d22:	e002      	b.n	8002d2a <HAL_GPIO_Init+0xe2>
 8002d24:	2300      	movs	r3, #0
 8002d26:	623b      	str	r3, [r7, #32]
 8002d28:	bf00      	nop
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	2bff      	cmp	r3, #255	; 0xff
 8002d2e:	d801      	bhi.n	8002d34 <HAL_GPIO_Init+0xec>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	e001      	b.n	8002d38 <HAL_GPIO_Init+0xf0>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3304      	adds	r3, #4
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	2bff      	cmp	r3, #255	; 0xff
 8002d3e:	d802      	bhi.n	8002d46 <HAL_GPIO_Init+0xfe>
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	e002      	b.n	8002d4c <HAL_GPIO_Init+0x104>
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	3b08      	subs	r3, #8
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	210f      	movs	r1, #15
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	401a      	ands	r2, r3
 8002d5e:	6a39      	ldr	r1, [r7, #32]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	fa01 f303 	lsl.w	r3, r1, r3
 8002d66:	431a      	orrs	r2, r3
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 8096 	beq.w	8002ea6 <HAL_GPIO_Init+0x25e>
 8002d7a:	4b59      	ldr	r3, [pc, #356]	; (8002ee0 <HAL_GPIO_Init+0x298>)
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	4a58      	ldr	r2, [pc, #352]	; (8002ee0 <HAL_GPIO_Init+0x298>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	6193      	str	r3, [r2, #24]
 8002d86:	4b56      	ldr	r3, [pc, #344]	; (8002ee0 <HAL_GPIO_Init+0x298>)
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	60bb      	str	r3, [r7, #8]
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4a54      	ldr	r2, [pc, #336]	; (8002ee4 <HAL_GPIO_Init+0x29c>)
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	089b      	lsrs	r3, r3, #2
 8002d98:	3302      	adds	r3, #2
 8002d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	220f      	movs	r2, #15
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4013      	ands	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a4b      	ldr	r2, [pc, #300]	; (8002ee8 <HAL_GPIO_Init+0x2a0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d013      	beq.n	8002de6 <HAL_GPIO_Init+0x19e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a4a      	ldr	r2, [pc, #296]	; (8002eec <HAL_GPIO_Init+0x2a4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d00d      	beq.n	8002de2 <HAL_GPIO_Init+0x19a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a49      	ldr	r2, [pc, #292]	; (8002ef0 <HAL_GPIO_Init+0x2a8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d007      	beq.n	8002dde <HAL_GPIO_Init+0x196>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a48      	ldr	r2, [pc, #288]	; (8002ef4 <HAL_GPIO_Init+0x2ac>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d101      	bne.n	8002dda <HAL_GPIO_Init+0x192>
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e006      	b.n	8002de8 <HAL_GPIO_Init+0x1a0>
 8002dda:	2304      	movs	r3, #4
 8002ddc:	e004      	b.n	8002de8 <HAL_GPIO_Init+0x1a0>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e002      	b.n	8002de8 <HAL_GPIO_Init+0x1a0>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <HAL_GPIO_Init+0x1a0>
 8002de6:	2300      	movs	r3, #0
 8002de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dea:	f002 0203 	and.w	r2, r2, #3
 8002dee:	0092      	lsls	r2, r2, #2
 8002df0:	4093      	lsls	r3, r2
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	493a      	ldr	r1, [pc, #232]	; (8002ee4 <HAL_GPIO_Init+0x29c>)
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	089b      	lsrs	r3, r3, #2
 8002dfe:	3302      	adds	r3, #2
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d006      	beq.n	8002e20 <HAL_GPIO_Init+0x1d8>
 8002e12:	4b39      	ldr	r3, [pc, #228]	; (8002ef8 <HAL_GPIO_Init+0x2b0>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	4938      	ldr	r1, [pc, #224]	; (8002ef8 <HAL_GPIO_Init+0x2b0>)
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	600b      	str	r3, [r1, #0]
 8002e1e:	e006      	b.n	8002e2e <HAL_GPIO_Init+0x1e6>
 8002e20:	4b35      	ldr	r3, [pc, #212]	; (8002ef8 <HAL_GPIO_Init+0x2b0>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	43db      	mvns	r3, r3
 8002e28:	4933      	ldr	r1, [pc, #204]	; (8002ef8 <HAL_GPIO_Init+0x2b0>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	600b      	str	r3, [r1, #0]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d006      	beq.n	8002e48 <HAL_GPIO_Init+0x200>
 8002e3a:	4b2f      	ldr	r3, [pc, #188]	; (8002ef8 <HAL_GPIO_Init+0x2b0>)
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	492e      	ldr	r1, [pc, #184]	; (8002ef8 <HAL_GPIO_Init+0x2b0>)
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	604b      	str	r3, [r1, #4]
 8002e46:	e006      	b.n	8002e56 <HAL_GPIO_Init+0x20e>
 8002e48:	4b2b      	ldr	r3, [pc, #172]	; (8002ef8 <HAL_GPIO_Init+0x2b0>)
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	4929      	ldr	r1, [pc, #164]	; (8002ef8 <HAL_GPIO_Init+0x2b0>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	604b      	str	r3, [r1, #4]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d006      	beq.n	8002e70 <HAL_GPIO_Init+0x228>
 8002e62:	4b25      	ldr	r3, [pc, #148]	; (8002ef8 <HAL_GPIO_Init+0x2b0>)
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	4924      	ldr	r1, [pc, #144]	; (8002ef8 <HAL_GPIO_Init+0x2b0>)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	608b      	str	r3, [r1, #8]
 8002e6e:	e006      	b.n	8002e7e <HAL_GPIO_Init+0x236>
 8002e70:	4b21      	ldr	r3, [pc, #132]	; (8002ef8 <HAL_GPIO_Init+0x2b0>)
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	43db      	mvns	r3, r3
 8002e78:	491f      	ldr	r1, [pc, #124]	; (8002ef8 <HAL_GPIO_Init+0x2b0>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	608b      	str	r3, [r1, #8]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d006      	beq.n	8002e98 <HAL_GPIO_Init+0x250>
 8002e8a:	4b1b      	ldr	r3, [pc, #108]	; (8002ef8 <HAL_GPIO_Init+0x2b0>)
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	491a      	ldr	r1, [pc, #104]	; (8002ef8 <HAL_GPIO_Init+0x2b0>)
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	60cb      	str	r3, [r1, #12]
 8002e96:	e006      	b.n	8002ea6 <HAL_GPIO_Init+0x25e>
 8002e98:	4b17      	ldr	r3, [pc, #92]	; (8002ef8 <HAL_GPIO_Init+0x2b0>)
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	4915      	ldr	r1, [pc, #84]	; (8002ef8 <HAL_GPIO_Init+0x2b0>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	60cb      	str	r3, [r1, #12]
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f47f aed0 	bne.w	8002c5c <HAL_GPIO_Init+0x14>
 8002ebc:	bf00      	nop
 8002ebe:	372c      	adds	r7, #44	; 0x2c
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	10210000 	.word	0x10210000
 8002ecc:	10110000 	.word	0x10110000
 8002ed0:	10120000 	.word	0x10120000
 8002ed4:	10310000 	.word	0x10310000
 8002ed8:	10320000 	.word	0x10320000
 8002edc:	10220000 	.word	0x10220000
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40010000 	.word	0x40010000
 8002ee8:	40010800 	.word	0x40010800
 8002eec:	40010c00 	.word	0x40010c00
 8002ef0:	40011000 	.word	0x40011000
 8002ef4:	40011400 	.word	0x40011400
 8002ef8:	40010400 	.word	0x40010400

08002efc <HAL_GPIO_ReadPin>:
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	807b      	strh	r3, [r7, #2]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	887b      	ldrh	r3, [r7, #2]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <HAL_GPIO_ReadPin+0x1e>
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
 8002f18:	e001      	b.n	8002f1e <HAL_GPIO_ReadPin+0x22>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	73fb      	strb	r3, [r7, #15]
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
 8002f20:	4618      	mov	r0, r3
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr

08002f2a <HAL_GPIO_WritePin>:
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	460b      	mov	r3, r1
 8002f34:	807b      	strh	r3, [r7, #2]
 8002f36:	4613      	mov	r3, r2
 8002f38:	707b      	strb	r3, [r7, #1]
 8002f3a:	787b      	ldrb	r3, [r7, #1]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_GPIO_WritePin+0x1e>
 8002f40:	887a      	ldrh	r2, [r7, #2]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	611a      	str	r2, [r3, #16]
 8002f46:	e003      	b.n	8002f50 <HAL_GPIO_WritePin+0x26>
 8002f48:	887b      	ldrh	r3, [r7, #2]
 8002f4a:	041a      	lsls	r2, r3, #16
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	611a      	str	r2, [r3, #16]
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr
	...

08002f5c <HAL_I2C_Init>:
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_I2C_Init+0x12>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e10f      	b.n	800318e <HAL_I2C_Init+0x232>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <HAL_I2C_Init+0x2c>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7fe fa54 	bl	8001430 <HAL_I2C_MspInit>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2224      	movs	r2, #36	; 0x24
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0201 	bic.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	f001 fb40 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4a7b      	ldr	r2, [pc, #492]	; (8003198 <HAL_I2C_Init+0x23c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d807      	bhi.n	8002fc0 <HAL_I2C_Init+0x64>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4a7a      	ldr	r2, [pc, #488]	; (800319c <HAL_I2C_Init+0x240>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	bf94      	ite	ls
 8002fb8:	2301      	movls	r3, #1
 8002fba:	2300      	movhi	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	e006      	b.n	8002fce <HAL_I2C_Init+0x72>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4a77      	ldr	r2, [pc, #476]	; (80031a0 <HAL_I2C_Init+0x244>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	bf94      	ite	ls
 8002fc8:	2301      	movls	r3, #1
 8002fca:	2300      	movhi	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_I2C_Init+0x7a>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e0db      	b.n	800318e <HAL_I2C_Init+0x232>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4a72      	ldr	r2, [pc, #456]	; (80031a4 <HAL_I2C_Init+0x248>)
 8002fda:	fba2 2303 	umull	r2, r3, r2, r3
 8002fde:	0c9b      	lsrs	r3, r3, #18
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	605a      	str	r2, [r3, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	4a64      	ldr	r2, [pc, #400]	; (8003198 <HAL_I2C_Init+0x23c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d802      	bhi.n	8003010 <HAL_I2C_Init+0xb4>
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	3301      	adds	r3, #1
 800300e:	e009      	b.n	8003024 <HAL_I2C_Init+0xc8>
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003016:	fb02 f303 	mul.w	r3, r2, r3
 800301a:	4a63      	ldr	r2, [pc, #396]	; (80031a8 <HAL_I2C_Init+0x24c>)
 800301c:	fba2 2303 	umull	r2, r3, r2, r3
 8003020:	099b      	lsrs	r3, r3, #6
 8003022:	3301      	adds	r3, #1
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	430b      	orrs	r3, r1
 800302a:	6213      	str	r3, [r2, #32]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003036:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	4956      	ldr	r1, [pc, #344]	; (8003198 <HAL_I2C_Init+0x23c>)
 8003040:	428b      	cmp	r3, r1
 8003042:	d80d      	bhi.n	8003060 <HAL_I2C_Init+0x104>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1e59      	subs	r1, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003052:	3301      	adds	r3, #1
 8003054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003058:	2b04      	cmp	r3, #4
 800305a:	bf38      	it	cc
 800305c:	2304      	movcc	r3, #4
 800305e:	e04f      	b.n	8003100 <HAL_I2C_Init+0x1a4>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d111      	bne.n	800308c <HAL_I2C_Init+0x130>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1e58      	subs	r0, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6859      	ldr	r1, [r3, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	440b      	add	r3, r1
 8003076:	fbb0 f3f3 	udiv	r3, r0, r3
 800307a:	3301      	adds	r3, #1
 800307c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf0c      	ite	eq
 8003084:	2301      	moveq	r3, #1
 8003086:	2300      	movne	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	e012      	b.n	80030b2 <HAL_I2C_Init+0x156>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	1e58      	subs	r0, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6859      	ldr	r1, [r3, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	0099      	lsls	r1, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	fbb0 f3f3 	udiv	r3, r0, r3
 80030a2:	3301      	adds	r3, #1
 80030a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	bf0c      	ite	eq
 80030ac:	2301      	moveq	r3, #1
 80030ae:	2300      	movne	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_I2C_Init+0x15e>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e022      	b.n	8003100 <HAL_I2C_Init+0x1a4>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10e      	bne.n	80030e0 <HAL_I2C_Init+0x184>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	1e58      	subs	r0, r3, #1
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6859      	ldr	r1, [r3, #4]
 80030ca:	460b      	mov	r3, r1
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	440b      	add	r3, r1
 80030d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80030d4:	3301      	adds	r3, #1
 80030d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030de:	e00f      	b.n	8003100 <HAL_I2C_Init+0x1a4>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	1e58      	subs	r0, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6859      	ldr	r1, [r3, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	0099      	lsls	r1, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030f6:	3301      	adds	r3, #1
 80030f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	6809      	ldr	r1, [r1, #0]
 8003104:	4313      	orrs	r3, r2
 8003106:	61cb      	str	r3, [r1, #28]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69da      	ldr	r2, [r3, #28]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800312e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6911      	ldr	r1, [r2, #16]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	68d2      	ldr	r2, [r2, #12]
 800313a:	4311      	orrs	r1, r2
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6812      	ldr	r2, [r2, #0]
 8003140:	430b      	orrs	r3, r1
 8003142:	6093      	str	r3, [r2, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	695a      	ldr	r2, [r3, #20]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	60da      	str	r2, [r3, #12]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	641a      	str	r2, [r3, #64]	; 0x40
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	631a      	str	r2, [r3, #48]	; 0x30
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800318c:	2300      	movs	r3, #0
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	000186a0 	.word	0x000186a0
 800319c:	001e847f 	.word	0x001e847f
 80031a0:	003d08ff 	.word	0x003d08ff
 80031a4:	431bde83 	.word	0x431bde83
 80031a8:	10624dd3 	.word	0x10624dd3

080031ac <HAL_I2C_Mem_Write>:
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af02      	add	r7, sp, #8
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	4608      	mov	r0, r1
 80031b6:	4611      	mov	r1, r2
 80031b8:	461a      	mov	r2, r3
 80031ba:	4603      	mov	r3, r0
 80031bc:	817b      	strh	r3, [r7, #10]
 80031be:	460b      	mov	r3, r1
 80031c0:	813b      	strh	r3, [r7, #8]
 80031c2:	4613      	mov	r3, r2
 80031c4:	80fb      	strh	r3, [r7, #6]
 80031c6:	f7ff fc2f 	bl	8002a28 <HAL_GetTick>
 80031ca:	6178      	str	r0, [r7, #20]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b20      	cmp	r3, #32
 80031d6:	f040 80d9 	bne.w	800338c <HAL_I2C_Mem_Write+0x1e0>
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	2319      	movs	r3, #25
 80031e0:	2201      	movs	r2, #1
 80031e2:	496d      	ldr	r1, [pc, #436]	; (8003398 <HAL_I2C_Mem_Write+0x1ec>)
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 fc6b 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <HAL_I2C_Mem_Write+0x48>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e0cc      	b.n	800338e <HAL_I2C_Mem_Write+0x1e2>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_I2C_Mem_Write+0x56>
 80031fe:	2302      	movs	r3, #2
 8003200:	e0c5      	b.n	800338e <HAL_I2C_Mem_Write+0x1e2>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b01      	cmp	r3, #1
 8003216:	d007      	beq.n	8003228 <HAL_I2C_Mem_Write+0x7c>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2221      	movs	r2, #33	; 0x21
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2240      	movs	r2, #64	; 0x40
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	641a      	str	r2, [r3, #64]	; 0x40
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a3a      	ldr	r2, [r7, #32]
 8003252:	625a      	str	r2, [r3, #36]	; 0x24
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003258:	855a      	strh	r2, [r3, #42]	; 0x2a
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	851a      	strh	r2, [r3, #40]	; 0x28
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4a4d      	ldr	r2, [pc, #308]	; (800339c <HAL_I2C_Mem_Write+0x1f0>)
 8003268:	62da      	str	r2, [r3, #44]	; 0x2c
 800326a:	88f8      	ldrh	r0, [r7, #6]
 800326c:	893a      	ldrh	r2, [r7, #8]
 800326e:	8979      	ldrh	r1, [r7, #10]
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	9301      	str	r3, [sp, #4]
 8003274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	4603      	mov	r3, r0
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 fac6 	bl	800380c <I2C_RequestMemoryWrite>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d052      	beq.n	800332c <HAL_I2C_Mem_Write+0x180>
 8003286:	2301      	movs	r3, #1
 8003288:	e081      	b.n	800338e <HAL_I2C_Mem_Write+0x1e2>
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 fcec 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00d      	beq.n	80032b6 <HAL_I2C_Mem_Write+0x10a>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d107      	bne.n	80032b2 <HAL_I2C_Mem_Write+0x106>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	2301      	movs	r3, #1
 80032b4:	e06b      	b.n	800338e <HAL_I2C_Mem_Write+0x1e2>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	781a      	ldrb	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	611a      	str	r2, [r3, #16]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	625a      	str	r2, [r3, #36]	; 0x24
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	851a      	strh	r2, [r3, #40]	; 0x28
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032dc:	b29b      	uxth	r3, r3
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d11b      	bne.n	800332c <HAL_I2C_Mem_Write+0x180>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d017      	beq.n	800332c <HAL_I2C_Mem_Write+0x180>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	781a      	ldrb	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	611a      	str	r2, [r3, #16]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	625a      	str	r2, [r3, #36]	; 0x24
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003316:	3b01      	subs	r3, #1
 8003318:	b29a      	uxth	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	851a      	strh	r2, [r3, #40]	; 0x28
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1aa      	bne.n	800328a <HAL_I2C_Mem_Write+0xde>
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 fcd8 	bl	8003cee <I2C_WaitOnBTFFlagUntilTimeout>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00d      	beq.n	8003360 <HAL_I2C_Mem_Write+0x1b4>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	2b04      	cmp	r3, #4
 800334a:	d107      	bne.n	800335c <HAL_I2C_Mem_Write+0x1b0>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	2301      	movs	r3, #1
 800335e:	e016      	b.n	800338e <HAL_I2C_Mem_Write+0x1e2>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003388:	2300      	movs	r3, #0
 800338a:	e000      	b.n	800338e <HAL_I2C_Mem_Write+0x1e2>
 800338c:	2302      	movs	r3, #2
 800338e:	4618      	mov	r0, r3
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	00100002 	.word	0x00100002
 800339c:	ffff0000 	.word	0xffff0000

080033a0 <HAL_I2C_Mem_Read>:
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08c      	sub	sp, #48	; 0x30
 80033a4:	af02      	add	r7, sp, #8
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	4608      	mov	r0, r1
 80033aa:	4611      	mov	r1, r2
 80033ac:	461a      	mov	r2, r3
 80033ae:	4603      	mov	r3, r0
 80033b0:	817b      	strh	r3, [r7, #10]
 80033b2:	460b      	mov	r3, r1
 80033b4:	813b      	strh	r3, [r7, #8]
 80033b6:	4613      	mov	r3, r2
 80033b8:	80fb      	strh	r3, [r7, #6]
 80033ba:	f7ff fb35 	bl	8002a28 <HAL_GetTick>
 80033be:	6278      	str	r0, [r7, #36]	; 0x24
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b20      	cmp	r3, #32
 80033ca:	f040 8218 	bne.w	80037fe <HAL_I2C_Mem_Read+0x45e>
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	2319      	movs	r3, #25
 80033d4:	2201      	movs	r2, #1
 80033d6:	4981      	ldr	r1, [pc, #516]	; (80035dc <HAL_I2C_Mem_Read+0x23c>)
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 fb71 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_I2C_Mem_Read+0x48>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e20b      	b.n	8003800 <HAL_I2C_Mem_Read+0x460>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_I2C_Mem_Read+0x56>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e204      	b.n	8003800 <HAL_I2C_Mem_Read+0x460>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b01      	cmp	r3, #1
 800340a:	d007      	beq.n	800341c <HAL_I2C_Mem_Read+0x7c>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2222      	movs	r2, #34	; 0x22
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2240      	movs	r2, #64	; 0x40
 8003438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	641a      	str	r2, [r3, #64]	; 0x40
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003446:	625a      	str	r2, [r3, #36]	; 0x24
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800344c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003452:	b29a      	uxth	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	851a      	strh	r2, [r3, #40]	; 0x28
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4a61      	ldr	r2, [pc, #388]	; (80035e0 <HAL_I2C_Mem_Read+0x240>)
 800345c:	62da      	str	r2, [r3, #44]	; 0x2c
 800345e:	88f8      	ldrh	r0, [r7, #6]
 8003460:	893a      	ldrh	r2, [r7, #8]
 8003462:	8979      	ldrh	r1, [r7, #10]
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	9301      	str	r3, [sp, #4]
 8003468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	4603      	mov	r3, r0
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 fa56 	bl	8003920 <I2C_RequestMemoryRead>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_I2C_Mem_Read+0xde>
 800347a:	2301      	movs	r3, #1
 800347c:	e1c0      	b.n	8003800 <HAL_I2C_Mem_Read+0x460>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003482:	2b00      	cmp	r3, #0
 8003484:	d113      	bne.n	80034ae <HAL_I2C_Mem_Read+0x10e>
 8003486:	2300      	movs	r3, #0
 8003488:	623b      	str	r3, [r7, #32]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	623b      	str	r3, [r7, #32]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	623b      	str	r3, [r7, #32]
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	e194      	b.n	80037d8 <HAL_I2C_Mem_Read+0x438>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d11d      	bne.n	80034f2 <HAL_I2C_Mem_Read+0x152>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	b672      	cpsid	i
 80034c8:	2300      	movs	r3, #0
 80034ca:	61fb      	str	r3, [r7, #28]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	61fb      	str	r3, [r7, #28]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	61fb      	str	r3, [r7, #28]
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	b662      	cpsie	i
 80034f0:	e172      	b.n	80037d8 <HAL_I2C_Mem_Read+0x438>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d11d      	bne.n	8003536 <HAL_I2C_Mem_Read+0x196>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	b672      	cpsid	i
 800350c:	2300      	movs	r3, #0
 800350e:	61bb      	str	r3, [r7, #24]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	61bb      	str	r3, [r7, #24]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	61bb      	str	r3, [r7, #24]
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	b662      	cpsie	i
 8003534:	e150      	b.n	80037d8 <HAL_I2C_Mem_Read+0x438>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	e13c      	b.n	80037d8 <HAL_I2C_Mem_Read+0x438>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003562:	2b03      	cmp	r3, #3
 8003564:	f200 80f5 	bhi.w	8003752 <HAL_I2C_Mem_Read+0x3b2>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800356c:	2b01      	cmp	r3, #1
 800356e:	d123      	bne.n	80035b8 <HAL_I2C_Mem_Read+0x218>
 8003570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003572:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 fbfb 	bl	8003d70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <HAL_I2C_Mem_Read+0x1e4>
 8003580:	2301      	movs	r3, #1
 8003582:	e13d      	b.n	8003800 <HAL_I2C_Mem_Read+0x460>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691a      	ldr	r2, [r3, #16]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	701a      	strb	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	1c5a      	adds	r2, r3, #1
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	625a      	str	r2, [r3, #36]	; 0x24
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	851a      	strh	r2, [r3, #40]	; 0x28
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035b6:	e10f      	b.n	80037d8 <HAL_I2C_Mem_Read+0x438>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d150      	bne.n	8003662 <HAL_I2C_Mem_Read+0x2c2>
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c6:	2200      	movs	r2, #0
 80035c8:	4906      	ldr	r1, [pc, #24]	; (80035e4 <HAL_I2C_Mem_Read+0x244>)
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 fa78 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d008      	beq.n	80035e8 <HAL_I2C_Mem_Read+0x248>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e112      	b.n	8003800 <HAL_I2C_Mem_Read+0x460>
 80035da:	bf00      	nop
 80035dc:	00100002 	.word	0x00100002
 80035e0:	ffff0000 	.word	0xffff0000
 80035e4:	00010004 	.word	0x00010004
 80035e8:	b672      	cpsid	i
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	701a      	strb	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	625a      	str	r2, [r3, #36]	; 0x24
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	851a      	strh	r2, [r3, #40]	; 0x28
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800362c:	b662      	cpsie	i
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	701a      	strb	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	625a      	str	r2, [r3, #36]	; 0x24
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364a:	3b01      	subs	r3, #1
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	851a      	strh	r2, [r3, #40]	; 0x28
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003656:	b29b      	uxth	r3, r3
 8003658:	3b01      	subs	r3, #1
 800365a:	b29a      	uxth	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003660:	e0ba      	b.n	80037d8 <HAL_I2C_Mem_Read+0x438>
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003668:	2200      	movs	r2, #0
 800366a:	4967      	ldr	r1, [pc, #412]	; (8003808 <HAL_I2C_Mem_Read+0x468>)
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 fa27 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <HAL_I2C_Mem_Read+0x2dc>
 8003678:	2301      	movs	r3, #1
 800367a:	e0c1      	b.n	8003800 <HAL_I2C_Mem_Read+0x460>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	b672      	cpsid	i
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	691a      	ldr	r2, [r3, #16]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	701a      	strb	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	625a      	str	r2, [r3, #36]	; 0x24
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	851a      	strh	r2, [r3, #40]	; 0x28
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c6:	2200      	movs	r2, #0
 80036c8:	494f      	ldr	r1, [pc, #316]	; (8003808 <HAL_I2C_Mem_Read+0x468>)
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f9f8 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_I2C_Mem_Read+0x33a>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e092      	b.n	8003800 <HAL_I2C_Mem_Read+0x460>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	701a      	strb	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	625a      	str	r2, [r3, #36]	; 0x24
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	851a      	strh	r2, [r3, #40]	; 0x28
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800371c:	b662      	cpsie	i
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	701a      	strb	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	625a      	str	r2, [r3, #36]	; 0x24
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373a:	3b01      	subs	r3, #1
 800373c:	b29a      	uxth	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	851a      	strh	r2, [r3, #40]	; 0x28
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003746:	b29b      	uxth	r3, r3
 8003748:	3b01      	subs	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003750:	e042      	b.n	80037d8 <HAL_I2C_Mem_Read+0x438>
 8003752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003754:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 fb0a 	bl	8003d70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_I2C_Mem_Read+0x3c6>
 8003762:	2301      	movs	r3, #1
 8003764:	e04c      	b.n	8003800 <HAL_I2C_Mem_Read+0x460>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	701a      	strb	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	1c5a      	adds	r2, r3, #1
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	625a      	str	r2, [r3, #36]	; 0x24
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003782:	3b01      	subs	r3, #1
 8003784:	b29a      	uxth	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	851a      	strh	r2, [r3, #40]	; 0x28
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378e:	b29b      	uxth	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d118      	bne.n	80037d8 <HAL_I2C_Mem_Read+0x438>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	701a      	strb	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	625a      	str	r2, [r3, #36]	; 0x24
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c2:	3b01      	subs	r3, #1
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	851a      	strh	r2, [r3, #40]	; 0x28
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	3b01      	subs	r3, #1
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f47f aebe 	bne.w	800355e <HAL_I2C_Mem_Read+0x1be>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80037fa:	2300      	movs	r3, #0
 80037fc:	e000      	b.n	8003800 <HAL_I2C_Mem_Read+0x460>
 80037fe:	2302      	movs	r3, #2
 8003800:	4618      	mov	r0, r3
 8003802:	3728      	adds	r7, #40	; 0x28
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	00010004 	.word	0x00010004

0800380c <I2C_RequestMemoryWrite>:
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af02      	add	r7, sp, #8
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	4608      	mov	r0, r1
 8003816:	4611      	mov	r1, r2
 8003818:	461a      	mov	r2, r3
 800381a:	4603      	mov	r3, r0
 800381c:	817b      	strh	r3, [r7, #10]
 800381e:	460b      	mov	r3, r1
 8003820:	813b      	strh	r3, [r7, #8]
 8003822:	4613      	mov	r3, r2
 8003824:	80fb      	strh	r3, [r7, #6]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	2200      	movs	r2, #0
 800383e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f93c 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <I2C_RequestMemoryWrite+0x46>
 800384e:	2301      	movs	r3, #1
 8003850:	e05f      	b.n	8003912 <I2C_RequestMemoryWrite+0x106>
 8003852:	897b      	ldrh	r3, [r7, #10]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	461a      	mov	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003860:	611a      	str	r2, [r3, #16]
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	6a3a      	ldr	r2, [r7, #32]
 8003866:	492d      	ldr	r1, [pc, #180]	; (800391c <I2C_RequestMemoryWrite+0x110>)
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f980 	bl	8003b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <I2C_RequestMemoryWrite+0x6c>
 8003874:	2301      	movs	r3, #1
 8003876:	e04c      	b.n	8003912 <I2C_RequestMemoryWrite+0x106>
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003890:	6a39      	ldr	r1, [r7, #32]
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 f9ea 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00d      	beq.n	80038ba <I2C_RequestMemoryWrite+0xae>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d107      	bne.n	80038b6 <I2C_RequestMemoryWrite+0xaa>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	2301      	movs	r3, #1
 80038b8:	e02b      	b.n	8003912 <I2C_RequestMemoryWrite+0x106>
 80038ba:	88fb      	ldrh	r3, [r7, #6]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d105      	bne.n	80038cc <I2C_RequestMemoryWrite+0xc0>
 80038c0:	893b      	ldrh	r3, [r7, #8]
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	611a      	str	r2, [r3, #16]
 80038ca:	e021      	b.n	8003910 <I2C_RequestMemoryWrite+0x104>
 80038cc:	893b      	ldrh	r3, [r7, #8]
 80038ce:	0a1b      	lsrs	r3, r3, #8
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	611a      	str	r2, [r3, #16]
 80038da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038dc:	6a39      	ldr	r1, [r7, #32]
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 f9c4 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00d      	beq.n	8003906 <I2C_RequestMemoryWrite+0xfa>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d107      	bne.n	8003902 <I2C_RequestMemoryWrite+0xf6>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	2301      	movs	r3, #1
 8003904:	e005      	b.n	8003912 <I2C_RequestMemoryWrite+0x106>
 8003906:	893b      	ldrh	r3, [r7, #8]
 8003908:	b2da      	uxtb	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	611a      	str	r2, [r3, #16]
 8003910:	2300      	movs	r3, #0
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	00010002 	.word	0x00010002

08003920 <I2C_RequestMemoryRead>:
 8003920:	b580      	push	{r7, lr}
 8003922:	b088      	sub	sp, #32
 8003924:	af02      	add	r7, sp, #8
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	4608      	mov	r0, r1
 800392a:	4611      	mov	r1, r2
 800392c:	461a      	mov	r2, r3
 800392e:	4603      	mov	r3, r0
 8003930:	817b      	strh	r3, [r7, #10]
 8003932:	460b      	mov	r3, r1
 8003934:	813b      	strh	r3, [r7, #8]
 8003936:	4613      	mov	r3, r2
 8003938:	80fb      	strh	r3, [r7, #6]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	2200      	movs	r2, #0
 8003962:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 f8aa 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <I2C_RequestMemoryRead+0x56>
 8003972:	2301      	movs	r3, #1
 8003974:	e09e      	b.n	8003ab4 <I2C_RequestMemoryRead+0x194>
 8003976:	897b      	ldrh	r3, [r7, #10]
 8003978:	b2db      	uxtb	r3, r3
 800397a:	461a      	mov	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003984:	611a      	str	r2, [r3, #16]
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	6a3a      	ldr	r2, [r7, #32]
 800398a:	494c      	ldr	r1, [pc, #304]	; (8003abc <I2C_RequestMemoryRead+0x19c>)
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 f8ee 	bl	8003b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <I2C_RequestMemoryRead+0x7c>
 8003998:	2301      	movs	r3, #1
 800399a:	e08b      	b.n	8003ab4 <I2C_RequestMemoryRead+0x194>
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b4:	6a39      	ldr	r1, [r7, #32]
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 f958 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00d      	beq.n	80039de <I2C_RequestMemoryRead+0xbe>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d107      	bne.n	80039da <I2C_RequestMemoryRead+0xba>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	2301      	movs	r3, #1
 80039dc:	e06a      	b.n	8003ab4 <I2C_RequestMemoryRead+0x194>
 80039de:	88fb      	ldrh	r3, [r7, #6]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d105      	bne.n	80039f0 <I2C_RequestMemoryRead+0xd0>
 80039e4:	893b      	ldrh	r3, [r7, #8]
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	611a      	str	r2, [r3, #16]
 80039ee:	e021      	b.n	8003a34 <I2C_RequestMemoryRead+0x114>
 80039f0:	893b      	ldrh	r3, [r7, #8]
 80039f2:	0a1b      	lsrs	r3, r3, #8
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	611a      	str	r2, [r3, #16]
 80039fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a00:	6a39      	ldr	r1, [r7, #32]
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 f932 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00d      	beq.n	8003a2a <I2C_RequestMemoryRead+0x10a>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d107      	bne.n	8003a26 <I2C_RequestMemoryRead+0x106>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	2301      	movs	r3, #1
 8003a28:	e044      	b.n	8003ab4 <I2C_RequestMemoryRead+0x194>
 8003a2a:	893b      	ldrh	r3, [r7, #8]
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	611a      	str	r2, [r3, #16]
 8003a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a36:	6a39      	ldr	r1, [r7, #32]
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 f917 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00d      	beq.n	8003a60 <I2C_RequestMemoryRead+0x140>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d107      	bne.n	8003a5c <I2C_RequestMemoryRead+0x13c>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e029      	b.n	8003ab4 <I2C_RequestMemoryRead+0x194>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 f81f 	bl	8003ac0 <I2C_WaitOnFlagUntilTimeout>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <I2C_RequestMemoryRead+0x16c>
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e013      	b.n	8003ab4 <I2C_RequestMemoryRead+0x194>
 8003a8c:	897b      	ldrh	r3, [r7, #10]
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	611a      	str	r2, [r3, #16]
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	6a3a      	ldr	r2, [r7, #32]
 8003aa0:	4906      	ldr	r1, [pc, #24]	; (8003abc <I2C_RequestMemoryRead+0x19c>)
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 f863 	bl	8003b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <I2C_RequestMemoryRead+0x192>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <I2C_RequestMemoryRead+0x194>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	00010002 	.word	0x00010002

08003ac0 <I2C_WaitOnFlagUntilTimeout>:
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	4613      	mov	r3, r2
 8003ace:	71fb      	strb	r3, [r7, #7]
 8003ad0:	e025      	b.n	8003b1e <I2C_WaitOnFlagUntilTimeout+0x5e>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ad8:	d021      	beq.n	8003b1e <I2C_WaitOnFlagUntilTimeout+0x5e>
 8003ada:	f7fe ffa5 	bl	8002a28 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d302      	bcc.n	8003af0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d116      	bne.n	8003b1e <I2C_WaitOnFlagUntilTimeout+0x5e>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	f043 0220 	orr.w	r2, r3, #32
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e023      	b.n	8003b66 <I2C_WaitOnFlagUntilTimeout+0xa6>
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	0c1b      	lsrs	r3, r3, #16
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d10d      	bne.n	8003b44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	43da      	mvns	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	4013      	ands	r3, r2
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	bf0c      	ite	eq
 8003b3a:	2301      	moveq	r3, #1
 8003b3c:	2300      	movne	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	461a      	mov	r2, r3
 8003b42:	e00c      	b.n	8003b5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	43da      	mvns	r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	bf0c      	ite	eq
 8003b56:	2301      	moveq	r3, #1
 8003b58:	2300      	movne	r3, #0
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	79fb      	ldrb	r3, [r7, #7]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d0b6      	beq.n	8003ad2 <I2C_WaitOnFlagUntilTimeout+0x12>
 8003b64:	2300      	movs	r3, #0
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	60f8      	str	r0, [r7, #12]
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	607a      	str	r2, [r7, #4]
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	e051      	b.n	8003c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b8c:	d123      	bne.n	8003bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ba6:	615a      	str	r2, [r3, #20]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	631a      	str	r2, [r3, #48]	; 0x30
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f043 0204 	orr.w	r2, r3, #4
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	641a      	str	r2, [r3, #64]	; 0x40
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e046      	b.n	8003c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bdc:	d021      	beq.n	8003c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8003bde:	f7fe ff23 	bl	8002a28 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d302      	bcc.n	8003bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d116      	bne.n	8003c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	631a      	str	r2, [r3, #48]	; 0x30
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	f043 0220 	orr.w	r2, r3, #32
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	641a      	str	r2, [r3, #64]	; 0x40
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e020      	b.n	8003c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	0c1b      	lsrs	r3, r3, #16
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d10c      	bne.n	8003c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	43da      	mvns	r2, r3
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4013      	ands	r3, r2
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	bf14      	ite	ne
 8003c3e:	2301      	movne	r3, #1
 8003c40:	2300      	moveq	r3, #0
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	e00b      	b.n	8003c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	43da      	mvns	r2, r3
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	4013      	ands	r3, r2
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	bf14      	ite	ne
 8003c58:	2301      	movne	r3, #1
 8003c5a:	2300      	moveq	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d18d      	bne.n	8003b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8003c62:	2300      	movs	r3, #0
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <I2C_WaitOnTXEFlagUntilTimeout>:
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
 8003c78:	e02d      	b.n	8003cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f8ce 	bl	8003e1c <I2C_IsAcknowledgeFailed>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e02d      	b.n	8003ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c90:	d021      	beq.n	8003cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8003c92:	f7fe fec9 	bl	8002a28 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d302      	bcc.n	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d116      	bne.n	8003cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	631a      	str	r2, [r3, #48]	; 0x30
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	f043 0220 	orr.w	r2, r3, #32
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	641a      	str	r2, [r3, #64]	; 0x40
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e007      	b.n	8003ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce0:	2b80      	cmp	r3, #128	; 0x80
 8003ce2:	d1ca      	bne.n	8003c7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <I2C_WaitOnBTFFlagUntilTimeout>:
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
 8003cfa:	e02d      	b.n	8003d58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 f88d 	bl	8003e1c <I2C_IsAcknowledgeFailed>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e02d      	b.n	8003d68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d12:	d021      	beq.n	8003d58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8003d14:	f7fe fe88 	bl	8002a28 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d302      	bcc.n	8003d2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d116      	bne.n	8003d58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	f043 0220 	orr.w	r2, r3, #32
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	641a      	str	r2, [r3, #64]	; 0x40
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d54:	2301      	movs	r3, #1
 8003d56:	e007      	b.n	8003d68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d1ca      	bne.n	8003cfc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 8003d66:	2300      	movs	r3, #0
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <I2C_WaitOnRXNEFlagUntilTimeout>:
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
 8003d7c:	e042      	b.n	8003e04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	f003 0310 	and.w	r3, r3, #16
 8003d88:	2b10      	cmp	r3, #16
 8003d8a:	d119      	bne.n	8003dc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f06f 0210 	mvn.w	r2, #16
 8003d94:	615a      	str	r2, [r3, #20]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	641a      	str	r2, [r3, #64]	; 0x40
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e029      	b.n	8003e14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8003dc0:	f7fe fe32 	bl	8002a28 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d302      	bcc.n	8003dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d116      	bne.n	8003e04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	631a      	str	r2, [r3, #48]	; 0x30
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	f043 0220 	orr.w	r2, r3, #32
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	641a      	str	r2, [r3, #64]	; 0x40
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e00:	2301      	movs	r3, #1
 8003e02:	e007      	b.n	8003e14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0e:	2b40      	cmp	r3, #64	; 0x40
 8003e10:	d1b5      	bne.n	8003d7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 8003e12:	2300      	movs	r3, #0
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <I2C_IsAcknowledgeFailed>:
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e32:	d11b      	bne.n	8003e6c <I2C_IsAcknowledgeFailed+0x50>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e3c:	615a      	str	r2, [r3, #20]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	631a      	str	r2, [r3, #48]	; 0x30
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	f043 0204 	orr.w	r2, r3, #4
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	641a      	str	r2, [r3, #64]	; 0x40
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e000      	b.n	8003e6e <I2C_IsAcknowledgeFailed+0x52>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	4618      	mov	r0, r3
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bc80      	pop	{r7}
 8003e76:	4770      	bx	lr

08003e78 <HAL_RCC_OscConfig>:
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_RCC_OscConfig+0x12>
 8003e86:	2301      	movs	r3, #1
 8003e88:	e26c      	b.n	8004364 <HAL_RCC_OscConfig+0x4ec>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 8087 	beq.w	8003fa6 <HAL_RCC_OscConfig+0x12e>
 8003e98:	4b92      	ldr	r3, [pc, #584]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 030c 	and.w	r3, r3, #12
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d00c      	beq.n	8003ebe <HAL_RCC_OscConfig+0x46>
 8003ea4:	4b8f      	ldr	r3, [pc, #572]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f003 030c 	and.w	r3, r3, #12
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d112      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x5e>
 8003eb0:	4b8c      	ldr	r3, [pc, #560]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ebc:	d10b      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x5e>
 8003ebe:	4b89      	ldr	r3, [pc, #548]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d06c      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x12c>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d168      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x12c>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e246      	b.n	8004364 <HAL_RCC_OscConfig+0x4ec>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ede:	d106      	bne.n	8003eee <HAL_RCC_OscConfig+0x76>
 8003ee0:	4b80      	ldr	r3, [pc, #512]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a7f      	ldr	r2, [pc, #508]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eea:	6013      	str	r3, [r2, #0]
 8003eec:	e02e      	b.n	8003f4c <HAL_RCC_OscConfig+0xd4>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10c      	bne.n	8003f10 <HAL_RCC_OscConfig+0x98>
 8003ef6:	4b7b      	ldr	r3, [pc, #492]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a7a      	ldr	r2, [pc, #488]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	4b78      	ldr	r3, [pc, #480]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a77      	ldr	r2, [pc, #476]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	e01d      	b.n	8003f4c <HAL_RCC_OscConfig+0xd4>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f18:	d10c      	bne.n	8003f34 <HAL_RCC_OscConfig+0xbc>
 8003f1a:	4b72      	ldr	r3, [pc, #456]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a71      	ldr	r2, [pc, #452]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	4b6f      	ldr	r3, [pc, #444]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a6e      	ldr	r2, [pc, #440]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	e00b      	b.n	8003f4c <HAL_RCC_OscConfig+0xd4>
 8003f34:	4b6b      	ldr	r3, [pc, #428]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a6a      	ldr	r2, [pc, #424]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	4b68      	ldr	r3, [pc, #416]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a67      	ldr	r2, [pc, #412]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f4a:	6013      	str	r3, [r2, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d013      	beq.n	8003f7c <HAL_RCC_OscConfig+0x104>
 8003f54:	f7fe fd68 	bl	8002a28 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0xf6>
 8003f5c:	f7fe fd64 	bl	8002a28 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b64      	cmp	r3, #100	; 0x64
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0xf6>
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e1fa      	b.n	8004364 <HAL_RCC_OscConfig+0x4ec>
 8003f6e:	4b5d      	ldr	r3, [pc, #372]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0f0      	beq.n	8003f5c <HAL_RCC_OscConfig+0xe4>
 8003f7a:	e014      	b.n	8003fa6 <HAL_RCC_OscConfig+0x12e>
 8003f7c:	f7fe fd54 	bl	8002a28 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x11e>
 8003f84:	f7fe fd50 	bl	8002a28 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b64      	cmp	r3, #100	; 0x64
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x11e>
 8003f92:	2303      	movs	r3, #3
 8003f94:	e1e6      	b.n	8004364 <HAL_RCC_OscConfig+0x4ec>
 8003f96:	4b53      	ldr	r3, [pc, #332]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0x10c>
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCC_OscConfig+0x12e>
 8003fa4:	bf00      	nop
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d063      	beq.n	800407a <HAL_RCC_OscConfig+0x202>
 8003fb2:	4b4c      	ldr	r3, [pc, #304]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f003 030c 	and.w	r3, r3, #12
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00b      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x15e>
 8003fbe:	4b49      	ldr	r3, [pc, #292]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f003 030c 	and.w	r3, r3, #12
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d11c      	bne.n	8004004 <HAL_RCC_OscConfig+0x18c>
 8003fca:	4b46      	ldr	r3, [pc, #280]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d116      	bne.n	8004004 <HAL_RCC_OscConfig+0x18c>
 8003fd6:	4b43      	ldr	r3, [pc, #268]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d005      	beq.n	8003fee <HAL_RCC_OscConfig+0x176>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d001      	beq.n	8003fee <HAL_RCC_OscConfig+0x176>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e1ba      	b.n	8004364 <HAL_RCC_OscConfig+0x4ec>
 8003fee:	4b3d      	ldr	r3, [pc, #244]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	4939      	ldr	r1, [pc, #228]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	600b      	str	r3, [r1, #0]
 8004002:	e03a      	b.n	800407a <HAL_RCC_OscConfig+0x202>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d020      	beq.n	800404e <HAL_RCC_OscConfig+0x1d6>
 800400c:	4b36      	ldr	r3, [pc, #216]	; (80040e8 <HAL_RCC_OscConfig+0x270>)
 800400e:	2201      	movs	r2, #1
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	f7fe fd09 	bl	8002a28 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x1b4>
 800401a:	f7fe fd05 	bl	8002a28 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x1b4>
 8004028:	2303      	movs	r3, #3
 800402a:	e19b      	b.n	8004364 <HAL_RCC_OscConfig+0x4ec>
 800402c:	4b2d      	ldr	r3, [pc, #180]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0f0      	beq.n	800401a <HAL_RCC_OscConfig+0x1a2>
 8004038:	4b2a      	ldr	r3, [pc, #168]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	4927      	ldr	r1, [pc, #156]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8004048:	4313      	orrs	r3, r2
 800404a:	600b      	str	r3, [r1, #0]
 800404c:	e015      	b.n	800407a <HAL_RCC_OscConfig+0x202>
 800404e:	4b26      	ldr	r3, [pc, #152]	; (80040e8 <HAL_RCC_OscConfig+0x270>)
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	f7fe fce8 	bl	8002a28 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x1f6>
 800405c:	f7fe fce4 	bl	8002a28 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x1f6>
 800406a:	2303      	movs	r3, #3
 800406c:	e17a      	b.n	8004364 <HAL_RCC_OscConfig+0x4ec>
 800406e:	4b1d      	ldr	r3, [pc, #116]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f0      	bne.n	800405c <HAL_RCC_OscConfig+0x1e4>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b00      	cmp	r3, #0
 8004084:	d03a      	beq.n	80040fc <HAL_RCC_OscConfig+0x284>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d019      	beq.n	80040c2 <HAL_RCC_OscConfig+0x24a>
 800408e:	4b17      	ldr	r3, [pc, #92]	; (80040ec <HAL_RCC_OscConfig+0x274>)
 8004090:	2201      	movs	r2, #1
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	f7fe fcc8 	bl	8002a28 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x236>
 800409c:	f7fe fcc4 	bl	8002a28 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x236>
 80040aa:	2303      	movs	r3, #3
 80040ac:	e15a      	b.n	8004364 <HAL_RCC_OscConfig+0x4ec>
 80040ae:	4b0d      	ldr	r3, [pc, #52]	; (80040e4 <HAL_RCC_OscConfig+0x26c>)
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0f0      	beq.n	800409c <HAL_RCC_OscConfig+0x224>
 80040ba:	2001      	movs	r0, #1
 80040bc:	f000 fac6 	bl	800464c <RCC_Delay>
 80040c0:	e01c      	b.n	80040fc <HAL_RCC_OscConfig+0x284>
 80040c2:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <HAL_RCC_OscConfig+0x274>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	f7fe fcae 	bl	8002a28 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]
 80040ce:	e00f      	b.n	80040f0 <HAL_RCC_OscConfig+0x278>
 80040d0:	f7fe fcaa 	bl	8002a28 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d908      	bls.n	80040f0 <HAL_RCC_OscConfig+0x278>
 80040de:	2303      	movs	r3, #3
 80040e0:	e140      	b.n	8004364 <HAL_RCC_OscConfig+0x4ec>
 80040e2:	bf00      	nop
 80040e4:	40021000 	.word	0x40021000
 80040e8:	42420000 	.word	0x42420000
 80040ec:	42420480 	.word	0x42420480
 80040f0:	4b9e      	ldr	r3, [pc, #632]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e9      	bne.n	80040d0 <HAL_RCC_OscConfig+0x258>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 80a6 	beq.w	8004256 <HAL_RCC_OscConfig+0x3de>
 800410a:	2300      	movs	r3, #0
 800410c:	75fb      	strb	r3, [r7, #23]
 800410e:	4b97      	ldr	r3, [pc, #604]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10d      	bne.n	8004136 <HAL_RCC_OscConfig+0x2be>
 800411a:	4b94      	ldr	r3, [pc, #592]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	4a93      	ldr	r2, [pc, #588]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 8004120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004124:	61d3      	str	r3, [r2, #28]
 8004126:	4b91      	ldr	r3, [pc, #580]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412e:	60bb      	str	r3, [r7, #8]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2301      	movs	r3, #1
 8004134:	75fb      	strb	r3, [r7, #23]
 8004136:	4b8e      	ldr	r3, [pc, #568]	; (8004370 <HAL_RCC_OscConfig+0x4f8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413e:	2b00      	cmp	r3, #0
 8004140:	d118      	bne.n	8004174 <HAL_RCC_OscConfig+0x2fc>
 8004142:	4b8b      	ldr	r3, [pc, #556]	; (8004370 <HAL_RCC_OscConfig+0x4f8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a8a      	ldr	r2, [pc, #552]	; (8004370 <HAL_RCC_OscConfig+0x4f8>)
 8004148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	f7fe fc6b 	bl	8002a28 <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x2f0>
 8004156:	f7fe fc67 	bl	8002a28 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b64      	cmp	r3, #100	; 0x64
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x2f0>
 8004164:	2303      	movs	r3, #3
 8004166:	e0fd      	b.n	8004364 <HAL_RCC_OscConfig+0x4ec>
 8004168:	4b81      	ldr	r3, [pc, #516]	; (8004370 <HAL_RCC_OscConfig+0x4f8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0f0      	beq.n	8004156 <HAL_RCC_OscConfig+0x2de>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d106      	bne.n	800418a <HAL_RCC_OscConfig+0x312>
 800417c:	4b7b      	ldr	r3, [pc, #492]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	4a7a      	ldr	r2, [pc, #488]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 8004182:	f043 0301 	orr.w	r3, r3, #1
 8004186:	6213      	str	r3, [r2, #32]
 8004188:	e02d      	b.n	80041e6 <HAL_RCC_OscConfig+0x36e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10c      	bne.n	80041ac <HAL_RCC_OscConfig+0x334>
 8004192:	4b76      	ldr	r3, [pc, #472]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	4a75      	ldr	r2, [pc, #468]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 8004198:	f023 0301 	bic.w	r3, r3, #1
 800419c:	6213      	str	r3, [r2, #32]
 800419e:	4b73      	ldr	r3, [pc, #460]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	4a72      	ldr	r2, [pc, #456]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 80041a4:	f023 0304 	bic.w	r3, r3, #4
 80041a8:	6213      	str	r3, [r2, #32]
 80041aa:	e01c      	b.n	80041e6 <HAL_RCC_OscConfig+0x36e>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	2b05      	cmp	r3, #5
 80041b2:	d10c      	bne.n	80041ce <HAL_RCC_OscConfig+0x356>
 80041b4:	4b6d      	ldr	r3, [pc, #436]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	4a6c      	ldr	r2, [pc, #432]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 80041ba:	f043 0304 	orr.w	r3, r3, #4
 80041be:	6213      	str	r3, [r2, #32]
 80041c0:	4b6a      	ldr	r3, [pc, #424]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	4a69      	ldr	r2, [pc, #420]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 80041c6:	f043 0301 	orr.w	r3, r3, #1
 80041ca:	6213      	str	r3, [r2, #32]
 80041cc:	e00b      	b.n	80041e6 <HAL_RCC_OscConfig+0x36e>
 80041ce:	4b67      	ldr	r3, [pc, #412]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	4a66      	ldr	r2, [pc, #408]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 80041d4:	f023 0301 	bic.w	r3, r3, #1
 80041d8:	6213      	str	r3, [r2, #32]
 80041da:	4b64      	ldr	r3, [pc, #400]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	4a63      	ldr	r2, [pc, #396]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 80041e0:	f023 0304 	bic.w	r3, r3, #4
 80041e4:	6213      	str	r3, [r2, #32]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d015      	beq.n	800421a <HAL_RCC_OscConfig+0x3a2>
 80041ee:	f7fe fc1b 	bl	8002a28 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]
 80041f4:	e00a      	b.n	800420c <HAL_RCC_OscConfig+0x394>
 80041f6:	f7fe fc17 	bl	8002a28 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	f241 3288 	movw	r2, #5000	; 0x1388
 8004204:	4293      	cmp	r3, r2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x394>
 8004208:	2303      	movs	r3, #3
 800420a:	e0ab      	b.n	8004364 <HAL_RCC_OscConfig+0x4ec>
 800420c:	4b57      	ldr	r3, [pc, #348]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0ee      	beq.n	80041f6 <HAL_RCC_OscConfig+0x37e>
 8004218:	e014      	b.n	8004244 <HAL_RCC_OscConfig+0x3cc>
 800421a:	f7fe fc05 	bl	8002a28 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]
 8004220:	e00a      	b.n	8004238 <HAL_RCC_OscConfig+0x3c0>
 8004222:	f7fe fc01 	bl	8002a28 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004230:	4293      	cmp	r3, r2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x3c0>
 8004234:	2303      	movs	r3, #3
 8004236:	e095      	b.n	8004364 <HAL_RCC_OscConfig+0x4ec>
 8004238:	4b4c      	ldr	r3, [pc, #304]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1ee      	bne.n	8004222 <HAL_RCC_OscConfig+0x3aa>
 8004244:	7dfb      	ldrb	r3, [r7, #23]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d105      	bne.n	8004256 <HAL_RCC_OscConfig+0x3de>
 800424a:	4b48      	ldr	r3, [pc, #288]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	4a47      	ldr	r2, [pc, #284]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 8004250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004254:	61d3      	str	r3, [r2, #28]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 8081 	beq.w	8004362 <HAL_RCC_OscConfig+0x4ea>
 8004260:	4b42      	ldr	r3, [pc, #264]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f003 030c 	and.w	r3, r3, #12
 8004268:	2b08      	cmp	r3, #8
 800426a:	d061      	beq.n	8004330 <HAL_RCC_OscConfig+0x4b8>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	2b02      	cmp	r3, #2
 8004272:	d146      	bne.n	8004302 <HAL_RCC_OscConfig+0x48a>
 8004274:	4b3f      	ldr	r3, [pc, #252]	; (8004374 <HAL_RCC_OscConfig+0x4fc>)
 8004276:	2200      	movs	r2, #0
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	f7fe fbd5 	bl	8002a28 <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]
 8004280:	e008      	b.n	8004294 <HAL_RCC_OscConfig+0x41c>
 8004282:	f7fe fbd1 	bl	8002a28 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x41c>
 8004290:	2303      	movs	r3, #3
 8004292:	e067      	b.n	8004364 <HAL_RCC_OscConfig+0x4ec>
 8004294:	4b35      	ldr	r3, [pc, #212]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1f0      	bne.n	8004282 <HAL_RCC_OscConfig+0x40a>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a8:	d108      	bne.n	80042bc <HAL_RCC_OscConfig+0x444>
 80042aa:	4b30      	ldr	r3, [pc, #192]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	492d      	ldr	r1, [pc, #180]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	604b      	str	r3, [r1, #4]
 80042bc:	4b2b      	ldr	r3, [pc, #172]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a19      	ldr	r1, [r3, #32]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	430b      	orrs	r3, r1
 80042ce:	4927      	ldr	r1, [pc, #156]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	604b      	str	r3, [r1, #4]
 80042d4:	4b27      	ldr	r3, [pc, #156]	; (8004374 <HAL_RCC_OscConfig+0x4fc>)
 80042d6:	2201      	movs	r2, #1
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	f7fe fba5 	bl	8002a28 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x47c>
 80042e2:	f7fe fba1 	bl	8002a28 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x47c>
 80042f0:	2303      	movs	r3, #3
 80042f2:	e037      	b.n	8004364 <HAL_RCC_OscConfig+0x4ec>
 80042f4:	4b1d      	ldr	r3, [pc, #116]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0f0      	beq.n	80042e2 <HAL_RCC_OscConfig+0x46a>
 8004300:	e02f      	b.n	8004362 <HAL_RCC_OscConfig+0x4ea>
 8004302:	4b1c      	ldr	r3, [pc, #112]	; (8004374 <HAL_RCC_OscConfig+0x4fc>)
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	f7fe fb8e 	bl	8002a28 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x4aa>
 8004310:	f7fe fb8a 	bl	8002a28 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x4aa>
 800431e:	2303      	movs	r3, #3
 8004320:	e020      	b.n	8004364 <HAL_RCC_OscConfig+0x4ec>
 8004322:	4b12      	ldr	r3, [pc, #72]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f0      	bne.n	8004310 <HAL_RCC_OscConfig+0x498>
 800432e:	e018      	b.n	8004362 <HAL_RCC_OscConfig+0x4ea>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_RCC_OscConfig+0x4c4>
 8004338:	2301      	movs	r3, #1
 800433a:	e013      	b.n	8004364 <HAL_RCC_OscConfig+0x4ec>
 800433c:	4b0b      	ldr	r3, [pc, #44]	; (800436c <HAL_RCC_OscConfig+0x4f4>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	429a      	cmp	r2, r3
 800434e:	d106      	bne.n	800435e <HAL_RCC_OscConfig+0x4e6>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	429a      	cmp	r2, r3
 800435c:	d001      	beq.n	8004362 <HAL_RCC_OscConfig+0x4ea>
 800435e:	2301      	movs	r3, #1
 8004360:	e000      	b.n	8004364 <HAL_RCC_OscConfig+0x4ec>
 8004362:	2300      	movs	r3, #0
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40021000 	.word	0x40021000
 8004370:	40007000 	.word	0x40007000
 8004374:	42420060 	.word	0x42420060

08004378 <HAL_RCC_ClockConfig>:
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_RCC_ClockConfig+0x14>
 8004388:	2301      	movs	r3, #1
 800438a:	e0d0      	b.n	800452e <HAL_RCC_ClockConfig+0x1b6>
 800438c:	4b6a      	ldr	r3, [pc, #424]	; (8004538 <HAL_RCC_ClockConfig+0x1c0>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d910      	bls.n	80043bc <HAL_RCC_ClockConfig+0x44>
 800439a:	4b67      	ldr	r3, [pc, #412]	; (8004538 <HAL_RCC_ClockConfig+0x1c0>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f023 0207 	bic.w	r2, r3, #7
 80043a2:	4965      	ldr	r1, [pc, #404]	; (8004538 <HAL_RCC_ClockConfig+0x1c0>)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	600b      	str	r3, [r1, #0]
 80043aa:	4b63      	ldr	r3, [pc, #396]	; (8004538 <HAL_RCC_ClockConfig+0x1c0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d001      	beq.n	80043bc <HAL_RCC_ClockConfig+0x44>
 80043b8:	2301      	movs	r3, #1
 80043ba:	e0b8      	b.n	800452e <HAL_RCC_ClockConfig+0x1b6>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d020      	beq.n	800440a <HAL_RCC_ClockConfig+0x92>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d005      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x68>
 80043d4:	4b59      	ldr	r3, [pc, #356]	; (800453c <HAL_RCC_ClockConfig+0x1c4>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	4a58      	ldr	r2, [pc, #352]	; (800453c <HAL_RCC_ClockConfig+0x1c4>)
 80043da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80043de:	6053      	str	r3, [r2, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d005      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x80>
 80043ec:	4b53      	ldr	r3, [pc, #332]	; (800453c <HAL_RCC_ClockConfig+0x1c4>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	4a52      	ldr	r2, [pc, #328]	; (800453c <HAL_RCC_ClockConfig+0x1c4>)
 80043f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80043f6:	6053      	str	r3, [r2, #4]
 80043f8:	4b50      	ldr	r3, [pc, #320]	; (800453c <HAL_RCC_ClockConfig+0x1c4>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	494d      	ldr	r1, [pc, #308]	; (800453c <HAL_RCC_ClockConfig+0x1c4>)
 8004406:	4313      	orrs	r3, r2
 8004408:	604b      	str	r3, [r1, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d040      	beq.n	8004498 <HAL_RCC_ClockConfig+0x120>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d107      	bne.n	800442e <HAL_RCC_ClockConfig+0xb6>
 800441e:	4b47      	ldr	r3, [pc, #284]	; (800453c <HAL_RCC_ClockConfig+0x1c4>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d115      	bne.n	8004456 <HAL_RCC_ClockConfig+0xde>
 800442a:	2301      	movs	r3, #1
 800442c:	e07f      	b.n	800452e <HAL_RCC_ClockConfig+0x1b6>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b02      	cmp	r3, #2
 8004434:	d107      	bne.n	8004446 <HAL_RCC_ClockConfig+0xce>
 8004436:	4b41      	ldr	r3, [pc, #260]	; (800453c <HAL_RCC_ClockConfig+0x1c4>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d109      	bne.n	8004456 <HAL_RCC_ClockConfig+0xde>
 8004442:	2301      	movs	r3, #1
 8004444:	e073      	b.n	800452e <HAL_RCC_ClockConfig+0x1b6>
 8004446:	4b3d      	ldr	r3, [pc, #244]	; (800453c <HAL_RCC_ClockConfig+0x1c4>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_RCC_ClockConfig+0xde>
 8004452:	2301      	movs	r3, #1
 8004454:	e06b      	b.n	800452e <HAL_RCC_ClockConfig+0x1b6>
 8004456:	4b39      	ldr	r3, [pc, #228]	; (800453c <HAL_RCC_ClockConfig+0x1c4>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f023 0203 	bic.w	r2, r3, #3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	4936      	ldr	r1, [pc, #216]	; (800453c <HAL_RCC_ClockConfig+0x1c4>)
 8004464:	4313      	orrs	r3, r2
 8004466:	604b      	str	r3, [r1, #4]
 8004468:	f7fe fade 	bl	8002a28 <HAL_GetTick>
 800446c:	60f8      	str	r0, [r7, #12]
 800446e:	e00a      	b.n	8004486 <HAL_RCC_ClockConfig+0x10e>
 8004470:	f7fe fada 	bl	8002a28 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	f241 3288 	movw	r2, #5000	; 0x1388
 800447e:	4293      	cmp	r3, r2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_ClockConfig+0x10e>
 8004482:	2303      	movs	r3, #3
 8004484:	e053      	b.n	800452e <HAL_RCC_ClockConfig+0x1b6>
 8004486:	4b2d      	ldr	r3, [pc, #180]	; (800453c <HAL_RCC_ClockConfig+0x1c4>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f003 020c 	and.w	r2, r3, #12
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	429a      	cmp	r2, r3
 8004496:	d1eb      	bne.n	8004470 <HAL_RCC_ClockConfig+0xf8>
 8004498:	4b27      	ldr	r3, [pc, #156]	; (8004538 <HAL_RCC_ClockConfig+0x1c0>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d210      	bcs.n	80044c8 <HAL_RCC_ClockConfig+0x150>
 80044a6:	4b24      	ldr	r3, [pc, #144]	; (8004538 <HAL_RCC_ClockConfig+0x1c0>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f023 0207 	bic.w	r2, r3, #7
 80044ae:	4922      	ldr	r1, [pc, #136]	; (8004538 <HAL_RCC_ClockConfig+0x1c0>)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	600b      	str	r3, [r1, #0]
 80044b6:	4b20      	ldr	r3, [pc, #128]	; (8004538 <HAL_RCC_ClockConfig+0x1c0>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0307 	and.w	r3, r3, #7
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d001      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x150>
 80044c4:	2301      	movs	r3, #1
 80044c6:	e032      	b.n	800452e <HAL_RCC_ClockConfig+0x1b6>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d008      	beq.n	80044e6 <HAL_RCC_ClockConfig+0x16e>
 80044d4:	4b19      	ldr	r3, [pc, #100]	; (800453c <HAL_RCC_ClockConfig+0x1c4>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	4916      	ldr	r1, [pc, #88]	; (800453c <HAL_RCC_ClockConfig+0x1c4>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	604b      	str	r3, [r1, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d009      	beq.n	8004506 <HAL_RCC_ClockConfig+0x18e>
 80044f2:	4b12      	ldr	r3, [pc, #72]	; (800453c <HAL_RCC_ClockConfig+0x1c4>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	490e      	ldr	r1, [pc, #56]	; (800453c <HAL_RCC_ClockConfig+0x1c4>)
 8004502:	4313      	orrs	r3, r2
 8004504:	604b      	str	r3, [r1, #4]
 8004506:	f000 f821 	bl	800454c <HAL_RCC_GetSysClockFreq>
 800450a:	4601      	mov	r1, r0
 800450c:	4b0b      	ldr	r3, [pc, #44]	; (800453c <HAL_RCC_ClockConfig+0x1c4>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	091b      	lsrs	r3, r3, #4
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	4a0a      	ldr	r2, [pc, #40]	; (8004540 <HAL_RCC_ClockConfig+0x1c8>)
 8004518:	5cd3      	ldrb	r3, [r2, r3]
 800451a:	fa21 f303 	lsr.w	r3, r1, r3
 800451e:	4a09      	ldr	r2, [pc, #36]	; (8004544 <HAL_RCC_ClockConfig+0x1cc>)
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	4b09      	ldr	r3, [pc, #36]	; (8004548 <HAL_RCC_ClockConfig+0x1d0>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f7fe fa3c 	bl	80029a4 <HAL_InitTick>
 800452c:	2300      	movs	r3, #0
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	40022000 	.word	0x40022000
 800453c:	40021000 	.word	0x40021000
 8004540:	0800e20c 	.word	0x0800e20c
 8004544:	20000298 	.word	0x20000298
 8004548:	200002a4 	.word	0x200002a4

0800454c <HAL_RCC_GetSysClockFreq>:
 800454c:	b490      	push	{r4, r7}
 800454e:	b08a      	sub	sp, #40	; 0x28
 8004550:	af00      	add	r7, sp, #0
 8004552:	4b2a      	ldr	r3, [pc, #168]	; (80045fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004554:	1d3c      	adds	r4, r7, #4
 8004556:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004558:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800455c:	4b28      	ldr	r3, [pc, #160]	; (8004600 <HAL_RCC_GetSysClockFreq+0xb4>)
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	803b      	strh	r3, [r7, #0]
 8004562:	2300      	movs	r3, #0
 8004564:	61fb      	str	r3, [r7, #28]
 8004566:	2300      	movs	r3, #0
 8004568:	61bb      	str	r3, [r7, #24]
 800456a:	2300      	movs	r3, #0
 800456c:	627b      	str	r3, [r7, #36]	; 0x24
 800456e:	2300      	movs	r3, #0
 8004570:	617b      	str	r3, [r7, #20]
 8004572:	2300      	movs	r3, #0
 8004574:	623b      	str	r3, [r7, #32]
 8004576:	4b23      	ldr	r3, [pc, #140]	; (8004604 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	61fb      	str	r3, [r7, #28]
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f003 030c 	and.w	r3, r3, #12
 8004582:	2b04      	cmp	r3, #4
 8004584:	d002      	beq.n	800458c <HAL_RCC_GetSysClockFreq+0x40>
 8004586:	2b08      	cmp	r3, #8
 8004588:	d003      	beq.n	8004592 <HAL_RCC_GetSysClockFreq+0x46>
 800458a:	e02d      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0x9c>
 800458c:	4b1e      	ldr	r3, [pc, #120]	; (8004608 <HAL_RCC_GetSysClockFreq+0xbc>)
 800458e:	623b      	str	r3, [r7, #32]
 8004590:	e02d      	b.n	80045ee <HAL_RCC_GetSysClockFreq+0xa2>
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	0c9b      	lsrs	r3, r3, #18
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800459e:	4413      	add	r3, r2
 80045a0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d013      	beq.n	80045d8 <HAL_RCC_GetSysClockFreq+0x8c>
 80045b0:	4b14      	ldr	r3, [pc, #80]	; (8004604 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	0c5b      	lsrs	r3, r3, #17
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80045be:	4413      	add	r3, r2
 80045c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80045c4:	61bb      	str	r3, [r7, #24]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	4a0f      	ldr	r2, [pc, #60]	; (8004608 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045ca:	fb02 f203 	mul.w	r2, r2, r3
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
 80045d6:	e004      	b.n	80045e2 <HAL_RCC_GetSysClockFreq+0x96>
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	4a0c      	ldr	r2, [pc, #48]	; (800460c <HAL_RCC_GetSysClockFreq+0xc0>)
 80045dc:	fb02 f303 	mul.w	r3, r2, r3
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	623b      	str	r3, [r7, #32]
 80045e6:	e002      	b.n	80045ee <HAL_RCC_GetSysClockFreq+0xa2>
 80045e8:	4b07      	ldr	r3, [pc, #28]	; (8004608 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045ea:	623b      	str	r3, [r7, #32]
 80045ec:	bf00      	nop
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	4618      	mov	r0, r3
 80045f2:	3728      	adds	r7, #40	; 0x28
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bc90      	pop	{r4, r7}
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	08004710 	.word	0x08004710
 8004600:	08004720 	.word	0x08004720
 8004604:	40021000 	.word	0x40021000
 8004608:	007a1200 	.word	0x007a1200
 800460c:	003d0900 	.word	0x003d0900

08004610 <HAL_RCC_GetHCLKFreq>:
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
 8004614:	4b02      	ldr	r3, [pc, #8]	; (8004620 <HAL_RCC_GetHCLKFreq+0x10>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr
 8004620:	20000298 	.word	0x20000298

08004624 <HAL_RCC_GetPCLK1Freq>:
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
 8004628:	f7ff fff2 	bl	8004610 <HAL_RCC_GetHCLKFreq>
 800462c:	4601      	mov	r1, r0
 800462e:	4b05      	ldr	r3, [pc, #20]	; (8004644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	0a1b      	lsrs	r3, r3, #8
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	4a03      	ldr	r2, [pc, #12]	; (8004648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800463a:	5cd3      	ldrb	r3, [r2, r3]
 800463c:	fa21 f303 	lsr.w	r3, r1, r3
 8004640:	4618      	mov	r0, r3
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40021000 	.word	0x40021000
 8004648:	0800e21c 	.word	0x0800e21c

0800464c <RCC_Delay>:
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	4b0a      	ldr	r3, [pc, #40]	; (8004680 <RCC_Delay+0x34>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a0a      	ldr	r2, [pc, #40]	; (8004684 <RCC_Delay+0x38>)
 800465a:	fba2 2303 	umull	r2, r3, r2, r3
 800465e:	0a5b      	lsrs	r3, r3, #9
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	fb02 f303 	mul.w	r3, r2, r3
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	bf00      	nop
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	1e5a      	subs	r2, r3, #1
 800466e:	60fa      	str	r2, [r7, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f9      	bne.n	8004668 <RCC_Delay+0x1c>
 8004674:	bf00      	nop
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	bc80      	pop	{r7}
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	20000298 	.word	0x20000298
 8004684:	10624dd3 	.word	0x10624dd3

08004688 <__libc_init_array>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	2500      	movs	r5, #0
 800468c:	4e0c      	ldr	r6, [pc, #48]	; (80046c0 <__libc_init_array+0x38>)
 800468e:	4c0d      	ldr	r4, [pc, #52]	; (80046c4 <__libc_init_array+0x3c>)
 8004690:	1ba4      	subs	r4, r4, r6
 8004692:	10a4      	asrs	r4, r4, #2
 8004694:	42a5      	cmp	r5, r4
 8004696:	d109      	bne.n	80046ac <__libc_init_array+0x24>
 8004698:	f000 f82e 	bl	80046f8 <_init>
 800469c:	2500      	movs	r5, #0
 800469e:	4e0a      	ldr	r6, [pc, #40]	; (80046c8 <__libc_init_array+0x40>)
 80046a0:	4c0a      	ldr	r4, [pc, #40]	; (80046cc <__libc_init_array+0x44>)
 80046a2:	1ba4      	subs	r4, r4, r6
 80046a4:	10a4      	asrs	r4, r4, #2
 80046a6:	42a5      	cmp	r5, r4
 80046a8:	d105      	bne.n	80046b6 <__libc_init_array+0x2e>
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
 80046ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046b0:	4798      	blx	r3
 80046b2:	3501      	adds	r5, #1
 80046b4:	e7ee      	b.n	8004694 <__libc_init_array+0xc>
 80046b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046ba:	4798      	blx	r3
 80046bc:	3501      	adds	r5, #1
 80046be:	e7f2      	b.n	80046a6 <__libc_init_array+0x1e>
 80046c0:	0800ea84 	.word	0x0800ea84
 80046c4:	0800ea84 	.word	0x0800ea84
 80046c8:	0800ea84 	.word	0x0800ea84
 80046cc:	0800ea8c 	.word	0x0800ea8c

080046d0 <memcpy>:
 80046d0:	b510      	push	{r4, lr}
 80046d2:	1e43      	subs	r3, r0, #1
 80046d4:	440a      	add	r2, r1
 80046d6:	4291      	cmp	r1, r2
 80046d8:	d100      	bne.n	80046dc <memcpy+0xc>
 80046da:	bd10      	pop	{r4, pc}
 80046dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046e4:	e7f7      	b.n	80046d6 <memcpy+0x6>

080046e6 <memset>:
 80046e6:	4603      	mov	r3, r0
 80046e8:	4402      	add	r2, r0
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d100      	bne.n	80046f0 <memset+0xa>
 80046ee:	4770      	bx	lr
 80046f0:	f803 1b01 	strb.w	r1, [r3], #1
 80046f4:	e7f9      	b.n	80046ea <memset+0x4>
	...

080046f8 <_init>:
 80046f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fa:	bf00      	nop
 80046fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fe:	bc08      	pop	{r3}
 8004700:	469e      	mov	lr, r3
 8004702:	4770      	bx	lr

08004704 <_fini>:
 8004704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004706:	bf00      	nop
 8004708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800470a:	bc08      	pop	{r3}
 800470c:	469e      	mov	lr, r3
 800470e:	4770      	bx	lr
