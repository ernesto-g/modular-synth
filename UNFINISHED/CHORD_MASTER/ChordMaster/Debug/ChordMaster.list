
ChordMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a574  080046d4  080046d4  000146d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec48  0800ec48  000202ac  2**0
                  CONTENTS
  4 .ARM          00000000  0800ec48  0800ec48  000202ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ec48  0800ec48  000202ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ec48  0800ec48  0001ec48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec50  0800ec50  0001ec50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ac  20000000  0800ec54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004554  200002ac  0800ef00  000202ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004800  0800ef00  00024800  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   000268f4  00000000  00000000  000202d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004c70  00000000  00000000  00046bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000106a5  00000000  00000000  0004b839  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000c00  00000000  00000000  0005bee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000039d0  00000000  00000000  0005cae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000187a4  00000000  00000000  000604b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000eb42  00000000  00000000  00078c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0007924b  00000000  00000000  00087796  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001009e1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b28  00000000  00000000  00100a5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002ac 	.word	0x200002ac
 8000128:	00000000 	.word	0x00000000
 800012c:	080046bc 	.word	0x080046bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002b0 	.word	0x200002b0
 8000148:	080046bc 	.word	0x080046bc

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <_ZN6braids16AnalogOscillator21ComputePhaseIncrementEs>:
 8000160:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000164:	4299      	cmp	r1, r3
 8000166:	bfa8      	it	ge
 8000168:	4619      	movge	r1, r3
 800016a:	2000      	movs	r0, #0
 800016c:	b510      	push	{r4, lr}
 800016e:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
 8000172:	f511 61c0 	adds.w	r1, r1, #1536	; 0x600
 8000176:	f100 0001 	add.w	r0, r0, #1
 800017a:	d4fa      	bmi.n	8000172 <_ZN6braids16AnalogOscillator21ComputePhaseIncrementEs+0x12>
 800017c:	4c07      	ldr	r4, [pc, #28]	; (800019c <_ZN6braids16AnalogOscillator21ComputePhaseIncrementEs+0x3c>)
 800017e:	110a      	asrs	r2, r1, #4
 8000180:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 8000184:	3201      	adds	r2, #1
 8000186:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800018a:	f001 010f 	and.w	r1, r1, #15
 800018e:	1ad2      	subs	r2, r2, r3
 8000190:	4351      	muls	r1, r2
 8000192:	eb03 1121 	add.w	r1, r3, r1, asr #4
 8000196:	fa21 f000 	lsr.w	r0, r1, r0
 800019a:	bd10      	pop	{r4, pc}
 800019c:	08005118 	.word	0x08005118

080001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>:
 80001a0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001a4:	4604      	mov	r4, r0
 80001a6:	469a      	mov	sl, r3
 80001a8:	7f00      	ldrb	r0, [r0, #28]
 80001aa:	4b20      	ldr	r3, [pc, #128]	; (800022c <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x8c>)
 80001ac:	4691      	mov	r9, r2
 80001ae:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]
 80001b2:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 80001b6:	7f63      	ldrb	r3, [r4, #29]
 80001b8:	4688      	mov	r8, r1
 80001ba:	4283      	cmp	r3, r0
 80001bc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80001c0:	6857      	ldr	r7, [r2, #4]
 80001c2:	d00f      	beq.n	80001e4 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x44>
 80001c4:	2100      	movs	r1, #0
 80001c6:	2301      	movs	r3, #1
 80001c8:	e9c4 1300 	strd	r1, r3, [r4]
 80001cc:	f24c 0301 	movw	r3, #49153	; 0xc001
 80001d0:	82a3      	strh	r3, [r4, #20]
 80001d2:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80001d6:	7321      	strb	r1, [r4, #12]
 80001d8:	8221      	strh	r1, [r4, #16]
 80001da:	81e1      	strh	r1, [r4, #14]
 80001dc:	8261      	strh	r1, [r4, #18]
 80001de:	82e3      	strh	r3, [r4, #22]
 80001e0:	61a1      	str	r1, [r4, #24]
 80001e2:	7760      	strb	r0, [r4, #29]
 80001e4:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 80001e8:	4620      	mov	r0, r4
 80001ea:	4631      	mov	r1, r6
 80001ec:	f7ff ffb8 	bl	8000160 <_ZN6braids16AnalogOscillator21ComputePhaseIncrementEs>
 80001f0:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
 80001f4:	6060      	str	r0, [r4, #4]
 80001f6:	dd14      	ble.n	8000222 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x82>
 80001f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80001fc:	82e3      	strh	r3, [r4, #22]
 80001fe:	107b      	asrs	r3, r7, #1
 8000200:	07fa      	lsls	r2, r7, #31
 8000202:	eb04 0003 	add.w	r0, r4, r3
 8000206:	bf48      	it	mi
 8000208:	58e3      	ldrmi	r3, [r4, r3]
 800020a:	464a      	mov	r2, r9
 800020c:	bf48      	it	mi
 800020e:	595d      	ldrmi	r5, [r3, r5]
 8000210:	4641      	mov	r1, r8
 8000212:	4653      	mov	r3, sl
 8000214:	46ac      	mov	ip, r5
 8000216:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800021a:	b001      	add	sp, #4
 800021c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000220:	4760      	bx	ip
 8000222:	2e00      	cmp	r6, #0
 8000224:	daeb      	bge.n	80001fe <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x5e>
 8000226:	2300      	movs	r3, #0
 8000228:	e7e8      	b.n	80001fc <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x5c>
 800022a:	bf00      	nop
 800022c:	200002c8 	.word	0x200002c8

08000230 <_ZN6braids3Svf4InitEv>:
  ~Svf() { }
  
  void Init() {
    lp_ = 0;
    bp_ = 0;
    frequency_ = 33 << 7;
 8000230:	f44f 5284 	mov.w	r2, #4224	; 0x1080
 8000234:	8042      	strh	r2, [r0, #2]
    resonance_ = 16384;
 8000236:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    lp_ = 0;
 800023a:	2300      	movs	r3, #0
    resonance_ = 16384;
 800023c:	8082      	strh	r2, [r0, #4]
    dirty_ = true;
 800023e:	2201      	movs	r2, #1
    bp_ = 0;
 8000240:	e9c0 3305 	strd	r3, r3, [r0, #20]
    dirty_ = true;
 8000244:	7002      	strb	r2, [r0, #0]
    punch_ = 0;
 8000246:	6083      	str	r3, [r0, #8]
    mode_ = SVF_MODE_BP;
 8000248:	7702      	strb	r2, [r0, #28]
  }
 800024a:	4770      	bx	lr

0800024c <_ZN6stmlib6Random7GetWordEv>:
  static inline void Seed(uint32_t seed) {
    rng_state_ = seed;
  }

  static inline uint32_t GetWord() {
    rng_state_ = rng_state_ * 1664525L + 1013904223L;
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <_ZN6stmlib6Random7GetWordEv+0x10>)
 800024e:	4904      	ldr	r1, [pc, #16]	; (8000260 <_ZN6stmlib6Random7GetWordEv+0x14>)
 8000250:	6818      	ldr	r0, [r3, #0]
 8000252:	4a04      	ldr	r2, [pc, #16]	; (8000264 <_ZN6stmlib6Random7GetWordEv+0x18>)
 8000254:	fb01 2000 	mla	r0, r1, r0, r2
 8000258:	6018      	str	r0, [r3, #0]
    return state();
  }
 800025a:	4770      	bx	lr
 800025c:	200002a0 	.word	0x200002a0
 8000260:	0019660d 	.word	0x0019660d
 8000264:	3c6ef35f 	.word	0x3c6ef35f

08000268 <_ZN6stmlib6Random9GetSampleEv>:
  
  static inline int16_t GetSample() {
 8000268:	b508      	push	{r3, lr}
    return static_cast<int16_t>(GetWord() >> 16);
 800026a:	f7ff ffef 	bl	800024c <_ZN6stmlib6Random7GetWordEv>
  }
 800026e:	1400      	asrs	r0, r0, #16
 8000270:	bd08      	pop	{r3, pc}
	...

08000274 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj>:
}

void DigitalOscillator::RenderQuestionMark(
    const uint8_t* sync,
    int16_t* buffer,
    size_t size) {
 8000274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000278:	4690      	mov	r8, r2
  ClockedNoiseState* state = &state_.clk;
  
  if (strike_) {
 800027a:	7f02      	ldrb	r2, [r0, #28]
    size_t size) {
 800027c:	4604      	mov	r4, r0
 800027e:	4699      	mov	r9, r3
  if (strike_) {
 8000280:	b15a      	cbz	r2, 800029a <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x26>
    state->rng_state = 0;
    state->cycle_phase = 0;
    state->sample = 10;
 8000282:	210a      	movs	r1, #10
 8000284:	8601      	strh	r1, [r0, #48]	; 0x30
    state->cycle_phase_increment = -1;
 8000286:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    state->rng_state = 0;
 800028a:	2200      	movs	r2, #0
    state->cycle_phase_increment = -1;
 800028c:	6241      	str	r1, [r0, #36]	; 0x24
    state->seed = 32767;
 800028e:	f647 71ff 	movw	r1, #32767	; 0x7fff
    state->rng_state = 0;
 8000292:	6282      	str	r2, [r0, #40]	; 0x28
    state->cycle_phase = 0;
 8000294:	6202      	str	r2, [r0, #32]
    state->seed = 32767;
 8000296:	62c1      	str	r1, [r0, #44]	; 0x2c
    strike_ = false;
 8000298:	7702      	strb	r2, [r0, #28]
  }
  
  uint32_t phase = phase_;
  uint32_t increment = phase_increment_;
  uint32_t dit_duration = 3600 + ((32767 - parameter_[0]) >> 2);
 800029a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
  int32_t noise_threshold = 1024 + (parameter_[1] >> 3);
 800029e:	f9b4 700e 	ldrsh.w	r7, [r4, #14]
  uint32_t dit_duration = 3600 + ((32767 - parameter_[0]) >> 2);
 80002a2:	f5c6 46ff 	rsb	r6, r6, #32640	; 0x7f80
 80002a6:	367f      	adds	r6, #127	; 0x7f
 80002a8:	10b6      	asrs	r6, r6, #2
  int32_t noise_threshold = 1024 + (parameter_[1] >> 3);
 80002aa:	10ff      	asrs	r7, r7, #3
 80002ac:	f8df a138 	ldr.w	sl, [pc, #312]	; 80003e8 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x174>
  uint32_t increment = phase_increment_;
 80002b0:	e9d4 b300 	ldrd	fp, r3, [r4]
  uint32_t dit_duration = 3600 + ((32767 - parameter_[0]) >> 2);
 80002b4:	f506 6661 	add.w	r6, r6, #3600	; 0xe10
  uint32_t increment = phase_increment_;
 80002b8:	9300      	str	r3, [sp, #0]
  int32_t noise_threshold = 1024 + (parameter_[1] >> 3);
 80002ba:	f507 6780 	add.w	r7, r7, #1024	; 0x400
  while (size--) {
 80002be:	f119 39ff 	adds.w	r9, r9, #4294967295	; 0xffffffff
 80002c2:	f0c0 8085 	bcc.w	80003d0 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x15c>
    phase += increment;
 80002c6:	9b00      	ldr	r3, [sp, #0]
    int32_t sample;
    if (state->rng_state) {
 80002c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    phase += increment;
 80002ca:	449b      	add	fp, r3
    if (state->rng_state) {
 80002cc:	2800      	cmp	r0, #0
 80002ce:	d07b      	beq.n	80003c8 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x154>
  return (a * (65535 - balance) + b * balance) >> 16;
}

inline int16_t Interpolate824(const int16_t* table, uint32_t phase) {
  int32_t a = table[phase >> 24];
  int32_t b = table[(phase >> 24) + 1];
 80002d0:	4b42      	ldr	r3, [pc, #264]	; (80003dc <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x168>)
  int32_t a = table[phase >> 24];
 80002d2:	ea4f 621b 	mov.w	r2, fp, lsr #24
 80002d6:	f93a 5012 	ldrsh.w	r5, [sl, r2, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 80002da:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 80002de:	eba2 0c05 	sub.w	ip, r2, r5
 80002e2:	f3cb 220f 	ubfx	r2, fp, #8, #16
 80002e6:	fb02 f20c 	mul.w	r2, r2, ip
 80002ea:	eb05 4522 	add.w	r5, r5, r2, asr #16
      sample = (Interpolate824(wav_sine, phase) * 3) >> 2;
 80002ee:	b22d      	sxth	r5, r5
 80002f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80002f4:	10ad      	asrs	r5, r5, #2
    } else {
      sample = 0;
    }
    if (++state->cycle_phase > dit_duration) {
 80002f6:	6a22      	ldr	r2, [r4, #32]
 80002f8:	3201      	adds	r2, #1
 80002fa:	42b2      	cmp	r2, r6
 80002fc:	6222      	str	r2, [r4, #32]
 80002fe:	d92a      	bls.n	8000356 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0xe2>
      --state->sample;
 8000300:	f8b4 c030 	ldrh.w	ip, [r4, #48]	; 0x30
 8000304:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8000308:	fa0f f38c 	sxth.w	r3, ip
 800030c:	8623      	strh	r3, [r4, #48]	; 0x30
      if (state->sample == 0) {
 800030e:	bb03      	cbnz	r3, 8000352 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0xde>
        ++state->cycle_phase_increment;
        state->rng_state = !state->rng_state;
 8000310:	fab0 f080 	clz	r0, r0
        ++state->cycle_phase_increment;
 8000314:	6a62      	ldr	r2, [r4, #36]	; 0x24
        state->rng_state = !state->rng_state;
 8000316:	0940      	lsrs	r0, r0, #5
        ++state->cycle_phase_increment;
 8000318:	3201      	adds	r2, #1

        size_t address = state->cycle_phase_increment >> 2;
        size_t shift = (state->cycle_phase_increment & 0x3) << 1;
        state->sample = (2 << ((wt_code[address] >> shift) & 3)) - 1;
 800031a:	4931      	ldr	r1, [pc, #196]	; (80003e0 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x16c>)
        ++state->cycle_phase_increment;
 800031c:	6262      	str	r2, [r4, #36]	; 0x24
        state->rng_state = !state->rng_state;
 800031e:	62a0      	str	r0, [r4, #40]	; 0x28
        size_t address = state->cycle_phase_increment >> 2;
 8000320:	0890      	lsrs	r0, r2, #2
        state->sample = (2 << ((wt_code[address] >> shift) & 3)) - 1;
 8000322:	5c08      	ldrb	r0, [r1, r0]
        size_t shift = (state->cycle_phase_increment & 0x3) << 1;
 8000324:	0052      	lsls	r2, r2, #1
 8000326:	f002 0206 	and.w	r2, r2, #6
        state->sample = (2 << ((wt_code[address] >> shift) & 3)) - 1;
 800032a:	fa40 f202 	asr.w	r2, r0, r2
 800032e:	f002 0003 	and.w	r0, r2, #3
 8000332:	2202      	movs	r2, #2
 8000334:	4082      	lsls	r2, r0
 8000336:	3a01      	subs	r2, #1
 8000338:	b292      	uxth	r2, r2
        if (state->sample == 15) {
 800033a:	2a0f      	cmp	r2, #15
          state->sample = 100;
 800033c:	bf02      	ittt	eq
 800033e:	2264      	moveq	r2, #100	; 0x64
 8000340:	8622      	strheq	r2, [r4, #48]	; 0x30
          state->rng_state = 0;
          state->cycle_phase_increment = - 1;
 8000342:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
        }
        phase = 1L << 30;
 8000346:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
        state->sample = (2 << ((wt_code[address] >> shift) & 3)) - 1;
 800034a:	bf12      	itee	ne
 800034c:	8622      	strhne	r2, [r4, #48]	; 0x30
          state->rng_state = 0;
 800034e:	62a3      	streq	r3, [r4, #40]	; 0x28
          state->cycle_phase_increment = - 1;
 8000350:	6262      	streq	r2, [r4, #36]	; 0x24
      }
      state->cycle_phase = 0;
 8000352:	2200      	movs	r2, #0
 8000354:	6222      	str	r2, [r4, #32]
    }
    state->seed += Random::GetSample() >> 2;
 8000356:	f7ff ff87 	bl	8000268 <_ZN6stmlib6Random9GetSampleEv>
 800035a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800035c:	eb02 02a0 	add.w	r2, r2, r0, asr #2
 8000360:	62e2      	str	r2, [r4, #44]	; 0x2c
    int32_t noise_intensity = state->seed >> 8;
 8000362:	1212      	asrs	r2, r2, #8
 8000364:	2a00      	cmp	r2, #0
 8000366:	bfb8      	it	lt
 8000368:	4252      	neglt	r2, r2
    if (noise_intensity < 0) {
      noise_intensity = -noise_intensity;
    }
    if (noise_intensity < noise_threshold) {
 800036a:	4297      	cmp	r7, r2
 800036c:	dc2e      	bgt.n	80003cc <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x158>
 800036e:	f5b2 5f7a 	cmp.w	r2, #16000	; 0x3e80
 8000372:	bfa8      	it	ge
 8000374:	f44f 527a 	movge.w	r2, #16000	; 0x3e80
 8000378:	9201      	str	r2, [sp, #4]
      noise_intensity = noise_threshold;
    }
    if (noise_intensity > 16000) {
      noise_intensity = 16000;
    }
    int32_t noise = (Random::GetSample() * noise_intensity >> 15);
 800037a:	f7ff ff75 	bl	8000268 <_ZN6stmlib6Random9GetSampleEv>
 800037e:	f647 7eff 	movw	lr, #32767	; 0x7fff
 8000382:	9a01      	ldr	r2, [sp, #4]
    noise = noise * wav_sine[(phase >> 22) & 0xff] >> 15;
 8000384:	f3cb 5c87 	ubfx	ip, fp, #22, #8
    int32_t noise = (Random::GetSample() * noise_intensity >> 15);
 8000388:	4342      	muls	r2, r0
    noise = noise * wav_sine[(phase >> 22) & 0xff] >> 15;
 800038a:	f93a c01c 	ldrsh.w	ip, [sl, ip, lsl #1]
    int32_t noise = (Random::GetSample() * noise_intensity >> 15);
 800038e:	13d2      	asrs	r2, r2, #15
    noise = noise * wav_sine[(phase >> 22) & 0xff] >> 15;
 8000390:	fb02 f20c 	mul.w	r2, r2, ip
    sample += noise;
 8000394:	eb05 35e2 	add.w	r5, r5, r2, asr #15
 8000398:	4575      	cmp	r5, lr
 800039a:	bfa8      	it	ge
 800039c:	4675      	movge	r5, lr
 800039e:	4911      	ldr	r1, [pc, #68]	; (80003e4 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x170>)
    CLIP(sample);
    int32_t distorted = sample * sample >> 14;
    sample += distorted * parameter_[1] >> 15;
 80003a0:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 80003a4:	428d      	cmp	r5, r1
 80003a6:	bfb8      	it	lt
 80003a8:	460d      	movlt	r5, r1
    int32_t distorted = sample * sample >> 14;
 80003aa:	fb05 f005 	mul.w	r0, r5, r5
 80003ae:	1380      	asrs	r0, r0, #14
    sample += distorted * parameter_[1] >> 15;
 80003b0:	4342      	muls	r2, r0
 80003b2:	eb05 35e2 	add.w	r5, r5, r2, asr #15
 80003b6:	4575      	cmp	r5, lr
 80003b8:	bfa8      	it	ge
 80003ba:	4675      	movge	r5, lr
    CLIP(sample);
    *buffer++ = sample;
 80003bc:	428d      	cmp	r5, r1
 80003be:	bfb8      	it	lt
 80003c0:	460d      	movlt	r5, r1
 80003c2:	f828 5b02 	strh.w	r5, [r8], #2
  while (size--) {
 80003c6:	e77a      	b.n	80002be <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x4a>
      sample = 0;
 80003c8:	4605      	mov	r5, r0
 80003ca:	e794      	b.n	80002f6 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x82>
 80003cc:	463a      	mov	r2, r7
 80003ce:	e7d3      	b.n	8000378 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x104>
  }
  phase_ = phase;
 80003d0:	f8c4 b000 	str.w	fp, [r4]
}
 80003d4:	b003      	add	sp, #12
 80003d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003da:	bf00      	nop
 80003dc:	080059ca 	.word	0x080059ca
 80003e0:	080055a0 	.word	0x080055a0
 80003e4:	ffff8001 	.word	0xffff8001
 80003e8:	080059c8 	.word	0x080059c8

080003ec <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>:
  int32_t ref_pitch = midi_pitch;
 80003ec:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80003f0:	4299      	cmp	r1, r3
 80003f2:	bfa8      	it	ge
 80003f4:	4619      	movge	r1, r3
  size_t num_shifts = 0;
 80003f6:	2000      	movs	r0, #0
uint32_t DigitalOscillator::ComputePhaseIncrement(int16_t midi_pitch) {
 80003f8:	b510      	push	{r4, lr}
  ref_pitch -= kPitchTableStart;
 80003fa:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
  while (ref_pitch < 0) {
 80003fe:	f511 61c0 	adds.w	r1, r1, #1536	; 0x600
    ++num_shifts;
 8000402:	f100 0001 	add.w	r0, r0, #1
  while (ref_pitch < 0) {
 8000406:	d4fa      	bmi.n	80003fe <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs+0x12>
  uint32_t a = lut_oscillator_increments[ref_pitch >> 4];
 8000408:	4c07      	ldr	r4, [pc, #28]	; (8000428 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs+0x3c>)
 800040a:	110a      	asrs	r2, r1, #4
 800040c:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
  uint32_t b = lut_oscillator_increments[(ref_pitch >> 4) + 1];
 8000410:	3201      	adds	r2, #1
      (static_cast<int32_t>(b - a) * (ref_pitch & 0xf) >> 4);
 8000412:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8000416:	f001 010f 	and.w	r1, r1, #15
 800041a:	1ad2      	subs	r2, r2, r3
 800041c:	4351      	muls	r1, r2
  uint32_t phase_increment = a + \
 800041e:	eb03 1121 	add.w	r1, r3, r1, asr #4
}
 8000422:	fa21 f000 	lsr.w	r0, r1, r0
 8000426:	bd10      	pop	{r4, pc}
 8000428:	08005118 	.word	0x08005118

0800042c <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj>:
    size_t size) {
 800042c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000430:	b08f      	sub	sp, #60	; 0x3c
 8000432:	9304      	str	r3, [sp, #16]
  if (strike_) {
 8000434:	7f03      	ldrb	r3, [r0, #28]
    size_t size) {
 8000436:	4604      	mov	r4, r0
 8000438:	4615      	mov	r5, r2
  if (strike_) {
 800043a:	b15b      	cbz	r3, 8000454 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0x28>
 800043c:	f100 0620 	add.w	r6, r0, #32
 8000440:	f100 0730 	add.w	r7, r0, #48	; 0x30
      state_.saw.phase[i] = Random::GetWord();
 8000444:	f7ff ff02 	bl	800024c <_ZN6stmlib6Random7GetWordEv>
 8000448:	f846 0b04 	str.w	r0, [r6], #4
    for (size_t i = 0; i < 4; ++i) {
 800044c:	42b7      	cmp	r7, r6
 800044e:	d1f9      	bne.n	8000444 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0x18>
    strike_ = false;
 8000450:	2300      	movs	r3, #0
 8000452:	7723      	strb	r3, [r4, #28]
  for (size_t i = 0; i < 3; ++i) {
 8000454:	f04f 0800 	mov.w	r8, #0
  phase_1 = state_.saw.phase[1];
 8000458:	e9d4 6708 	ldrd	r6, r7, [r4, #32]
  phase_increment_0 = phase_increment_;
 800045c:	6863      	ldr	r3, [r4, #4]
    phase_increment[i] = ComputePhaseIncrement(pitch_ + detune);
 800045e:	f8b4 b018 	ldrh.w	fp, [r4, #24]
  phase_increment_0 = phase_increment_;
 8000462:	9308      	str	r3, [sp, #32]
  phase_2 = state_.saw.phase[2];
 8000464:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000466:	f504 79ca 	add.w	r9, r4, #404	; 0x194
 800046a:	9301      	str	r3, [sp, #4]
  phase_3 = state_.saw.phase[3];
 800046c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    phase_increment[i] = ComputePhaseIncrement(pitch_ + detune);
 800046e:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
  phase_3 = state_.saw.phase[3];
 8000472:	9300      	str	r3, [sp, #0]
    uint16_t detune = chordsIntervals[i]; //chords[chord_integral][i];
 8000474:	f939 1b02 	ldrsh.w	r1, [r9], #2
    phase_increment[i] = ComputePhaseIncrement(pitch_ + detune);
 8000478:	4620      	mov	r0, r4
 800047a:	4459      	add	r1, fp
 800047c:	b209      	sxth	r1, r1
 800047e:	f7ff ffb5 	bl	80003ec <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
 8000482:	f84a 0028 	str.w	r0, [sl, r8, lsl #2]
  for (size_t i = 0; i < 3; ++i) {
 8000486:	f108 0801 	add.w	r8, r8, #1
 800048a:	f1b8 0f03 	cmp.w	r8, #3
 800048e:	d1f1      	bne.n	8000474 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0x48>
  const uint8_t* wave_1 = wt_waves + mini_wave_line[parameter_[0] >> 10] * 129;
 8000490:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8000494:	48d3      	ldr	r0, [pc, #844]	; (80007e4 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0x3b8>)
 8000496:	128b      	asrs	r3, r1, #10
  uint16_t wave_xfade = parameter_[0] << 6;
 8000498:	0189      	lsls	r1, r1, #6
 800049a:	fa1f fb81 	uxth.w	fp, r1
    phase_1 += phase_increment[0];
 800049e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  const uint8_t* wave_1 = wt_waves + mini_wave_line[parameter_[0] >> 10] * 129;
 80004a0:	5cc2      	ldrb	r2, [r0, r3]
    phase_1 += phase_increment[0];
 80004a2:	9105      	str	r1, [sp, #20]
  const uint8_t* wave_2 = wt_waves + mini_wave_line[(parameter_[0] >> 10) + 1] * 129;
 80004a4:	4418      	add	r0, r3
    phase_2 += phase_increment[1];
 80004a6:	990c      	ldr	r1, [sp, #48]	; 0x30
  const uint8_t* wave_2 = wt_waves + mini_wave_line[(parameter_[0] >> 10) + 1] * 129;
 80004a8:	7843      	ldrb	r3, [r0, #1]
  const uint8_t* wave_1 = wt_waves + mini_wave_line[parameter_[0] >> 10] * 129;
 80004aa:	f8df c33c 	ldr.w	ip, [pc, #828]	; 80007e8 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0x3bc>
    phase_2 += phase_increment[1];
 80004ae:	9106      	str	r1, [sp, #24]
    phase_3 += phase_increment[2];
 80004b0:	990d      	ldr	r1, [sp, #52]	; 0x34
  const uint8_t* wave_1 = wt_waves + mini_wave_line[parameter_[0] >> 10] * 129;
 80004b2:	eb02 12c2 	add.w	r2, r2, r2, lsl #7
  const uint8_t* wave_2 = wt_waves + mini_wave_line[(parameter_[0] >> 10) + 1] * 129;
 80004b6:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
  const uint8_t* wave_1 = wt_waves + mini_wave_line[parameter_[0] >> 10] * 129;
 80004ba:	4462      	add	r2, ip
  const uint8_t* wave_2 = wt_waves + mini_wave_line[(parameter_[0] >> 10) + 1] * 129;
 80004bc:	4463      	add	r3, ip
    phase_3 += phase_increment[2];
 80004be:	9107      	str	r1, [sp, #28]
 80004c0:	9502      	str	r5, [sp, #8]
 80004c2:	9902      	ldr	r1, [sp, #8]
 80004c4:	3104      	adds	r1, #4
 80004c6:	9102      	str	r1, [sp, #8]
  while (size) {
 80004c8:	9904      	ldr	r1, [sp, #16]
 80004ca:	2900      	cmp	r1, #0
 80004cc:	f000 8181 	beq.w	80007d2 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0x3a6>
    phase_0 += phase_increment_0;
 80004d0:	9908      	ldr	r1, [sp, #32]
 80004d2:	9806      	ldr	r0, [sp, #24]
 80004d4:	440e      	add	r6, r1
 80004d6:	9905      	ldr	r1, [sp, #20]
  uint32_t b = table[(phase >> 24) + 1];
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
}

inline int16_t Interpolate824(const uint8_t* table, uint32_t phase) {
  int32_t a = table[phase >> 24];
 80004d8:	0e75      	lsrs	r5, r6, #25
 80004da:	4439      	add	r1, r7
 80004dc:	9103      	str	r1, [sp, #12]
 80004de:	9901      	ldr	r1, [sp, #4]
  int32_t b = table[(phase >> 24) + 1];
  return (a << 8) + \
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80004e0:	f3c6 0957 	ubfx	r9, r6, #1, #24
 80004e4:	4401      	add	r1, r0
 80004e6:	9101      	str	r1, [sp, #4]
 80004e8:	9807      	ldr	r0, [sp, #28]
 80004ea:	9900      	ldr	r1, [sp, #0]
 80004ec:	4401      	add	r1, r0
 80004ee:	468a      	mov	sl, r1
  int32_t b = table[(phase >> 24) + 1];
 80004f0:	1c69      	adds	r1, r5, #1
  int32_t a = table[phase >> 24];
 80004f2:	5d50      	ldrb	r0, [r2, r5]
  int32_t b = table[(phase >> 24) + 1];
 80004f4:	5c57      	ldrb	r7, [r2, r1]
 80004f6:	9109      	str	r1, [sp, #36]	; 0x24
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80004f8:	1a3f      	subs	r7, r7, r0
 80004fa:	fb09 f707 	mul.w	r7, r9, r7
  return (a << 8) + \
 80004fe:	0201      	lsls	r1, r0, #8
  int32_t a = table[phase >> 24];
 8000500:	9803      	ldr	r0, [sp, #12]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000502:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
  int32_t a = table[phase >> 24];
 8000506:	ea4f 6c50 	mov.w	ip, r0, lsr #25
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800050a:	eb01 4127 	add.w	r1, r1, r7, asr #16
 800050e:	9f03      	ldr	r7, [sp, #12]
  int32_t b = table[(phase >> 24) + 1];
 8000510:	f10c 0801 	add.w	r8, ip, #1
  int32_t a = table[phase >> 24];
 8000514:	f812 000c 	ldrb.w	r0, [r2, ip]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000518:	f3c7 0e57 	ubfx	lr, r7, #1, #24
  int32_t b = table[(phase >> 24) + 1];
 800051c:	f812 7008 	ldrb.w	r7, [r2, r8]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000520:	b289      	uxth	r1, r1
 8000522:	1a3f      	subs	r7, r7, r0
 8000524:	fb0e f707 	mul.w	r7, lr, r7
 8000528:	9100      	str	r1, [sp, #0]
  return (a << 8) + \
 800052a:	0200      	lsls	r0, r0, #8
  int32_t b = table[(phase >> 24) + 1];
 800052c:	9909      	ldr	r1, [sp, #36]	; 0x24
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800052e:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
  int32_t a = table[phase >> 24];
 8000532:	5d5d      	ldrb	r5, [r3, r5]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000534:	eb00 4727 	add.w	r7, r0, r7, asr #16
  int32_t a = table[phase >> 24];
 8000538:	f813 000c 	ldrb.w	r0, [r3, ip]
  int32_t b = table[(phase >> 24) + 1];
 800053c:	f813 c001 	ldrb.w	ip, [r3, r1]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000540:	b2bf      	uxth	r7, r7
 8000542:	ebac 0c05 	sub.w	ip, ip, r5
 8000546:	fb09 f90c 	mul.w	r9, r9, ip
  return (a << 8) + \
 800054a:	022d      	lsls	r5, r5, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800054c:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
 8000550:	eb05 4929 	add.w	r9, r5, r9, asr #16
  int32_t b = table[(phase >> 24) + 1];
 8000554:	f813 5008 	ldrb.w	r5, [r3, r8]
inline int16_t Crossfade(
    const uint8_t* table_a,
    const uint8_t* table_b,
    uint32_t phase,
    uint16_t balance) {
  int32_t a = Interpolate824(table_a, phase);
 8000558:	f9bd c000 	ldrsh.w	ip, [sp]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800055c:	1a2d      	subs	r5, r5, r0
 800055e:	fb0e fe05 	mul.w	lr, lr, r5
  return (a << 8) + \
 8000562:	0200      	lsls	r0, r0, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000564:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 8000568:	eb00 4e2e 	add.w	lr, r0, lr, asr #16
  int32_t a = Interpolate824(table_a, phase);
 800056c:	b23d      	sxth	r5, r7
  int32_t b = Interpolate824(table_b, phase);
 800056e:	fa0f fe8e 	sxth.w	lr, lr
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 8000572:	ebae 0e05 	sub.w	lr, lr, r5
  int32_t a = table[phase >> 24];
 8000576:	9801      	ldr	r0, [sp, #4]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 8000578:	fb0b fe0e 	mul.w	lr, fp, lr
  int32_t b = Interpolate824(table_b, phase);
 800057c:	fa0f f989 	sxth.w	r9, r9
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000580:	9d01      	ldr	r5, [sp, #4]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 8000582:	eba9 090c 	sub.w	r9, r9, ip
  int32_t a = table[phase >> 24];
 8000586:	ea4f 6c50 	mov.w	ip, r0, lsr #25
  int32_t b = table[(phase >> 24) + 1];
 800058a:	f10c 0801 	add.w	r8, ip, #1
  int32_t a = table[phase >> 24];
 800058e:	f812 000c 	ldrb.w	r0, [r2, ip]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 8000592:	eb07 472e 	add.w	r7, r7, lr, asr #16
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000596:	f3c5 0e57 	ubfx	lr, r5, #1, #24
  int32_t b = table[(phase >> 24) + 1];
 800059a:	f812 5008 	ldrb.w	r5, [r2, r8]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 800059e:	fb0b f909 	mul.w	r9, fp, r9
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80005a2:	1a2d      	subs	r5, r5, r0
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 80005a4:	9900      	ldr	r1, [sp, #0]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80005a6:	fb0e f505 	mul.w	r5, lr, r5
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 80005aa:	eb01 4129 	add.w	r1, r1, r9, asr #16
  return (a << 8) + \
 80005ae:	0200      	lsls	r0, r0, #8
    sample += Crossfade(wave_1, wave_2, phase_1 >> 1, wave_xfade);
 80005b0:	b23f      	sxth	r7, r7
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80005b2:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
    sample += Crossfade(wave_1, wave_2, phase_0 >> 1, wave_xfade);
 80005b6:	b209      	sxth	r1, r1
    sample += Crossfade(wave_1, wave_2, phase_1 >> 1, wave_xfade);
 80005b8:	4439      	add	r1, r7
 80005ba:	eb00 4525 	add.w	r5, r0, r5, asr #16
  int32_t b = table[(phase >> 24) + 1];
 80005be:	f813 7008 	ldrb.w	r7, [r3, r8]
  int32_t a = table[phase >> 24];
 80005c2:	f813 000c 	ldrb.w	r0, [r3, ip]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80005c6:	b2ad      	uxth	r5, r5
 80005c8:	1a3f      	subs	r7, r7, r0
 80005ca:	fb0e fe07 	mul.w	lr, lr, r7
  return (a << 8) + \
 80005ce:	0200      	lsls	r0, r0, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80005d0:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 80005d4:	eb00 4e2e 	add.w	lr, r0, lr, asr #16
  int32_t b = Interpolate824(table_b, phase);
 80005d8:	fa0f fe8e 	sxth.w	lr, lr
  int32_t a = Interpolate824(table_a, phase);
 80005dc:	b22f      	sxth	r7, r5
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 80005de:	ebae 0707 	sub.w	r7, lr, r7
 80005e2:	fb0b f707 	mul.w	r7, fp, r7
 80005e6:	eb05 4727 	add.w	r7, r5, r7, asr #16
  int32_t a = table[phase >> 24];
 80005ea:	ea4f 655a 	mov.w	r5, sl, lsr #25
  int32_t b = table[(phase >> 24) + 1];
 80005ee:	f105 0e01 	add.w	lr, r5, #1
    sample += Crossfade(wave_1, wave_2, phase_2 >> 1, wave_xfade);
 80005f2:	b23f      	sxth	r7, r7
 80005f4:	440f      	add	r7, r1
 80005f6:	f812 000e 	ldrb.w	r0, [r2, lr]
  int32_t a = table[phase >> 24];
 80005fa:	5d51      	ldrb	r1, [r2, r5]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80005fc:	f3ca 0c57 	ubfx	ip, sl, #1, #24
 8000600:	1a40      	subs	r0, r0, r1
 8000602:	fb0c f000 	mul.w	r0, ip, r0
  return (a << 8) + \
 8000606:	0209      	lsls	r1, r1, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000608:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 800060c:	eb01 4020 	add.w	r0, r1, r0, asr #16
  int32_t a = table[phase >> 24];
 8000610:	5d59      	ldrb	r1, [r3, r5]
  int32_t b = table[(phase >> 24) + 1];
 8000612:	f813 500e 	ldrb.w	r5, [r3, lr]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000616:	b280      	uxth	r0, r0
 8000618:	1a6d      	subs	r5, r5, r1
 800061a:	fb0c fc05 	mul.w	ip, ip, r5
  return (a << 8) + \
 800061e:	0209      	lsls	r1, r1, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000620:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8000624:	eb01 4c2c 	add.w	ip, r1, ip, asr #16
  int32_t a = Interpolate824(table_a, phase);
 8000628:	b205      	sxth	r5, r0
  int32_t b = Interpolate824(table_b, phase);
 800062a:	fa0f fc8c 	sxth.w	ip, ip
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 800062e:	ebac 0c05 	sub.w	ip, ip, r5
 8000632:	fb0b fc0c 	mul.w	ip, fp, ip
 8000636:	eb00 402c 	add.w	r0, r0, ip, asr #16
    sample += Crossfade(wave_1, wave_2, phase_3 >> 1, wave_xfade);
 800063a:	b200      	sxth	r0, r0
    *buffer++ = sample >> 2;
 800063c:	9902      	ldr	r1, [sp, #8]
    sample += Crossfade(wave_1, wave_2, phase_3 >> 1, wave_xfade);
 800063e:	4438      	add	r0, r7
    *buffer++ = sample >> 2;
 8000640:	1080      	asrs	r0, r0, #2
 8000642:	f821 0c04 	strh.w	r0, [r1, #-4]
 8000646:	9908      	ldr	r1, [sp, #32]
 8000648:	9803      	ldr	r0, [sp, #12]
 800064a:	440e      	add	r6, r1
 800064c:	9905      	ldr	r1, [sp, #20]
  int32_t a = table[phase >> 24];
 800064e:	0e75      	lsrs	r5, r6, #25
 8000650:	180f      	adds	r7, r1, r0
 8000652:	9801      	ldr	r0, [sp, #4]
 8000654:	9906      	ldr	r1, [sp, #24]
 8000656:	ea4f 6e57 	mov.w	lr, r7, lsr #25
 800065a:	4401      	add	r1, r0
 800065c:	9101      	str	r1, [sp, #4]
 800065e:	9907      	ldr	r1, [sp, #28]
 8000660:	5d50      	ldrb	r0, [r2, r5]
 8000662:	4451      	add	r1, sl
 8000664:	9100      	str	r1, [sp, #0]
  int32_t b = table[(phase >> 24) + 1];
 8000666:	1c69      	adds	r1, r5, #1
 8000668:	f812 c001 	ldrb.w	ip, [r2, r1]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800066c:	f3c6 0a57 	ubfx	sl, r6, #1, #24
 8000670:	ebac 0c00 	sub.w	ip, ip, r0
 8000674:	fb0a fc0c 	mul.w	ip, sl, ip
  int32_t b = table[(phase >> 24) + 1];
 8000678:	9109      	str	r1, [sp, #36]	; 0x24
  return (a << 8) + \
 800067a:	0201      	lsls	r1, r0, #8
  int32_t b = table[(phase >> 24) + 1];
 800067c:	f10e 0901 	add.w	r9, lr, #1
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000680:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
  int32_t a = table[phase >> 24];
 8000684:	f812 000e 	ldrb.w	r0, [r2, lr]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000688:	eb01 412c 	add.w	r1, r1, ip, asr #16
  int32_t b = table[(phase >> 24) + 1];
 800068c:	f812 c009 	ldrb.w	ip, [r2, r9]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000690:	f3c7 0857 	ubfx	r8, r7, #1, #24
 8000694:	ebac 0c00 	sub.w	ip, ip, r0
 8000698:	fb08 fc0c 	mul.w	ip, r8, ip
 800069c:	b289      	uxth	r1, r1
 800069e:	9103      	str	r1, [sp, #12]
  return (a << 8) + \
 80006a0:	0200      	lsls	r0, r0, #8
  int32_t b = table[(phase >> 24) + 1];
 80006a2:	9909      	ldr	r1, [sp, #36]	; 0x24
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006a4:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
  int32_t a = table[phase >> 24];
 80006a8:	5d5d      	ldrb	r5, [r3, r5]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006aa:	eb00 4c2c 	add.w	ip, r0, ip, asr #16
  int32_t a = table[phase >> 24];
 80006ae:	f813 000e 	ldrb.w	r0, [r3, lr]
  int32_t b = table[(phase >> 24) + 1];
 80006b2:	f813 e001 	ldrb.w	lr, [r3, r1]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006b6:	fa1f fc8c 	uxth.w	ip, ip
 80006ba:	ebae 0e05 	sub.w	lr, lr, r5
 80006be:	fb0a fa0e 	mul.w	sl, sl, lr
  return (a << 8) + \
 80006c2:	022d      	lsls	r5, r5, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006c4:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
 80006c8:	eb05 4a2a 	add.w	sl, r5, sl, asr #16
  int32_t b = table[(phase >> 24) + 1];
 80006cc:	f813 5009 	ldrb.w	r5, [r3, r9]
  int32_t a = Interpolate824(table_a, phase);
 80006d0:	f9bd e00c 	ldrsh.w	lr, [sp, #12]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006d4:	1a2d      	subs	r5, r5, r0
 80006d6:	fb08 f805 	mul.w	r8, r8, r5
  return (a << 8) + \
 80006da:	0200      	lsls	r0, r0, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006dc:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 80006e0:	eb00 4828 	add.w	r8, r0, r8, asr #16
  int32_t a = Interpolate824(table_a, phase);
 80006e4:	fa0f f58c 	sxth.w	r5, ip
  int32_t b = Interpolate824(table_b, phase);
 80006e8:	fa0f f888 	sxth.w	r8, r8
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 80006ec:	eba8 0805 	sub.w	r8, r8, r5
  int32_t a = table[phase >> 24];
 80006f0:	9801      	ldr	r0, [sp, #4]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 80006f2:	fb0b f808 	mul.w	r8, fp, r8
  int32_t b = Interpolate824(table_b, phase);
 80006f6:	fa0f fa8a 	sxth.w	sl, sl
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006fa:	9d01      	ldr	r5, [sp, #4]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 80006fc:	ebaa 0a0e 	sub.w	sl, sl, lr
  int32_t a = table[phase >> 24];
 8000700:	ea4f 6e50 	mov.w	lr, r0, lsr #25
  int32_t b = table[(phase >> 24) + 1];
 8000704:	f10e 0901 	add.w	r9, lr, #1
  int32_t a = table[phase >> 24];
 8000708:	f812 000e 	ldrb.w	r0, [r2, lr]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 800070c:	eb0c 4c28 	add.w	ip, ip, r8, asr #16
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000710:	f3c5 0857 	ubfx	r8, r5, #1, #24
  int32_t b = table[(phase >> 24) + 1];
 8000714:	f812 5009 	ldrb.w	r5, [r2, r9]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 8000718:	fb0b fa0a 	mul.w	sl, fp, sl
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800071c:	1a2d      	subs	r5, r5, r0
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 800071e:	9903      	ldr	r1, [sp, #12]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000720:	fb08 f505 	mul.w	r5, r8, r5
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 8000724:	eb01 412a 	add.w	r1, r1, sl, asr #16
  return (a << 8) + \
 8000728:	0200      	lsls	r0, r0, #8
    sample += Crossfade(wave_1, wave_2, phase_1 >> 1, wave_xfade);
 800072a:	fa0f fc8c 	sxth.w	ip, ip
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800072e:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
    sample += Crossfade(wave_1, wave_2, phase_0 >> 1, wave_xfade);
 8000732:	b209      	sxth	r1, r1
    sample += Crossfade(wave_1, wave_2, phase_1 >> 1, wave_xfade);
 8000734:	4461      	add	r1, ip
 8000736:	eb00 4525 	add.w	r5, r0, r5, asr #16
  int32_t b = table[(phase >> 24) + 1];
 800073a:	f813 c009 	ldrb.w	ip, [r3, r9]
  int32_t a = table[phase >> 24];
 800073e:	f813 000e 	ldrb.w	r0, [r3, lr]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000742:	b2ad      	uxth	r5, r5
 8000744:	ebac 0c00 	sub.w	ip, ip, r0
 8000748:	fb08 f80c 	mul.w	r8, r8, ip
  return (a << 8) + \
 800074c:	0200      	lsls	r0, r0, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800074e:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 8000752:	eb00 4828 	add.w	r8, r0, r8, asr #16
  int32_t b = Interpolate824(table_b, phase);
 8000756:	fa0f f888 	sxth.w	r8, r8
  int32_t a = Interpolate824(table_a, phase);
 800075a:	fa0f fc85 	sxth.w	ip, r5
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 800075e:	eba8 0c0c 	sub.w	ip, r8, ip
 8000762:	fb0b fc0c 	mul.w	ip, fp, ip
 8000766:	eb05 4c2c 	add.w	ip, r5, ip, asr #16
    sample += Crossfade(wave_1, wave_2, phase_2 >> 1, wave_xfade);
 800076a:	fa0f fc8c 	sxth.w	ip, ip
 800076e:	448c      	add	ip, r1
  int32_t a = table[phase >> 24];
 8000770:	9900      	ldr	r1, [sp, #0]
 8000772:	0e4d      	lsrs	r5, r1, #25
 8000774:	5d51      	ldrb	r1, [r2, r5]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000776:	9800      	ldr	r0, [sp, #0]
  int32_t b = table[(phase >> 24) + 1];
 8000778:	f105 0801 	add.w	r8, r5, #1
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800077c:	f3c0 0e57 	ubfx	lr, r0, #1, #24
  int32_t b = table[(phase >> 24) + 1];
 8000780:	f812 0008 	ldrb.w	r0, [r2, r8]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000784:	1a40      	subs	r0, r0, r1
 8000786:	fb0e f000 	mul.w	r0, lr, r0
  return (a << 8) + \
 800078a:	0209      	lsls	r1, r1, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800078c:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8000790:	eb01 4020 	add.w	r0, r1, r0, asr #16
  int32_t a = table[phase >> 24];
 8000794:	5d59      	ldrb	r1, [r3, r5]
  int32_t b = table[(phase >> 24) + 1];
 8000796:	f813 5008 	ldrb.w	r5, [r3, r8]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800079a:	b280      	uxth	r0, r0
 800079c:	1a6d      	subs	r5, r5, r1
 800079e:	fb0e fe05 	mul.w	lr, lr, r5
  return (a << 8) + \
 80007a2:	0209      	lsls	r1, r1, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80007a4:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 80007a8:	eb01 4e2e 	add.w	lr, r1, lr, asr #16
  int32_t a = Interpolate824(table_a, phase);
 80007ac:	b205      	sxth	r5, r0
  int32_t b = Interpolate824(table_b, phase);
 80007ae:	fa0f fe8e 	sxth.w	lr, lr
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 80007b2:	ebae 0e05 	sub.w	lr, lr, r5
 80007b6:	fb0b fe0e 	mul.w	lr, fp, lr
 80007ba:	eb00 402e 	add.w	r0, r0, lr, asr #16
    sample += Crossfade(wave_1, wave_2, phase_3 >> 1, wave_xfade);
 80007be:	b200      	sxth	r0, r0
    *buffer++ = sample >> 2;
 80007c0:	9902      	ldr	r1, [sp, #8]
    sample += Crossfade(wave_1, wave_2, phase_3 >> 1, wave_xfade);
 80007c2:	4460      	add	r0, ip
    *buffer++ = sample >> 2;
 80007c4:	1080      	asrs	r0, r0, #2
 80007c6:	f821 0c02 	strh.w	r0, [r1, #-2]
    size -= 2;
 80007ca:	9904      	ldr	r1, [sp, #16]
 80007cc:	3902      	subs	r1, #2
 80007ce:	9104      	str	r1, [sp, #16]
  while (size) {
 80007d0:	e677      	b.n	80004c2 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0x96>
  state_.saw.phase[2] = phase_2;
 80007d2:	9b01      	ldr	r3, [sp, #4]
  state_.saw.phase[1] = phase_1;
 80007d4:	e9c4 6708 	strd	r6, r7, [r4, #32]
  state_.saw.phase[2] = phase_2;
 80007d8:	62a3      	str	r3, [r4, #40]	; 0x28
  state_.saw.phase[3] = phase_3;
 80007da:	9b00      	ldr	r3, [sp, #0]
 80007dc:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80007de:	b00f      	add	sp, #60	; 0x3c
 80007e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007e4:	080046e6 	.word	0x080046e6
 80007e8:	08005bca 	.word	0x08005bca

080007ec <_ZN6braids17DigitalOscillator12ComputeDelayEs>:
  int32_t ref_pitch = midi_pitch;
 80007ec:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80007f0:	bfa8      	it	ge
 80007f2:	f44f 4180 	movge.w	r1, #16384	; 0x4000
  size_t num_shifts = 0;
 80007f6:	2300      	movs	r3, #0
uint32_t DigitalOscillator::ComputeDelay(int16_t midi_pitch) {
 80007f8:	b510      	push	{r4, lr}
  ref_pitch -= kPitchTableStart;
 80007fa:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
  while (ref_pitch < 0) {
 80007fe:	2900      	cmp	r1, #0
 8000800:	da03      	bge.n	800080a <_ZN6braids17DigitalOscillator12ComputeDelayEs+0x1e>
    ref_pitch += kOctave;
 8000802:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
    ++num_shifts;
 8000806:	3301      	adds	r3, #1
  while (ref_pitch < 0) {
 8000808:	e7f9      	b.n	80007fe <_ZN6braids17DigitalOscillator12ComputeDelayEs+0x12>
  uint32_t a = lut_oscillator_delays[ref_pitch >> 4];
 800080a:	4c08      	ldr	r4, [pc, #32]	; (800082c <_ZN6braids17DigitalOscillator12ComputeDelayEs+0x40>)
 800080c:	110a      	asrs	r2, r1, #4
 800080e:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
  uint32_t b = lut_oscillator_delays[(ref_pitch >> 4) + 1];
 8000812:	3201      	adds	r2, #1
  uint32_t delay = a + (static_cast<int32_t>(b - a) * (ref_pitch & 0xf) >> 4);  
 8000814:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8000818:	f001 010f 	and.w	r1, r1, #15
 800081c:	1a12      	subs	r2, r2, r0
 800081e:	4351      	muls	r1, r2
  delay >>= 12 - num_shifts;
 8000820:	f1c3 030c 	rsb	r3, r3, #12
  uint32_t delay = a + (static_cast<int32_t>(b - a) * (ref_pitch & 0xf) >> 4);  
 8000824:	eb00 1021 	add.w	r0, r0, r1, asr #4
}
 8000828:	40d8      	lsrs	r0, r3
 800082a:	bd10      	pop	{r4, pc}
 800082c:	08004f94 	.word	0x08004f94

08000830 <_ZN6braids17DigitalOscillator6RenderEPKhPsj>:
    size_t size) {
 8000830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000834:	4617      	mov	r7, r2
  if (shape_ >= OSC_SHAPE_FM &&
 8000836:	7f42      	ldrb	r2, [r0, #29]
    size_t size) {
 8000838:	4698      	mov	r8, r3
  if (shape_ >= OSC_SHAPE_FM &&
 800083a:	f1a2 030c 	sub.w	r3, r2, #12
 800083e:	2b02      	cmp	r3, #2
    size_t size) {
 8000840:	4604      	mov	r4, r0
 8000842:	460e      	mov	r6, r1
  if (shape_ >= OSC_SHAPE_FM &&
 8000844:	d810      	bhi.n	8000868 <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0x38>
    uint16_t integral = parameter_[1] >> 8;
 8000846:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    int16_t a = lut_fm_frequency_quantizer[integral];
 800084a:	4d3b      	ldr	r5, [pc, #236]	; (8000938 <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0x108>)
 800084c:	f3c3 200f 	ubfx	r0, r3, #8, #16
 8000850:	f835 1010 	ldrh.w	r1, [r5, r0, lsl #1]
    int16_t b = lut_fm_frequency_quantizer[integral + 1];
 8000854:	3001      	adds	r0, #1
    parameter_[1] = a + ((b - a) * fractional >> 8);
 8000856:	f935 0010 	ldrsh.w	r0, [r5, r0, lsl #1]
 800085a:	b20d      	sxth	r5, r1
 800085c:	1b40      	subs	r0, r0, r5
 800085e:	b2db      	uxtb	r3, r3
 8000860:	4343      	muls	r3, r0
 8000862:	eb01 2323 	add.w	r3, r1, r3, asr #8
 8000866:	81e3      	strh	r3, [r4, #14]
  RenderFn fn = fn_table_[shape_];
 8000868:	4b34      	ldr	r3, [pc, #208]	; (800093c <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0x10c>)
 800086a:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800086e:	f853 9032 	ldr.w	r9, [r3, r2, lsl #3]
  if (shape_ != previous_shape_) {
 8000872:	7fa3      	ldrb	r3, [r4, #30]
  RenderFn fn = fn_table_[shape_];
 8000874:	f8d1 a004 	ldr.w	sl, [r1, #4]
  if (shape_ != previous_shape_) {
 8000878:	4293      	cmp	r3, r2
 800087a:	d034      	beq.n	80008e6 <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0xb6>

  DigitalOscillator() { }
  ~DigitalOscillator() { }
  
  inline void Init() {
    memset(&state_, 0, sizeof(state_));
 800087c:	22c4      	movs	r2, #196	; 0xc4
 800087e:	2100      	movs	r1, #0
 8000880:	f104 0020 	add.w	r0, r4, #32
 8000884:	f003 ff11 	bl	80046aa <memset>
  Excitation() { }
  ~Excitation() { }

  void Init() {
    delay_ = 0;
    decay_ = 4093;
 8000888:	2500      	movs	r5, #0
 800088a:	f640 73fd 	movw	r3, #4093	; 0xffd
    pulse_[0].Init();
    pulse_[1].Init();
    pulse_[2].Init();
    pulse_[3].Init();
    svf_[0].Init();
 800088e:	f504 709a 	add.w	r0, r4, #308	; 0x134
 8000892:	e9c4 5339 	strd	r5, r3, [r4, #228]	; 0xe4
 8000896:	e9c4 533e 	strd	r5, r3, [r4, #248]	; 0xf8
 800089a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800089e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    counter_ = 0;
    state_ = 0;
 80008a2:	e9c4 553b 	strd	r5, r5, [r4, #236]	; 0xec
    counter_ = 0;
 80008a6:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    state_ = 0;
 80008aa:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    delay_ = 0;
 80008ae:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
    counter_ = 0;
 80008b2:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
    state_ = 0;
 80008b6:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
    delay_ = 0;
 80008ba:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
    counter_ = 0;
 80008be:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
    state_ = 0;
 80008c2:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 80008c6:	f7ff fcb3 	bl	8000230 <_ZN6braids3Svf4InitEv>
    svf_[1].Init();
 80008ca:	f504 70aa 	add.w	r0, r4, #340	; 0x154
 80008ce:	f7ff fcaf 	bl	8000230 <_ZN6braids3Svf4InitEv>
    svf_[2].Init();
 80008d2:	f504 70ba 	add.w	r0, r4, #372	; 0x174
 80008d6:	f7ff fcab 	bl	8000230 <_ZN6braids3Svf4InitEv>
    phase_ = 0;
    strike_ = true;
 80008da:	2301      	movs	r3, #1
 80008dc:	7723      	strb	r3, [r4, #28]
    init_ = true;
 80008de:	76e3      	strb	r3, [r4, #27]
    previous_shape_ = shape_;
 80008e0:	7f63      	ldrb	r3, [r4, #29]
    phase_ = 0;
 80008e2:	6025      	str	r5, [r4, #0]
 80008e4:	77a3      	strb	r3, [r4, #30]
  phase_increment_ = ComputePhaseIncrement(pitch_);
 80008e6:	f9b4 5018 	ldrsh.w	r5, [r4, #24]
 80008ea:	4620      	mov	r0, r4
 80008ec:	4629      	mov	r1, r5
 80008ee:	f7ff fd7d 	bl	80003ec <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
  delay_ = ComputeDelay(pitch_);
 80008f2:	4629      	mov	r1, r5
  phase_increment_ = ComputePhaseIncrement(pitch_);
 80008f4:	6060      	str	r0, [r4, #4]
  delay_ = ComputeDelay(pitch_);
 80008f6:	4620      	mov	r0, r4
 80008f8:	f7ff ff78 	bl	80007ec <_ZN6braids17DigitalOscillator12ComputeDelayEs>
  if (pitch_ > kHighestNote) {
 80008fc:	f5b5 4f8c 	cmp.w	r5, #17920	; 0x4600
  delay_ = ComputeDelay(pitch_);
 8000900:	60a0      	str	r0, [r4, #8]
  if (pitch_ > kHighestNote) {
 8000902:	dd14      	ble.n	800092e <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0xfe>
    pitch_ = kHighestNote;
 8000904:	f44f 438c 	mov.w	r3, #17920	; 0x4600
    pitch_ = 0;
 8000908:	8323      	strh	r3, [r4, #24]
  (this->*fn)(sync, buffer, size);
 800090a:	ea4f 036a 	mov.w	r3, sl, asr #1
 800090e:	f01a 0f01 	tst.w	sl, #1
 8000912:	eb04 0003 	add.w	r0, r4, r3
 8000916:	bf18      	it	ne
 8000918:	58e3      	ldrne	r3, [r4, r3]
 800091a:	463a      	mov	r2, r7
 800091c:	bf18      	it	ne
 800091e:	f853 9009 	ldrne.w	r9, [r3, r9]
 8000922:	4631      	mov	r1, r6
 8000924:	4643      	mov	r3, r8
 8000926:	46cc      	mov	ip, r9
}
 8000928:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  (this->*fn)(sync, buffer, size);
 800092c:	4760      	bx	ip
  } else if (pitch_ < 0) {
 800092e:	2d00      	cmp	r5, #0
 8000930:	daeb      	bge.n	800090a <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0xda>
    pitch_ = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	e7e8      	b.n	8000908 <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0xd8>
 8000936:	bf00      	nop
 8000938:	0800529c 	.word	0x0800529c
 800093c:	20000000 	.word	0x20000000

08000940 <_ZN6braids17DigitalOscillator18set_chordIntervalsEsss>:
	chordsIntervals[0] = interval1;
 8000940:	f8a0 1194 	strh.w	r1, [r0, #404]	; 0x194
	chordsIntervals[1] = interval2;
 8000944:	f8a0 2196 	strh.w	r2, [r0, #406]	; 0x196
	chordsIntervals[2] = interval3;
 8000948:	f8a0 3198 	strh.w	r3, [r0, #408]	; 0x198
}
 800094c:	4770      	bx	lr

0800094e <_ZN6braids15MacroOscillator10RenderBuzzEPKhPsj>:
}

void MacroOscillator::RenderBuzz(
    const uint8_t* sync,
    int16_t* buffer,
    size_t size) {
 800094e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  analog_oscillator_[0].set_parameter(parameter_[0]);
 8000952:	f9b0 7000 	ldrsh.w	r7, [r0]
    size_t size) {
 8000956:	4604      	mov	r4, r0
  inline void set_pitch(int16_t pitch) {
    pitch_ = pitch;
  }

  inline void set_parameter(int16_t parameter) {
    parameter_ = parameter;
 8000958:	f8a0 7066 	strh.w	r7, [r0, #102]	; 0x66
    shape_ = shape;
 800095c:	2008      	movs	r0, #8
 800095e:	461e      	mov	r6, r3
 8000960:	4688      	mov	r8, r1
 8000962:	4615      	mov	r5, r2
  analog_oscillator_[0].set_shape(OSC_SHAPE_BUZZ);
  analog_oscillator_[0].set_pitch(pitch_);
 8000964:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000968:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
 800096c:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94

  analog_oscillator_[1].set_parameter(parameter_[0]);
  analog_oscillator_[1].set_shape(OSC_SHAPE_BUZZ);
  analog_oscillator_[1].set_pitch(pitch_ + (parameter_[1] >> 8));
 8000970:	f994 0003 	ldrsb.w	r0, [r4, #3]
    pitch_ = pitch;
 8000974:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8000978:	4403      	add	r3, r0
    parameter_ = parameter;
 800097a:	f8a4 7086 	strh.w	r7, [r4, #134]	; 0x86
    pitch_ = pitch;
 800097e:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e

  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8000982:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000986:	2300      	movs	r3, #0
 8000988:	9600      	str	r6, [sp, #0]
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 800098a:	f104 0722 	add.w	r7, r4, #34	; 0x22
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 800098e:	f7ff fc07 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 8000992:	463a      	mov	r2, r7
 8000994:	9600      	str	r6, [sp, #0]
 8000996:	2300      	movs	r3, #0
 8000998:	4641      	mov	r1, r8
 800099a:	f104 0078 	add.w	r0, r4, #120	; 0x78
 800099e:	f7ff fbff 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
 80009a2:	1eaa      	subs	r2, r5, #2
  int16_t* temp_buffer = temp_buffer_;
  while (size--) {
 80009a4:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 80009a8:	d309      	bcc.n	80009be <_ZN6braids15MacroOscillator10RenderBuzzEPKhPsj+0x70>
    *buffer >>= 1;
 80009aa:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 80009ae:	105b      	asrs	r3, r3, #1
 80009b0:	8013      	strh	r3, [r2, #0]
    *buffer += *temp_buffer >> 1;
 80009b2:	f937 1b02 	ldrsh.w	r1, [r7], #2
 80009b6:	eb03 0361 	add.w	r3, r3, r1, asr #1
 80009ba:	8013      	strh	r3, [r2, #0]
  while (size--) {
 80009bc:	e7f2      	b.n	80009a4 <_ZN6braids15MacroOscillator10RenderBuzzEPKhPsj+0x56>
    buffer++;
    temp_buffer++;
  }
}
 80009be:	b002      	add	sp, #8
 80009c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080009c4 <_ZN6braids15MacroOscillator10RenderCSawEPKhPsj>:
    size_t size) {
 80009c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80009c6:	461d      	mov	r5, r3
 80009c8:	8903      	ldrh	r3, [r0, #8]
 80009ca:	4604      	mov	r4, r0
 80009cc:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
    shape_ = shape;
 80009d0:	2302      	movs	r3, #2
 80009d2:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    parameter_ = parameter;
 80009d6:	8803      	ldrh	r3, [r0, #0]
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 80009d8:	3058      	adds	r0, #88	; 0x58
 80009da:	81c3      	strh	r3, [r0, #14]
  }

  inline void set_aux_parameter(int16_t parameter) {
    aux_parameter_ = parameter;
 80009dc:	f830 3c56 	ldrh.w	r3, [r0, #-86]
    size_t size) {
 80009e0:	4616      	mov	r6, r2
 80009e2:	8243      	strh	r3, [r0, #18]
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 80009e4:	2300      	movs	r3, #0
 80009e6:	9500      	str	r5, [sp, #0]
 80009e8:	f7ff fbda 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
    *buffer++ = (s * 13) >> 3;
 80009ec:	210d      	movs	r1, #13
  int16_t shift = -(parameter_[1] - 32767) >> 4;
 80009ee:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80009f2:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 80009f6:	337f      	adds	r3, #127	; 0x7f
 80009f8:	111a      	asrs	r2, r3, #4
  while (size--) {
 80009fa:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 80009fe:	d307      	bcc.n	8000a10 <_ZN6braids15MacroOscillator10RenderCSawEPKhPsj+0x4c>
    int32_t s = *buffer + shift;
 8000a00:	f9b6 3000 	ldrsh.w	r3, [r6]
 8000a04:	4413      	add	r3, r2
    *buffer++ = (s * 13) >> 3;
 8000a06:	434b      	muls	r3, r1
 8000a08:	10db      	asrs	r3, r3, #3
 8000a0a:	f826 3b02 	strh.w	r3, [r6], #2
  while (size--) {
 8000a0e:	e7f4      	b.n	80009fa <_ZN6braids15MacroOscillator10RenderCSawEPKhPsj+0x36>
}
 8000a10:	b002      	add	sp, #8
 8000a12:	bd70      	pop	{r4, r5, r6, pc}

08000a14 <_ZN6braids15MacroOscillator15RenderSawSquareEPKhPsj>:
    size_t size) {
 8000a14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000a18:	461d      	mov	r5, r3
  analog_oscillator_[0].set_parameter(parameter_[0]);
 8000a1a:	f9b0 3000 	ldrsh.w	r3, [r0]
    size_t size) {
 8000a1e:	4604      	mov	r4, r0
    parameter_ = parameter;
 8000a20:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
 8000a24:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
  analog_oscillator_[0].set_pitch(pitch_);
 8000a28:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    size_t size) {
 8000a2c:	4688      	mov	r8, r1
    pitch_ = pitch;
 8000a2e:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
 8000a32:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
    shape_ = shape;
 8000a36:	2301      	movs	r3, #1
 8000a38:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
 8000a3c:	2303      	movs	r3, #3
  int16_t* square_buffer = temp_buffer_;
 8000a3e:	f100 0722 	add.w	r7, r0, #34	; 0x22
 8000a42:	f880 3094 	strb.w	r3, [r0, #148]	; 0x94
  analog_oscillator_[0].Render(sync, saw_buffer, NULL, size);
 8000a46:	2300      	movs	r3, #0
 8000a48:	3058      	adds	r0, #88	; 0x58
 8000a4a:	9500      	str	r5, [sp, #0]
    size_t size) {
 8000a4c:	4616      	mov	r6, r2
  analog_oscillator_[0].Render(sync, saw_buffer, NULL, size);
 8000a4e:	f7ff fba7 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync, square_buffer, NULL, size);
 8000a52:	2300      	movs	r3, #0
 8000a54:	463a      	mov	r2, r7
 8000a56:	4641      	mov	r1, r8
 8000a58:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8000a5c:	9500      	str	r5, [sp, #0]
 8000a5e:	f7ff fb9f 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  BEGIN_INTERPOLATE_PARAMETER_1
 8000a62:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8000a66:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
          *square_buffer++) * 148 >> 8;
 8000a6a:	f04f 0e94 	mov.w	lr, #148	; 0x94
  BEGIN_INTERPOLATE_PARAMETER_1
 8000a6e:	1a13      	subs	r3, r2, r0
 8000a70:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000a74:	fbb2 f2f5 	udiv	r2, r2, r5
 8000a78:	435a      	muls	r2, r3
  return (a * (65535 - balance) + b * balance) >> 16;
 8000a7a:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8000a7e:	4611      	mov	r1, r2
  while (size--) {
 8000a80:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 8000a84:	d316      	bcc.n	8000ab4 <_ZN6braids15MacroOscillator15RenderSawSquareEPKhPsj+0xa0>
    INTERPOLATE_PARAMETER_1
 8000a86:	eb00 33e1 	add.w	r3, r0, r1, asr #15
    uint16_t balance = parameter_1 << 1;
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	fa1f f883 	uxth.w	r8, r3
    int16_t attenuated_square = static_cast<int32_t>(
 8000a90:	f937 3b02 	ldrsh.w	r3, [r7], #2
 8000a94:	f936 ab02 	ldrsh.w	sl, [r6], #2
          *square_buffer++) * 148 >> 8;
 8000a98:	fb0e f303 	mul.w	r3, lr, r3
 8000a9c:	ebac 0908 	sub.w	r9, ip, r8
 8000aa0:	fb09 f90a 	mul.w	r9, r9, sl
 8000aa4:	121b      	asrs	r3, r3, #8
 8000aa6:	fb08 9303 	mla	r3, r8, r3, r9
 8000aaa:	141b      	asrs	r3, r3, #16
 8000aac:	f826 3c02 	strh.w	r3, [r6, #-2]
 8000ab0:	4411      	add	r1, r2
  while (size--) {
 8000ab2:	e7e5      	b.n	8000a80 <_ZN6braids15MacroOscillator15RenderSawSquareEPKhPsj+0x6c>
  END_INTERPOLATE_PARAMETER_1
 8000ab4:	8863      	ldrh	r3, [r4, #2]
 8000ab6:	80e3      	strh	r3, [r4, #6]
}
 8000ab8:	b002      	add	sp, #8
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000abe <_ZN6braids15MacroOscillator9RenderSubEPKhPsj>:
    size_t size) {
 8000abe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac2:	461d      	mov	r5, r3
  AnalogOscillatorShape base_shape = shape_ == MACRO_OSC_SHAPE_SQUARE_SUB ?
 8000ac4:	f244 2354 	movw	r3, #16980	; 0x4254
    size_t size) {
 8000ac8:	4604      	mov	r4, r0
  AnalogOscillatorShape base_shape = shape_ == MACRO_OSC_SHAPE_SQUARE_SUB ?
 8000aca:	5cc3      	ldrb	r3, [r0, r3]
    parameter_ = parameter;
 8000acc:	8800      	ldrh	r0, [r0, #0]
 8000ace:	2b05      	cmp	r3, #5
 8000ad0:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
    shape_ = shape;
 8000ad4:	f04f 0003 	mov.w	r0, #3
 8000ad8:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
  int16_t octave = parameter_[1] < 16384 ? (24 << 7) : (12 << 7);
 8000adc:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
  AnalogOscillatorShape base_shape = shape_ == MACRO_OSC_SHAPE_SQUARE_SUB ?
 8000ae0:	bf14      	ite	ne
 8000ae2:	2301      	movne	r3, #1
 8000ae4:	2303      	moveq	r3, #3
  int16_t octave = parameter_[1] < 16384 ? (24 << 7) : (12 << 7);
 8000ae6:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8000aea:	bfac      	ite	ge
 8000aec:	f44f 60c0 	movge.w	r0, #1536	; 0x600
 8000af0:	f44f 6040 	movlt.w	r0, #3072	; 0xc00
    parameter_ = parameter;
 8000af4:	2700      	movs	r7, #0
    size_t size) {
 8000af6:	4689      	mov	r9, r1
    shape_ = shape;
 8000af8:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  analog_oscillator_[0].set_pitch(pitch_);
 8000afc:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    parameter_ = parameter;
 8000b00:	f8a4 7086 	strh.w	r7, [r4, #134]	; 0x86
    pitch_ = pitch;
 8000b04:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
  analog_oscillator_[1].set_pitch(pitch_ - octave);
 8000b08:	1a1b      	subs	r3, r3, r0
 8000b0a:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8000b0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000b12:	463b      	mov	r3, r7
 8000b14:	9500      	str	r5, [sp, #0]
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 8000b16:	f104 0622 	add.w	r6, r4, #34	; 0x22
    size_t size) {
 8000b1a:	4690      	mov	r8, r2
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8000b1c:	f7ff fb40 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 8000b20:	463b      	mov	r3, r7
 8000b22:	4632      	mov	r2, r6
 8000b24:	4649      	mov	r1, r9
 8000b26:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8000b2a:	9500      	str	r5, [sp, #0]
 8000b2c:	f7ff fb38 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  BEGIN_INTERPOLATE_PARAMETER_1
 8000b30:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8000b34:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
        ? (16383 - parameter_1) : (parameter_1 - 16384)) << 1;
 8000b38:	f643 7eff 	movw	lr, #16383	; 0x3fff
  BEGIN_INTERPOLATE_PARAMETER_1
 8000b3c:	1bcb      	subs	r3, r1, r7
 8000b3e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000b42:	fbb1 f1f5 	udiv	r1, r1, r5
 8000b46:	4359      	muls	r1, r3
 8000b48:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8000b4c:	4608      	mov	r0, r1
 8000b4e:	f1a8 0202 	sub.w	r2, r8, #2
  while (size--) {
 8000b52:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 8000b56:	d31a      	bcc.n	8000b8e <_ZN6braids15MacroOscillator9RenderSubEPKhPsj+0xd0>
    INTERPOLATE_PARAMETER_1
 8000b58:	eb07 38e0 	add.w	r8, r7, r0, asr #15
 8000b5c:	fa1f f388 	uxth.w	r3, r8
    uint16_t sub_gain = (parameter_1 < 16384
 8000b60:	f5b8 4f80 	cmp.w	r8, #16384	; 0x4000
        ? (16383 - parameter_1) : (parameter_1 - 16384)) << 1;
 8000b64:	bfb4      	ite	lt
 8000b66:	ebae 0303 	sublt.w	r3, lr, r3
 8000b6a:	f5a3 4380 	subge.w	r3, r3, #16384	; 0x4000
 8000b6e:	f936 ab02 	ldrsh.w	sl, [r6], #2
    uint16_t sub_gain = (parameter_1 < 16384
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	ebac 0903 	sub.w	r9, ip, r3
 8000b7a:	fb03 f30a 	mul.w	r3, r3, sl
 8000b7e:	f932 8f02 	ldrsh.w	r8, [r2, #2]!
 8000b82:	4408      	add	r0, r1
 8000b84:	fb09 3308 	mla	r3, r9, r8, r3
 8000b88:	141b      	asrs	r3, r3, #16
 8000b8a:	8013      	strh	r3, [r2, #0]
  while (size--) {
 8000b8c:	e7e1      	b.n	8000b52 <_ZN6braids15MacroOscillator9RenderSubEPKhPsj+0x94>
  END_INTERPOLATE_PARAMETER_1
 8000b8e:	8863      	ldrh	r3, [r4, #2]
 8000b90:	80e3      	strh	r3, [r4, #6]
}
 8000b92:	b002      	add	sp, #8
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000b98 <_ZN6braids15MacroOscillator14RenderDualSyncEPKhPsj>:
    size_t size) {
 8000b98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000b9c:	461d      	mov	r5, r3
  AnalogOscillatorShape base_shape = shape_ == MACRO_OSC_SHAPE_SQUARE_SYNC ?
 8000b9e:	f244 2354 	movw	r3, #16980	; 0x4254
 8000ba2:	f04f 0800 	mov.w	r8, #0
 8000ba6:	5cc3      	ldrb	r3, [r0, r3]
    size_t size) {
 8000ba8:	4604      	mov	r4, r0
  AnalogOscillatorShape base_shape = shape_ == MACRO_OSC_SHAPE_SQUARE_SYNC ?
 8000baa:	2b07      	cmp	r3, #7
 8000bac:	bf0c      	ite	eq
 8000bae:	2003      	moveq	r0, #3
 8000bb0:	4640      	movne	r0, r8
  analog_oscillator_[0].set_pitch(pitch_);
 8000bb2:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    shape_ = shape;
 8000bb6:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
 8000bba:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
  analog_oscillator_[1].set_pitch(pitch_ + (parameter_[0] >> 2));
 8000bbe:	f9b4 0000 	ldrsh.w	r0, [r4]
    pitch_ = pitch;
 8000bc2:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
  analog_oscillator_[0].Render(sync, buffer, sync_buffer_, size);
 8000bc6:	f104 090a 	add.w	r9, r4, #10
  analog_oscillator_[1].set_pitch(pitch_ + (parameter_[0] >> 2));
 8000bca:	eb03 03a0 	add.w	r3, r3, r0, asr #2
 8000bce:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
  analog_oscillator_[0].Render(sync, buffer, sync_buffer_, size);
 8000bd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000bd6:	464b      	mov	r3, r9
    parameter_ = parameter;
 8000bd8:	f8a4 8066 	strh.w	r8, [r4, #102]	; 0x66
 8000bdc:	f8a4 8086 	strh.w	r8, [r4, #134]	; 0x86
 8000be0:	9500      	str	r5, [sp, #0]
  analog_oscillator_[1].Render(sync_buffer_, temp_buffer_, NULL, size);
 8000be2:	f104 0622 	add.w	r6, r4, #34	; 0x22
    size_t size) {
 8000be6:	4617      	mov	r7, r2
  analog_oscillator_[0].Render(sync, buffer, sync_buffer_, size);
 8000be8:	f7ff fada 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync_buffer_, temp_buffer_, NULL, size);
 8000bec:	4643      	mov	r3, r8
 8000bee:	4632      	mov	r2, r6
 8000bf0:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8000bf4:	9500      	str	r5, [sp, #0]
 8000bf6:	4649      	mov	r1, r9
 8000bf8:	f7ff fad2 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  BEGIN_INTERPOLATE_PARAMETER_1
 8000bfc:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8000c00:	f9b4 c006 	ldrsh.w	ip, [r4, #6]
 8000c04:	1eba      	subs	r2, r7, #2
 8000c06:	eba0 030c 	sub.w	r3, r0, ip
 8000c0a:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8000c0e:	fbb0 f0f5 	udiv	r0, r0, r5
 8000c12:	4358      	muls	r0, r3
 8000c14:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8000c18:	4607      	mov	r7, r0
  while (size--) {
 8000c1a:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 8000c1e:	d313      	bcc.n	8000c48 <_ZN6braids15MacroOscillator14RenderDualSyncEPKhPsj+0xb0>
    INTERPOLATE_PARAMETER_1
 8000c20:	eb0c 31e7 	add.w	r1, ip, r7, asr #15
 8000c24:	f936 9b02 	ldrsh.w	r9, [r6], #2
    uint16_t balance = parameter_1 << 1;
 8000c28:	0049      	lsls	r1, r1, #1
 8000c2a:	b289      	uxth	r1, r1
 8000c2c:	ebae 0801 	sub.w	r8, lr, r1
 8000c30:	fb01 f109 	mul.w	r1, r1, r9
 8000c34:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 8000c38:	4407      	add	r7, r0
 8000c3a:	fb08 1303 	mla	r3, r8, r3, r1
    *buffer = (Mix(*buffer, *temp_buffer, balance) >> 2) * 3;
 8000c3e:	149b      	asrs	r3, r3, #18
 8000c40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000c44:	8013      	strh	r3, [r2, #0]
  while (size--) {
 8000c46:	e7e8      	b.n	8000c1a <_ZN6braids15MacroOscillator14RenderDualSyncEPKhPsj+0x82>
  END_INTERPOLATE_PARAMETER_1
 8000c48:	8863      	ldrh	r3, [r4, #2]
 8000c4a:	80e3      	strh	r3, [r4, #6]
}
 8000c4c:	b003      	add	sp, #12
 8000c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c52 <_ZN6braids15MacroOscillator18RenderSineTriangleEPKhPsj>:
    size_t size) {
 8000c52:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  int32_t attenuation_sine = 32767 - 6 * (pitch_ - (92 << 7));
 8000c56:	f06f 0c05 	mvn.w	ip, #5
 8000c5a:	f647 75ff 	movw	r5, #32767	; 0x7fff
    size_t size) {
 8000c5e:	4604      	mov	r4, r0
  int32_t attenuation_sine = 32767 - 6 * (pitch_ - (92 << 7));
 8000c60:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
    size_t size) {
 8000c64:	461e      	mov	r6, r3
  int32_t attenuation_sine = 32767 - 6 * (pitch_ - (92 << 7));
 8000c66:	f5a0 5338 	sub.w	r3, r0, #11776	; 0x2e00
 8000c6a:	fb0c 5303 	mla	r3, ip, r3, r5
 8000c6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  analog_oscillator_[0].set_parameter(timbre * attenuation_sine >> 15);
 8000c72:	42ab      	cmp	r3, r5
 8000c74:	bfa8      	it	ge
 8000c76:	462b      	movge	r3, r5
  int32_t timbre = parameter_[0];
 8000c78:	f9b4 e000 	ldrsh.w	lr, [r4]
  int32_t attenuation_tri = 32767 - 7 * (pitch_ - (80 << 7));
 8000c7c:	f5a0 5c20 	sub.w	ip, r0, #10240	; 0x2800
  analog_oscillator_[0].set_parameter(timbre * attenuation_sine >> 15);
 8000c80:	fb0e f303 	mul.w	r3, lr, r3
 8000c84:	13db      	asrs	r3, r3, #15
 8000c86:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    shape_ = shape;
 8000c8a:	2307      	movs	r3, #7
  int32_t attenuation_tri = 32767 - 7 * (pitch_ - (80 << 7));
 8000c8c:	ebac 0ccc 	sub.w	ip, ip, ip, lsl #3
 8000c90:	44ac      	add	ip, r5
 8000c92:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
  analog_oscillator_[1].set_parameter(timbre * attenuation_tri >> 15);
 8000c96:	45ac      	cmp	ip, r5
 8000c98:	bfa8      	it	ge
 8000c9a:	46ac      	movge	ip, r5
 8000c9c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
 8000ca0:	2306      	movs	r3, #6
    size_t size) {
 8000ca2:	4688      	mov	r8, r1
  analog_oscillator_[1].set_parameter(timbre * attenuation_tri >> 15);
 8000ca4:	fb0e fe0c 	mul.w	lr, lr, ip
 8000ca8:	ea4f 3eee 	mov.w	lr, lr, asr #15
 8000cac:	f8a4 e086 	strh.w	lr, [r4, #134]	; 0x86
    pitch_ = pitch;
 8000cb0:	f8a4 006e 	strh.w	r0, [r4, #110]	; 0x6e
 8000cb4:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    shape_ = shape;
 8000cb8:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8000cbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	9600      	str	r6, [sp, #0]
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 8000cc4:	f104 0922 	add.w	r9, r4, #34	; 0x22
    size_t size) {
 8000cc8:	4617      	mov	r7, r2
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8000cca:	f7ff fa69 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 8000cce:	2300      	movs	r3, #0
 8000cd0:	464a      	mov	r2, r9
 8000cd2:	4641      	mov	r1, r8
 8000cd4:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8000cd8:	9600      	str	r6, [sp, #0]
 8000cda:	f7ff fa61 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  BEGIN_INTERPOLATE_PARAMETER_1
 8000cde:	fbb5 f5f6 	udiv	r5, r5, r6
 8000ce2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8000ce6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8000cea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000cee:	1a9b      	subs	r3, r3, r2
 8000cf0:	435d      	muls	r5, r3
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	3f02      	subs	r7, #2
  while (size--) {
 8000cf6:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 8000cfa:	d311      	bcc.n	8000d20 <_ZN6braids15MacroOscillator18RenderSineTriangleEPKhPsj+0xce>
    INTERPOLATE_PARAMETER_1
 8000cfc:	eb02 33e1 	add.w	r3, r2, r1, asr #15
 8000d00:	f939 8b02 	ldrsh.w	r8, [r9], #2
    uint16_t balance = parameter_1 << 1;
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	eba0 0e03 	sub.w	lr, r0, r3
 8000d0c:	fb03 f308 	mul.w	r3, r3, r8
 8000d10:	f937 cf02 	ldrsh.w	ip, [r7, #2]!
 8000d14:	4429      	add	r1, r5
 8000d16:	fb0e 330c 	mla	r3, lr, ip, r3
 8000d1a:	141b      	asrs	r3, r3, #16
 8000d1c:	803b      	strh	r3, [r7, #0]
  while (size--) {
 8000d1e:	e7ea      	b.n	8000cf6 <_ZN6braids15MacroOscillator18RenderSineTriangleEPKhPsj+0xa4>
  END_INTERPOLATE_PARAMETER_1
 8000d20:	8863      	ldrh	r3, [r4, #2]
 8000d22:	80e3      	strh	r3, [r4, #6]
}
 8000d24:	b003      	add	sp, #12
 8000d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08000d2c <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj>:
    size_t size) {
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	4617      	mov	r7, r2
  if (parameter_[0] <= 10922) {
 8000d32:	f642 22aa 	movw	r2, #10922	; 0x2aaa
    size_t size) {
 8000d36:	461e      	mov	r6, r3
  analog_oscillator_[0].set_pitch(pitch_);
 8000d38:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    size_t size) {
 8000d3c:	b087      	sub	sp, #28
    pitch_ = pitch;
 8000d3e:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
 8000d42:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
  if (parameter_[0] <= 10922) {
 8000d46:	f9b0 3000 	ldrsh.w	r3, [r0]
    size_t size) {
 8000d4a:	4604      	mov	r4, r0
  if (parameter_[0] <= 10922) {
 8000d4c:	4293      	cmp	r3, r2
    size_t size) {
 8000d4e:	4689      	mov	r9, r1
 8000d50:	f04f 0500 	mov.w	r5, #0
  if (parameter_[0] <= 10922) {
 8000d54:	f300 808b 	bgt.w	8000e6e <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x142>
    shape_ = shape;
 8000d58:	2204      	movs	r2, #4
    parameter_ = parameter;
 8000d5a:	f8a0 5066 	strh.w	r5, [r0, #102]	; 0x66
 8000d5e:	f8a0 5086 	strh.w	r5, [r0, #134]	; 0x86
    shape_ = shape;
 8000d62:	f880 5094 	strb.w	r5, [r0, #148]	; 0x94
    balance = parameter_[0] * 6;
 8000d66:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8000d6a:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
 8000d6e:	006d      	lsls	r5, r5, #1
    balance = 65535 - (parameter_[0] - 10923) * 6;
 8000d70:	b2ad      	uxth	r5, r5
  analog_oscillator_[0].Render(sync, shape_1, NULL, size);
 8000d72:	4649      	mov	r1, r9
 8000d74:	2300      	movs	r3, #0
 8000d76:	463a      	mov	r2, r7
 8000d78:	f104 0058 	add.w	r0, r4, #88	; 0x58
  int16_t* shape_2 = temp_buffer_;
 8000d7c:	f104 0822 	add.w	r8, r4, #34	; 0x22
  analog_oscillator_[0].Render(sync, shape_1, NULL, size);
 8000d80:	9600      	str	r6, [sp, #0]
 8000d82:	f7ff fa0d 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync, shape_2, NULL, size);
 8000d86:	4649      	mov	r1, r9
 8000d88:	2300      	movs	r3, #0
 8000d8a:	4642      	mov	r2, r8
 8000d8c:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8000d90:	9600      	str	r6, [sp, #0]
 8000d92:	f7ff fa05 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  int32_t lp_cutoff = pitch_ - (parameter_[1] >> 1) + 128 * 128;
 8000d96:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8000d9a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
  uint32_t a = table[phase >> 24];
 8000d9e:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8000ecc <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x1a0>
 8000da2:	eba2 0361 	sub.w	r3, r2, r1, asr #1
 8000da6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
  int32_t f = Interpolate824(lut_svf_cutoff, lp_cutoff << 17);
 8000daa:	f383 030f 	usat	r3, #15, r3
 8000dae:	045b      	lsls	r3, r3, #17
 8000db0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8000db4:	f83c 001e 	ldrh.w	r0, [ip, lr, lsl #1]
  uint32_t b = table[(phase >> 24) + 1];
 8000db8:	f10c 0c02 	add.w	ip, ip, #2
 8000dbc:	f83c c01e 	ldrh.w	ip, [ip, lr, lsl #1]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	ebac 0c00 	sub.w	ip, ip, r0
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	fb03 f30c 	mul.w	r3, r3, ip
 8000dcc:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  if (pitch_ > (80 << 7)) {
 8000dd0:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
  int32_t f = Interpolate824(lut_svf_cutoff, lp_cutoff << 17);
 8000dd4:	b283      	uxth	r3, r0
    fuzz_amount -= (pitch_ - (80 << 7)) << 4;
 8000dd6:	bfc8      	it	gt
 8000dd8:	f5a2 5220 	subgt.w	r2, r2, #10240	; 0x2800
  int32_t f = Interpolate824(lut_svf_cutoff, lp_cutoff << 17);
 8000ddc:	9303      	str	r3, [sp, #12]
  int32_t fuzz_amount = parameter_[1] << 1;
 8000dde:	ea4f 0341 	mov.w	r3, r1, lsl #1
    fuzz_amount -= (pitch_ - (80 << 7)) << 4;
 8000de2:	bfc4      	itt	gt
 8000de4:	eba3 1302 	subgt.w	r3, r3, r2, lsl #4
 8000de8:	ea23 73e3 	bicgt.w	r3, r3, r3, asr #31
  return (a * (65535 - balance) + b * balance) >> 16;
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	f647 7bff 	movw	fp, #32767	; 0x7fff
 8000df4:	f5c5 497f 	rsb	r9, r5, #65280	; 0xff00
 8000df8:	b29b      	uxth	r3, r3
  int32_t lp_state = lp_state_;
 8000dfa:	f8d4 c054 	ldr.w	ip, [r4, #84]	; 0x54
  int32_t a = table[index >> 8];
 8000dfe:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8000ed0 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x1a4>
  return (a * (65535 - balance) + b * balance) >> 16;
 8000e02:	f109 09ff 	add.w	r9, r9, #255	; 0xff
 8000e06:	9204      	str	r2, [sp, #16]
 8000e08:	9305      	str	r3, [sp, #20]
  while (size--) {
 8000e0a:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 8000e0e:	d353      	bcc.n	8000eb8 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x18c>
 8000e10:	f938 3b02 	ldrsh.w	r3, [r8], #2
 8000e14:	f937 2b02 	ldrsh.w	r2, [r7], #2
 8000e18:	436b      	muls	r3, r5
 8000e1a:	fb09 3202 	mla	r2, r9, r2, r3
    lp_state += (sample - lp_state) * f >> 15;
 8000e1e:	9903      	ldr	r1, [sp, #12]
 8000e20:	1412      	asrs	r2, r2, #16
 8000e22:	eba2 030c 	sub.w	r3, r2, ip
 8000e26:	434b      	muls	r3, r1
 8000e28:	eb0c 3ce3 	add.w	ip, ip, r3, asr #15
 8000e2c:	45dc      	cmp	ip, fp
 8000e2e:	bfa8      	it	ge
 8000e30:	46dc      	movge	ip, fp
 8000e32:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x198>)
  int32_t b = table[(index >> 8) + 1];
 8000e34:	4824      	ldr	r0, [pc, #144]	; (8000ec8 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x19c>)
 8000e36:	459c      	cmp	ip, r3
 8000e38:	bfb8      	it	lt
 8000e3a:	469c      	movlt	ip, r3
    shifted_sample = lp_state + 32768;
 8000e3c:	f50c 4100 	add.w	r1, ip, #32768	; 0x8000
  int32_t a = table[index >> 8];
 8000e40:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8000e44:	f93a 301e 	ldrsh.w	r3, [sl, lr, lsl #1]
  int32_t b = table[(index >> 8) + 1];
 8000e48:	f930 e01e 	ldrsh.w	lr, [r0, lr, lsl #1]
  return a + ((b - a) * static_cast<int32_t>(index & 0xff) >> 8);
 8000e4c:	b2c9      	uxtb	r1, r1
 8000e4e:	ebae 0e03 	sub.w	lr, lr, r3
 8000e52:	fb01 f10e 	mul.w	r1, r1, lr
 8000e56:	eb03 2121 	add.w	r1, r3, r1, asr #8
  return (a * (65535 - balance) + b * balance) >> 16;
 8000e5a:	9b05      	ldr	r3, [sp, #20]
 8000e5c:	b209      	sxth	r1, r1
 8000e5e:	435a      	muls	r2, r3
 8000e60:	9b04      	ldr	r3, [sp, #16]
 8000e62:	fb03 2101 	mla	r1, r3, r1, r2
 8000e66:	1409      	asrs	r1, r1, #16
 8000e68:	f827 1c02 	strh.w	r1, [r7, #-2]
  while (size--) {
 8000e6c:	e7cd      	b.n	8000e0a <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0xde>
  } else if (parameter_[0] <= 21845) {
 8000e6e:	f245 5255 	movw	r2, #21845	; 0x5555
 8000e72:	4293      	cmp	r3, r2
 8000e74:	dc10      	bgt.n	8000e98 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x16c>
 8000e76:	2203      	movs	r2, #3
    balance = 65535 - (parameter_[0] - 10923) * 6;
 8000e78:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 8000e7c:	3b2b      	subs	r3, #43	; 0x2b
 8000e7e:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
    parameter_ = parameter;
 8000e82:	f8a0 5066 	strh.w	r5, [r0, #102]	; 0x66
 8000e86:	f8a0 5086 	strh.w	r5, [r0, #134]	; 0x86
    shape_ = shape;
 8000e8a:	f880 5094 	strb.w	r5, [r0, #148]	; 0x94
 8000e8e:	005d      	lsls	r5, r3, #1
 8000e90:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
 8000e94:	3d01      	subs	r5, #1
 8000e96:	e76b      	b.n	8000d70 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x44>
    analog_oscillator_[0].set_parameter((parameter_[0] - 21846) * 3);
 8000e98:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 8000e9c:	3b56      	subs	r3, #86	; 0x56
 8000e9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    parameter_ = parameter;
 8000ea2:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
    shape_ = shape;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
 8000eac:	2305      	movs	r3, #5
    parameter_ = parameter;
 8000eae:	f8a0 5086 	strh.w	r5, [r0, #134]	; 0x86
    shape_ = shape;
 8000eb2:	f880 3094 	strb.w	r3, [r0, #148]	; 0x94
 8000eb6:	e75c      	b.n	8000d72 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x46>
  lp_state_ = lp_state;
 8000eb8:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
}
 8000ebc:	b007      	add	sp, #28
 8000ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ec2:	bf00      	nop
 8000ec4:	ffff8001 	.word	0xffff8001
 8000ec8:	08004d94 	.word	0x08004d94
 8000ecc:	0800498e 	.word	0x0800498e
 8000ed0:	08004d92 	.word	0x08004d92

08000ed4 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj>:
    size_t size) {
 8000ed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ed8:	461d      	mov	r5, r3
  switch (shape_) {
 8000eda:	f244 2354 	movw	r3, #16980	; 0x4254
 8000ede:	5cc3      	ldrb	r3, [r0, r3]
    size_t size) {
 8000ee0:	4614      	mov	r4, r2
 8000ee2:	3b09      	subs	r3, #9
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	bf98      	it	ls
 8000eea:	4a3c      	ldrls	r2, [pc, #240]	; (8000fdc <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0x108>)
 8000eec:	460e      	mov	r6, r1
 8000eee:	bf98      	it	ls
 8000ef0:	5cd1      	ldrbls	r1, [r2, r3]
    int16_t detune_1 = intervals[parameter_[i] >> 9];
 8000ef2:	f9b0 3000 	ldrsh.w	r3, [r0]
 8000ef6:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8000fe0 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0x10c>
 8000efa:	ea4f 2e63 	mov.w	lr, r3, asr #9
 8000efe:	f93c 801e 	ldrsh.w	r8, [ip, lr, lsl #1]
    int16_t detune_2 = intervals[((parameter_[i] >> 8) + 1) >> 1];
 8000f02:	ea4f 2e23 	mov.w	lr, r3, asr #8
 8000f06:	f10e 0e01 	add.w	lr, lr, #1
 8000f0a:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    int16_t detune = detune_1 + ((detune_2 - detune_1) * xfade >> 16);
 8000f0e:	f93c e01e 	ldrsh.w	lr, [ip, lr, lsl #1]
    uint16_t xfade = parameter_[i] << 8;
 8000f12:	ea4f 2303 	mov.w	r3, r3, lsl #8
    int16_t detune = detune_1 + ((detune_2 - detune_1) * xfade >> 16);
 8000f16:	ebae 0e08 	sub.w	lr, lr, r8
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	fb03 f30e 	mul.w	r3, r3, lr
  analog_oscillator_[0].set_pitch(pitch_);
 8000f20:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  switch (shape_) {
 8000f24:	bf88      	it	hi
 8000f26:	2105      	movhi	r1, #5
    pitch_ = pitch;
 8000f28:	f8a0 706e 	strh.w	r7, [r0, #110]	; 0x6e
    analog_oscillator_[i + 1].set_pitch(pitch_ + detune);
 8000f2c:	4447      	add	r7, r8
 8000f2e:	eb07 4323 	add.w	r3, r7, r3, asr #16
 8000f32:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
    int16_t detune_1 = intervals[parameter_[i] >> 9];
 8000f36:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    parameter_ = parameter;
 8000f3a:	2200      	movs	r2, #0
    int16_t detune_2 = intervals[((parameter_[i] >> 8) + 1) >> 1];
 8000f3c:	ea4f 2e23 	mov.w	lr, r3, asr #8
 8000f40:	f10e 0e01 	add.w	lr, lr, #1
    int16_t detune_1 = intervals[parameter_[i] >> 9];
 8000f44:	125f      	asrs	r7, r3, #9
    int16_t detune_2 = intervals[((parameter_[i] >> 8) + 1) >> 1];
 8000f46:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    int16_t detune_1 = intervals[parameter_[i] >> 9];
 8000f4a:	f93c 7017 	ldrsh.w	r7, [ip, r7, lsl #1]
    int16_t detune = detune_1 + ((detune_2 - detune_1) * xfade >> 16);
 8000f4e:	f93c c01e 	ldrsh.w	ip, [ip, lr, lsl #1]
    uint16_t xfade = parameter_[i] << 8;
 8000f52:	021b      	lsls	r3, r3, #8
    int16_t detune = detune_1 + ((detune_2 - detune_1) * xfade >> 16);
 8000f54:	ebac 0c07 	sub.w	ip, ip, r7
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	fb03 f30c 	mul.w	r3, r3, ip
    analog_oscillator_[i + 1].set_pitch(pitch_ + detune);
 8000f5e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8000f62:	f8a0 2066 	strh.w	r2, [r0, #102]	; 0x66
 8000f66:	4467      	add	r7, ip
 8000f68:	eb07 4323 	add.w	r3, r7, r3, asr #16
    pitch_ = pitch;
 8000f6c:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
  std::fill(&buffer[0], &buffer[size], 0);
 8000f70:	4623      	mov	r3, r4
    parameter_ = parameter;
 8000f72:	f8a0 2086 	strh.w	r2, [r0, #134]	; 0x86
 8000f76:	f8a0 20a6 	strh.w	r2, [r0, #166]	; 0xa6
    shape_ = shape;
 8000f7a:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 8000f7e:	f880 1094 	strb.w	r1, [r0, #148]	; 0x94
 8000f82:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
 8000f86:	eb04 0845 	add.w	r8, r4, r5, lsl #1
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 8000f8a:	4598      	cmp	r8, r3
 8000f8c:	d002      	beq.n	8000f94 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xc0>
	*__first = __tmp;
 8000f8e:	f823 2b02 	strh.w	r2, [r3], #2
 8000f92:	e7fa      	b.n	8000f8a <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xb6>
      buffer[j] += temp_buffer_[j] * 21 >> 6;
 8000f94:	f04f 0b15 	mov.w	fp, #21
 8000f98:	f100 0758 	add.w	r7, r0, #88	; 0x58
 8000f9c:	f100 0ab8 	add.w	sl, r0, #184	; 0xb8
    analog_oscillator_[i].Render(sync, temp_buffer_, NULL, size);
 8000fa0:	f100 0922 	add.w	r9, r0, #34	; 0x22
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	4638      	mov	r0, r7
 8000fa8:	9500      	str	r5, [sp, #0]
 8000faa:	464a      	mov	r2, r9
 8000fac:	4631      	mov	r1, r6
 8000fae:	f7ff f8f7 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
 8000fb2:	4648      	mov	r0, r9
 8000fb4:	4623      	mov	r3, r4
    for (size_t j = 0; j < size; ++j) {
 8000fb6:	4598      	cmp	r8, r3
 8000fb8:	d00a      	beq.n	8000fd0 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xfc>
      buffer[j] += temp_buffer_[j] * 21 >> 6;
 8000fba:	f930 1b02 	ldrsh.w	r1, [r0], #2
 8000fbe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fc2:	fb0b f101 	mul.w	r1, fp, r1
 8000fc6:	eb02 12a1 	add.w	r2, r2, r1, asr #6
 8000fca:	f823 2b02 	strh.w	r2, [r3], #2
    for (size_t j = 0; j < size; ++j) {
 8000fce:	e7f2      	b.n	8000fb6 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xe2>
 8000fd0:	3720      	adds	r7, #32
  for (size_t i = 0; i < 3; ++i) {
 8000fd2:	4557      	cmp	r7, sl
 8000fd4:	d1e6      	bne.n	8000fa4 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xd0>
}
 8000fd6:	b003      	add	sp, #12
 8000fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fdc:	08004707 	.word	0x08004707
 8000fe0:	0800470a 	.word	0x0800470a

08000fe4 <_ZN6braids15MacroOscillator13RenderSawCombEPKhPsj>:
}

void MacroOscillator::RenderSawComb(
  const uint8_t* sync,
  int16_t* buffer,
  size_t size) {
 8000fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000fe6:	461d      	mov	r5, r3
    parameter_ = parameter;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	4604      	mov	r4, r0
 8000fec:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
    pitch_ = pitch;
 8000ff0:	8900      	ldrh	r0, [r0, #8]
    shape_ = shape;
 8000ff2:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    pitch_ = pitch;
 8000ff6:	f8a4 006e 	strh.w	r0, [r4, #110]	; 0x6e
  analog_oscillator_[0].set_parameter(0);
  analog_oscillator_[0].set_pitch(pitch_);
  analog_oscillator_[0].set_shape(OSC_SHAPE_SAW);
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8000ffa:	9500      	str	r5, [sp, #0]
 8000ffc:	f104 0058 	add.w	r0, r4, #88	; 0x58
  size_t size) {
 8001000:	4617      	mov	r7, r2
 8001002:	460e      	mov	r6, r1
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8001004:	f7ff f8cc 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  
  digital_oscillator_.set_parameters(parameter_[0], parameter_[1]);
 8001008:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  }

  inline void set_parameters(
      int16_t parameter_1,
      int16_t parameter_2) {
    parameter_[0] = parameter_1;
 800100c:	8822      	ldrh	r2, [r4, #0]
    parameter_[1] = parameter_2;
 800100e:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
    if (pitch_ > (90 << 7) && pitch > (90 << 7)) {
 8001012:	f9b4 30d0 	ldrsh.w	r3, [r4, #208]	; 0xd0
    parameter_[0] = parameter_1;
 8001016:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
    if (pitch_ > (90 << 7) && pitch > (90 << 7)) {
 800101a:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 800101e:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
  digital_oscillator_.set_pitch(pitch_);
 8001022:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8001026:	dd11      	ble.n	800104c <_ZN6braids15MacroOscillator13RenderSawCombEPKhPsj+0x68>
 8001028:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 800102c:	dd0e      	ble.n	800104c <_ZN6braids15MacroOscillator13RenderSawCombEPKhPsj+0x68>
      pitch_ = (static_cast<int32_t>(pitch_) + pitch) >> 1;
 800102e:	4413      	add	r3, r2
 8001030:	105b      	asrs	r3, r3, #1
 8001032:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
    shape_ = shape;
 8001036:	2302      	movs	r3, #2
  digital_oscillator_.set_shape(OSC_SHAPE_COMB_FILTER);
  digital_oscillator_.Render(sync, buffer, size);
 8001038:	463a      	mov	r2, r7
 800103a:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
 800103e:	4631      	mov	r1, r6
 8001040:	462b      	mov	r3, r5
}
 8001042:	b003      	add	sp, #12
 8001044:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  digital_oscillator_.Render(sync, buffer, size);
 8001048:	f7ff bbf2 	b.w	8000830 <_ZN6braids17DigitalOscillator6RenderEPKhPsj>
      pitch_ = pitch;
 800104c:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
 8001050:	e7f1      	b.n	8001036 <_ZN6braids15MacroOscillator13RenderSawCombEPKhPsj+0x52>

08001052 <_ZN6braids15MacroOscillator13RenderDigitalEPKhPsj>:
    size_t size) {
 8001052:	b470      	push	{r4, r5, r6}
  digital_oscillator_.set_parameters(parameter_[0], parameter_[1]);
 8001054:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
    parameter_[0] = parameter_1;
 8001058:	8805      	ldrh	r5, [r0, #0]
    parameter_[1] = parameter_2;
 800105a:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
    if (pitch_ > (90 << 7) && pitch > (90 << 7)) {
 800105e:	f9b0 40d0 	ldrsh.w	r4, [r0, #208]	; 0xd0
    parameter_[0] = parameter_1;
 8001062:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
    if (pitch_ > (90 << 7) && pitch > (90 << 7)) {
 8001066:	f5b4 5f34 	cmp.w	r4, #11520	; 0x2d00
 800106a:	f100 06b8 	add.w	r6, r0, #184	; 0xb8
  digital_oscillator_.set_pitch(pitch_);
 800106e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8001072:	dd10      	ble.n	8001096 <_ZN6braids15MacroOscillator13RenderDigitalEPKhPsj+0x44>
 8001074:	f5b5 5f34 	cmp.w	r5, #11520	; 0x2d00
 8001078:	dd0d      	ble.n	8001096 <_ZN6braids15MacroOscillator13RenderDigitalEPKhPsj+0x44>
      pitch_ = (static_cast<int32_t>(pitch_) + pitch) >> 1;
 800107a:	442c      	add	r4, r5
 800107c:	1064      	asrs	r4, r4, #1
 800107e:	f8a0 40d0 	strh.w	r4, [r0, #208]	; 0xd0
      shape_ - MACRO_OSC_SHAPE_TRIPLE_RING_MOD));
 8001082:	f244 2454 	movw	r4, #16980	; 0x4254
 8001086:	5d04      	ldrb	r4, [r0, r4]
 8001088:	3c0d      	subs	r4, #13
    shape_ = shape;
 800108a:	f880 40d5 	strb.w	r4, [r0, #213]	; 0xd5
  digital_oscillator_.Render(sync, buffer, size);
 800108e:	4630      	mov	r0, r6
}
 8001090:	bc70      	pop	{r4, r5, r6}
  digital_oscillator_.Render(sync, buffer, size);
 8001092:	f7ff bbcd 	b.w	8000830 <_ZN6braids17DigitalOscillator6RenderEPKhPsj>
      pitch_ = pitch;
 8001096:	f8a0 50d0 	strh.w	r5, [r0, #208]	; 0xd0
 800109a:	e7f2      	b.n	8001082 <_ZN6braids15MacroOscillator13RenderDigitalEPKhPsj+0x30>

0800109c <_ZN6braids15MacroOscillator6RenderEPKhPsj>:
    size_t size) {
 800109c:	b4f0      	push	{r4, r5, r6, r7}
  RenderFn fn = fn_table_[shape_];
 800109e:	f244 2554 	movw	r5, #16980	; 0x4254
 80010a2:	4c09      	ldr	r4, [pc, #36]	; (80010c8 <_ZN6braids15MacroOscillator6RenderEPKhPsj+0x2c>)
 80010a4:	5d45      	ldrb	r5, [r0, r5]
 80010a6:	eb04 06c5 	add.w	r6, r4, r5, lsl #3
 80010aa:	6876      	ldr	r6, [r6, #4]
 80010ac:	f854 4035 	ldr.w	r4, [r4, r5, lsl #3]
  (this->*fn)(sync, buffer, size);
 80010b0:	1075      	asrs	r5, r6, #1
 80010b2:	07f6      	lsls	r6, r6, #31
 80010b4:	eb00 0705 	add.w	r7, r0, r5
 80010b8:	bf44      	itt	mi
 80010ba:	5940      	ldrmi	r0, [r0, r5]
 80010bc:	5904      	ldrmi	r4, [r0, r4]
 80010be:	4638      	mov	r0, r7
 80010c0:	46a4      	mov	ip, r4
}
 80010c2:	bcf0      	pop	{r4, r5, r6, r7}
  (this->*fn)(sync, buffer, size);
 80010c4:	4760      	bx	ip
 80010c6:	bf00      	nop
 80010c8:	20000118 	.word	0x20000118

080010cc <_ZN6braids9Quantizer4InitEv>:
 80010cc:	2301      	movs	r3, #1
 80010ce:	7003      	strb	r3, [r0, #0]
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80010d6:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 80010da:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 80010de:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80010e2:	3002      	adds	r0, #2
 80010e4:	f820 3b02 	strh.w	r3, [r0], #2
 80010e8:	3380      	adds	r3, #128	; 0x80
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010f0:	d1f8      	bne.n	80010e4 <_ZN6braids9Quantizer4InitEv+0x18>
 80010f2:	4770      	bx	lr

080010f4 <_ZN6braids9Quantizer9ConfigureEPKssj>:
 80010f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010f8:	b3a1      	cbz	r1, 8001164 <_ZN6braids9Quantizer9ConfigureEPKssj+0x70>
 80010fa:	b39b      	cbz	r3, 8001164 <_ZN6braids9Quantizer9ConfigureEPKssj+0x70>
 80010fc:	b392      	cbz	r2, 8001164 <_ZN6braids9Quantizer9ConfigureEPKssj+0x70>
 80010fe:	2401      	movs	r4, #1
 8001100:	4607      	mov	r7, r0
 8001102:	f807 4b82 	strb.w	r4, [r7], #130
 8001106:	2400      	movs	r4, #0
 8001108:	f647 78ff 	movw	r8, #32767	; 0x7fff
 800110c:	4626      	mov	r6, r4
 800110e:	f103 4e00 	add.w	lr, r3, #2147483648	; 0x80000000
 8001112:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800116c <_ZN6braids9Quantizer9ConfigureEPKssj+0x78>
 8001116:	f100 0c80 	add.w	ip, r0, #128	; 0x80
 800111a:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800111e:	ebae 0504 	sub.w	r5, lr, r4
 8001122:	f931 b015 	ldrsh.w	fp, [r1, r5, lsl #1]
 8001126:	43f5      	mvns	r5, r6
 8001128:	f931 a014 	ldrsh.w	sl, [r1, r4, lsl #1]
 800112c:	fb02 b505 	mla	r5, r2, r5, fp
 8001130:	fb06 aa02 	mla	sl, r6, r2, sl
 8001134:	45c2      	cmp	sl, r8
 8001136:	bfa8      	it	ge
 8001138:	46c2      	movge	sl, r8
 800113a:	4545      	cmp	r5, r8
 800113c:	bfa8      	it	ge
 800113e:	4645      	movge	r5, r8
 8001140:	45ca      	cmp	sl, r9
 8001142:	bfb8      	it	lt
 8001144:	46ca      	movlt	sl, r9
 8001146:	454d      	cmp	r5, r9
 8001148:	bfb8      	it	lt
 800114a:	464d      	movlt	r5, r9
 800114c:	3401      	adds	r4, #1
 800114e:	42a3      	cmp	r3, r4
 8001150:	f827 ab02 	strh.w	sl, [r7], #2
 8001154:	f82c 5902 	strh.w	r5, [ip], #-2
 8001158:	bf9c      	itt	ls
 800115a:	3601      	addls	r6, #1
 800115c:	2400      	movls	r4, #0
 800115e:	4560      	cmp	r0, ip
 8001160:	d1dd      	bne.n	800111e <_ZN6braids9Quantizer9ConfigureEPKssj+0x2a>
 8001162:	e001      	b.n	8001168 <_ZN6braids9Quantizer9ConfigureEPKssj+0x74>
 8001164:	2300      	movs	r3, #0
 8001166:	7003      	strb	r3, [r0, #0]
 8001168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800116c:	ffff8001 	.word	0xffff8001

08001170 <_ZN6braids9Quantizer7ProcessEll>:
 8001170:	7803      	ldrb	r3, [r0, #0]
 8001172:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001174:	b15b      	cbz	r3, 800118e <_ZN6braids9Quantizer7ProcessEll+0x1e>
 8001176:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800117a:	1a89      	subs	r1, r1, r2
 800117c:	428b      	cmp	r3, r1
 800117e:	dc08      	bgt.n	8001192 <_ZN6braids9Quantizer7ProcessEll+0x22>
 8001180:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8001184:	428b      	cmp	r3, r1
 8001186:	db04      	blt.n	8001192 <_ZN6braids9Quantizer7ProcessEll+0x22>
 8001188:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
 800118c:	4411      	add	r1, r2
 800118e:	4608      	mov	r0, r1
 8001190:	bdf0      	pop	{r4, r5, r6, r7, pc}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 8001192:	247b      	movs	r4, #123	; 0x7b
 8001194:	b20f      	sxth	r7, r1
 8001196:	f100 0308 	add.w	r3, r0, #8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 800119a:	2c00      	cmp	r4, #0
 800119c:	dd0c      	ble.n	80011b8 <_ZN6braids9Quantizer7ProcessEll+0x48>
	{
	  _DistanceType __half = __len >> 1;
 800119e:	1065      	asrs	r5, r4, #1
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__val, __middle))
 80011a0:	f933 c015 	ldrsh.w	ip, [r3, r5, lsl #1]
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
 80011a4:	eb03 0645 	add.w	r6, r3, r5, lsl #1
 80011a8:	45bc      	cmp	ip, r7
 80011aa:	dc03      	bgt.n	80011b4 <_ZN6braids9Quantizer7ProcessEll+0x44>
	    __len = __half;
	  else
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 80011ac:	1b64      	subs	r4, r4, r5
	      ++__first;
 80011ae:	1cb3      	adds	r3, r6, #2
	      __len = __len - __half - 1;
 80011b0:	3c01      	subs	r4, #1
 80011b2:	e7f2      	b.n	800119a <_ZN6braids9Quantizer7ProcessEll+0x2a>
	  _DistanceType __half = __len >> 1;
 80011b4:	462c      	mov	r4, r5
 80011b6:	e7f0      	b.n	800119a <_ZN6braids9Quantizer7ProcessEll+0x2a>
 80011b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80011bc:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 80011c0:	1c84      	adds	r4, r0, #2
 80011c2:	1b1b      	subs	r3, r3, r4
 80011c4:	105b      	asrs	r3, r3, #1
 80011c6:	b21f      	sxth	r7, r3
 80011c8:	3b02      	subs	r3, #2
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	42bb      	cmp	r3, r7
 80011ce:	dc11      	bgt.n	80011f4 <_ZN6braids9Quantizer7ProcessEll+0x84>
 80011d0:	eb00 0443 	add.w	r4, r0, r3, lsl #1
 80011d4:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 80011d8:	1b0c      	subs	r4, r1, r4
 80011da:	2c00      	cmp	r4, #0
 80011dc:	bfb8      	it	lt
 80011de:	4264      	neglt	r4, r4
 80011e0:	b224      	sxth	r4, r4
 80011e2:	42a6      	cmp	r6, r4
 80011e4:	bfc8      	it	gt
 80011e6:	461d      	movgt	r5, r3
 80011e8:	f103 0301 	add.w	r3, r3, #1
 80011ec:	bfc8      	it	gt
 80011ee:	4626      	movgt	r6, r4
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	e7eb      	b.n	80011cc <_ZN6braids9Quantizer7ProcessEll+0x5c>
 80011f4:	eb00 0345 	add.w	r3, r0, r5, lsl #1
 80011f8:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 80011fc:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
 8001200:	f930 4015 	ldrsh.w	r4, [r0, r5, lsl #1]
 8001204:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 8001208:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800120c:	4434      	add	r4, r6
 800120e:	1124      	asrs	r4, r4, #4
 8001210:	f8c0 4108 	str.w	r4, [r0, #264]	; 0x108
 8001214:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001218:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800121c:	4433      	add	r3, r6
 800121e:	111b      	asrs	r3, r3, #4
 8001220:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8001224:	e7b2      	b.n	800118c <_ZN6braids9Quantizer7ProcessEll+0x1c>
	...

08001228 <_ZN6braids8Settings5ResetEv>:
 8001228:	2260      	movs	r2, #96	; 0x60
 800122a:	b508      	push	{r3, lr}
 800122c:	4903      	ldr	r1, [pc, #12]	; (800123c <_ZN6braids8Settings5ResetEv+0x14>)
 800122e:	f003 fa31 	bl	8004694 <memcpy>
 8001232:	224d      	movs	r2, #77	; 0x4d
 8001234:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
 8001238:	bd08      	pop	{r3, pc}
 800123a:	bf00      	nop
 800123c:	0800df14 	.word	0x0800df14

08001240 <_ZN6braids8Settings11CheckPaquesEv>:
 8001240:	b510      	push	{r4, lr}
 8001242:	4905      	ldr	r1, [pc, #20]	; (8001258 <_ZN6braids8Settings11CheckPaquesEv+0x18>)
 8001244:	4604      	mov	r4, r0
 8001246:	3028      	adds	r0, #40	; 0x28
 8001248:	f7fe ff80 	bl	800014c <strcmp>
 800124c:	fab0 f080 	clz	r0, r0
 8001250:	0940      	lsrs	r0, r0, #5
 8001252:	f884 0062 	strb.w	r0, [r4, #98]	; 0x62
 8001256:	bd10      	pop	{r4, pc}
 8001258:	0800dcca 	.word	0x0800dcca

0800125c <_ZN6braids8Settings4InitEv>:
 800125c:	b570      	push	{r4, r5, r6, lr}
 800125e:	4604      	mov	r4, r0
 8001260:	260c      	movs	r6, #12
 8001262:	f7ff ffe1 	bl	8001228 <_ZN6braids8Settings5ResetEv>
 8001266:	2200      	movs	r2, #0
 8001268:	2301      	movs	r3, #1
 800126a:	481b      	ldr	r0, [pc, #108]	; (80012d8 <_ZN6braids8Settings4InitEv+0x7c>)
 800126c:	b15b      	cbz	r3, 8001286 <_ZN6braids8Settings4InitEv+0x2a>
 800126e:	fb06 f102 	mul.w	r1, r6, r2
 8001272:	5ca5      	ldrb	r5, [r4, r2]
 8001274:	5c0b      	ldrb	r3, [r1, r0]
 8001276:	42ab      	cmp	r3, r5
 8001278:	d82b      	bhi.n	80012d2 <_ZN6braids8Settings4InitEv+0x76>
 800127a:	4401      	add	r1, r0
 800127c:	784b      	ldrb	r3, [r1, #1]
 800127e:	42ab      	cmp	r3, r5
 8001280:	bf34      	ite	cc
 8001282:	2300      	movcc	r3, #0
 8001284:	2301      	movcs	r3, #1
 8001286:	3201      	adds	r2, #1
 8001288:	2a14      	cmp	r2, #20
 800128a:	d1ef      	bne.n	800126c <_ZN6braids8Settings4InitEv+0x10>
 800128c:	b1cb      	cbz	r3, 80012c2 <_ZN6braids8Settings4InitEv+0x66>
 800128e:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
 8001292:	2b4d      	cmp	r3, #77	; 0x4d
 8001294:	d115      	bne.n	80012c2 <_ZN6braids8Settings4InitEv+0x66>
 8001296:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8001298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800129c:	d911      	bls.n	80012c2 <_ZN6braids8Settings4InitEv+0x66>
 800129e:	f641 733f 	movw	r3, #7999	; 0x1f3f
 80012a2:	f643 617e 	movw	r1, #15998	; 0x3e7e
 80012a6:	8c22      	ldrh	r2, [r4, #32]
 80012a8:	441a      	add	r2, r3
 80012aa:	b292      	uxth	r2, r2
 80012ac:	428a      	cmp	r2, r1
 80012ae:	d808      	bhi.n	80012c2 <_ZN6braids8Settings4InitEv+0x66>
 80012b0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80012b2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80012b6:	d904      	bls.n	80012c2 <_ZN6braids8Settings4InitEv+0x66>
 80012b8:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 80012ba:	4413      	add	r3, r2
 80012bc:	b29b      	uxth	r3, r3
 80012be:	428b      	cmp	r3, r1
 80012c0:	d902      	bls.n	80012c8 <_ZN6braids8Settings4InitEv+0x6c>
 80012c2:	4620      	mov	r0, r4
 80012c4:	f7ff ffb0 	bl	8001228 <_ZN6braids8Settings5ResetEv>
 80012c8:	4620      	mov	r0, r4
 80012ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80012ce:	f7ff bfb7 	b.w	8001240 <_ZN6braids8Settings11CheckPaquesEv>
 80012d2:	2300      	movs	r3, #0
 80012d4:	e7d7      	b.n	8001286 <_ZN6braids8Settings4InitEv+0x2a>
 80012d6:	bf00      	nop
 80012d8:	0800dcd0 	.word	0x0800dcd0

080012dc <_ZN6braids8Settings4SaveEv>:
 80012dc:	234d      	movs	r3, #77	; 0x4d
 80012de:	f880 305f 	strb.w	r3, [r0, #95]	; 0x5f
 80012e2:	f7ff bfad 	b.w	8001240 <_ZN6braids8Settings11CheckPaquesEv>

080012e6 <_ZN6braids3Adc4InitEv>:
 80012e6:	4770      	bx	lr

080012e8 <_Z18SystemClock_Configv>:
 80012e8:	b510      	push	{r4, lr}
 80012ea:	2414      	movs	r4, #20
 80012ec:	b090      	sub	sp, #64	; 0x40
 80012ee:	4622      	mov	r2, r4
 80012f0:	2100      	movs	r1, #0
 80012f2:	a808      	add	r0, sp, #32
 80012f4:	f003 f9d9 	bl	80046aa <memset>
 80012f8:	4622      	mov	r2, r4
 80012fa:	2100      	movs	r1, #0
 80012fc:	a801      	add	r0, sp, #4
 80012fe:	f003 f9d4 	bl	80046aa <memset>
 8001302:	2402      	movs	r4, #2
 8001304:	2201      	movs	r2, #1
 8001306:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800130a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800130e:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
 8001312:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001316:	a806      	add	r0, sp, #24
 8001318:	920a      	str	r2, [sp, #40]	; 0x28
 800131a:	930f      	str	r3, [sp, #60]	; 0x3c
 800131c:	f002 fd8e 	bl	8003e3c <HAL_RCC_OscConfig>
 8001320:	230f      	movs	r3, #15
 8001322:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001326:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800132a:	2300      	movs	r3, #0
 800132c:	4621      	mov	r1, r4
 800132e:	a801      	add	r0, sp, #4
 8001330:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8001334:	9305      	str	r3, [sp, #20]
 8001336:	f003 f801 	bl	800433c <HAL_RCC_ClockConfig>
 800133a:	b010      	add	sp, #64	; 0x40
 800133c:	bd10      	pop	{r4, pc}
	...

08001340 <main>:
 8001340:	b500      	push	{lr}
 8001342:	b089      	sub	sp, #36	; 0x24
 8001344:	f001 fafa 	bl	800293c <HAL_Init>
 8001348:	f7ff ffce 	bl	80012e8 <_Z18SystemClock_Configv>
 800134c:	2210      	movs	r2, #16
 800134e:	2100      	movs	r1, #0
 8001350:	eb0d 0002 	add.w	r0, sp, r2
 8001354:	f003 f9a9 	bl	80046aa <memset>
 8001358:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <main+0x84>)
 800135a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800135e:	699a      	ldr	r2, [r3, #24]
 8001360:	4819      	ldr	r0, [pc, #100]	; (80013c8 <main+0x88>)
 8001362:	f042 0210 	orr.w	r2, r2, #16
 8001366:	619a      	str	r2, [r3, #24]
 8001368:	699a      	ldr	r2, [r3, #24]
 800136a:	f002 0210 	and.w	r2, r2, #16
 800136e:	9201      	str	r2, [sp, #4]
 8001370:	9a01      	ldr	r2, [sp, #4]
 8001372:	699a      	ldr	r2, [r3, #24]
 8001374:	f042 0220 	orr.w	r2, r2, #32
 8001378:	619a      	str	r2, [r3, #24]
 800137a:	699a      	ldr	r2, [r3, #24]
 800137c:	f002 0220 	and.w	r2, r2, #32
 8001380:	9202      	str	r2, [sp, #8]
 8001382:	9a02      	ldr	r2, [sp, #8]
 8001384:	699a      	ldr	r2, [r3, #24]
 8001386:	f042 0204 	orr.w	r2, r2, #4
 800138a:	619a      	str	r2, [r3, #24]
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	2200      	movs	r2, #0
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	9303      	str	r3, [sp, #12]
 8001396:	9b03      	ldr	r3, [sp, #12]
 8001398:	f001 fda9 	bl	8002eee <HAL_GPIO_WritePin>
 800139c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013a0:	2301      	movs	r3, #1
 80013a2:	2100      	movs	r1, #0
 80013a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013a8:	2302      	movs	r3, #2
 80013aa:	4807      	ldr	r0, [pc, #28]	; (80013c8 <main+0x88>)
 80013ac:	e9cd 1306 	strd	r1, r3, [sp, #24]
 80013b0:	a904      	add	r1, sp, #16
 80013b2:	f001 fc2b 	bl	8002c0c <HAL_GPIO_Init>
 80013b6:	a804      	add	r0, sp, #16
 80013b8:	f000 f97c 	bl	80016b4 <_ZN8MainLoop4initEv>
 80013bc:	a804      	add	r0, sp, #16
 80013be:	f000 fbb3 	bl	8001b28 <_ZN8MainLoop4loopEv>
 80013c2:	e7fb      	b.n	80013bc <main+0x7c>
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40011000 	.word	0x40011000

080013cc <HAL_MspInit>:
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <HAL_MspInit+0x5c>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	4a14      	ldr	r2, [pc, #80]	; (8001428 <HAL_MspInit+0x5c>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6193      	str	r3, [r2, #24]
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_MspInit+0x5c>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <HAL_MspInit+0x5c>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	4a0e      	ldr	r2, [pc, #56]	; (8001428 <HAL_MspInit+0x5c>)
 80013f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f4:	61d3      	str	r3, [r2, #28]
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <HAL_MspInit+0x5c>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <HAL_MspInit+0x60>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <HAL_MspInit+0x60>)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6053      	str	r3, [r2, #4]
 800141e:	bf00      	nop
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	40021000 	.word	0x40021000
 800142c:	40010000 	.word	0x40010000

08001430 <HAL_I2C_MspInit>:
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	f107 0310 	add.w	r3, r7, #16
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a15      	ldr	r2, [pc, #84]	; (80014a0 <HAL_I2C_MspInit+0x70>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d123      	bne.n	8001498 <HAL_I2C_MspInit+0x68>
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <HAL_I2C_MspInit+0x74>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a13      	ldr	r2, [pc, #76]	; (80014a4 <HAL_I2C_MspInit+0x74>)
 8001456:	f043 0308 	orr.w	r3, r3, #8
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <HAL_I2C_MspInit+0x74>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	23c0      	movs	r3, #192	; 0xc0
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	2312      	movs	r3, #18
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	2303      	movs	r3, #3
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	f107 0310 	add.w	r3, r7, #16
 8001478:	4619      	mov	r1, r3
 800147a:	480b      	ldr	r0, [pc, #44]	; (80014a8 <HAL_I2C_MspInit+0x78>)
 800147c:	f001 fbc6 	bl	8002c0c <HAL_GPIO_Init>
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_I2C_MspInit+0x74>)
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_I2C_MspInit+0x74>)
 8001486:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800148a:	61d3      	str	r3, [r2, #28]
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_I2C_MspInit+0x74>)
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	bf00      	nop
 800149a:	3720      	adds	r7, #32
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40005400 	.word	0x40005400
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40010c00 	.word	0x40010c00

080014ac <NMI_Handler>:
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <HardFault_Handler>:
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	e7fe      	b.n	80014bc <HardFault_Handler+0x4>

080014be <MemManage_Handler>:
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	e7fe      	b.n	80014c2 <MemManage_Handler+0x4>

080014c4 <BusFault_Handler>:
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	e7fe      	b.n	80014c8 <BusFault_Handler+0x4>

080014ca <UsageFault_Handler>:
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	e7fe      	b.n	80014ce <UsageFault_Handler+0x4>

080014d0 <SVC_Handler>:
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <DebugMon_Handler>:
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <PendSV_Handler>:
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <SysTick_Handler>:
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	f001 fa66 	bl	80029c8 <HAL_IncTick>
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}

08001500 <SystemInit>:
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <SystemInit+0x5c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a14      	ldr	r2, [pc, #80]	; (800155c <SystemInit+0x5c>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <SystemInit+0x5c>)
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	4911      	ldr	r1, [pc, #68]	; (800155c <SystemInit+0x5c>)
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <SystemInit+0x60>)
 8001518:	4013      	ands	r3, r2
 800151a:	604b      	str	r3, [r1, #4]
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <SystemInit+0x5c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0e      	ldr	r2, [pc, #56]	; (800155c <SystemInit+0x5c>)
 8001522:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <SystemInit+0x5c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0a      	ldr	r2, [pc, #40]	; (800155c <SystemInit+0x5c>)
 8001532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <SystemInit+0x5c>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <SystemInit+0x5c>)
 800153e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001542:	6053      	str	r3, [r2, #4]
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <SystemInit+0x5c>)
 8001546:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <SystemInit+0x64>)
 800154e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	40021000 	.word	0x40021000
 8001560:	f8ff0000 	.word	0xf8ff0000
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <_ZL14callbackRenderi>:



static void callbackRender(int flagEndHalf)
{
	flagRender = 1;
 8001568:	2201      	movs	r2, #1
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <_ZL14callbackRenderi+0x18>)
	if(flagEndHalf==1)
 800156c:	4290      	cmp	r0, r2
	flagRender = 1;
 800156e:	701a      	strb	r2, [r3, #0]
		indexBufferRender=1;
	}
	else
	{
		// transfer reach half, so I can start writing the first half
		indexBufferRender=0;
 8001570:	bf18      	it	ne
 8001572:	2200      	movne	r2, #0
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <_ZL14callbackRenderi+0x1c>)
		indexBufferRender=1;
 8001576:	bf0c      	ite	eq
 8001578:	7018      	strbeq	r0, [r3, #0]
		indexBufferRender=0;
 800157a:	701a      	strbne	r2, [r3, #0]
	}
}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000374 	.word	0x20000374
 8001584:	200003f9 	.word	0x200003f9

08001588 <_ZN6braids15MacroOscillator4InitEv>:
  typedef void (MacroOscillator::*RenderFn)(const uint8_t*, int16_t*, size_t);

  MacroOscillator() { }
  ~MacroOscillator() { }
  
  inline void Init() {
 8001588:	b570      	push	{r4, r5, r6, lr}
    pitch_ = 60 << 7;
 800158a:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
    phase_increment_ = 1;
 800158e:	2500      	movs	r5, #0
 8001590:	2601      	movs	r6, #1
    discontinuity_depth_ = -16383;
 8001592:	f24c 0201 	movw	r2, #49153	; 0xc001
 8001596:	4604      	mov	r4, r0
 8001598:	f8a0 206c 	strh.w	r2, [r0, #108]	; 0x6c
    pitch_ = 60 << 7;
 800159c:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
    discontinuity_depth_ = -16383;
 80015a0:	f8a0 208c 	strh.w	r2, [r0, #140]	; 0x8c
    pitch_ = 60 << 7;
 80015a4:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
    discontinuity_depth_ = -16383;
 80015a8:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
    pitch_ = 60 << 7;
 80015ac:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
    phase_increment_ = 1;
 80015b0:	e9c0 5616 	strd	r5, r6, [r0, #88]	; 0x58
    high_ = false;
 80015b4:	f880 5064 	strb.w	r5, [r0, #100]	; 0x64
    parameter_ = previous_parameter_ = 0;
 80015b8:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
 80015bc:	f8a0 5066 	strh.w	r5, [r0, #102]	; 0x66
    aux_parameter_ = 0;
 80015c0:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
    next_sample_ = 0;
 80015c4:	6705      	str	r5, [r0, #112]	; 0x70
    phase_increment_ = 1;
 80015c6:	e9c0 561e 	strd	r5, r6, [r0, #120]	; 0x78
    high_ = false;
 80015ca:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    parameter_ = previous_parameter_ = 0;
 80015ce:	f8a0 5088 	strh.w	r5, [r0, #136]	; 0x88
 80015d2:	f8a0 5086 	strh.w	r5, [r0, #134]	; 0x86
    aux_parameter_ = 0;
 80015d6:	f8a0 508a 	strh.w	r5, [r0, #138]	; 0x8a
    next_sample_ = 0;
 80015da:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    phase_increment_ = 1;
 80015de:	e9c0 5626 	strd	r5, r6, [r0, #152]	; 0x98
    high_ = false;
 80015e2:	f880 50a4 	strb.w	r5, [r0, #164]	; 0xa4
    parameter_ = previous_parameter_ = 0;
 80015e6:	f8a0 50a8 	strh.w	r5, [r0, #168]	; 0xa8
 80015ea:	f8a0 50a6 	strh.w	r5, [r0, #166]	; 0xa6
    aux_parameter_ = 0;
 80015ee:	f8a0 50aa 	strh.w	r5, [r0, #170]	; 0xaa
    next_sample_ = 0;
 80015f2:	f8c0 50b0 	str.w	r5, [r0, #176]	; 0xb0
    memset(&state_, 0, sizeof(state_));
 80015f6:	22c4      	movs	r2, #196	; 0xc4
 80015f8:	4629      	mov	r1, r5
 80015fa:	30d8      	adds	r0, #216	; 0xd8
 80015fc:	f003 f855 	bl	80046aa <memset>
    decay_ = 4093;
 8001600:	f640 73fd 	movw	r3, #4093	; 0xffd
    frequency_ = 33 << 7;
 8001604:	f44f 5284 	mov.w	r2, #4224	; 0x1080
 8001608:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
 800160c:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
 8001610:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
 8001614:	f8c4 31dc 	str.w	r3, [r4, #476]	; 0x1dc
    resonance_ = 16384;
 8001618:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    delay_ = 0;
 800161c:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
    counter_ = 0;
 8001620:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
    state_ = 0;
 8001624:	f8c4 51a8 	str.w	r5, [r4, #424]	; 0x1a8
    delay_ = 0;
 8001628:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
    counter_ = 0;
 800162c:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    state_ = 0;
 8001630:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
    delay_ = 0;
 8001634:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    counter_ = 0;
 8001638:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
    state_ = 0;
 800163c:	f8c4 51d0 	str.w	r5, [r4, #464]	; 0x1d0
    delay_ = 0;
 8001640:	f8c4 51d8 	str.w	r5, [r4, #472]	; 0x1d8
    counter_ = 0;
 8001644:	f8c4 51e0 	str.w	r5, [r4, #480]	; 0x1e0
    state_ = 0;
 8001648:	f8c4 51e4 	str.w	r5, [r4, #484]	; 0x1e4
    lp_ = 0;
 800164c:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    bp_ = 0;
 8001650:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
    frequency_ = 33 << 7;
 8001654:	f8a4 21ee 	strh.w	r2, [r4, #494]	; 0x1ee
    resonance_ = 16384;
 8001658:	f8a4 31f0 	strh.w	r3, [r4, #496]	; 0x1f0
    dirty_ = true;
 800165c:	f884 61ec 	strb.w	r6, [r4, #492]	; 0x1ec
    punch_ = 0;
 8001660:	f8c4 51f4 	str.w	r5, [r4, #500]	; 0x1f4
    mode_ = SVF_MODE_BP;
 8001664:	f884 6208 	strb.w	r6, [r4, #520]	; 0x208
    lp_ = 0;
 8001668:	f8c4 5220 	str.w	r5, [r4, #544]	; 0x220
    bp_ = 0;
 800166c:	f8c4 5224 	str.w	r5, [r4, #548]	; 0x224
    frequency_ = 33 << 7;
 8001670:	f8a4 220e 	strh.w	r2, [r4, #526]	; 0x20e
    resonance_ = 16384;
 8001674:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
    dirty_ = true;
 8001678:	f884 620c 	strb.w	r6, [r4, #524]	; 0x20c
    punch_ = 0;
 800167c:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
    mode_ = SVF_MODE_BP;
 8001680:	f884 6228 	strb.w	r6, [r4, #552]	; 0x228
    lp_ = 0;
 8001684:	f8c4 5240 	str.w	r5, [r4, #576]	; 0x240
    bp_ = 0;
 8001688:	f8c4 5244 	str.w	r5, [r4, #580]	; 0x244
    frequency_ = 33 << 7;
 800168c:	f8a4 222e 	strh.w	r2, [r4, #558]	; 0x22e
    resonance_ = 16384;
 8001690:	f8a4 3230 	strh.w	r3, [r4, #560]	; 0x230
    dirty_ = true;
 8001694:	f884 622c 	strb.w	r6, [r4, #556]	; 0x22c
    punch_ = 0;
 8001698:	f8c4 5234 	str.w	r5, [r4, #564]	; 0x234
    mode_ = SVF_MODE_BP;
 800169c:	f884 6248 	strb.w	r6, [r4, #584]	; 0x248
    phase_ = 0;
 80016a0:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
    strike_ = true;
 80016a4:	f884 60d4 	strb.w	r6, [r4, #212]	; 0xd4
    init_ = true;
 80016a8:	f884 60d3 	strb.w	r6, [r4, #211]	; 0xd3
    analog_oscillator_[0].Init();
    analog_oscillator_[1].Init();
    analog_oscillator_[2].Init();
    digital_oscillator_.Init();
    lp_state_ = 0;
 80016ac:	6565      	str	r5, [r4, #84]	; 0x54
    previous_parameter_[0] = 0;
 80016ae:	6065      	str	r5, [r4, #4]
    previous_parameter_[1] = 0;
  }
 80016b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080016b4 <_ZN8MainLoop4initEv>:


void MainLoop::init(void)
{
 80016b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;
	for(i=0; i<SAMPLES_BUFFER_SIZE; i++)
 80016b6:	2400      	movs	r4, #0
	{
		samplesBuffer[i] = 0;
 80016b8:	4625      	mov	r5, r4
 80016ba:	4b35      	ldr	r3, [pc, #212]	; (8001790 <_ZN8MainLoop4initEv+0xdc>)
 80016bc:	54e5      	strb	r5, [r4, r3]
	for(i=0; i<SAMPLES_BUFFER_SIZE; i++)
 80016be:	3401      	adds	r4, #1
 80016c0:	2c30      	cmp	r4, #48	; 0x30
 80016c2:	d1fb      	bne.n	80016bc <_ZN8MainLoop4initEv+0x8>
	}
    memset(sync_samples, 0, SAMPLES_BUFFER_SIZE/2);
 80016c4:	2218      	movs	r2, #24
 80016c6:	2100      	movs	r1, #0
 80016c8:	4832      	ldr	r0, [pc, #200]	; (8001794 <_ZN8MainLoop4initEv+0xe0>)
 80016ca:	f002 ffee 	bl	80046aa <memset>

	mehal_init((uint32_t*)samplesBuffer,SAMPLES_BUFFER_SIZE,callbackRender);
 80016ce:	4621      	mov	r1, r4
 80016d0:	4a31      	ldr	r2, [pc, #196]	; (8001798 <_ZN8MainLoop4initEv+0xe4>)
 80016d2:	482f      	ldr	r0, [pc, #188]	; (8001790 <_ZN8MainLoop4initEv+0xdc>)
 80016d4:	f000 fec4 	bl	8002460 <mehal_init>

	settings.Init();
 80016d8:	4830      	ldr	r0, [pc, #192]	; (800179c <_ZN8MainLoop4initEv+0xe8>)
 80016da:	f7ff fdbf 	bl	800125c <_ZN6braids8Settings4InitEv>
	osc.Init();
 80016de:	4830      	ldr	r0, [pc, #192]	; (80017a0 <_ZN8MainLoop4initEv+0xec>)
 80016e0:	f7ff ff52 	bl	8001588 <_ZN6braids15MacroOscillator4InitEv>
	quantizer.Init();
 80016e4:	482f      	ldr	r0, [pc, #188]	; (80017a4 <_ZN8MainLoop4initEv+0xf0>)
 80016e6:	f7ff fcf1 	bl	80010cc <_ZN6braids9Quantizer4InitEv>

  void Init() {
    target_[ENV_SEGMENT_ATTACK] = 65535;
    target_[ENV_SEGMENT_DECAY] = 0;
    target_[ENV_SEGMENT_DEAD] = 0;
    increment_[ENV_SEGMENT_DEAD] = 0;
 80016ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ee:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <_ZN8MainLoop4initEv+0xf4>)
	envelope.Init();
	//jitter_source.Init();
	adc.Init();
 80016f0:	482e      	ldr	r0, [pc, #184]	; (80017ac <_ZN8MainLoop4initEv+0xf8>)
 80016f2:	609d      	str	r5, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
    target_[ENV_SEGMENT_DECAY] = 0;
 80016f6:	821d      	strh	r5, [r3, #16]
 80016f8:	f7ff fdf5 	bl	80012e6 <_ZN6braids3Adc4InitEv>
	userInterface.init(&adc,&memory);
 80016fc:	4a2c      	ldr	r2, [pc, #176]	; (80017b0 <_ZN8MainLoop4initEv+0xfc>)
 80016fe:	492b      	ldr	r1, [pc, #172]	; (80017ac <_ZN8MainLoop4initEv+0xf8>)
 8001700:	482c      	ldr	r0, [pc, #176]	; (80017b4 <_ZN8MainLoop4initEv+0x100>)
 8001702:	f000 fbab 	bl	8001e5c <_ZN2Ui4initEPN6braids3AdcEP6Memory>
	//ws.Init(GetUniqueId(1));


	// calibration
	int32_t adc_code_c2=memory.readUInt32(Memory::ADDR_ADC_CODE_C2);
 8001706:	2100      	movs	r1, #0
 8001708:	4829      	ldr	r0, [pc, #164]	; (80017b0 <_ZN8MainLoop4initEv+0xfc>)
 800170a:	f000 fe45 	bl	8002398 <_ZN6Memory10readUInt32Et>
	if(adc_code_c2<0 || adc_code_c2>4095) adc_code_c2=82;

	int32_t adc_code_c4=memory.readUInt32(Memory::ADDR_ADC_CODE_C4);
 800170e:	2104      	movs	r1, #4
 8001710:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8001714:	bf34      	ite	cc
 8001716:	4604      	movcc	r4, r0
 8001718:	2452      	movcs	r4, #82	; 0x52
 800171a:	4825      	ldr	r0, [pc, #148]	; (80017b0 <_ZN8MainLoop4initEv+0xfc>)
 800171c:	f000 fe3c 	bl	8002398 <_ZN6Memory10readUInt32Et>
 8001720:	f240 279f 	movw	r7, #671	; 0x29f
	if(adc_code_c4<0 || adc_code_c4>4095) adc_code_c4=671;

	int32_t adc_code_fm=memory.readUInt32(Memory::ADDR_ADC_CODE_FM);
 8001724:	2108      	movs	r1, #8
 8001726:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800172a:	bf38      	it	cc
 800172c:	4607      	movcc	r7, r0
 800172e:	4820      	ldr	r0, [pc, #128]	; (80017b0 <_ZN8MainLoop4initEv+0xfc>)
 8001730:	f000 fe32 	bl	8002398 <_ZN6Memory10readUInt32Et>
	if(adc_code_fm<0 || adc_code_fm>4095) adc_code_fm=0;

	int32_t adc_code_p0_min= memory.readUInt32(Memory::ADDR_ADC_CODE_P0_MIN);
 8001734:	210c      	movs	r1, #12
 8001736:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800173a:	bf34      	ite	cc
 800173c:	4606      	movcc	r6, r0
 800173e:	2600      	movcs	r6, #0
 8001740:	481b      	ldr	r0, [pc, #108]	; (80017b0 <_ZN8MainLoop4initEv+0xfc>)
 8001742:	f000 fe29 	bl	8002398 <_ZN6Memory10readUInt32Et>
	if(adc_code_p0_min<0 || adc_code_p0_min>4095) adc_code_p0_min=0;

	int32_t adc_code_p0_max= memory.readUInt32(Memory::ADDR_ADC_CODE_P0_MAX);
 8001746:	2110      	movs	r1, #16
 8001748:	4819      	ldr	r0, [pc, #100]	; (80017b0 <_ZN8MainLoop4initEv+0xfc>)
 800174a:	f000 fe25 	bl	8002398 <_ZN6Memory10readUInt32Et>
	if(adc_code_p0_max<0 || adc_code_p0_max>4095) adc_code_p0_max=4095;

	int32_t adc_code_p1_min= memory.readUInt32(Memory::ADDR_ADC_CODE_P1_MIN);
 800174e:	2114      	movs	r1, #20
 8001750:	4817      	ldr	r0, [pc, #92]	; (80017b0 <_ZN8MainLoop4initEv+0xfc>)
 8001752:	f000 fe21 	bl	8002398 <_ZN6Memory10readUInt32Et>
	if(adc_code_p1_min<0 || adc_code_p1_min>4095) adc_code_p1_min=0;

	int32_t adc_code_p1_max= memory.readUInt32(Memory::ADDR_ADC_CODE_P1_MAX);
 8001756:	2118      	movs	r1, #24
 8001758:	4815      	ldr	r0, [pc, #84]	; (80017b0 <_ZN8MainLoop4initEv+0xfc>)
 800175a:	f000 fe1d 	bl	8002398 <_ZN6Memory10readUInt32Et>
      int32_t adc_code_fm,
      int32_t adc_code_p0_min,
      int32_t adc_code_p0_max,
      int32_t adc_code_p1_min,
      int32_t adc_code_p1_max) {
    if (adc_code_c4 != adc_code_c2) {
 800175e:	42bc      	cmp	r4, r7
 8001760:	4d0e      	ldr	r5, [pc, #56]	; (800179c <_ZN8MainLoop4initEv+0xe8>)
 8001762:	d00d      	beq.n	8001780 <_ZN8MainLoop4initEv+0xcc>
      int32_t scale = (24 * 128 * 4096L) / (adc_code_c4 - adc_code_c2);
 8001764:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8001768:	1b3a      	subs	r2, r7, r4
 800176a:	fb93 f3f2 	sdiv	r3, r3, r2
      data_.pitch_cv_scale = scale;
      data_.pitch_cv_offset = (60 << 7) - 
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 800176e:	443c      	add	r4, r7
 8001770:	1064      	asrs	r4, r4, #1
      data_.pitch_cv_scale = scale;
 8001772:	61ab      	str	r3, [r5, #24]
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 8001774:	4363      	muls	r3, r4
 8001776:	131b      	asrs	r3, r3, #12
      data_.pitch_cv_offset = (60 << 7) - 
 8001778:	f5c3 53f0 	rsb	r3, r3, #7680	; 0x1e00
 800177c:	616b      	str	r3, [r5, #20]
      data_.fm_cv_offset = adc_code_fm;
 800177e:	61ee      	str	r6, [r5, #28]
    //     int32_t offset = -(min_code[i] * scale >> 12) - 40;
    //     data_.parameter_cv_offset[i] = offset;
    //     data_.parameter_cv_scale[i] = scale;
    //   }
    // }
    Save();
 8001780:	4806      	ldr	r0, [pc, #24]	; (800179c <_ZN8MainLoop4initEv+0xe8>)
 8001782:	f7ff fdab 	bl	80012dc <_ZN6braids8Settings4SaveEv>
    data[setting] = value;
 8001786:	2304      	movs	r3, #4
 8001788:	706b      	strb	r3, [r5, #1]
 800178a:	2301      	movs	r3, #1
 800178c:	722b      	strb	r3, [r5, #8]
	//________________________________

	settings.SetValue(SETTING_RESOLUTION,RESOLUTION_8_BIT);
	settings.SetValue(SETTING_PITCH_OCTAVE,1); // C2: Lowest octave

}
 800178e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001790:	2000038e 	.word	0x2000038e
 8001794:	20000375 	.word	0x20000375
 8001798:	08001569 	.word	0x08001569
 800179c:	20000310 	.word	0x20000310
 80017a0:	2000040c 	.word	0x2000040c
 80017a4:	2000468c 	.word	0x2000468c
 80017a8:	20004668 	.word	0x20004668
 80017ac:	20000400 	.word	0x20000400
 80017b0:	20004664 	.word	0x20004664
 80017b4:	200003c0 	.word	0x200003c0

080017b8 <_ZN8MainLoop6renderEPhm>:
	}
	//______________
}

void MainLoop::render(uint8_t* out, uint32_t outSize)
{
 80017b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017bc:	b083      	sub	sp, #12
    return data[setting];
 80017be:	4dac      	ldr	r5, [pc, #688]	; (8001a70 <_ZN8MainLoop6renderEPhm+0x2b8>)
 80017c0:	af00      	add	r7, sp, #0
	  static int16_t previous_shape = 0;
	  static uint16_t gain_lp;

	  envelope.Update(
	      settings.GetValue(SETTING_AD_ATTACK) * 8,
	      settings.GetValue(SETTING_AD_DECAY) * 8);
 80017c2:	7beb      	ldrb	r3, [r5, #15]
{
 80017c4:	6079      	str	r1, [r7, #4]
 80017c6:	4690      	mov	r8, r2
  inline EnvelopeSegment segment() const {
    return static_cast<EnvelopeSegment>(segment_);
  }

  inline void Update(int32_t a, int32_t d) {
    increment_[ENV_SEGMENT_ATTACK] = lut_env_portamento_increments[a];
 80017c8:	49aa      	ldr	r1, [pc, #680]	; (8001a74 <_ZN8MainLoop6renderEPhm+0x2bc>)
	      settings.GetValue(SETTING_AD_ATTACK) * 8,
 80017ca:	7baa      	ldrb	r2, [r5, #14]
	      settings.GetValue(SETTING_AD_DECAY) * 8);
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	4caa      	ldr	r4, [pc, #680]	; (8001a78 <_ZN8MainLoop6renderEPhm+0x2c0>)
    increment_[ENV_SEGMENT_DECAY] = lut_env_portamento_increments[d];
 80017d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    increment_[ENV_SEGMENT_ATTACK] = lut_env_portamento_increments[a];
 80017d4:	00d2      	lsls	r2, r2, #3
 80017d6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    increment_[ENV_SEGMENT_DECAY] = lut_env_portamento_increments[d];
 80017da:	6063      	str	r3, [r4, #4]
    segment_ = segment;
    phase_ = 0;
  }

  inline uint16_t Render() {
    uint32_t increment = increment_[segment_];
 80017dc:	6963      	ldr	r3, [r4, #20]
    increment_[ENV_SEGMENT_ATTACK] = lut_env_portamento_increments[a];
 80017de:	6022      	str	r2, [r4, #0]
 80017e0:	6a21      	ldr	r1, [r4, #32]
 80017e2:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 80017e6:	2000      	movs	r0, #0
 80017e8:	1852      	adds	r2, r2, r1
 80017ea:	bf28      	it	cs
 80017ec:	2001      	movcs	r0, #1
    phase_ += increment;
 80017ee:	6222      	str	r2, [r4, #32]
    if (phase_ < increment) {
 80017f0:	b198      	cbz	r0, 800181a <_ZN8MainLoop6renderEPhm+0x62>
      value_ = Mix(a_, b_, 65535);
      Trigger(static_cast<EnvelopeSegment>(segment_ + 1));
 80017f2:	3301      	adds	r3, #1
 80017f4:	b2db      	uxtb	r3, r3
    if (segment == ENV_SEGMENT_DEAD) {
 80017f6:	2b02      	cmp	r3, #2
      value_ = 0;
 80017f8:	bf0c      	ite	eq
 80017fa:	2200      	moveq	r2, #0
  return (a * (65535 - balance) + b * balance) >> 16;
 80017fc:	8b62      	ldrhne	r2, [r4, #26]
    segment_ = segment;
 80017fe:	6163      	str	r3, [r4, #20]
 8001800:	bf1c      	itt	ne
 8001802:	ebc2 4202 	rsbne	r2, r2, r2, lsl #16
 8001806:	1412      	asrne	r2, r2, #16
      value_ = 0;
 8001808:	83a2      	strh	r2, [r4, #28]
    a_ = value_;
 800180a:	8ba2      	ldrh	r2, [r4, #28]
 800180c:	8322      	strh	r2, [r4, #24]
    b_ = target_[segment];
 800180e:	eb04 0243 	add.w	r2, r4, r3, lsl #1
    phase_ = 0;
 8001812:	2300      	movs	r3, #0
    b_ = target_[segment];
 8001814:	8992      	ldrh	r2, [r2, #12]
    phase_ = 0;
 8001816:	6223      	str	r3, [r4, #32]
    b_ = target_[segment];
 8001818:	8362      	strh	r2, [r4, #26]
    }
    if (increment_[segment_]) {
 800181a:	6963      	ldr	r3, [r4, #20]
 800181c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001820:	b1c3      	cbz	r3, 8001854 <_ZN8MainLoop6renderEPhm+0x9c>
      value_ = Mix(a_, b_, Interpolate824(lut_env_expo, phase_));
 8001822:	6a22      	ldr	r2, [r4, #32]
  uint32_t a = table[phase >> 24];
 8001824:	4995      	ldr	r1, [pc, #596]	; (8001a7c <_ZN8MainLoop6renderEPhm+0x2c4>)
 8001826:	0e10      	lsrs	r0, r2, #24
 8001828:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
  uint32_t b = table[(phase >> 24) + 1];
 800182c:	3102      	adds	r1, #2
 800182e:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 8001832:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8001836:	1ac9      	subs	r1, r1, r3
 8001838:	434a      	muls	r2, r1
  return (a * (65535 - balance) + b * balance) >> 16;
 800183a:	8b60      	ldrh	r0, [r4, #26]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 800183c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  return (a * (65535 - balance) + b * balance) >> 16;
 8001840:	b29b      	uxth	r3, r3
 8001842:	f5c3 417f 	rsb	r1, r3, #65280	; 0xff00
 8001846:	4343      	muls	r3, r0
 8001848:	8b22      	ldrh	r2, [r4, #24]
 800184a:	31ff      	adds	r1, #255	; 0xff
 800184c:	fb01 3302 	mla	r3, r1, r2, r3
 8001850:	141b      	asrs	r3, r3, #16
 8001852:	83a3      	strh	r3, [r4, #28]
  
  inline void set_shape(MacroOscillatorShape shape) {
    if (shape != shape_) {
 8001854:	f244 2354 	movw	r3, #16980	; 0x4254
 8001858:	4e89      	ldr	r6, [pc, #548]	; (8001a80 <_ZN8MainLoop6renderEPhm+0x2c8>)

	  uint32_t ad_value = envelope.Render();


	  // Shape modulation
	  osc.set_shape(settings.shape());
 800185a:	782a      	ldrb	r2, [r5, #0]
 800185c:	5cf1      	ldrb	r1, [r6, r3]
	    CONSTRAIN(value, 0, 32767);

	    parameters[i] = value;
	  }*/
	  //osc.set_parameters(parameters[0], parameters[1]);
	  osc.set_parameters(userInterface.getParamFromCurrentWaveTable(),0);
 800185e:	4889      	ldr	r0, [pc, #548]	; (8001a84 <_ZN8MainLoop6renderEPhm+0x2cc>)
 8001860:	4291      	cmp	r1, r2
  inline uint32_t phase_increment() const {
    return phase_increment_;
  }
  
  inline void Strike() {
    strike_ = true;
 8001862:	bf1c      	itt	ne
 8001864:	2101      	movne	r1, #1
 8001866:	f886 10d4 	strbne.w	r1, [r6, #212]	; 0xd4
      Strike();
    }
    shape_ = shape;
 800186a:	54f2      	strb	r2, [r6, r3]
    }
    return value_;
 800186c:	f8b4 901c 	ldrh.w	r9, [r4, #28]
 8001870:	f000 fa85 	bl	8001d7e <_ZN2Ui28getParamFromCurrentWaveTableEv>

  inline void set_parameters(
      int16_t parameter_1,
      int16_t parameter_2) {
    parameter_[0] = parameter_1;
    parameter_[1] = parameter_2;
 8001874:	2300      	movs	r3, #0
    parameter_[0] = parameter_1;
 8001876:	8030      	strh	r0, [r6, #0]
	  osc.set_chords_parameters(userInterface.getChord1(),userInterface.getChord2(),userInterface.getChord3());
 8001878:	4882      	ldr	r0, [pc, #520]	; (8001a84 <_ZN8MainLoop6renderEPhm+0x2cc>)
    parameter_[1] = parameter_2;
 800187a:	8073      	strh	r3, [r6, #2]
 800187c:	f000 fa76 	bl	8001d6c <_ZN2Ui9getChord1Ev>
 8001880:	4682      	mov	sl, r0
 8001882:	4880      	ldr	r0, [pc, #512]	; (8001a84 <_ZN8MainLoop6renderEPhm+0x2cc>)
 8001884:	f000 fa75 	bl	8001d72 <_ZN2Ui9getChord2Ev>
 8001888:	4683      	mov	fp, r0
 800188a:	487e      	ldr	r0, [pc, #504]	; (8001a84 <_ZN8MainLoop6renderEPhm+0x2cc>)
 800188c:	f000 fa74 	bl	8001d78 <_ZN2Ui9getChord3Ev>
  }
  inline void set_chords_parameters(
      int16_t parameter_1,
      int16_t parameter_2,
	  int16_t parameter_3) {
	  digital_oscillator_.set_chordIntervals(parameter_1,parameter_2,parameter_3);
 8001890:	465a      	mov	r2, fp
 8001892:	4603      	mov	r3, r0
 8001894:	4651      	mov	r1, sl
 8001896:	487c      	ldr	r0, [pc, #496]	; (8001a88 <_ZN8MainLoop6renderEPhm+0x2d0>)
 8001898:	f7ff f852 	bl	8000940 <_ZN6braids17DigitalOscillator18set_chordIntervalsEsss>
  }
  
  inline int32_t adc_to_pitch(int32_t pitch_adc_code) const {
    if (data_.pitch_range == PITCH_RANGE_EXTERNAL ||
 800189c:	79ea      	ldrb	r2, [r5, #7]
		  return this->currentValues[0];
	  }
	  else if(index==2)
	  {
		  ///pitch
		  return this->currentValues[4];
 800189e:	4b7b      	ldr	r3, [pc, #492]	; (8001a8c <_ZN8MainLoop6renderEPhm+0x2d4>)
 80018a0:	f012 0ffb 	tst.w	r2, #251	; 0xfb
	  //_________________________________________________


	  // Apply hysteresis to ADC reading to prevent a single bit error to move
	  // the quantized pitch up and down the quantization boundary.
	  int32_t pitch = quantizer.Process(
 80018a4:	8919      	ldrh	r1, [r3, #8]
 80018a6:	f040 8086 	bne.w	80019b6 <_ZN8MainLoop6renderEPhm+0x1fe>
        data_.pitch_range == PITCH_RANGE_LFO) {
      pitch_adc_code = pitch_adc_code * data_.pitch_cv_scale >> 12;
 80018aa:	69aa      	ldr	r2, [r5, #24]
 80018ac:	434a      	muls	r2, r1
      pitch_adc_code += data_.pitch_cv_offset;
 80018ae:	6969      	ldr	r1, [r5, #20]
 80018b0:	eb01 3122 	add.w	r1, r1, r2, asr #12
    return data_.quantizer_root;
 80018b4:	7cea      	ldrb	r2, [r5, #19]
	      settings.adc_to_pitch(adc.channel(ADC_CHANNEL_PITCH)),
	      (60 + settings.quantizer_root()) << 7);
 80018b6:	4876      	ldr	r0, [pc, #472]	; (8001a90 <_ZN8MainLoop6renderEPhm+0x2d8>)
 80018b8:	323c      	adds	r2, #60	; 0x3c
 80018ba:	01d2      	lsls	r2, r2, #7
 80018bc:	603b      	str	r3, [r7, #0]
 80018be:	f7ff fc57 	bl	8001170 <_ZN6braids9Quantizer7ProcessEll>
	    pitch += settings.adc_to_fm(adc.channel(ADC_CHANNEL_FM));
	  }*/

	  // Check if the pitch has changed to cause an auto-retrigger
	  int32_t pitch_delta = pitch - previous_pitch;
	  if (settings.data().auto_trig &&
 80018c2:	7929      	ldrb	r1, [r5, #4]
	      (60 + settings.quantizer_root()) << 7);
 80018c4:	4683      	mov	fp, r0
 80018c6:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 8001ab0 <_ZN8MainLoop6renderEPhm+0x2f8>
 80018ca:	4872      	ldr	r0, [pc, #456]	; (8001a94 <_ZN8MainLoop6renderEPhm+0x2dc>)
	  if (settings.data().auto_trig &&
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	b149      	cbz	r1, 80018e4 <_ZN8MainLoop6renderEPhm+0x12c>
	  int32_t pitch_delta = pitch - previous_pitch;
 80018d0:	f9b0 1000 	ldrsh.w	r1, [r0]
 80018d4:	ebab 0101 	sub.w	r1, fp, r1
	      //(pitch_delta >= 0x40 || -pitch_delta >= 0x40)) {
			(pitch_delta >= 0x70 || -pitch_delta >= 0x70)) { // too much noise in this hardware
 80018d8:	316f      	adds	r1, #111	; 0x6f
	  if (settings.data().auto_trig &&
 80018da:	29de      	cmp	r1, #222	; 0xde
		  trigger_flag = true;
 80018dc:	bf84      	itt	hi
 80018de:	2101      	movhi	r1, #1
 80018e0:	f88a 1000 	strbhi.w	r1, [sl]
	  // JITTER VCO DRIFT
	  //pitch += jitter_source.Render(settings.vco_drift());

	  // Fine tune adjust
	  //pitch += adc.channel(ADC_CHANNEL_FINE_TUNE) >> 8; //pitch += internal_adc.value() >> 8;
	  uint16_t fineTuneAdc = 4095 - adc.channel(ADC_CHANNEL_FINE_TUNE);
 80018e4:	889b      	ldrh	r3, [r3, #4]
	  previous_pitch = pitch;
 80018e6:	f8a0 b000 	strh.w	fp, [r0]
	  uint16_t fineTuneAdc = 4095 - adc.channel(ADC_CHANNEL_FINE_TUNE);
 80018ea:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80018ee:	330f      	adds	r3, #15
 80018f0:	b29b      	uxth	r3, r3
	  if(fineTuneAdc>=(2048+256))
 80018f2:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 80018f6:	d373      	bcc.n	80019e0 <_ZN8MainLoop6renderEPhm+0x228>
	  {
		  pitch += ((fineTuneAdc-(2048+256))*128)/(4095-(2048+256));
 80018f8:	f240 61ff 	movw	r1, #1791	; 0x6ff
 80018fc:	f5a3 6310 	sub.w	r3, r3, #2304	; 0x900
 8001900:	01db      	lsls	r3, r3, #7
 8001902:	fb93 f3f1 	sdiv	r3, r3, r1
		  userInterface.showUnCalibrated();
	  }
	  else if(fineTuneAdc<=(2048-256))
	  {
		  pitch += (fineTuneAdc*128)/(2048-256) - 128;
		  userInterface.showUnCalibrated();
 8001906:	485f      	ldr	r0, [pc, #380]	; (8001a84 <_ZN8MainLoop6renderEPhm+0x2cc>)
		  pitch += (fineTuneAdc*128)/(2048-256) - 128;
 8001908:	449b      	add	fp, r3
		  userInterface.showUnCalibrated();
 800190a:	f000 fa3e 	bl	8001d8a <_ZN2Ui16showUnCalibratedEv>
    return data[setting];
 800190e:	7c2b      	ldrb	r3, [r5, #16]
		  // no adjust. calibrated
		  userInterface.showCalibrated();
	  }
	  //___________

	  pitch += ad_value * settings.GetValue(SETTING_AD_FM) >> 7;
 8001910:	fb09 f103 	mul.w	r1, r9, r3
 8001914:	eb0b 12d1 	add.w	r2, fp, r1, lsr #7
	    pitch = 16383;
	  } else if (pitch < 0) {
	    pitch = 0;
	  }

	  if (settings.vco_flatten()) {
 8001918:	7aa9      	ldrb	r1, [r5, #10]
 800191a:	f382 020e 	usat	r2, #14, r2
 800191e:	b181      	cbz	r1, 8001942 <_ZN8MainLoop6renderEPhm+0x18a>
	    pitch = Interpolate88(lut_vco_detune, pitch << 2);
 8001920:	0092      	lsls	r2, r2, #2
 8001922:	b292      	uxth	r2, r2
  int32_t a = table[index >> 8];
 8001924:	485c      	ldr	r0, [pc, #368]	; (8001a98 <_ZN8MainLoop6renderEPhm+0x2e0>)
 8001926:	ea4f 2c22 	mov.w	ip, r2, asr #8
 800192a:	f830 101c 	ldrh.w	r1, [r0, ip, lsl #1]
  int32_t b = table[(index >> 8) + 1];
 800192e:	3002      	adds	r0, #2
 8001930:	f830 001c 	ldrh.w	r0, [r0, ip, lsl #1]
  return a + ((b - a) * static_cast<int32_t>(index & 0xff) >> 8);
 8001934:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8001938:	1a40      	subs	r0, r0, r1
 800193a:	4342      	muls	r2, r0
 800193c:	eb01 2222 	add.w	r2, r1, r2, asr #8
 8001940:	b292      	uxth	r2, r2
    }
    return pitch_adc_code;
  }
  
  inline int32_t pitch_transposition() const {
    int32_t t = data_.pitch_range == PITCH_RANGE_LFO ? -36 << 7 : 0;
 8001942:	79e8      	ldrb	r0, [r5, #7]
    t += (static_cast<int32_t>(data_.pitch_octave) - 2) * 12 * 128;
 8001944:	f44f 6cc0 	mov.w	ip, #1536	; 0x600
    int32_t t = data_.pitch_range == PITCH_RANGE_LFO ? -36 << 7 : 0;
 8001948:	2804      	cmp	r0, #4
 800194a:	4854      	ldr	r0, [pc, #336]	; (8001a9c <_ZN8MainLoop6renderEPhm+0x2e4>)
 800194c:	bf18      	it	ne
 800194e:	2000      	movne	r0, #0
	  }
	  osc.set_pitch(pitch + settings.pitch_transposition());
 8001950:	7a29      	ldrb	r1, [r5, #8]
    t += (static_cast<int32_t>(data_.pitch_octave) - 2) * 12 * 128;
 8001952:	3902      	subs	r1, #2
 8001954:	fb0c 0101 	mla	r1, ip, r1, r0
 8001958:	440a      	add	r2, r1
    pitch_ = pitch;
 800195a:	8132      	strh	r2, [r6, #8]

	  if (trigger_flag) {
 800195c:	f89a 2000 	ldrb.w	r2, [sl]
 8001960:	b15a      	cbz	r2, 800197a <_ZN8MainLoop6renderEPhm+0x1c2>
 8001962:	2201      	movs	r2, #1
 8001964:	f886 20d4 	strb.w	r2, [r6, #212]	; 0xd4
    a_ = value_;
 8001968:	8ba2      	ldrh	r2, [r4, #28]
 800196a:	8322      	strh	r2, [r4, #24]
    b_ = target_[segment];
 800196c:	89a2      	ldrh	r2, [r4, #12]
 800196e:	8362      	strh	r2, [r4, #26]
    segment_ = segment;
 8001970:	2200      	movs	r2, #0
 8001972:	6162      	str	r2, [r4, #20]
    phase_ = 0;
 8001974:	6222      	str	r2, [r4, #32]
	    osc.Strike();
	    envelope.Trigger(ENV_SEGMENT_ATTACK);
	    //ui.StepMarquee();
	    trigger_flag = false;
 8001976:	f88a 2000 	strb.w	r2, [sl]
	  }
	  //_________________________________________________________________


	  int16_t audio_samples[outSize];
 800197a:	ea4f 0248 	mov.w	r2, r8, lsl #1
 800197e:	3208      	adds	r2, #8
 8001980:	f022 0207 	bic.w	r2, r2, #7
 8001984:	ebad 0d02 	sub.w	sp, sp, r2
	  int16_t* render_buffer = audio_samples; //int16_t* render_buffer = audio_samples[render_block];

	  if (settings.GetValue(SETTING_AD_VCA) != 0
	    || settings.GetValue(SETTING_AD_TIMBRE) != 0
	    || settings.GetValue(SETTING_AD_COLOR) != 0
	    || settings.GetValue(SETTING_AD_FM) != 0) {
 8001988:	7caa      	ldrb	r2, [r5, #18]
	  int16_t audio_samples[outSize];
 800198a:	466c      	mov	r4, sp
	    || settings.GetValue(SETTING_AD_FM) != 0) {
 800198c:	bba2      	cbnz	r2, 80019f8 <_ZN8MainLoop6renderEPhm+0x240>
	    || settings.GetValue(SETTING_AD_TIMBRE) != 0
 800198e:	78ea      	ldrb	r2, [r5, #3]
 8001990:	bb92      	cbnz	r2, 80019f8 <_ZN8MainLoop6renderEPhm+0x240>
	    || settings.GetValue(SETTING_AD_COLOR) != 0
 8001992:	7c6a      	ldrb	r2, [r5, #17]
 8001994:	bb82      	cbnz	r2, 80019f8 <_ZN8MainLoop6renderEPhm+0x240>
	    || settings.GetValue(SETTING_AD_FM) != 0) {
 8001996:	bb7b      	cbnz	r3, 80019f8 <_ZN8MainLoop6renderEPhm+0x240>
	    memset(sync_buffer, 0, outSize);
	  }
	  else
	  {
		  //Trigger in sync event (this is placed in sampler interrupt timer in braids)
		  memset(sync_buffer, 0, outSize);
 8001998:	4e41      	ldr	r6, [pc, #260]	; (8001aa0 <_ZN8MainLoop6renderEPhm+0x2e8>)
 800199a:	4619      	mov	r1, r3
 800199c:	4642      	mov	r2, r8
 800199e:	4630      	mov	r0, r6
 80019a0:	603b      	str	r3, [r7, #0]
 80019a2:	f002 fe82 	bl	80046aa <memset>
		  if(flagTriggerInEvent==1)
 80019a6:	493f      	ldr	r1, [pc, #252]	; (8001aa4 <_ZN8MainLoop6renderEPhm+0x2ec>)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	680a      	ldr	r2, [r1, #0]
 80019ac:	2a01      	cmp	r2, #1
 80019ae:	d128      	bne.n	8001a02 <_ZN8MainLoop6renderEPhm+0x24a>
		  {
			  flagTriggerInEvent=0;
 80019b0:	600b      	str	r3, [r1, #0]
			  sync_buffer[0]=1;
 80019b2:	7032      	strb	r2, [r6, #0]
 80019b4:	e025      	b.n	8001a02 <_ZN8MainLoop6renderEPhm+0x24a>
    } else if (data_.pitch_range == PITCH_RANGE_FREE) {
 80019b6:	2a01      	cmp	r2, #1
 80019b8:	d107      	bne.n	80019ca <_ZN8MainLoop6renderEPhm+0x212>
      pitch_adc_code = pitch_adc_code * data_.pitch_cv_scale >> 12;
 80019ba:	69aa      	ldr	r2, [r5, #24]
      pitch_adc_code = (pitch_adc_code - 1638);
 80019bc:	f2a1 6166 	subw	r1, r1, #1638	; 0x666
      pitch_adc_code = pitch_adc_code * data_.pitch_cv_scale >> 12;
 80019c0:	4351      	muls	r1, r2
 80019c2:	1309      	asrs	r1, r1, #12
      pitch_adc_code += 60 << 7;
 80019c4:	f501 51f0 	add.w	r1, r1, #7680	; 0x1e00
 80019c8:	e774      	b.n	80018b4 <_ZN8MainLoop6renderEPhm+0xfc>
    } else if (data_.pitch_range == PITCH_RANGE_440) {
 80019ca:	2a03      	cmp	r2, #3
 80019cc:	d005      	beq.n	80019da <_ZN8MainLoop6renderEPhm+0x222>
      pitch_adc_code = (pitch_adc_code - 1638) * 9 >> 1;
 80019ce:	f2a1 6166 	subw	r1, r1, #1638	; 0x666
 80019d2:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80019d6:	1049      	asrs	r1, r1, #1
 80019d8:	e7f4      	b.n	80019c4 <_ZN8MainLoop6renderEPhm+0x20c>
      pitch_adc_code = 69 << 7;
 80019da:	f44f 510a 	mov.w	r1, #8832	; 0x2280
 80019de:	e769      	b.n	80018b4 <_ZN8MainLoop6renderEPhm+0xfc>
	  else if(fineTuneAdc<=(2048-256))
 80019e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80019e4:	d804      	bhi.n	80019f0 <_ZN8MainLoop6renderEPhm+0x238>
		  pitch += (fineTuneAdc*128)/(2048-256) - 128;
 80019e6:	210e      	movs	r1, #14
 80019e8:	fb93 f3f1 	sdiv	r3, r3, r1
 80019ec:	3b80      	subs	r3, #128	; 0x80
 80019ee:	e78a      	b.n	8001906 <_ZN8MainLoop6renderEPhm+0x14e>
		  userInterface.showCalibrated();
 80019f0:	4824      	ldr	r0, [pc, #144]	; (8001a84 <_ZN8MainLoop6renderEPhm+0x2cc>)
 80019f2:	f000 f9d6 	bl	8001da2 <_ZN2Ui14showCalibratedEv>
 80019f6:	e78a      	b.n	800190e <_ZN8MainLoop6renderEPhm+0x156>
	    memset(sync_buffer, 0, outSize);
 80019f8:	4642      	mov	r2, r8
 80019fa:	2100      	movs	r1, #0
 80019fc:	4828      	ldr	r0, [pc, #160]	; (8001aa0 <_ZN8MainLoop6renderEPhm+0x2e8>)
 80019fe:	f002 fe54 	bl	80046aa <memset>
		  }
		  //______________________
	  }

	  osc.Render(sync_buffer, render_buffer, outSize);
 8001a02:	4643      	mov	r3, r8
 8001a04:	4622      	mov	r2, r4
 8001a06:	4926      	ldr	r1, [pc, #152]	; (8001aa0 <_ZN8MainLoop6renderEPhm+0x2e8>)
 8001a08:	481d      	ldr	r0, [pc, #116]	; (8001a80 <_ZN8MainLoop6renderEPhm+0x2c8>)
 8001a0a:	f7ff fb47 	bl	800109c <_ZN6braids15MacroOscillator6RenderEPKhPsj>

	  // Copy to DAC buffer with sample rate and bit reduction applied.
	    int16_t sample = 0;
	    size_t decimation_factor = decimation_factors[settings.data().sample_rate];
	    uint16_t bit_mask = bit_reduction_masks[settings.data().resolution];
	    int32_t gain = settings.GetValue(SETTING_AD_VCA) ? ad_value : 65535;
 8001a0e:	f64f 70ff 	movw	r0, #65535	; 0xffff
	    uint16_t signature = settings.signature() * settings.signature() * 4095;
 8001a12:	f04f 0e00 	mov.w	lr, #0
	    size_t decimation_factor = decimation_factors[settings.data().sample_rate];
 8001a16:	78aa      	ldrb	r2, [r5, #2]
 8001a18:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <_ZN8MainLoop6renderEPhm+0x2f0>)
 8001a1a:	f8df a098 	ldr.w	sl, [pc, #152]	; 8001ab4 <_ZN8MainLoop6renderEPhm+0x2fc>
 8001a1e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
	    uint16_t bit_mask = bit_reduction_masks[settings.data().resolution];
 8001a22:	786a      	ldrb	r2, [r5, #1]
 8001a24:	4b21      	ldr	r3, [pc, #132]	; (8001aac <_ZN8MainLoop6renderEPhm+0x2f4>)
 8001a26:	f8ba c000 	ldrh.w	ip, [sl]
 8001a2a:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
	    int32_t gain = settings.GetValue(SETTING_AD_VCA) ? ad_value : 65535;
 8001a2e:	7cab      	ldrb	r3, [r5, #18]
	    for (size_t i = 0; i < outSize; ++i) {
 8001a30:	4672      	mov	r2, lr
	    int32_t gain = settings.GetValue(SETTING_AD_VCA) ? ad_value : 65535;
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	bf08      	it	eq
 8001a36:	4681      	moveq	r9, r0
	    uint16_t signature = settings.signature() * settings.signature() * 4095;
 8001a38:	7b2b      	ldrb	r3, [r5, #12]
	    int16_t sample = 0;
 8001a3a:	4675      	mov	r5, lr
	    uint16_t signature = settings.signature() * settings.signature() * 4095;
 8001a3c:	435b      	muls	r3, r3
 8001a3e:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 8001a42:	b29b      	uxth	r3, r3
  return (a * (65535 - balance) + b * balance) >> 16;
 8001a44:	1ac3      	subs	r3, r0, r3
	    for (size_t i = 0; i < outSize; ++i) {
 8001a46:	4542      	cmp	r2, r8
 8001a48:	d136      	bne.n	8001ab8 <_ZN8MainLoop6renderEPhm+0x300>
 8001a4a:	f1be 0f00 	cmp.w	lr, #0
 8001a4e:	d001      	beq.n	8001a54 <_ZN8MainLoop6renderEPhm+0x29c>
 8001a50:	f8aa c000 	strh.w	ip, [sl]
	      render_buffer[i] = Mix(sample, warped, signature);
	    }

	  // Copy rendered buffer to DMA buffer (8bits)
	  uint32_t i;
	  for(i=0; i<outSize; i++)
 8001a54:	2300      	movs	r3, #0
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d049      	beq.n	8001aee <_ZN8MainLoop6renderEPhm+0x336>
	  {
		  out[i] = (uint8_t) (((uint16_t)(  -(render_buffer[i]) + 32768U )) >>8)  ;
 8001a5a:	f834 1013 	ldrh.w	r1, [r4, r3, lsl #1]
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f5c1 4100 	rsb	r1, r1, #32768	; 0x8000
 8001a64:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8001a68:	54c1      	strb	r1, [r0, r3]
	  for(i=0; i<outSize; i++)
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	e7f3      	b.n	8001a56 <_ZN8MainLoop6renderEPhm+0x29e>
 8001a6e:	bf00      	nop
 8001a70:	20000310 	.word	0x20000310
 8001a74:	080053a0 	.word	0x080053a0
 8001a78:	20004668 	.word	0x20004668
 8001a7c:	0800478c 	.word	0x0800478c
 8001a80:	2000040c 	.word	0x2000040c
 8001a84:	200003c0 	.word	0x200003c0
 8001a88:	200004c4 	.word	0x200004c4
 8001a8c:	20000400 	.word	0x20000400
 8001a90:	2000468c 	.word	0x2000468c
 8001a94:	2000479e 	.word	0x2000479e
 8001a98:	08004b90 	.word	0x08004b90
 8001a9c:	ffffee00 	.word	0xffffee00
 8001aa0:	20000375 	.word	0x20000375
 8001aa4:	200003fc 	.word	0x200003fc
 8001aa8:	0800e3e8 	.word	0x0800e3e8
 8001aac:	0800e3f6 	.word	0x0800e3f6
 8001ab0:	2000038d 	.word	0x2000038d
 8001ab4:	200047a0 	.word	0x200047a0
	      if ((i % decimation_factor) == 0) {
 8001ab8:	fbb2 f0f1 	udiv	r0, r2, r1
 8001abc:	fb01 2010 	mls	r0, r1, r0, r2
 8001ac0:	b918      	cbnz	r0, 8001aca <_ZN8MainLoop6renderEPhm+0x312>
	        sample = render_buffer[i] & bit_mask;
 8001ac2:	f834 5012 	ldrh.w	r5, [r4, r2, lsl #1]
 8001ac6:	4035      	ands	r5, r6
 8001ac8:	b22d      	sxth	r5, r5
	      sample = sample * gain_lp >> 16;
 8001aca:	fb0c f005 	mul.w	r0, ip, r5
 8001ace:	1400      	asrs	r0, r0, #16
 8001ad0:	b205      	sxth	r5, r0
 8001ad2:	4358      	muls	r0, r3
	      gain_lp += (gain - gain_lp) >> 4;
 8001ad4:	eba9 0e0c 	sub.w	lr, r9, ip
 8001ad8:	eb0c 1c2e 	add.w	ip, ip, lr, asr #4
 8001adc:	1400      	asrs	r0, r0, #16
 8001ade:	f824 0012 	strh.w	r0, [r4, r2, lsl #1]
 8001ae2:	fa1f fc8c 	uxth.w	ip, ip
	    for (size_t i = 0; i < outSize; ++i) {
 8001ae6:	3201      	adds	r2, #1
 8001ae8:	f04f 0e01 	mov.w	lr, #1
 8001aec:	e7ab      	b.n	8001a46 <_ZN8MainLoop6renderEPhm+0x28e>
	  }
	  //___________________________________________

}
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001af6:	bf00      	nop

08001af8 <_ZN8MainLoop15adcStateMachineEv>:


void MainLoop::adcStateMachine(void)
{
 8001af8:	b538      	push	{r3, r4, r5, lr}
	static uint8_t chn=0;

	adc.updateChannelValue(chn,mehal_readADC(chn));
 8001afa:	4c09      	ldr	r4, [pc, #36]	; (8001b20 <_ZN8MainLoop15adcStateMachineEv+0x28>)
 8001afc:	7825      	ldrb	r5, [r4, #0]
 8001afe:	4628      	mov	r0, r5
 8001b00:	f000 fe3a 	bl	8002778 <mehal_readADC>

  }

  void updateChannelValue(uint8_t chn,uint16_t value)
  {
	  if(chn<ADC_CHANNELS)
 8001b04:	2d04      	cmp	r5, #4
	  {
		  this->currentValues[chn] = value;
 8001b06:	bf9c      	itt	ls
 8001b08:	4a06      	ldrls	r2, [pc, #24]	; (8001b24 <_ZN8MainLoop15adcStateMachineEv+0x2c>)
 8001b0a:	f822 0015 	strhls.w	r0, [r2, r5, lsl #1]

	chn++;
 8001b0e:	7822      	ldrb	r2, [r4, #0]
 8001b10:	3201      	adds	r2, #1
 8001b12:	b2d2      	uxtb	r2, r2
	if(chn>=ADC_CHANNELS)
 8001b14:	2a04      	cmp	r2, #4
	{
		chn=0;
 8001b16:	bf88      	it	hi
 8001b18:	2200      	movhi	r2, #0
 8001b1a:	7022      	strb	r2, [r4, #0]
	}

}
 8001b1c:	bd38      	pop	{r3, r4, r5, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000479c 	.word	0x2000479c
 8001b24:	20000400 	.word	0x20000400

08001b28 <_ZN8MainLoop4loopEv>:
{
 8001b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b2a:	4607      	mov	r7, r0
	userInterface.loop();
 8001b2c:	4830      	ldr	r0, [pc, #192]	; (8001bf0 <_ZN8MainLoop4loopEv+0xc8>)
 8001b2e:	f000 f9df 	bl	8001ef0 <_ZN2Ui4loopEv>
    return data[setting];
 8001b32:	4c30      	ldr	r4, [pc, #192]	; (8001bf4 <_ZN8MainLoop4loopEv+0xcc>)
    if (current_scale != settings.GetValue(SETTING_QUANTIZER_SCALE)) {
 8001b34:	4a30      	ldr	r2, [pc, #192]	; (8001bf8 <_ZN8MainLoop4loopEv+0xd0>)
 8001b36:	7a63      	ldrb	r3, [r4, #9]
 8001b38:	7811      	ldrb	r1, [r2, #0]
 8001b3a:	4299      	cmp	r1, r3
 8001b3c:	d00c      	beq.n	8001b58 <_ZN8MainLoop4loopEv+0x30>
      current_scale = settings.GetValue(SETTING_QUANTIZER_SCALE);
 8001b3e:	7013      	strb	r3, [r2, #0]
  }
  
  int32_t Process(int32_t pitch, int32_t root);
  
  void Configure(const Scale& scale) {
    Configure(scale.notes, scale.span, scale.num_notes);
 8001b40:	2228      	movs	r2, #40	; 0x28
 8001b42:	435a      	muls	r2, r3
 8001b44:	492d      	ldr	r1, [pc, #180]	; (8001bfc <_ZN8MainLoop4loopEv+0xd4>)
 8001b46:	f102 0008 	add.w	r0, r2, #8
 8001b4a:	188b      	adds	r3, r1, r2
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	5e8a      	ldrsh	r2, [r1, r2]
 8001b50:	4401      	add	r1, r0
 8001b52:	482b      	ldr	r0, [pc, #172]	; (8001c00 <_ZN8MainLoop4loopEv+0xd8>)
 8001b54:	f7ff face 	bl	80010f4 <_ZN6braids9Quantizer9ConfigureEPKssj>
	if(flagRender==1)
 8001b58:	4d2a      	ldr	r5, [pc, #168]	; (8001c04 <_ZN8MainLoop4loopEv+0xdc>)
    this->adcStateMachine();
 8001b5a:	4638      	mov	r0, r7
 8001b5c:	f7ff ffcc 	bl	8001af8 <_ZN8MainLoop15adcStateMachineEv>
	if(flagRender==1)
 8001b60:	782b      	ldrb	r3, [r5, #0]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d142      	bne.n	8001bec <_ZN8MainLoop4loopEv+0xc4>
		if(indexBufferRender==0)
 8001b66:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <_ZN8MainLoop4loopEv+0xe0>)
 8001b68:	7819      	ldrb	r1, [r3, #0]
			out = samplesBuffer+(SAMPLES_BUFFER_SIZE/2);
 8001b6a:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <_ZN8MainLoop4loopEv+0xe4>)
 8001b6c:	f103 0618 	add.w	r6, r3, #24
 8001b70:	2900      	cmp	r1, #0
 8001b72:	bf08      	it	eq
 8001b74:	461e      	moveq	r6, r3
		mehal_debugPinSet();
 8001b76:	f000 fe49 	bl	800280c <mehal_debugPinSet>
		this->render(out,SAMPLES_BUFFER_SIZE/2);
 8001b7a:	4631      	mov	r1, r6
		sysTickDivisor++;
 8001b7c:	4e24      	ldr	r6, [pc, #144]	; (8001c10 <_ZN8MainLoop4loopEv+0xe8>)
		this->render(out,SAMPLES_BUFFER_SIZE/2);
 8001b7e:	2218      	movs	r2, #24
 8001b80:	4638      	mov	r0, r7
 8001b82:	f7ff fe19 	bl	80017b8 <_ZN8MainLoop6renderEPhm>
		mehal_debugPinReset();
 8001b86:	f000 fe42 	bl	800280e <mehal_debugPinReset>
		sysTickDivisor++;
 8001b8a:	7833      	ldrb	r3, [r6, #0]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	b2db      	uxtb	r3, r3
		if(sysTickDivisor>=4)
 8001b90:	2b03      	cmp	r3, #3
		sysTickDivisor++;
 8001b92:	7033      	strb	r3, [r6, #0]
		if(sysTickDivisor>=4)
 8001b94:	d904      	bls.n	8001ba0 <_ZN8MainLoop4loopEv+0x78>
			userInterface.sysTick(); // 1ms
 8001b96:	4816      	ldr	r0, [pc, #88]	; (8001bf0 <_ZN8MainLoop4loopEv+0xc8>)
 8001b98:	f000 f90e 	bl	8001db8 <_ZN2Ui7sysTickEv>
			sysTickDivisor=0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	7033      	strb	r3, [r6, #0]
		  return this->currentValues[1];
 8001ba0:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <_ZN8MainLoop4loopEv+0xec>)
    }
    return fm_adc_code;
  }
  
  inline int32_t adc_to_parameter(int index, int32_t adc_code) const {
    int32_t scale = static_cast<int32_t>(data_.parameter_cv_scale[index]);
 8001ba2:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
		int32_t value0 = settings.adc_to_parameter(0, adc.channel(ADC_CHANNEL_PARAM0));
 8001ba4:	885a      	ldrh	r2, [r3, #2]
		int32_t value1 = settings.adc_to_parameter(1, adc.channel(ADC_CHANNEL_PARAM1));
 8001ba6:	8818      	ldrh	r0, [r3, #0]
    int32_t offset = static_cast<int32_t>(data_.parameter_cv_offset[index]);
    return (scale * adc_code >> 12) + offset;
 8001ba8:	4351      	muls	r1, r2
    int32_t offset = static_cast<int32_t>(data_.parameter_cv_offset[index]);
 8001baa:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
		  return this->currentValues[3];
 8001bae:	88db      	ldrh	r3, [r3, #6]
    return (scale * adc_code >> 12) + offset;
 8001bb0:	eb02 3121 	add.w	r1, r2, r1, asr #12
    int32_t scale = static_cast<int32_t>(data_.parameter_cv_scale[index]);
 8001bb4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
		userInterface.setChordByParams(value0, value1, value2);
 8001bb6:	b289      	uxth	r1, r1
    return (scale * adc_code >> 12) + offset;
 8001bb8:	4350      	muls	r0, r2
    int32_t offset = static_cast<int32_t>(data_.parameter_cv_offset[index]);
 8001bba:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
    return (scale * adc_code >> 12) + offset;
 8001bbe:	eb02 3220 	add.w	r2, r2, r0, asr #12
    fm_adc_code -= data_.fm_cv_offset;
 8001bc2:	69e0      	ldr	r0, [r4, #28]
    if (data_.pitch_range == PITCH_RANGE_440) {
 8001bc4:	79e4      	ldrb	r4, [r4, #7]
 8001bc6:	b292      	uxth	r2, r2
 8001bc8:	2c03      	cmp	r4, #3
    fm_adc_code -= data_.fm_cv_offset;
 8001bca:	bf1b      	ittet	ne
 8001bcc:	1a18      	subne	r0, r3, r0
    fm_adc_code = fm_adc_code * 7680 >> 12;
 8001bce:	f44f 53f0 	movne.w	r3, #7680	; 0x1e00
      fm_adc_code = 0;
 8001bd2:	2300      	moveq	r3, #0
    fm_adc_code = fm_adc_code * 7680 >> 12;
 8001bd4:	4343      	mulne	r3, r0
 8001bd6:	bf18      	it	ne
 8001bd8:	131b      	asrne	r3, r3, #12
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4804      	ldr	r0, [pc, #16]	; (8001bf0 <_ZN8MainLoop4loopEv+0xc8>)
 8001bde:	f000 f83f 	bl	8001c60 <_ZN2Ui16setChordByParamsEttt>
		userInterface.justFinishedRender(); // notify the UI the render has finished. Now there is time to update the display
 8001be2:	4803      	ldr	r0, [pc, #12]	; (8001bf0 <_ZN8MainLoop4loopEv+0xc8>)
 8001be4:	f000 f980 	bl	8001ee8 <_ZN2Ui18justFinishedRenderEv>
		flagRender=0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	702b      	strb	r3, [r5, #0]
}
 8001bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	200003c0 	.word	0x200003c0
 8001bf4:	20000310 	.word	0x20000310
 8001bf8:	2000029c 	.word	0x2000029c
 8001bfc:	0800e404 	.word	0x0800e404
 8001c00:	2000468c 	.word	0x2000468c
 8001c04:	20000374 	.word	0x20000374
 8001c08:	200003f9 	.word	0x200003f9
 8001c0c:	2000038e 	.word	0x2000038e
 8001c10:	200003f8 	.word	0x200003f8
 8001c14:	20000400 	.word	0x20000400

08001c18 <_GLOBAL__sub_I__ZN6stmlib11GetUniqueIdEh>:
  Adc() { }
 8001c18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <_GLOBAL__sub_I__ZN6stmlib11GetUniqueIdEh+0x1c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	8019      	strh	r1, [r3, #0]
 8001c22:	8059      	strh	r1, [r3, #2]
 8001c24:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001c28:	f8c3 2006 	str.w	r2, [r3, #6]
 8001c2c:	8099      	strh	r1, [r3, #4]
#define OSCILLATOR_INDEX_LEN	32
#define CHORD_INDEX_LEN			19

using namespace braids;

class Ui
 8001c2e:	4b02      	ldr	r3, [pc, #8]	; (8001c38 <_GLOBAL__sub_I__ZN6stmlib11GetUniqueIdEh+0x20>)
 8001c30:	759a      	strb	r2, [r3, #22]
}
 8001c32:	4770      	bx	lr
 8001c34:	20000400 	.word	0x20000400
 8001c38:	200003c0 	.word	0x200003c0

08001c3c <_ZNK7Encoder9incrementEv.isra.0>:
  inline bool pressed_immediate() const {
    //return !GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13);
	  return !mehal_readEncoderSwitch();
  }
  
  inline int32_t increment() const {
 8001c3c:	f000 0003 	and.w	r0, r0, #3
    int32_t increment = 0;
    uint8_t a = quadrature_decoding_state_[0];
    uint8_t b = quadrature_decoding_state_[1];
    if ((a & 0x03) == 0x02 && (b & 0x03) == 0x00) {
 8001c40:	2802      	cmp	r0, #2
 8001c42:	f001 0103 	and.w	r1, r1, #3
 8001c46:	d100      	bne.n	8001c4a <_ZNK7Encoder9incrementEv.isra.0+0xe>
 8001c48:	b129      	cbz	r1, 8001c56 <_ZNK7Encoder9incrementEv.isra.0+0x1a>
      increment = -1;
    } else {
      if ((b & 0x03) == 0x02 && (a & 0x03) == 0x00) {
 8001c4a:	2902      	cmp	r1, #2
 8001c4c:	d106      	bne.n	8001c5c <_ZNK7Encoder9incrementEv.isra.0+0x20>
 8001c4e:	fab0 f080 	clz	r0, r0
 8001c52:	0940      	lsrs	r0, r0, #5
 8001c54:	4770      	bx	lr
      increment = -1;
 8001c56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c5a:	4770      	bx	lr
    int32_t increment = 0;
 8001c5c:	2000      	movs	r0, #0
        increment = 1;
      }
    }
    return increment;
  }
 8001c5e:	4770      	bx	lr

08001c60 <_ZN2Ui16setChordByParamsEttt>:
	// 820-1640  = 1
	// 1640-2460 = 2
	// 2460-3280 = 3
	// 3280-4100 = 4
	// 4100-4095 = 5
	if(param>4100)
 8001c60:	f241 0304 	movw	r3, #4100	; 0x1004
{
	// param 0 : quality
	// param 1: variation
	// param 2: voicing

	uint8_t quality = calculateQuality(param0>>2);
 8001c64:	0889      	lsrs	r1, r1, #2
	if(param>4100)
 8001c66:	4299      	cmp	r1, r3
 8001c68:	dd0c      	ble.n	8001c84 <_ZN2Ui16setChordByParamsEttt+0x24>
		if(param>2730)
 8001c6a:	f640 23aa 	movw	r3, #2730	; 0xaaa
	uint8_t variation = calculateVariation(param1>>2,quality);
 8001c6e:	1092      	asrs	r2, r2, #2
		if(param>2730)
 8001c70:	429a      	cmp	r2, r3
	uint8_t variation = calculateVariation(param1>>2,quality);
 8001c72:	b291      	uxth	r1, r2
 8001c74:	f44f 7300 	mov.w	r3, #512	; 0x200
		if(param>2730)
 8001c78:	dd6f      	ble.n	8001d5a <_ZN2Ui16setChordByParamsEttt+0xfa>
					currentChordIntervals[2]=10 SEMI;
					break;
				}
				case 2:{
					// 6
					currentChordIntervals[0]=4 SEMI;
 8001c7a:	8643      	strh	r3, [r0, #50]	; 0x32
					currentChordIntervals[1]=7 SEMI;
 8001c7c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001c80:	8683      	strh	r3, [r0, #52]	; 0x34
 8001c82:	e047      	b.n	8001d14 <_ZN2Ui16setChordByParamsEttt+0xb4>
	if(param>3280)
 8001c84:	f5b1 6f4d 	cmp.w	r1, #3280	; 0xcd0
	uint8_t quality = calculateQuality(param0>>2);
 8001c88:	b28b      	uxth	r3, r1
	if(param>3280)
 8001c8a:	dc2f      	bgt.n	8001cec <_ZN2Ui16setChordByParamsEttt+0x8c>
	if(param>2460)
 8001c8c:	f640 119c 	movw	r1, #2460	; 0x99c
 8001c90:	428b      	cmp	r3, r1
 8001c92:	d81a      	bhi.n	8001cca <_ZN2Ui16setChordByParamsEttt+0x6a>
	if(param>1640)
 8001c94:	f5b3 6fcd 	cmp.w	r3, #1640	; 0x668
 8001c98:	d831      	bhi.n	8001cfe <_ZN2Ui16setChordByParamsEttt+0x9e>
 8001c9a:	1092      	asrs	r2, r2, #2
	if(param>820)
 8001c9c:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8001ca0:	b291      	uxth	r1, r2
 8001ca2:	d808      	bhi.n	8001cb6 <_ZN2Ui16setChordByParamsEttt+0x56>
		if(param>3072)
 8001ca4:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8001ca8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cac:	dd47      	ble.n	8001d3e <_ZN2Ui16setChordByParamsEttt+0xde>
					currentChordIntervals[0]=3 SEMI;
 8001cae:	8643      	strh	r3, [r0, #50]	; 0x32
					currentChordIntervals[1]=6 SEMI;
 8001cb0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cb4:	e028      	b.n	8001d08 <_ZN2Ui16setChordByParamsEttt+0xa8>
		if(param>3072)
 8001cb6:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8001cba:	dd31      	ble.n	8001d20 <_ZN2Ui16setChordByParamsEttt+0xc0>
					currentChordIntervals[0]=3 SEMI;
 8001cbc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001cc0:	8643      	strh	r3, [r0, #50]	; 0x32
					currentChordIntervals[1]=7 SEMI;
 8001cc2:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001cc6:	8683      	strh	r3, [r0, #52]	; 0x34
 8001cc8:	e043      	b.n	8001d52 <_ZN2Ui16setChordByParamsEttt+0xf2>
		if(param>2730)
 8001cca:	f640 23aa 	movw	r3, #2730	; 0xaaa
	uint8_t variation = calculateVariation(param1>>2,quality);
 8001cce:	1092      	asrs	r2, r2, #2
		if(param>2730)
 8001cd0:	429a      	cmp	r2, r3
	uint8_t variation = calculateVariation(param1>>2,quality);
 8001cd2:	b291      	uxth	r1, r2
 8001cd4:	f44f 73c0 	mov.w	r3, #384	; 0x180
		if(param>2730)
 8001cd8:	dce9      	bgt.n	8001cae <_ZN2Ui16setChordByParamsEttt+0x4e>
		if(param>1365)
 8001cda:	f240 5255 	movw	r2, #1365	; 0x555
 8001cde:	4291      	cmp	r1, r2
 8001ce0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001ce4:	d814      	bhi.n	8001d10 <_ZN2Ui16setChordByParamsEttt+0xb0>
					currentChordIntervals[0]=4 SEMI;
 8001ce6:	8643      	strh	r3, [r0, #50]	; 0x32
					currentChordIntervals[1]=8 SEMI;
 8001ce8:	8682      	strh	r2, [r0, #52]	; 0x34
 8001cea:	e025      	b.n	8001d38 <_ZN2Ui16setChordByParamsEttt+0xd8>
			switch(variation){
 8001cec:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001cf0:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001cf4:	d211      	bcs.n	8001d1a <_ZN2Ui16setChordByParamsEttt+0xba>
					currentChordIntervals[0]=2 SEMI;
 8001cf6:	f44f 7280 	mov.w	r2, #256	; 0x100
					currentChordIntervals[0]=5 SEMI;
 8001cfa:	8642      	strh	r2, [r0, #50]	; 0x32
 8001cfc:	e01b      	b.n	8001d36 <_ZN2Ui16setChordByParamsEttt+0xd6>
			currentChordIntervals[0]=4 SEMI;
 8001cfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d02:	8643      	strh	r3, [r0, #50]	; 0x32
			currentChordIntervals[1]=7 SEMI;
 8001d04:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001d08:	8683      	strh	r3, [r0, #52]	; 0x34
					currentChordIntervals[2]=10 SEMI;
 8001d0a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001d0e:	e022      	b.n	8001d56 <_ZN2Ui16setChordByParamsEttt+0xf6>
					currentChordIntervals[0]=3 SEMI;
 8001d10:	8643      	strh	r3, [r0, #50]	; 0x32
					currentChordIntervals[1]=6 SEMI;
 8001d12:	8682      	strh	r2, [r0, #52]	; 0x34
					currentChordIntervals[2]=9 SEMI;
 8001d14:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8001d18:	e01d      	b.n	8001d56 <_ZN2Ui16setChordByParamsEttt+0xf6>
					currentChordIntervals[0]=5 SEMI;
 8001d1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001d1e:	e7ec      	b.n	8001cfa <_ZN2Ui16setChordByParamsEttt+0x9a>
		if(param>2048)
 8001d20:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8001d24:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001d28:	d8a7      	bhi.n	8001c7a <_ZN2Ui16setChordByParamsEttt+0x1a>
		if(param>1024)
 8001d2a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8001d2e:	d8c5      	bhi.n	8001cbc <_ZN2Ui16setChordByParamsEttt+0x5c>
					currentChordIntervals[0]=3 SEMI;
 8001d30:	8643      	strh	r3, [r0, #50]	; 0x32
					currentChordIntervals[1]=7 SEMI;
 8001d32:	f44f 7360 	mov.w	r3, #896	; 0x380
					currentChordIntervals[1]=7 SEMI;
 8001d36:	8683      	strh	r3, [r0, #52]	; 0x34
					currentChordIntervals[2]=12 SEMI;
 8001d38:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d3c:	e00b      	b.n	8001d56 <_ZN2Ui16setChordByParamsEttt+0xf6>
		if(param>2048)
 8001d3e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8001d42:	d89a      	bhi.n	8001c7a <_ZN2Ui16setChordByParamsEttt+0x1a>
		if(param>1024)
 8001d44:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8001d48:	f44f 7260 	mov.w	r2, #896	; 0x380
 8001d4c:	d9cb      	bls.n	8001ce6 <_ZN2Ui16setChordByParamsEttt+0x86>
					currentChordIntervals[0]=4 SEMI;
 8001d4e:	8643      	strh	r3, [r0, #50]	; 0x32
					currentChordIntervals[1]=7 SEMI;
 8001d50:	8682      	strh	r2, [r0, #52]	; 0x34
					currentChordIntervals[2]=11 SEMI;
 8001d52:	f44f 63b0 	mov.w	r3, #1408	; 0x580
					currentChordIntervals[2]=9 SEMI;
 8001d56:	86c3      	strh	r3, [r0, #54]	; 0x36
			}
			break;
		}
	}

}
 8001d58:	4770      	bx	lr
		if(param>1365)
 8001d5a:	f240 5255 	movw	r2, #1365	; 0x555
 8001d5e:	4291      	cmp	r1, r2
 8001d60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d64:	d9bf      	bls.n	8001ce6 <_ZN2Ui16setChordByParamsEttt+0x86>
					currentChordIntervals[0]=4 SEMI;
 8001d66:	8643      	strh	r3, [r0, #50]	; 0x32
					currentChordIntervals[1]=8 SEMI;
 8001d68:	8682      	strh	r2, [r0, #52]	; 0x34
 8001d6a:	e7ce      	b.n	8001d0a <_ZN2Ui16setChordByParamsEttt+0xaa>

08001d6c <_ZN2Ui9getChord1Ev>:

int16_t Ui::getChord1(void)
{
	return this->currentChordIntervals[0];
}
 8001d6c:	f9b0 0032 	ldrsh.w	r0, [r0, #50]	; 0x32
 8001d70:	4770      	bx	lr

08001d72 <_ZN2Ui9getChord2Ev>:
int16_t Ui::getChord2(void)
{
	return this->currentChordIntervals[1];
}
 8001d72:	f9b0 0034 	ldrsh.w	r0, [r0, #52]	; 0x34
 8001d76:	4770      	bx	lr

08001d78 <_ZN2Ui9getChord3Ev>:
int16_t Ui::getChord3(void)
{
	return this->currentChordIntervals[2];
}
 8001d78:	f9b0 0036 	ldrsh.w	r0, [r0, #54]	; 0x36
 8001d7c:	4770      	bx	lr

08001d7e <_ZN2Ui28getParamFromCurrentWaveTableEv>:



uint16_t Ui::getParamFromCurrentWaveTable(void)
{
	return (((uint16_t)currentOscillator)<<10);
 8001d7e:	f990 0010 	ldrsb.w	r0, [r0, #16]
 8001d82:	0280      	lsls	r0, r0, #10
}
 8001d84:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 8001d88:	4770      	bx	lr

08001d8a <_ZN2Ui16showUnCalibratedEv>:

	return osc_shape;
}

void Ui::showUnCalibrated(void)
{
 8001d8a:	b510      	push	{r4, lr}
 8001d8c:	4604      	mov	r4, r0
	display.showDigitDot();
 8001d8e:	f000 faa4 	bl	80022da <_ZN7Display12showDigitDotEv>
	if(flagUncal!=1)
 8001d92:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8001d96:	2b01      	cmp	r3, #1
	{
		flagUncal=1;
 8001d98:	bf1c      	itt	ne
 8001d9a:	f240 1301 	movwne	r3, #257	; 0x101
 8001d9e:	85a3      	strhne	r3, [r4, #44]	; 0x2c
		fineTuneChanged=1;
	}
}
 8001da0:	bd10      	pop	{r4, pc}

08001da2 <_ZN2Ui14showCalibratedEv>:
void Ui::showCalibrated(void)
{
 8001da2:	b510      	push	{r4, lr}
 8001da4:	4604      	mov	r4, r0
	display.hideDigitDot();
 8001da6:	f000 fa9b 	bl	80022e0 <_ZN7Display12hideDigitDotEv>
	if(flagUncal!=0)
 8001daa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8001dae:	b113      	cbz	r3, 8001db6 <_ZN2Ui14showCalibratedEv+0x14>
	{
		flagUncal=0;
 8001db0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001db4:	85a3      	strh	r3, [r4, #44]	; 0x2c
		fineTuneChanged=1;
	}
}
 8001db6:	bd10      	pop	{r4, pc}

08001db8 <_ZN2Ui7sysTickEv>:

void Ui::sysTick(void)
{
 8001db8:	b510      	push	{r4, lr}
 8001dba:	4604      	mov	r4, r0
	encoder.sysTick();
 8001dbc:	3004      	adds	r0, #4
 8001dbe:	f000 fa99 	bl	80022f4 <_ZN7Encoder7sysTickEv>

	if(timeoutCalibCounter>0)
 8001dc2:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	dd04      	ble.n	8001dd4 <_ZN2Ui7sysTickEv+0x1c>
	{
		timeoutCalibCounter--;
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	82a3      	strh	r3, [r4, #20]
		if(timeoutCalibCounter==0)
 8001dd0:	b903      	cbnz	r3, 8001dd4 <_ZN2Ui7sysTickEv+0x1c>
		{
			enterCalibCounter=0;
 8001dd2:	75a3      	strb	r3, [r4, #22]
		}
	}
}
 8001dd4:	bd10      	pop	{r4, pc}
	...

08001dd8 <_ZN2Ui15saveAllSettingsEv>:

void Ui::saveAllSettings(void)
{
 8001dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dda:	4605      	mov	r5, r0
 8001ddc:	2400      	movs	r4, #0
	uint16_t i;
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
	{
		Setting setting_ = CONFIG_ITEMS[i].option;
 8001dde:	4f07      	ldr	r7, [pc, #28]	; (8001dfc <_ZN2Ui15saveAllSettingsEv+0x24>)
    return data[setting];
 8001de0:	4e07      	ldr	r6, [pc, #28]	; (8001e00 <_ZN2Ui15saveAllSettingsEv+0x28>)
 8001de2:	193b      	adds	r3, r7, r4
 8001de4:	785b      	ldrb	r3, [r3, #1]
		int16_t value = settings.GetValue(setting_);
		this->memory->writeUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))), (uint16_t)value);
 8001de6:	f104 0120 	add.w	r1, r4, #32
 8001dea:	5cf2      	ldrb	r2, [r6, r3]
 8001dec:	b289      	uxth	r1, r1
 8001dee:	69e8      	ldr	r0, [r5, #28]
 8001df0:	3402      	adds	r4, #2
 8001df2:	f000 fb0c 	bl	800240e <_ZN6Memory11writeUInt16Ett>
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
 8001df6:	2c16      	cmp	r4, #22
 8001df8:	d1f3      	bne.n	8001de2 <_ZN2Ui15saveAllSettingsEv+0xa>
	}
}
 8001dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dfc:	0800ebac 	.word	0x0800ebac
 8001e00:	20000310 	.word	0x20000310

08001e04 <_ZN2Ui15loadAllSettingsEv>:
void Ui::loadAllSettings(void)
{
 8001e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e08:	4680      	mov	r8, r0
 8001e0a:	2400      	movs	r4, #0
	uint16_t i;
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
	{
		Setting setting_ = CONFIG_ITEMS[i].option;
 8001e0c:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8001e58 <_ZN2Ui15loadAllSettingsEv+0x54>
  inline bool paques() const {
    return paques_;
  }
  
  static const SettingMetadata& metadata(Setting setting) {
    return metadata_[setting];
 8001e10:	4e0f      	ldr	r6, [pc, #60]	; (8001e50 <_ZN2Ui15loadAllSettingsEv+0x4c>)
    data[setting] = value;
 8001e12:	4f10      	ldr	r7, [pc, #64]	; (8001e54 <_ZN2Ui15loadAllSettingsEv+0x50>)

		int16_t valMem = (int16_t)this->memory->readUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))));
 8001e14:	f104 0120 	add.w	r1, r4, #32
		Setting setting_ = CONFIG_ITEMS[i].option;
 8001e18:	eb09 0304 	add.w	r3, r9, r4
		int16_t valMem = (int16_t)this->memory->readUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))));
 8001e1c:	b289      	uxth	r1, r1
 8001e1e:	f8d8 001c 	ldr.w	r0, [r8, #28]
		Setting setting_ = CONFIG_ITEMS[i].option;
 8001e22:	785d      	ldrb	r5, [r3, #1]
		int16_t valMem = (int16_t)this->memory->readUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))));
 8001e24:	f000 facf 	bl	80023c6 <_ZN6Memory10readUInt16Et>
    return metadata_[setting];
 8001e28:	230c      	movs	r3, #12
 8001e2a:	436b      	muls	r3, r5
 8001e2c:	199a      	adds	r2, r3, r6

		int16_t value = settings.metadata(setting_).Clip(valMem);
 8001e2e:	7852      	ldrb	r2, [r2, #1]
		int16_t valMem = (int16_t)this->memory->readUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))));
 8001e30:	b200      	sxth	r0, r0
    if (value > max_value) {
 8001e32:	4290      	cmp	r0, r2
		int16_t value = settings.metadata(setting_).Clip(valMem);
 8001e34:	5d9b      	ldrb	r3, [r3, r6]
 8001e36:	dd06      	ble.n	8001e46 <_ZN2Ui15loadAllSettingsEv+0x42>
      value = max_value;
 8001e38:	b210      	sxth	r0, r2
 8001e3a:	3402      	adds	r4, #2
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
 8001e3c:	2c16      	cmp	r4, #22
		settings.SetValue(setting_, value);
 8001e3e:	55e8      	strb	r0, [r5, r7]
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
 8001e40:	d1e8      	bne.n	8001e14 <_ZN2Ui15loadAllSettingsEv+0x10>
	}
}
 8001e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    } else if (value < min_value) {
 8001e46:	4298      	cmp	r0, r3
      value = min_value;
 8001e48:	bfb8      	it	lt
 8001e4a:	b218      	sxthlt	r0, r3
 8001e4c:	e7f5      	b.n	8001e3a <_ZN2Ui15loadAllSettingsEv+0x36>
 8001e4e:	bf00      	nop
 8001e50:	0800dcd0 	.word	0x0800dcd0
 8001e54:	20000310 	.word	0x20000310
 8001e58:	0800ebac 	.word	0x0800ebac

08001e5c <_ZN2Ui4initEPN6braids3AdcEP6Memory>:
void Ui::init(Adc* adc,Memory* memory) {
 8001e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e5e:	4604      	mov	r4, r0
 8001e60:	4616      	mov	r6, r2
	state = UI_STATE_SELECT_OSCILLATOR;
 8001e62:	2500      	movs	r5, #0
void Ui::init(Adc* adc,Memory* memory) {
 8001e64:	460f      	mov	r7, r1
	display.init();
 8001e66:	f000 f9d3 	bl	8002210 <_ZN7Display4initEv>
	encoder.Init();
 8001e6a:	1d20      	adds	r0, r4, #4
 8001e6c:	f000 fa3b 	bl	80022e6 <_ZN7Encoder4InitEv>
	this->flagUncal=2;
 8001e70:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <_ZN2Ui4initEPN6braids3AdcEP6Memory+0x80>)
	state = UI_STATE_SELECT_OSCILLATOR;
 8001e72:	7465      	strb	r5, [r4, #17]
	timeoutCalibCounter=0;
 8001e74:	82a5      	strh	r5, [r4, #20]
	enterCalibCounter=0;
 8001e76:	75a5      	strb	r5, [r4, #22]
	this->flagUncal=2;
 8001e78:	62e3      	str	r3, [r4, #44]	; 0x2c
	this->flagJustFinishedRender=0;
 8001e7a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
	this->currentChordIntervals[0]=0;
 8001e7e:	8665      	strh	r5, [r4, #50]	; 0x32
	this->currentChordIntervals[1]=0;
 8001e80:	86a5      	strh	r5, [r4, #52]	; 0x34
	this->currentChordIntervals[2]=0;
 8001e82:	86e5      	strh	r5, [r4, #54]	; 0x36
	this->memory = memory;
 8001e84:	e9c4 7606 	strd	r7, r6, [r4, #24]
	currentOscillator=(int8_t)memory->readUInt8(Memory::ADDR_CURRENT_OSCILLATOR);
 8001e88:	211c      	movs	r1, #28
 8001e8a:	4630      	mov	r0, r6
 8001e8c:	f000 fa8f 	bl	80023ae <_ZN6Memory9readUInt8Et>
 8001e90:	b240      	sxtb	r0, r0
	if(currentOscillator>=OSCILLATOR_INDEX_LEN)
 8001e92:	281f      	cmp	r0, #31
	currentOscillator=(int8_t)memory->readUInt8(Memory::ADDR_CURRENT_OSCILLATOR);
 8001e94:	bfd4      	ite	le
 8001e96:	7420      	strble	r0, [r4, #16]
		currentOscillator=0;
 8001e98:	7425      	strbgt	r5, [r4, #16]
	display.showChar(LIMITED_OSCILLATORS[currentOscillator].symbol);
 8001e9a:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8001e9e:	4d10      	ldr	r5, [pc, #64]	; (8001ee0 <_ZN2Ui4initEPN6braids3AdcEP6Memory+0x84>)
 8001ea0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001ea4:	442b      	add	r3, r5
 8001ea6:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8001eaa:	4620      	mov	r0, r4
 8001eac:	f000 f9b4 	bl	8002218 <_ZN7Display8showCharEa>
	display.showBank(LIMITED_OSCILLATORS[currentOscillator].bank);
 8001eb0:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001eba:	441d      	add	r5, r3
 8001ebc:	7869      	ldrb	r1, [r5, #1]
 8001ebe:	f000 f9c5 	bl	800224c <_ZN7Display8showBankEh>
    data[setting] = value;
 8001ec2:	2228      	movs	r2, #40	; 0x28
 8001ec4:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <_ZN2Ui4initEPN6braids3AdcEP6Memory+0x88>)
	display.showConfig(0);
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	701a      	strb	r2, [r3, #0]
 8001eca:	2100      	movs	r1, #0
 8001ecc:	f000 f9d7 	bl	800227e <_ZN7Display10showConfigEh>
	loadAllSettings();
 8001ed0:	4620      	mov	r0, r4
}
 8001ed2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	loadAllSettings();
 8001ed6:	f7ff bf95 	b.w	8001e04 <_ZN2Ui15loadAllSettingsEv>
 8001eda:	bf00      	nop
 8001edc:	00010002 	.word	0x00010002
 8001ee0:	0800ebc2 	.word	0x0800ebc2
 8001ee4:	20000310 	.word	0x20000310

08001ee8 <_ZN2Ui18justFinishedRenderEv>:

void Ui::justFinishedRender(void)
{
	flagJustFinishedRender=1;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
}
 8001eee:	4770      	bx	lr

08001ef0 <_ZN2Ui4loopEv>:

void Ui::loop(void) {
 8001ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ef4:	4604      	mov	r4, r0

	encoder.loop();
 8001ef6:	1d05      	adds	r5, r0, #4
 8001ef8:	4628      	mov	r0, r5
 8001efa:	f000 fa00 	bl	80022fe <_ZN7Encoder4loopEv>

	switch(state)
 8001efe:	7c63      	ldrb	r3, [r4, #17]
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d87a      	bhi.n	8001ffa <_ZN2Ui4loopEv+0x10a>
 8001f04:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001f08:	007b0005 	.word	0x007b0005
 8001f0c:	011100df 	.word	0x011100df
 8001f10:	0131      	.short	0x0131
	{
		case UI_STATE_SELECT_OSCILLATOR:
		{
			if(flagJustFinishedRender)
 8001f12:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8001f16:	b3d3      	cbz	r3, 8001f8e <_ZN2Ui4loopEv+0x9e>
			{
				flagJustFinishedRender=0;
 8001f18:	2300      	movs	r3, #0
				if(fineTuneChanged)
 8001f1a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
				flagJustFinishedRender=0;
 8001f1e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
				if(fineTuneChanged)
 8001f22:	b162      	cbz	r2, 8001f3e <_ZN2Ui4loopEv+0x4e>
				{
					fineTuneChanged=0;
 8001f24:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
					display.showChar(LIMITED_OSCILLATORS[currentOscillator].symbol); // update display to show DOT
 8001f28:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8001f2c:	4ab4      	ldr	r2, [pc, #720]	; (8002200 <_ZN2Ui4loopEv+0x310>)
 8001f2e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001f32:	4413      	add	r3, r2
 8001f34:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8001f38:	4620      	mov	r0, r4
 8001f3a:	f000 f96d 	bl	8002218 <_ZN7Display8showCharEa>
				}
				if(oscillatorChanged)
 8001f3e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8001f42:	b1b3      	cbz	r3, 8001f72 <_ZN2Ui4loopEv+0x82>
				{
					oscillatorChanged=0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
					display.showChar(LIMITED_OSCILLATORS[currentOscillator].symbol);
 8001f4a:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8001f4e:	4eac      	ldr	r6, [pc, #688]	; (8002200 <_ZN2Ui4loopEv+0x310>)
 8001f50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001f54:	4433      	add	r3, r6
 8001f56:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f000 f95c 	bl	8002218 <_ZN7Display8showCharEa>
					display.showBank(LIMITED_OSCILLATORS[currentOscillator].bank);
 8001f60:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8001f64:	4620      	mov	r0, r4
 8001f66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001f6a:	441e      	add	r6, r3
 8001f6c:	7871      	ldrb	r1, [r6, #1]
 8001f6e:	f000 f96d 	bl	800224c <_ZN7Display8showBankEh>

				}
				if(flagPendingSetCurrentOscillator)
 8001f72:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8001f76:	b153      	cbz	r3, 8001f8e <_ZN2Ui4loopEv+0x9e>
				{
					flagPendingSetCurrentOscillator=0;
 8001f78:	2100      	movs	r1, #0
					//settings.SetValue(SETTING_OSCILLATOR_SHAPE, LIMITED_OSCILLATORS[currentOscillator].osc);
					display.showConfig(0);
 8001f7a:	4620      	mov	r0, r4
					flagPendingSetCurrentOscillator=0;
 8001f7c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
					display.showConfig(0);
 8001f80:	f000 f97d 	bl	800227e <_ZN7Display10showConfigEh>
					memory->writeUInt8NoWait(Memory::ADDR_CURRENT_OSCILLATOR, (uint8_t)currentOscillator);
 8001f84:	7c22      	ldrb	r2, [r4, #16]
 8001f86:	211c      	movs	r1, #28
 8001f88:	69e0      	ldr	r0, [r4, #28]
 8001f8a:	f000 fa34 	bl	80023f6 <_ZN6Memory16writeUInt8NoWaitEth>
				}
			}

			int32_t increment = encoder.increment();
 8001f8e:	79a1      	ldrb	r1, [r4, #6]
 8001f90:	7960      	ldrb	r0, [r4, #5]
 8001f92:	f7ff fe53 	bl	8001c3c <_ZNK7Encoder9incrementEv.isra.0>
			if (increment != 0)
 8001f96:	2800      	cmp	r0, #0
 8001f98:	d018      	beq.n	8001fcc <_ZN2Ui4loopEv+0xdc>
 8001f9a:	7c23      	ldrb	r3, [r4, #16]
				if(currentOscillator>=OSCILLATOR_INDEX_LEN)
					currentOscillator=(OSCILLATOR_INDEX_LEN-1);
				if(currentOscillator<0)
					currentOscillator=0;

				oscillatorChanged=1; // to update display later
 8001f9c:	f04f 0101 	mov.w	r1, #1
					currentOscillator++;
 8001fa0:	bfcc      	ite	gt
 8001fa2:	3301      	addgt	r3, #1
					currentOscillator--;
 8001fa4:	f103 33ff 	addle.w	r3, r3, #4294967295	; 0xffffffff
 8001fa8:	7423      	strb	r3, [r4, #16]
				if(currentOscillator>=OSCILLATOR_INDEX_LEN)
 8001faa:	f994 3010 	ldrsb.w	r3, [r4, #16]
				oscillatorChanged=1; // to update display later
 8001fae:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
				if(currentOscillator>=OSCILLATOR_INDEX_LEN)
 8001fb2:	2b1f      	cmp	r3, #31
					currentOscillator=(OSCILLATOR_INDEX_LEN-1);
 8001fb4:	bfc4      	itt	gt
 8001fb6:	231f      	movgt	r3, #31
 8001fb8:	7423      	strbgt	r3, [r4, #16]
				if(currentOscillator<0)
 8001fba:	f994 3010 	ldrsb.w	r3, [r4, #16]
				display.showConfig(1);
 8001fbe:	4620      	mov	r0, r4
				if(currentOscillator<0)
 8001fc0:	2b00      	cmp	r3, #0
					currentOscillator=0;
 8001fc2:	bfbc      	itt	lt
 8001fc4:	2300      	movlt	r3, #0
 8001fc6:	7423      	strblt	r3, [r4, #16]
				display.showConfig(1);
 8001fc8:	f000 f959 	bl	800227e <_ZN7Display10showConfigEh>
			}
			if(encoder.pressed())
 8001fcc:	4628      	mov	r0, r5
 8001fce:	f000 f9de 	bl	800238e <_ZN7Encoder7pressedEv>
 8001fd2:	b110      	cbz	r0, 8001fda <_ZN2Ui4loopEv+0xea>
			{
				flagPendingSetCurrentOscillator=1;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
			}

			if(encoder.pressedLong())
 8001fda:	4628      	mov	r0, r5
 8001fdc:	f000 f9d1 	bl	8002382 <_ZN7Encoder11pressedLongEv>
 8001fe0:	b158      	cbz	r0, 8001ffa <_ZN2Ui4loopEv+0x10a>
			{
				state = UI_STATE_CONFIG_MENU;
 8001fe2:	2101      	movs	r1, #1
				display.showConfig(1);
 8001fe4:	4620      	mov	r0, r4
				state = UI_STATE_CONFIG_MENU;
 8001fe6:	7461      	strb	r1, [r4, #17]
				display.showConfig(1);
 8001fe8:	f000 f949 	bl	800227e <_ZN7Display10showConfigEh>
				display.showBank(2); // both off
 8001fec:	2102      	movs	r1, #2
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f000 f92c 	bl	800224c <_ZN7Display8showBankEh>
				configIndex=0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	74a3      	strb	r3, [r4, #18]

				// Calibration mode detection
				if(enterCalibCounter==0)
					timeoutCalibCounter=2000;

				enterCalibCounter++;
 8001ff8:	75a3      	strb	r3, [r4, #22]
			}
			break;
		}
	}

}
 8001ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(encoder.pressedLong())
 8001ffe:	4628      	mov	r0, r5
 8002000:	f000 f9bf 	bl	8002382 <_ZN7Encoder11pressedLongEv>
 8002004:	b1e8      	cbz	r0, 8002042 <_ZN2Ui4loopEv+0x152>
				state = UI_STATE_SELECT_OSCILLATOR;
 8002006:	2100      	movs	r1, #0
				display.showConfig(0);
 8002008:	4620      	mov	r0, r4
				state = UI_STATE_SELECT_OSCILLATOR;
 800200a:	7461      	strb	r1, [r4, #17]
				display.showConfig(0);
 800200c:	f000 f937 	bl	800227e <_ZN7Display10showConfigEh>
				display.showBank(LIMITED_OSCILLATORS[currentOscillator].bank);
 8002010:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8002014:	4d7a      	ldr	r5, [pc, #488]	; (8002200 <_ZN2Ui4loopEv+0x310>)
 8002016:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800201a:	442b      	add	r3, r5
 800201c:	7859      	ldrb	r1, [r3, #1]
 800201e:	4620      	mov	r0, r4
 8002020:	f000 f914 	bl	800224c <_ZN7Display8showBankEh>
				display.showChar(LIMITED_OSCILLATORS[currentOscillator].symbol);
 8002024:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8002028:	4620      	mov	r0, r4
 800202a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800202e:	441d      	add	r5, r3
 8002030:	f995 1002 	ldrsb.w	r1, [r5, #2]
 8002034:	f000 f8f0 	bl	8002218 <_ZN7Display8showCharEa>
				saveAllSettings();
 8002038:	4620      	mov	r0, r4
}
 800203a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				saveAllSettings();
 800203e:	f7ff becb 	b.w	8001dd8 <_ZN2Ui15saveAllSettingsEv>
			display.showChar(CONFIG_ITEMS[configIndex].symbol);
 8002042:	f994 2012 	ldrsb.w	r2, [r4, #18]
 8002046:	4b6f      	ldr	r3, [pc, #444]	; (8002204 <_ZN2Ui4loopEv+0x314>)
 8002048:	4620      	mov	r0, r4
 800204a:	f913 1012 	ldrsb.w	r1, [r3, r2, lsl #1]
 800204e:	f000 f8e3 	bl	8002218 <_ZN7Display8showCharEa>
			int32_t increment = encoder.increment();
 8002052:	79a1      	ldrb	r1, [r4, #6]
 8002054:	7960      	ldrb	r0, [r4, #5]
 8002056:	f7ff fdf1 	bl	8001c3c <_ZNK7Encoder9incrementEv.isra.0>
			if (increment != 0)
 800205a:	2800      	cmp	r0, #0
 800205c:	d011      	beq.n	8002082 <_ZN2Ui4loopEv+0x192>
 800205e:	7ca3      	ldrb	r3, [r4, #18]
					configIndex++;
 8002060:	bfcc      	ite	gt
 8002062:	3301      	addgt	r3, #1
					configIndex--;
 8002064:	f103 33ff 	addle.w	r3, r3, #4294967295	; 0xffffffff
 8002068:	74a3      	strb	r3, [r4, #18]
				if(configIndex>=CONFIG_ITEMS_SYMBOLS_LEN)
 800206a:	f994 3012 	ldrsb.w	r3, [r4, #18]
 800206e:	2b0a      	cmp	r3, #10
					configIndex=CONFIG_ITEMS_SYMBOLS_LEN-1;
 8002070:	bfc4      	itt	gt
 8002072:	230a      	movgt	r3, #10
 8002074:	74a3      	strbgt	r3, [r4, #18]
				if(configIndex<0)
 8002076:	f994 3012 	ldrsb.w	r3, [r4, #18]
 800207a:	2b00      	cmp	r3, #0
					configIndex=0;
 800207c:	bfbc      	itt	lt
 800207e:	2300      	movlt	r3, #0
 8002080:	74a3      	strblt	r3, [r4, #18]
			if(encoder.pressed())
 8002082:	4628      	mov	r0, r5
 8002084:	f000 f983 	bl	800238e <_ZN7Encoder7pressedEv>
 8002088:	2800      	cmp	r0, #0
 800208a:	d0b6      	beq.n	8001ffa <_ZN2Ui4loopEv+0x10a>
				state = UI_STATE_SET_VALUE;
 800208c:	2302      	movs	r3, #2
 800208e:	7463      	strb	r3, [r4, #17]
				if(enterCalibCounter==0)
 8002090:	7da3      	ldrb	r3, [r4, #22]
 8002092:	b913      	cbnz	r3, 800209a <_ZN2Ui4loopEv+0x1aa>
					timeoutCalibCounter=2000;
 8002094:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002098:	82a2      	strh	r2, [r4, #20]
				enterCalibCounter++;
 800209a:	3301      	adds	r3, #1
 800209c:	b2db      	uxtb	r3, r3
				if(enterCalibCounter>=4)
 800209e:	2b03      	cmp	r3, #3
 80020a0:	d9aa      	bls.n	8001ff8 <_ZN2Ui4loopEv+0x108>
					enterCalibCounter=0;
 80020a2:	2300      	movs	r3, #0
					state = UI_STATE_CALIB;
 80020a4:	2503      	movs	r5, #3
					enterCalibCounter=0;
 80020a6:	75a3      	strb	r3, [r4, #22]
					display.showConfig(1);
 80020a8:	2101      	movs	r1, #1
 80020aa:	4620      	mov	r0, r4
					state = UI_STATE_CALIB;
 80020ac:	7465      	strb	r5, [r4, #17]
					display.showConfig(1);
 80020ae:	f000 f8e6 	bl	800227e <_ZN7Display10showConfigEh>
					display.showBank(3); // all leds ON
 80020b2:	4629      	mov	r1, r5
 80020b4:	4620      	mov	r0, r4
 80020b6:	f000 f8c9 	bl	800224c <_ZN7Display8showBankEh>
					display.showChar('2');
 80020ba:	2132      	movs	r1, #50	; 0x32
				display.showChar('4');
 80020bc:	4620      	mov	r0, r4
}
 80020be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				display.showChar('4');
 80020c2:	f000 b8a9 	b.w	8002218 <_ZN7Display8showCharEa>
			Setting setting_ = CONFIG_ITEMS[configIndex].option;
 80020c6:	f994 2012 	ldrsb.w	r2, [r4, #18]
 80020ca:	4b4e      	ldr	r3, [pc, #312]	; (8002204 <_ZN2Ui4loopEv+0x314>)
    return data[setting];
 80020cc:	4f4e      	ldr	r7, [pc, #312]	; (8002208 <_ZN2Ui4loopEv+0x318>)
 80020ce:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80020d2:	785b      	ldrb	r3, [r3, #1]
			int32_t increment = encoder.increment();
 80020d4:	79a1      	ldrb	r1, [r4, #6]
 80020d6:	7960      	ldrb	r0, [r4, #5]
 80020d8:	5dda      	ldrb	r2, [r3, r7]
 80020da:	f7ff fdaf 	bl	8001c3c <_ZNK7Encoder9incrementEv.isra.0>
 80020de:	4e4b      	ldr	r6, [pc, #300]	; (800220c <_ZN2Ui4loopEv+0x31c>)
			if (increment != 0)
 80020e0:	b988      	cbnz	r0, 8002106 <_ZN2Ui4loopEv+0x216>
			int16_t value = settings.GetValue(setting_);
 80020e2:	b212      	sxth	r2, r2
			display.showValue(settings.metadata(setting_).max_value,value);
 80020e4:	210c      	movs	r1, #12
 80020e6:	fb01 6303 	mla	r3, r1, r3, r6
 80020ea:	4620      	mov	r0, r4
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	7859      	ldrb	r1, [r3, #1]
 80020f0:	f000 f8c8 	bl	8002284 <_ZN7Display9showValueEhh>
			if(encoder.pressed())
 80020f4:	4628      	mov	r0, r5
 80020f6:	f000 f94a 	bl	800238e <_ZN7Encoder7pressedEv>
 80020fa:	2800      	cmp	r0, #0
 80020fc:	f43f af7d 	beq.w	8001ffa <_ZN2Ui4loopEv+0x10a>
				state = UI_STATE_CONFIG_MENU;
 8002100:	2301      	movs	r3, #1
 8002102:	7463      	strb	r3, [r4, #17]
}
 8002104:	e779      	b.n	8001ffa <_ZN2Ui4loopEv+0x10a>
    return metadata_[setting];
 8002106:	210c      	movs	r1, #12
 8002108:	4359      	muls	r1, r3
 800210a:	eb06 0c01 	add.w	ip, r6, r1
				value = settings.metadata(setting_).Clip(value + increment);
 800210e:	4402      	add	r2, r0
 8002110:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8002114:	b212      	sxth	r2, r2
    if (value > max_value) {
 8002116:	4290      	cmp	r0, r2
 8002118:	5c71      	ldrb	r1, [r6, r1]
 800211a:	da02      	bge.n	8002122 <_ZN2Ui4loopEv+0x232>
      value = max_value;
 800211c:	b202      	sxth	r2, r0
				settings.SetValue(setting_, value);
 800211e:	55da      	strb	r2, [r3, r7]
 8002120:	e7e0      	b.n	80020e4 <_ZN2Ui4loopEv+0x1f4>
    } else if (value < min_value) {
 8002122:	428a      	cmp	r2, r1
      value = min_value;
 8002124:	bfb8      	it	lt
 8002126:	b20a      	sxthlt	r2, r1
 8002128:	e7f9      	b.n	800211e <_ZN2Ui4loopEv+0x22e>
			if(encoder.pressedLong())
 800212a:	4628      	mov	r0, r5
 800212c:	f000 f929 	bl	8002382 <_ZN7Encoder11pressedLongEv>
 8002130:	b150      	cbz	r0, 8002148 <_ZN2Ui4loopEv+0x258>
				state = UI_STATE_CONFIG_MENU;
 8002132:	2101      	movs	r1, #1
				display.showConfig(1);
 8002134:	4620      	mov	r0, r4
				state = UI_STATE_CONFIG_MENU;
 8002136:	7461      	strb	r1, [r4, #17]
				display.showConfig(1);
 8002138:	f000 f8a1 	bl	800227e <_ZN7Display10showConfigEh>
				display.showBank(2); // all leds OFF
 800213c:	4620      	mov	r0, r4
}
 800213e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				display.showBank(2); // all leds OFF
 8002142:	2102      	movs	r1, #2
 8002144:	f000 b882 	b.w	800224c <_ZN7Display8showBankEh>
			if(encoder.pressed())
 8002148:	4628      	mov	r0, r5
 800214a:	f000 f920 	bl	800238e <_ZN7Encoder7pressedEv>
 800214e:	2800      	cmp	r0, #0
 8002150:	f43f af53 	beq.w	8001ffa <_ZN2Ui4loopEv+0x10a>
				adc_code_c2 = adc->channel(ADC_CHANNEL_PITCH);
 8002154:	69a3      	ldr	r3, [r4, #24]
				display.showChar('4');
 8002156:	2134      	movs	r1, #52	; 0x34
				adc_code_c2 = adc->channel(ADC_CHANNEL_PITCH);
 8002158:	891a      	ldrh	r2, [r3, #8]
 800215a:	6222      	str	r2, [r4, #32]
				adc_code_p0_min = adc->channel(ADC_CHANNEL_PARAM0);
 800215c:	885a      	ldrh	r2, [r3, #2]
 800215e:	6262      	str	r2, [r4, #36]	; 0x24
				adc_code_p1_min = adc->channel(ADC_CHANNEL_PARAM1);
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	62a3      	str	r3, [r4, #40]	; 0x28
				state = UI_STATE_CALIB_STEP_2;
 8002164:	2304      	movs	r3, #4
 8002166:	7463      	strb	r3, [r4, #17]
 8002168:	e7a8      	b.n	80020bc <_ZN2Ui4loopEv+0x1cc>
			if(encoder.pressedLong())
 800216a:	4628      	mov	r0, r5
 800216c:	f000 f909 	bl	8002382 <_ZN7Encoder11pressedLongEv>
 8002170:	4680      	mov	r8, r0
 8002172:	2800      	cmp	r0, #0
 8002174:	d1dd      	bne.n	8002132 <_ZN2Ui4loopEv+0x242>
			if(encoder.pressed())
 8002176:	4628      	mov	r0, r5
 8002178:	f000 f909 	bl	800238e <_ZN7Encoder7pressedEv>
 800217c:	2800      	cmp	r0, #0
 800217e:	f43f af3c 	beq.w	8001ffa <_ZN2Ui4loopEv+0x10a>
				int32_t adc_code_c4 = adc->channel(ADC_CHANNEL_PITCH);
 8002182:	69a3      	ldr	r3, [r4, #24]
				settings.Calibrate(adc_code_c2,
 8002184:	6a22      	ldr	r2, [r4, #32]
		  return this->currentValues[4];
 8002186:	891d      	ldrh	r5, [r3, #8]
		  return this->currentValues[1];
 8002188:	885f      	ldrh	r7, [r3, #2]
    if (adc_code_c4 != adc_code_c2) {
 800218a:	42aa      	cmp	r2, r5
		  return this->currentValues[0];
 800218c:	881e      	ldrh	r6, [r3, #0]
 800218e:	d00f      	beq.n	80021b0 <_ZN2Ui4loopEv+0x2c0>
      int32_t scale = (24 * 128 * 4096L) / (adc_code_c4 - adc_code_c2);
 8002190:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8002194:	1aa9      	subs	r1, r5, r2
 8002196:	fb93 f3f1 	sdiv	r3, r3, r1
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 800219a:	442a      	add	r2, r5
      data_.pitch_cv_scale = scale;
 800219c:	491a      	ldr	r1, [pc, #104]	; (8002208 <_ZN2Ui4loopEv+0x318>)
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 800219e:	1052      	asrs	r2, r2, #1
      data_.pitch_cv_scale = scale;
 80021a0:	618b      	str	r3, [r1, #24]
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 80021a2:	4353      	muls	r3, r2
 80021a4:	131b      	asrs	r3, r3, #12
      data_.pitch_cv_offset = (60 << 7) - 
 80021a6:	f5c3 53f0 	rsb	r3, r3, #7680	; 0x1e00
 80021aa:	614b      	str	r3, [r1, #20]
      data_.fm_cv_offset = adc_code_fm;
 80021ac:	f8c1 801c 	str.w	r8, [r1, #28]
    Save();
 80021b0:	4815      	ldr	r0, [pc, #84]	; (8002208 <_ZN2Ui4loopEv+0x318>)
 80021b2:	f7ff f893 	bl	80012dc <_ZN6braids8Settings4SaveEv>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_C2, adc_code_c2);
 80021b6:	6a22      	ldr	r2, [r4, #32]
 80021b8:	2100      	movs	r1, #0
 80021ba:	69e0      	ldr	r0, [r4, #28]
 80021bc:	f000 f90f 	bl	80023de <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_C4, adc_code_c4);
 80021c0:	462a      	mov	r2, r5
 80021c2:	2104      	movs	r1, #4
 80021c4:	69e0      	ldr	r0, [r4, #28]
 80021c6:	f000 f90a 	bl	80023de <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_FM, adc_code_fm);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2108      	movs	r1, #8
 80021ce:	69e0      	ldr	r0, [r4, #28]
 80021d0:	f000 f905 	bl	80023de <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_P0_MIN, adc_code_p0_min);
 80021d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021d6:	210c      	movs	r1, #12
 80021d8:	69e0      	ldr	r0, [r4, #28]
 80021da:	f000 f900 	bl	80023de <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_P0_MAX, adc_code_p0_max);
 80021de:	463a      	mov	r2, r7
 80021e0:	2110      	movs	r1, #16
 80021e2:	69e0      	ldr	r0, [r4, #28]
 80021e4:	f000 f8fb 	bl	80023de <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_P1_MIN, adc_code_p1_min);
 80021e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80021ea:	2114      	movs	r1, #20
 80021ec:	69e0      	ldr	r0, [r4, #28]
 80021ee:	f000 f8f6 	bl	80023de <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_P1_MAX, adc_code_p1_max);
 80021f2:	4632      	mov	r2, r6
 80021f4:	2118      	movs	r1, #24
 80021f6:	69e0      	ldr	r0, [r4, #28]
 80021f8:	f000 f8f1 	bl	80023de <_ZN6Memory11writeUInt32Etm>
 80021fc:	e780      	b.n	8002100 <_ZN2Ui4loopEv+0x210>
 80021fe:	bf00      	nop
 8002200:	0800ebc2 	.word	0x0800ebc2
 8002204:	0800ebac 	.word	0x0800ebac
 8002208:	20000310 	.word	0x20000310
 800220c:	0800dcd0 	.word	0x0800dcd0

08002210 <_ZN7Display4initEv>:
 8002210:	2300      	movs	r3, #0
 8002212:	7003      	strb	r3, [r0, #0]
 8002214:	4770      	bx	lr
	...

08002218 <_ZN7Display8showCharEa>:
 8002218:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b19      	cmp	r3, #25
 8002220:	bf95      	itete	ls
 8002222:	4b08      	ldrls	r3, [pc, #32]	; (8002244 <_ZN7Display8showCharEa+0x2c>)
 8002224:	4b08      	ldrhi	r3, [pc, #32]	; (8002248 <_ZN7Display8showCharEa+0x30>)
 8002226:	18c9      	addls	r1, r1, r3
 8002228:	18c9      	addhi	r1, r1, r3
 800222a:	bf94      	ite	ls
 800222c:	f811 3c41 	ldrbls.w	r3, [r1, #-65]
 8002230:	f811 3c30 	ldrbhi.w	r3, [r1, #-48]
 8002234:	7800      	ldrb	r0, [r0, #0]
 8002236:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 800223a:	43c0      	mvns	r0, r0
 800223c:	b2c0      	uxtb	r0, r0
 800223e:	f000 baff 	b.w	8002840 <mehal_sendDataTo595>
 8002242:	bf00      	nop
 8002244:	0800ec22 	.word	0x0800ec22
 8002248:	0800ec3c 	.word	0x0800ec3c

0800224c <_ZN7Display8showBankEh>:
 800224c:	b508      	push	{r3, lr}
 800224e:	2903      	cmp	r1, #3
 8002250:	d814      	bhi.n	800227c <_ZN7Display8showBankEh+0x30>
 8002252:	e8df f001 	tbb	[pc, r1]
 8002256:	0a02      	.short	0x0a02
 8002258:	110f      	.short	0x110f
 800225a:	2001      	movs	r0, #1
 800225c:	f000 fb3c 	bl	80028d8 <mehal_setBank0Led>
 8002260:	2000      	movs	r0, #0
 8002262:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002266:	f000 bb2b 	b.w	80028c0 <mehal_setBank1Led>
 800226a:	2000      	movs	r0, #0
 800226c:	f000 fb34 	bl	80028d8 <mehal_setBank0Led>
 8002270:	2001      	movs	r0, #1
 8002272:	e7f6      	b.n	8002262 <_ZN7Display8showBankEh+0x16>
 8002274:	2000      	movs	r0, #0
 8002276:	e7f1      	b.n	800225c <_ZN7Display8showBankEh+0x10>
 8002278:	2001      	movs	r0, #1
 800227a:	e7f7      	b.n	800226c <_ZN7Display8showBankEh+0x20>
 800227c:	bd08      	pop	{r3, pc}

0800227e <_ZN7Display10showConfigEh>:
 800227e:	4608      	mov	r0, r1
 8002280:	f000 bb12 	b.w	80028a8 <mehal_setConfigLed>

08002284 <_ZN7Display9showValueEhh>:
 8002284:	3901      	subs	r1, #1
 8002286:	2912      	cmp	r1, #18
 8002288:	d826      	bhi.n	80022d8 <_ZN7Display9showValueEhh+0x54>
 800228a:	e8df f001 	tbb	[pc, r1]
 800228e:	1812      	.short	0x1812
 8002290:	25251e25 	.word	0x25251e25
 8002294:	25252525 	.word	0x25252525
 8002298:	2525251e 	.word	0x2525251e
 800229c:	2525250a 	.word	0x2525250a
 80022a0:	1e          	.byte	0x1e
 80022a1:	00          	.byte	0x00
 80022a2:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
 80022a6:	220f      	movs	r2, #15
 80022a8:	fb91 f1f2 	sdiv	r1, r1, r2
 80022ac:	3130      	adds	r1, #48	; 0x30
 80022ae:	b249      	sxtb	r1, r1
 80022b0:	e001      	b.n	80022b6 <_ZN7Display9showValueEhh+0x32>
 80022b2:	b912      	cbnz	r2, 80022ba <_ZN7Display9showValueEhh+0x36>
 80022b4:	2130      	movs	r1, #48	; 0x30
 80022b6:	f7ff bfaf 	b.w	8002218 <_ZN7Display8showCharEa>
 80022ba:	2131      	movs	r1, #49	; 0x31
 80022bc:	e7fb      	b.n	80022b6 <_ZN7Display9showValueEhh+0x32>
 80022be:	2a00      	cmp	r2, #0
 80022c0:	d0f8      	beq.n	80022b4 <_ZN7Display9showValueEhh+0x30>
 80022c2:	2a01      	cmp	r2, #1
 80022c4:	d0f9      	beq.n	80022ba <_ZN7Display9showValueEhh+0x36>
 80022c6:	2132      	movs	r1, #50	; 0x32
 80022c8:	e7f5      	b.n	80022b6 <_ZN7Display9showValueEhh+0x32>
 80022ca:	2a09      	cmp	r2, #9
 80022cc:	bf94      	ite	ls
 80022ce:	f102 0130 	addls.w	r1, r2, #48	; 0x30
 80022d2:	f102 0137 	addhi.w	r1, r2, #55	; 0x37
 80022d6:	e7ea      	b.n	80022ae <_ZN7Display9showValueEhh+0x2a>
 80022d8:	4770      	bx	lr

080022da <_ZN7Display12showDigitDotEv>:
 80022da:	2301      	movs	r3, #1
 80022dc:	7003      	strb	r3, [r0, #0]
 80022de:	4770      	bx	lr

080022e0 <_ZN7Display12hideDigitDotEv>:
 80022e0:	2300      	movs	r3, #0
 80022e2:	7003      	strb	r3, [r0, #0]
 80022e4:	4770      	bx	lr

080022e6 <_ZN7Encoder4InitEv>:
 80022e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022ea:	8003      	strh	r3, [r0, #0]
 80022ec:	7083      	strb	r3, [r0, #2]
 80022ee:	2300      	movs	r3, #0
 80022f0:	7203      	strb	r3, [r0, #8]
 80022f2:	4770      	bx	lr

080022f4 <_ZN7Encoder7sysTickEv>:
 80022f4:	6843      	ldr	r3, [r0, #4]
 80022f6:	b10b      	cbz	r3, 80022fc <_ZN7Encoder7sysTickEv+0x8>
 80022f8:	3b01      	subs	r3, #1
 80022fa:	6043      	str	r3, [r0, #4]
 80022fc:	4770      	bx	lr

080022fe <_ZN7Encoder4loopEv>:
 80022fe:	b538      	push	{r3, r4, r5, lr}
 8002300:	7a03      	ldrb	r3, [r0, #8]
 8002302:	4604      	mov	r4, r0
 8002304:	2b01      	cmp	r3, #1
 8002306:	d022      	beq.n	800234e <_ZN7Encoder4loopEv+0x50>
 8002308:	d317      	bcc.n	800233a <_ZN7Encoder4loopEv+0x3c>
 800230a:	2b02      	cmp	r3, #2
 800230c:	d030      	beq.n	8002370 <_ZN7Encoder4loopEv+0x72>
 800230e:	7825      	ldrb	r5, [r4, #0]
 8002310:	f000 fa7e 	bl	8002810 <mehal_readEncoderSwitch>
 8002314:	006d      	lsls	r5, r5, #1
 8002316:	b26d      	sxtb	r5, r5
 8002318:	4328      	orrs	r0, r5
 800231a:	7020      	strb	r0, [r4, #0]
 800231c:	7865      	ldrb	r5, [r4, #1]
 800231e:	f000 fa87 	bl	8002830 <mehal_readEncoderB>
 8002322:	006d      	lsls	r5, r5, #1
 8002324:	b26d      	sxtb	r5, r5
 8002326:	4328      	orrs	r0, r5
 8002328:	7060      	strb	r0, [r4, #1]
 800232a:	78a5      	ldrb	r5, [r4, #2]
 800232c:	f000 fa78 	bl	8002820 <mehal_readEncoderA>
 8002330:	006d      	lsls	r5, r5, #1
 8002332:	b26d      	sxtb	r5, r5
 8002334:	4328      	orrs	r0, r5
 8002336:	70a0      	strb	r0, [r4, #2]
 8002338:	bd38      	pop	{r3, r4, r5, pc}
 800233a:	f000 fa69 	bl	8002810 <mehal_readEncoderSwitch>
 800233e:	2800      	cmp	r0, #0
 8002340:	d1e5      	bne.n	800230e <_ZN7Encoder4loopEv+0x10>
 8002342:	2301      	movs	r3, #1
 8002344:	7223      	strb	r3, [r4, #8]
 8002346:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800234a:	6063      	str	r3, [r4, #4]
 800234c:	e7df      	b.n	800230e <_ZN7Encoder4loopEv+0x10>
 800234e:	6842      	ldr	r2, [r0, #4]
 8002350:	b922      	cbnz	r2, 800235c <_ZN7Encoder4loopEv+0x5e>
 8002352:	7243      	strb	r3, [r0, #9]
 8002354:	2302      	movs	r3, #2
 8002356:	7203      	strb	r3, [r0, #8]
 8002358:	2364      	movs	r3, #100	; 0x64
 800235a:	6043      	str	r3, [r0, #4]
 800235c:	f000 fa58 	bl	8002810 <mehal_readEncoderSwitch>
 8002360:	2801      	cmp	r0, #1
 8002362:	d1d4      	bne.n	800230e <_ZN7Encoder4loopEv+0x10>
 8002364:	2302      	movs	r3, #2
 8002366:	7223      	strb	r3, [r4, #8]
 8002368:	2364      	movs	r3, #100	; 0x64
 800236a:	72a0      	strb	r0, [r4, #10]
 800236c:	6063      	str	r3, [r4, #4]
 800236e:	e7ce      	b.n	800230e <_ZN7Encoder4loopEv+0x10>
 8002370:	f000 fa4e 	bl	8002810 <mehal_readEncoderSwitch>
 8002374:	2801      	cmp	r0, #1
 8002376:	d1ca      	bne.n	800230e <_ZN7Encoder4loopEv+0x10>
 8002378:	6863      	ldr	r3, [r4, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1c7      	bne.n	800230e <_ZN7Encoder4loopEv+0x10>
 800237e:	7223      	strb	r3, [r4, #8]
 8002380:	e7c5      	b.n	800230e <_ZN7Encoder4loopEv+0x10>

08002382 <_ZN7Encoder11pressedLongEv>:
 8002382:	7a43      	ldrb	r3, [r0, #9]
 8002384:	b10b      	cbz	r3, 800238a <_ZN7Encoder11pressedLongEv+0x8>
 8002386:	2200      	movs	r2, #0
 8002388:	7242      	strb	r2, [r0, #9]
 800238a:	4618      	mov	r0, r3
 800238c:	4770      	bx	lr

0800238e <_ZN7Encoder7pressedEv>:
 800238e:	4603      	mov	r3, r0
 8002390:	2200      	movs	r2, #0
 8002392:	7a80      	ldrb	r0, [r0, #10]
 8002394:	729a      	strb	r2, [r3, #10]
 8002396:	4770      	bx	lr

08002398 <_ZN6Memory10readUInt32Et>:
 8002398:	b507      	push	{r0, r1, r2, lr}
 800239a:	2204      	movs	r2, #4
 800239c:	4608      	mov	r0, r1
 800239e:	eb0d 0102 	add.w	r1, sp, r2
 80023a2:	f000 fa09 	bl	80027b8 <mehal_i2cMemRead>
 80023a6:	9801      	ldr	r0, [sp, #4]
 80023a8:	b003      	add	sp, #12
 80023aa:	f85d fb04 	ldr.w	pc, [sp], #4

080023ae <_ZN6Memory9readUInt8Et>:
 80023ae:	b507      	push	{r0, r1, r2, lr}
 80023b0:	4608      	mov	r0, r1
 80023b2:	2201      	movs	r2, #1
 80023b4:	f10d 0107 	add.w	r1, sp, #7
 80023b8:	f000 f9fe 	bl	80027b8 <mehal_i2cMemRead>
 80023bc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80023c0:	b003      	add	sp, #12
 80023c2:	f85d fb04 	ldr.w	pc, [sp], #4

080023c6 <_ZN6Memory10readUInt16Et>:
 80023c6:	b507      	push	{r0, r1, r2, lr}
 80023c8:	4608      	mov	r0, r1
 80023ca:	2202      	movs	r2, #2
 80023cc:	f10d 0106 	add.w	r1, sp, #6
 80023d0:	f000 f9f2 	bl	80027b8 <mehal_i2cMemRead>
 80023d4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80023d8:	b003      	add	sp, #12
 80023da:	f85d fb04 	ldr.w	pc, [sp], #4

080023de <_ZN6Memory11writeUInt32Etm>:
 80023de:	b507      	push	{r0, r1, r2, lr}
 80023e0:	4608      	mov	r0, r1
 80023e2:	a902      	add	r1, sp, #8
 80023e4:	f841 2d04 	str.w	r2, [r1, #-4]!
 80023e8:	2301      	movs	r3, #1
 80023ea:	2204      	movs	r2, #4
 80023ec:	f000 f9f6 	bl	80027dc <mehal_i2cMemWrite>
 80023f0:	b003      	add	sp, #12
 80023f2:	f85d fb04 	ldr.w	pc, [sp], #4

080023f6 <_ZN6Memory16writeUInt8NoWaitEth>:
 80023f6:	b507      	push	{r0, r1, r2, lr}
 80023f8:	4608      	mov	r0, r1
 80023fa:	a902      	add	r1, sp, #8
 80023fc:	f801 2d01 	strb.w	r2, [r1, #-1]!
 8002400:	2300      	movs	r3, #0
 8002402:	2201      	movs	r2, #1
 8002404:	f000 f9ea 	bl	80027dc <mehal_i2cMemWrite>
 8002408:	b003      	add	sp, #12
 800240a:	f85d fb04 	ldr.w	pc, [sp], #4

0800240e <_ZN6Memory11writeUInt16Ett>:
 800240e:	b507      	push	{r0, r1, r2, lr}
 8002410:	4608      	mov	r0, r1
 8002412:	a902      	add	r1, sp, #8
 8002414:	f821 2d02 	strh.w	r2, [r1, #-2]!
 8002418:	2301      	movs	r3, #1
 800241a:	2202      	movs	r2, #2
 800241c:	f000 f9de 	bl	80027dc <mehal_i2cMemWrite>
 8002420:	b003      	add	sp, #12
 8002422:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002428 <DMA1_Channel5_IRQHandler>:
 8002428:	b510      	push	{r4, lr}
 800242a:	4c0b      	ldr	r4, [pc, #44]	; (8002458 <DMA1_Channel5_IRQHandler+0x30>)
 800242c:	6820      	ldr	r0, [r4, #0]
 800242e:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8002432:	d005      	beq.n	8002440 <DMA1_Channel5_IRQHandler+0x18>
 8002434:	4b09      	ldr	r3, [pc, #36]	; (800245c <DMA1_Channel5_IRQHandler+0x34>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	b14b      	cbz	r3, 800244e <DMA1_Channel5_IRQHandler+0x26>
 800243a:	2001      	movs	r0, #1
 800243c:	4798      	blx	r3
 800243e:	e006      	b.n	800244e <DMA1_Channel5_IRQHandler+0x26>
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	035b      	lsls	r3, r3, #13
 8002444:	d503      	bpl.n	800244e <DMA1_Channel5_IRQHandler+0x26>
 8002446:	4b05      	ldr	r3, [pc, #20]	; (800245c <DMA1_Channel5_IRQHandler+0x34>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f6      	bne.n	800243c <DMA1_Channel5_IRQHandler+0x14>
 800244e:	6863      	ldr	r3, [r4, #4]
 8002450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002454:	6063      	str	r3, [r4, #4]
 8002456:	bd10      	pop	{r4, pc}
 8002458:	40020000 	.word	0x40020000
 800245c:	200047a4 	.word	0x200047a4

08002460 <mehal_init>:
 8002460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002464:	4bb8      	ldr	r3, [pc, #736]	; (8002748 <mehal_init+0x2e8>)
 8002466:	4db9      	ldr	r5, [pc, #740]	; (800274c <mehal_init+0x2ec>)
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	69eb      	ldr	r3, [r5, #28]
 800246c:	4eb8      	ldr	r6, [pc, #736]	; (8002750 <mehal_init+0x2f0>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	61eb      	str	r3, [r5, #28]
 8002474:	69ab      	ldr	r3, [r5, #24]
 8002476:	2400      	movs	r4, #0
 8002478:	f043 0305 	orr.w	r3, r3, #5
 800247c:	61ab      	str	r3, [r5, #24]
 800247e:	6833      	ldr	r3, [r6, #0]
 8002480:	22ff      	movs	r2, #255	; 0xff
 8002482:	f023 030f 	bic.w	r3, r3, #15
 8002486:	6033      	str	r3, [r6, #0]
 8002488:	6833      	ldr	r3, [r6, #0]
 800248a:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 800248e:	f043 030b 	orr.w	r3, r3, #11
 8002492:	6033      	str	r3, [r6, #0]
 8002494:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002498:	629c      	str	r4, [r3, #40]	; 0x28
 800249a:	62da      	str	r2, [r3, #44]	; 0x2c
 800249c:	2280      	movs	r2, #128	; 0x80
 800249e:	635a      	str	r2, [r3, #52]	; 0x34
 80024a0:	699a      	ldr	r2, [r3, #24]
 80024a2:	b087      	sub	sp, #28
 80024a4:	f042 0268 	orr.w	r2, r2, #104	; 0x68
 80024a8:	619a      	str	r2, [r3, #24]
 80024aa:	6a1a      	ldr	r2, [r3, #32]
 80024ac:	f022 0202 	bic.w	r2, r2, #2
 80024b0:	621a      	str	r2, [r3, #32]
 80024b2:	6a1a      	ldr	r2, [r3, #32]
 80024b4:	f042 0201 	orr.w	r2, r2, #1
 80024b8:	621a      	str	r2, [r3, #32]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	f042 0201 	orr.w	r2, r2, #1
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	696b      	ldr	r3, [r5, #20]
 80024c4:	4aa3      	ldr	r2, [pc, #652]	; (8002754 <mehal_init+0x2f4>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	616b      	str	r3, [r5, #20]
 80024cc:	4ba2      	ldr	r3, [pc, #648]	; (8002758 <mehal_init+0x2f8>)
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60d8      	str	r0, [r3, #12]
 80024d2:	6059      	str	r1, [r3, #4]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	f042 0210 	orr.w	r2, r2, #16
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	f042 0220 	orr.w	r2, r2, #32
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	f042 0202 	orr.w	r2, r2, #2
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	f042 0204 	orr.w	r2, r2, #4
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	4a8f      	ldr	r2, [pc, #572]	; (800275c <mehal_init+0x2fc>)
 800251e:	f8c2 9000 	str.w	r9, [r2]
 8002522:	b662      	cpsie	i
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	2702      	movs	r7, #2
 8002528:	f042 0201 	orr.w	r2, r2, #1
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002532:	f04f 0801 	mov.w	r8, #1
 8002536:	f44f 6b00 	mov.w	fp, #2048	; 0x800
 800253a:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
 800253e:	69ab      	ldr	r3, [r5, #24]
 8002540:	a902      	add	r1, sp, #8
 8002542:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002546:	61ab      	str	r3, [r5, #24]
 8002548:	4b85      	ldr	r3, [pc, #532]	; (8002760 <mehal_init+0x300>)
 800254a:	4886      	ldr	r0, [pc, #536]	; (8002764 <mehal_init+0x304>)
 800254c:	629c      	str	r4, [r3, #40]	; 0x28
 800254e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002556:	60da      	str	r2, [r3, #12]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	f042 0201 	orr.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	69ab      	ldr	r3, [r5, #24]
 8002562:	f043 0308 	orr.w	r3, r3, #8
 8002566:	61ab      	str	r3, [r5, #24]
 8002568:	69ab      	ldr	r3, [r5, #24]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	9b00      	ldr	r3, [sp, #0]
 8002572:	69ab      	ldr	r3, [r5, #24]
 8002574:	f043 0304 	orr.w	r3, r3, #4
 8002578:	61ab      	str	r3, [r5, #24]
 800257a:	69ab      	ldr	r3, [r5, #24]
 800257c:	9403      	str	r4, [sp, #12]
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	9301      	str	r3, [sp, #4]
 8002584:	9b01      	ldr	r3, [sp, #4]
 8002586:	f8cd b008 	str.w	fp, [sp, #8]
 800258a:	e9cd 8704 	strd	r8, r7, [sp, #16]
 800258e:	f000 fb3d 	bl	8002c0c <HAL_GPIO_Init>
 8002592:	a902      	add	r1, sp, #8
 8002594:	4873      	ldr	r0, [pc, #460]	; (8002764 <mehal_init+0x304>)
 8002596:	e9cd a402 	strd	sl, r4, [sp, #8]
 800259a:	e9cd 8704 	strd	r8, r7, [sp, #16]
 800259e:	f000 fb35 	bl	8002c0c <HAL_GPIO_Init>
 80025a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025a6:	a902      	add	r1, sp, #8
 80025a8:	486e      	ldr	r0, [pc, #440]	; (8002764 <mehal_init+0x304>)
 80025aa:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80025ae:	e9cd 8704 	strd	r8, r7, [sp, #16]
 80025b2:	f000 fb2b 	bl	8002c0c <HAL_GPIO_Init>
 80025b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025ba:	a902      	add	r1, sp, #8
 80025bc:	4869      	ldr	r0, [pc, #420]	; (8002764 <mehal_init+0x304>)
 80025be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80025c2:	e9cd 8704 	strd	r8, r7, [sp, #16]
 80025c6:	f000 fb21 	bl	8002c0c <HAL_GPIO_Init>
 80025ca:	a902      	add	r1, sp, #8
 80025cc:	4865      	ldr	r0, [pc, #404]	; (8002764 <mehal_init+0x304>)
 80025ce:	e9cd 9802 	strd	r9, r8, [sp, #8]
 80025d2:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80025d6:	f000 fb19 	bl	8002c0c <HAL_GPIO_Init>
 80025da:	4649      	mov	r1, r9
 80025dc:	f04f 0903 	mov.w	r9, #3
 80025e0:	4622      	mov	r2, r4
 80025e2:	4860      	ldr	r0, [pc, #384]	; (8002764 <mehal_init+0x304>)
 80025e4:	f000 fc83 	bl	8002eee <HAL_GPIO_WritePin>
 80025e8:	a902      	add	r1, sp, #8
 80025ea:	4630      	mov	r0, r6
 80025ec:	e9cd 9403 	strd	r9, r4, [sp, #12]
 80025f0:	9702      	str	r7, [sp, #8]
 80025f2:	9705      	str	r7, [sp, #20]
 80025f4:	f000 fb0a 	bl	8002c0c <HAL_GPIO_Init>
 80025f8:	2304      	movs	r3, #4
 80025fa:	a902      	add	r1, sp, #8
 80025fc:	4630      	mov	r0, r6
 80025fe:	e9cd 3902 	strd	r3, r9, [sp, #8]
 8002602:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8002606:	f000 fb01 	bl	8002c0c <HAL_GPIO_Init>
 800260a:	2308      	movs	r3, #8
 800260c:	4630      	mov	r0, r6
 800260e:	eb0d 0103 	add.w	r1, sp, r3
 8002612:	e9cd 3902 	strd	r3, r9, [sp, #8]
 8002616:	e9cd 4704 	strd	r4, r7, [sp, #16]
 800261a:	f000 faf7 	bl	8002c0c <HAL_GPIO_Init>
 800261e:	2310      	movs	r3, #16
 8002620:	a902      	add	r1, sp, #8
 8002622:	4630      	mov	r0, r6
 8002624:	e9cd 3902 	strd	r3, r9, [sp, #8]
 8002628:	e9cd 4704 	strd	r4, r7, [sp, #16]
 800262c:	f000 faee 	bl	8002c0c <HAL_GPIO_Init>
 8002630:	2320      	movs	r3, #32
 8002632:	e9cd 3902 	strd	r3, r9, [sp, #8]
 8002636:	f44f 7980 	mov.w	r9, #256	; 0x100
 800263a:	a902      	add	r1, sp, #8
 800263c:	4630      	mov	r0, r6
 800263e:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8002642:	f000 fae3 	bl	8002c0c <HAL_GPIO_Init>
 8002646:	a902      	add	r1, sp, #8
 8002648:	4630      	mov	r0, r6
 800264a:	e9cd 9802 	strd	r9, r8, [sp, #8]
 800264e:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8002652:	f000 fadb 	bl	8002c0c <HAL_GPIO_Init>
 8002656:	4649      	mov	r1, r9
 8002658:	f44f 7900 	mov.w	r9, #512	; 0x200
 800265c:	4622      	mov	r2, r4
 800265e:	4630      	mov	r0, r6
 8002660:	f000 fc45 	bl	8002eee <HAL_GPIO_WritePin>
 8002664:	a902      	add	r1, sp, #8
 8002666:	4630      	mov	r0, r6
 8002668:	e9cd 9802 	strd	r9, r8, [sp, #8]
 800266c:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8002670:	f000 facc 	bl	8002c0c <HAL_GPIO_Init>
 8002674:	4649      	mov	r1, r9
 8002676:	f44f 6980 	mov.w	r9, #1024	; 0x400
 800267a:	4622      	mov	r2, r4
 800267c:	4630      	mov	r0, r6
 800267e:	f000 fc36 	bl	8002eee <HAL_GPIO_WritePin>
 8002682:	a902      	add	r1, sp, #8
 8002684:	4630      	mov	r0, r6
 8002686:	e9cd 4704 	strd	r4, r7, [sp, #16]
 800268a:	e9cd 9802 	strd	r9, r8, [sp, #8]
 800268e:	f000 fabd 	bl	8002c0c <HAL_GPIO_Init>
 8002692:	4622      	mov	r2, r4
 8002694:	4649      	mov	r1, r9
 8002696:	4630      	mov	r0, r6
 8002698:	f000 fc29 	bl	8002eee <HAL_GPIO_WritePin>
 800269c:	a902      	add	r1, sp, #8
 800269e:	4630      	mov	r0, r6
 80026a0:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80026a4:	e9cd b802 	strd	fp, r8, [sp, #8]
 80026a8:	f000 fab0 	bl	8002c0c <HAL_GPIO_Init>
 80026ac:	4622      	mov	r2, r4
 80026ae:	4659      	mov	r1, fp
 80026b0:	4630      	mov	r0, r6
 80026b2:	f000 fc1c 	bl	8002eee <HAL_GPIO_WritePin>
 80026b6:	a902      	add	r1, sp, #8
 80026b8:	4630      	mov	r0, r6
 80026ba:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80026be:	e9cd a802 	strd	sl, r8, [sp, #8]
 80026c2:	f000 faa3 	bl	8002c0c <HAL_GPIO_Init>
 80026c6:	4622      	mov	r2, r4
 80026c8:	4651      	mov	r1, sl
 80026ca:	4630      	mov	r0, r6
 80026cc:	f000 fc0f 	bl	8002eee <HAL_GPIO_WritePin>
 80026d0:	686b      	ldr	r3, [r5, #4]
 80026d2:	4c25      	ldr	r4, [pc, #148]	; (8002768 <mehal_init+0x308>)
 80026d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026d8:	606b      	str	r3, [r5, #4]
 80026da:	686b      	ldr	r3, [r5, #4]
 80026dc:	4640      	mov	r0, r8
 80026de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026e2:	606b      	str	r3, [r5, #4]
 80026e4:	69ab      	ldr	r3, [r5, #24]
 80026e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ea:	61ab      	str	r3, [r5, #24]
 80026ec:	68a3      	ldr	r3, [r4, #8]
 80026ee:	ea43 0308 	orr.w	r3, r3, r8
 80026f2:	60a3      	str	r3, [r4, #8]
 80026f4:	68a3      	ldr	r3, [r4, #8]
 80026f6:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 80026fa:	60a3      	str	r3, [r4, #8]
 80026fc:	6923      	ldr	r3, [r4, #16]
 80026fe:	f023 0307 	bic.w	r3, r3, #7
 8002702:	6123      	str	r3, [r4, #16]
 8002704:	68a3      	ldr	r3, [r4, #8]
 8002706:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800270a:	60a3      	str	r3, [r4, #8]
 800270c:	f000 f978 	bl	8002a00 <HAL_Delay>
 8002710:	68a3      	ldr	r3, [r4, #8]
 8002712:	f043 0304 	orr.w	r3, r3, #4
 8002716:	60a3      	str	r3, [r4, #8]
 8002718:	68a3      	ldr	r3, [r4, #8]
 800271a:	f013 0304 	ands.w	r3, r3, #4
 800271e:	d1fb      	bne.n	8002718 <mehal_init+0x2b8>
 8002720:	4812      	ldr	r0, [pc, #72]	; (800276c <mehal_init+0x30c>)
 8002722:	4913      	ldr	r1, [pc, #76]	; (8002770 <mehal_init+0x310>)
 8002724:	4a13      	ldr	r2, [pc, #76]	; (8002774 <mehal_init+0x314>)
 8002726:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800272a:	e9c0 1200 	strd	r1, r2, [r0]
 800272e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002732:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8002736:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800273a:	6203      	str	r3, [r0, #32]
 800273c:	f000 fbf0 	bl	8002f20 <HAL_I2C_Init>
 8002740:	b007      	add	sp, #28
 8002742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002746:	bf00      	nop
 8002748:	200047a4 	.word	0x200047a4
 800274c:	40021000 	.word	0x40021000
 8002750:	40010800 	.word	0x40010800
 8002754:	40000034 	.word	0x40000034
 8002758:	40020058 	.word	0x40020058
 800275c:	e000e100 	.word	0xe000e100
 8002760:	40012c00 	.word	0x40012c00
 8002764:	40010c00 	.word	0x40010c00
 8002768:	40012400 	.word	0x40012400
 800276c:	200047a8 	.word	0x200047a8
 8002770:	40005400 	.word	0x40005400
 8002774:	00061a80 	.word	0x00061a80

08002778 <mehal_readADC>:
 8002778:	3001      	adds	r0, #1
 800277a:	b2c0      	uxtb	r0, r0
 800277c:	2811      	cmp	r0, #17
 800277e:	d816      	bhi.n	80027ae <mehal_readADC+0x36>
 8002780:	2200      	movs	r2, #0
 8002782:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <mehal_readADC+0x3c>)
 8002784:	62da      	str	r2, [r3, #44]	; 0x2c
 8002786:	6358      	str	r0, [r3, #52]	; 0x34
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	f022 0202 	bic.w	r2, r2, #2
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	0792      	lsls	r2, r2, #30
 80027a4:	d5fc      	bpl.n	80027a0 <mehal_readADC+0x28>
 80027a6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80027a8:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80027ac:	4770      	bx	lr
 80027ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80027b2:	4770      	bx	lr
 80027b4:	40012400 	.word	0x40012400

080027b8 <mehal_i2cMemRead>:
 80027b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80027ba:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80027be:	9100      	str	r1, [sp, #0]
 80027c0:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80027c4:	21a0      	movs	r1, #160	; 0xa0
 80027c6:	4602      	mov	r2, r0
 80027c8:	2301      	movs	r3, #1
 80027ca:	4803      	ldr	r0, [pc, #12]	; (80027d8 <mehal_i2cMemRead+0x20>)
 80027cc:	f000 fdca 	bl	8003364 <HAL_I2C_Mem_Read>
 80027d0:	b005      	add	sp, #20
 80027d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80027d6:	bf00      	nop
 80027d8:	200047a8 	.word	0x200047a8

080027dc <mehal_i2cMemWrite>:
 80027dc:	b530      	push	{r4, r5, lr}
 80027de:	461d      	mov	r5, r3
 80027e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80027e4:	b085      	sub	sp, #20
 80027e6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80027ea:	9100      	str	r1, [sp, #0]
 80027ec:	4602      	mov	r2, r0
 80027ee:	2301      	movs	r3, #1
 80027f0:	21a0      	movs	r1, #160	; 0xa0
 80027f2:	4805      	ldr	r0, [pc, #20]	; (8002808 <mehal_i2cMemWrite+0x2c>)
 80027f4:	f000 fcbc 	bl	8003170 <HAL_I2C_Mem_Write>
 80027f8:	4604      	mov	r4, r0
 80027fa:	b115      	cbz	r5, 8002802 <mehal_i2cMemWrite+0x26>
 80027fc:	201e      	movs	r0, #30
 80027fe:	f000 f8ff 	bl	8002a00 <HAL_Delay>
 8002802:	4620      	mov	r0, r4
 8002804:	b005      	add	sp, #20
 8002806:	bd30      	pop	{r4, r5, pc}
 8002808:	200047a8 	.word	0x200047a8

0800280c <mehal_debugPinSet>:
 800280c:	4770      	bx	lr

0800280e <mehal_debugPinReset>:
 800280e:	4770      	bx	lr

08002810 <mehal_readEncoderSwitch>:
 8002810:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002814:	4801      	ldr	r0, [pc, #4]	; (800281c <mehal_readEncoderSwitch+0xc>)
 8002816:	f000 bb53 	b.w	8002ec0 <HAL_GPIO_ReadPin>
 800281a:	bf00      	nop
 800281c:	40010c00 	.word	0x40010c00

08002820 <mehal_readEncoderA>:
 8002820:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002824:	4801      	ldr	r0, [pc, #4]	; (800282c <mehal_readEncoderA+0xc>)
 8002826:	f000 bb4b 	b.w	8002ec0 <HAL_GPIO_ReadPin>
 800282a:	bf00      	nop
 800282c:	40010c00 	.word	0x40010c00

08002830 <mehal_readEncoderB>:
 8002830:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002834:	4801      	ldr	r0, [pc, #4]	; (800283c <mehal_readEncoderB+0xc>)
 8002836:	f000 bb43 	b.w	8002ec0 <HAL_GPIO_ReadPin>
 800283a:	bf00      	nop
 800283c:	40010c00 	.word	0x40010c00

08002840 <mehal_sendDataTo595>:
 8002840:	b570      	push	{r4, r5, r6, lr}
 8002842:	2200      	movs	r2, #0
 8002844:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002848:	4605      	mov	r5, r0
 800284a:	4816      	ldr	r0, [pc, #88]	; (80028a4 <mehal_sendDataTo595+0x64>)
 800284c:	f000 fb4f 	bl	8002eee <HAL_GPIO_WritePin>
 8002850:	2200      	movs	r2, #0
 8002852:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002856:	4813      	ldr	r0, [pc, #76]	; (80028a4 <mehal_sendDataTo595+0x64>)
 8002858:	f000 fb49 	bl	8002eee <HAL_GPIO_WritePin>
 800285c:	2400      	movs	r4, #0
 800285e:	4e11      	ldr	r6, [pc, #68]	; (80028a4 <mehal_sendDataTo595+0x64>)
 8002860:	2280      	movs	r2, #128	; 0x80
 8002862:	4122      	asrs	r2, r4
 8002864:	402a      	ands	r2, r5
 8002866:	bf18      	it	ne
 8002868:	2201      	movne	r2, #1
 800286a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800286e:	4630      	mov	r0, r6
 8002870:	f000 fb3d 	bl	8002eee <HAL_GPIO_WritePin>
 8002874:	2201      	movs	r2, #1
 8002876:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800287a:	480a      	ldr	r0, [pc, #40]	; (80028a4 <mehal_sendDataTo595+0x64>)
 800287c:	f000 fb37 	bl	8002eee <HAL_GPIO_WritePin>
 8002880:	3401      	adds	r4, #1
 8002882:	2200      	movs	r2, #0
 8002884:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002888:	4806      	ldr	r0, [pc, #24]	; (80028a4 <mehal_sendDataTo595+0x64>)
 800288a:	f000 fb30 	bl	8002eee <HAL_GPIO_WritePin>
 800288e:	2c08      	cmp	r4, #8
 8002890:	d1e6      	bne.n	8002860 <mehal_sendDataTo595+0x20>
 8002892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002896:	2201      	movs	r2, #1
 8002898:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800289c:	4801      	ldr	r0, [pc, #4]	; (80028a4 <mehal_sendDataTo595+0x64>)
 800289e:	f000 bb26 	b.w	8002eee <HAL_GPIO_WritePin>
 80028a2:	bf00      	nop
 80028a4:	40010800 	.word	0x40010800

080028a8 <mehal_setConfigLed>:
 80028a8:	2801      	cmp	r0, #1
 80028aa:	4602      	mov	r2, r0
 80028ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028b0:	bf18      	it	ne
 80028b2:	2200      	movne	r2, #0
 80028b4:	4801      	ldr	r0, [pc, #4]	; (80028bc <mehal_setConfigLed+0x14>)
 80028b6:	f000 bb1a 	b.w	8002eee <HAL_GPIO_WritePin>
 80028ba:	bf00      	nop
 80028bc:	40010c00 	.word	0x40010c00

080028c0 <mehal_setBank1Led>:
 80028c0:	2801      	cmp	r0, #1
 80028c2:	4602      	mov	r2, r0
 80028c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028c8:	bf18      	it	ne
 80028ca:	2200      	movne	r2, #0
 80028cc:	4801      	ldr	r0, [pc, #4]	; (80028d4 <mehal_setBank1Led+0x14>)
 80028ce:	f000 bb0e 	b.w	8002eee <HAL_GPIO_WritePin>
 80028d2:	bf00      	nop
 80028d4:	40010800 	.word	0x40010800

080028d8 <mehal_setBank0Led>:
 80028d8:	2801      	cmp	r0, #1
 80028da:	4602      	mov	r2, r0
 80028dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028e0:	bf18      	it	ne
 80028e2:	2200      	movne	r2, #0
 80028e4:	4801      	ldr	r0, [pc, #4]	; (80028ec <mehal_setBank0Led+0x14>)
 80028e6:	f000 bb02 	b.w	8002eee <HAL_GPIO_WritePin>
 80028ea:	bf00      	nop
 80028ec:	40010800 	.word	0x40010800

080028f0 <Reset_Handler>:
 80028f0:	2100      	movs	r1, #0
 80028f2:	e003      	b.n	80028fc <LoopCopyDataInit>

080028f4 <CopyDataInit>:
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <LoopFillZerobss+0x14>)
 80028f6:	585b      	ldr	r3, [r3, r1]
 80028f8:	5043      	str	r3, [r0, r1]
 80028fa:	3104      	adds	r1, #4

080028fc <LoopCopyDataInit>:
 80028fc:	480a      	ldr	r0, [pc, #40]	; (8002928 <LoopFillZerobss+0x18>)
 80028fe:	4b0b      	ldr	r3, [pc, #44]	; (800292c <LoopFillZerobss+0x1c>)
 8002900:	1842      	adds	r2, r0, r1
 8002902:	429a      	cmp	r2, r3
 8002904:	d3f6      	bcc.n	80028f4 <CopyDataInit>
 8002906:	4a0a      	ldr	r2, [pc, #40]	; (8002930 <LoopFillZerobss+0x20>)
 8002908:	e002      	b.n	8002910 <LoopFillZerobss>

0800290a <FillZerobss>:
 800290a:	2300      	movs	r3, #0
 800290c:	f842 3b04 	str.w	r3, [r2], #4

08002910 <LoopFillZerobss>:
 8002910:	4b08      	ldr	r3, [pc, #32]	; (8002934 <LoopFillZerobss+0x24>)
 8002912:	429a      	cmp	r2, r3
 8002914:	d3f9      	bcc.n	800290a <FillZerobss>
 8002916:	f7fe fdf3 	bl	8001500 <SystemInit>
 800291a:	f001 fe97 	bl	800464c <__libc_init_array>
 800291e:	f7fe fd0f 	bl	8001340 <main>
 8002922:	4770      	bx	lr
 8002924:	0800ec54 	.word	0x0800ec54
 8002928:	20000000 	.word	0x20000000
 800292c:	200002ac 	.word	0x200002ac
 8002930:	200002ac 	.word	0x200002ac
 8002934:	20004800 	.word	0x20004800

08002938 <ADC1_2_IRQHandler>:
 8002938:	e7fe      	b.n	8002938 <ADC1_2_IRQHandler>
	...

0800293c <HAL_Init>:
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
 8002940:	4b08      	ldr	r3, [pc, #32]	; (8002964 <HAL_Init+0x28>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a07      	ldr	r2, [pc, #28]	; (8002964 <HAL_Init+0x28>)
 8002946:	f043 0310 	orr.w	r3, r3, #16
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	2003      	movs	r0, #3
 800294e:	f000 f929 	bl	8002ba4 <HAL_NVIC_SetPriorityGrouping>
 8002952:	2000      	movs	r0, #0
 8002954:	f000 f808 	bl	8002968 <HAL_InitTick>
 8002958:	f7fe fd38 	bl	80013cc <HAL_MspInit>
 800295c:	2300      	movs	r3, #0
 800295e:	4618      	mov	r0, r3
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40022000 	.word	0x40022000

08002968 <HAL_InitTick>:
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_InitTick+0x54>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <HAL_InitTick+0x58>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	4619      	mov	r1, r3
 800297a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800297e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002982:	fbb2 f3f3 	udiv	r3, r2, r3
 8002986:	4618      	mov	r0, r3
 8002988:	f000 f933 	bl	8002bf2 <HAL_SYSTICK_Config>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_InitTick+0x2e>
 8002992:	2301      	movs	r3, #1
 8002994:	e00e      	b.n	80029b4 <HAL_InitTick+0x4c>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b0f      	cmp	r3, #15
 800299a:	d80a      	bhi.n	80029b2 <HAL_InitTick+0x4a>
 800299c:	2200      	movs	r2, #0
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029a4:	f000 f909 	bl	8002bba <HAL_NVIC_SetPriority>
 80029a8:	4a06      	ldr	r2, [pc, #24]	; (80029c4 <HAL_InitTick+0x5c>)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	2300      	movs	r3, #0
 80029b0:	e000      	b.n	80029b4 <HAL_InitTick+0x4c>
 80029b2:	2301      	movs	r3, #1
 80029b4:	4618      	mov	r0, r3
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20000298 	.word	0x20000298
 80029c0:	200002a8 	.word	0x200002a8
 80029c4:	200002a4 	.word	0x200002a4

080029c8 <HAL_IncTick>:
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_IncTick+0x1c>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_IncTick+0x20>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4413      	add	r3, r2
 80029d8:	4a03      	ldr	r2, [pc, #12]	; (80029e8 <HAL_IncTick+0x20>)
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr
 80029e4:	200002a8 	.word	0x200002a8
 80029e8:	200047fc 	.word	0x200047fc

080029ec <HAL_GetTick>:
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	4b02      	ldr	r3, [pc, #8]	; (80029fc <HAL_GetTick+0x10>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	200047fc 	.word	0x200047fc

08002a00 <HAL_Delay>:
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	f7ff fff0 	bl	80029ec <HAL_GetTick>
 8002a0c:	60b8      	str	r0, [r7, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a18:	d005      	beq.n	8002a26 <HAL_Delay+0x26>
 8002a1a:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <HAL_Delay+0x40>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4413      	add	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	bf00      	nop
 8002a28:	f7ff ffe0 	bl	80029ec <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d8f7      	bhi.n	8002a28 <HAL_Delay+0x28>
 8002a38:	bf00      	nop
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	200002a8 	.word	0x200002a8

08002a44 <__NVIC_SetPriorityGrouping>:
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	4b0c      	ldr	r3, [pc, #48]	; (8002a88 <__NVIC_SetPriorityGrouping+0x44>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a60:	4013      	ands	r3, r2
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	021a      	lsls	r2, r3, #8
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	4a04      	ldr	r2, [pc, #16]	; (8002a88 <__NVIC_SetPriorityGrouping+0x44>)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	60d3      	str	r3, [r2, #12]
 8002a7c:	bf00      	nop
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	e000ed00 	.word	0xe000ed00

08002a8c <__NVIC_GetPriorityGrouping>:
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	0a1b      	lsrs	r3, r3, #8
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <__NVIC_SetPriority>:
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	6039      	str	r1, [r7, #0]
 8002ab2:	71fb      	strb	r3, [r7, #7]
 8002ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	db0a      	blt.n	8002ad2 <__NVIC_SetPriority+0x2a>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	490c      	ldr	r1, [pc, #48]	; (8002af4 <__NVIC_SetPriority+0x4c>)
 8002ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac6:	0112      	lsls	r2, r2, #4
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	440b      	add	r3, r1
 8002acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002ad0:	e00a      	b.n	8002ae8 <__NVIC_SetPriority+0x40>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	4908      	ldr	r1, [pc, #32]	; (8002af8 <__NVIC_SetPriority+0x50>)
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	3b04      	subs	r3, #4
 8002ae0:	0112      	lsls	r2, r2, #4
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	761a      	strb	r2, [r3, #24]
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	e000e100 	.word	0xe000e100
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <NVIC_EncodePriority>:
 8002afc:	b480      	push	{r7}
 8002afe:	b089      	sub	sp, #36	; 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	61fb      	str	r3, [r7, #28]
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f1c3 0307 	rsb	r3, r3, #7
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	bf28      	it	cs
 8002b1a:	2304      	movcs	r3, #4
 8002b1c:	61bb      	str	r3, [r7, #24]
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3304      	adds	r3, #4
 8002b22:	2b06      	cmp	r3, #6
 8002b24:	d902      	bls.n	8002b2c <NVIC_EncodePriority+0x30>
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3b03      	subs	r3, #3
 8002b2a:	e000      	b.n	8002b2e <NVIC_EncodePriority+0x32>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43da      	mvns	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	401a      	ands	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	409a      	lsls	r2, r3
 8002b44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4e:	43d9      	mvns	r1, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	400b      	ands	r3, r1
 8002b54:	4313      	orrs	r3, r2
 8002b56:	4618      	mov	r0, r3
 8002b58:	3724      	adds	r7, #36	; 0x24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr

08002b60 <SysTick_Config>:
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b70:	d301      	bcc.n	8002b76 <SysTick_Config+0x16>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e00f      	b.n	8002b96 <SysTick_Config+0x36>
 8002b76:	4a0a      	ldr	r2, [pc, #40]	; (8002ba0 <SysTick_Config+0x40>)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	6053      	str	r3, [r2, #4]
 8002b7e:	210f      	movs	r1, #15
 8002b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b84:	f7ff ff90 	bl	8002aa8 <__NVIC_SetPriority>
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <SysTick_Config+0x40>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]
 8002b8e:	4b04      	ldr	r3, [pc, #16]	; (8002ba0 <SysTick_Config+0x40>)
 8002b90:	2207      	movs	r2, #7
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	2300      	movs	r3, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	e000e010 	.word	0xe000e010

08002ba4 <HAL_NVIC_SetPriorityGrouping>:
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff ff49 	bl	8002a44 <__NVIC_SetPriorityGrouping>
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_NVIC_SetPriority>:
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b086      	sub	sp, #24
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]
 8002bc6:	73fb      	strb	r3, [r7, #15]
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	f7ff ff5e 	bl	8002a8c <__NVIC_GetPriorityGrouping>
 8002bd0:	6178      	str	r0, [r7, #20]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	68b9      	ldr	r1, [r7, #8]
 8002bd6:	6978      	ldr	r0, [r7, #20]
 8002bd8:	f7ff ff90 	bl	8002afc <NVIC_EncodePriority>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002be2:	4611      	mov	r1, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff5f 	bl	8002aa8 <__NVIC_SetPriority>
 8002bea:	bf00      	nop
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_SYSTICK_Config>:
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff ffb0 	bl	8002b60 <SysTick_Config>
 8002c00:	4603      	mov	r3, r0
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <HAL_GPIO_Init>:
 8002c0c:	b480      	push	{r7}
 8002c0e:	b08b      	sub	sp, #44	; 0x2c
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
 8002c16:	2300      	movs	r3, #0
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	623b      	str	r3, [r7, #32]
 8002c1e:	e127      	b.n	8002e70 <HAL_GPIO_Init+0x264>
 8002c20:	2201      	movs	r2, #1
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	61fb      	str	r3, [r7, #28]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	f040 8116 	bne.w	8002e6a <HAL_GPIO_Init+0x25e>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b12      	cmp	r3, #18
 8002c44:	d034      	beq.n	8002cb0 <HAL_GPIO_Init+0xa4>
 8002c46:	2b12      	cmp	r3, #18
 8002c48:	d80d      	bhi.n	8002c66 <HAL_GPIO_Init+0x5a>
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d02b      	beq.n	8002ca6 <HAL_GPIO_Init+0x9a>
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d804      	bhi.n	8002c5c <HAL_GPIO_Init+0x50>
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d031      	beq.n	8002cba <HAL_GPIO_Init+0xae>
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d01c      	beq.n	8002c94 <HAL_GPIO_Init+0x88>
 8002c5a:	e048      	b.n	8002cee <HAL_GPIO_Init+0xe2>
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d043      	beq.n	8002ce8 <HAL_GPIO_Init+0xdc>
 8002c60:	2b11      	cmp	r3, #17
 8002c62:	d01b      	beq.n	8002c9c <HAL_GPIO_Init+0x90>
 8002c64:	e043      	b.n	8002cee <HAL_GPIO_Init+0xe2>
 8002c66:	4a89      	ldr	r2, [pc, #548]	; (8002e8c <HAL_GPIO_Init+0x280>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d026      	beq.n	8002cba <HAL_GPIO_Init+0xae>
 8002c6c:	4a87      	ldr	r2, [pc, #540]	; (8002e8c <HAL_GPIO_Init+0x280>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d806      	bhi.n	8002c80 <HAL_GPIO_Init+0x74>
 8002c72:	4a87      	ldr	r2, [pc, #540]	; (8002e90 <HAL_GPIO_Init+0x284>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d020      	beq.n	8002cba <HAL_GPIO_Init+0xae>
 8002c78:	4a86      	ldr	r2, [pc, #536]	; (8002e94 <HAL_GPIO_Init+0x288>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d01d      	beq.n	8002cba <HAL_GPIO_Init+0xae>
 8002c7e:	e036      	b.n	8002cee <HAL_GPIO_Init+0xe2>
 8002c80:	4a85      	ldr	r2, [pc, #532]	; (8002e98 <HAL_GPIO_Init+0x28c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d019      	beq.n	8002cba <HAL_GPIO_Init+0xae>
 8002c86:	4a85      	ldr	r2, [pc, #532]	; (8002e9c <HAL_GPIO_Init+0x290>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d016      	beq.n	8002cba <HAL_GPIO_Init+0xae>
 8002c8c:	4a84      	ldr	r2, [pc, #528]	; (8002ea0 <HAL_GPIO_Init+0x294>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d013      	beq.n	8002cba <HAL_GPIO_Init+0xae>
 8002c92:	e02c      	b.n	8002cee <HAL_GPIO_Init+0xe2>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	623b      	str	r3, [r7, #32]
 8002c9a:	e028      	b.n	8002cee <HAL_GPIO_Init+0xe2>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	623b      	str	r3, [r7, #32]
 8002ca4:	e023      	b.n	8002cee <HAL_GPIO_Init+0xe2>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	3308      	adds	r3, #8
 8002cac:	623b      	str	r3, [r7, #32]
 8002cae:	e01e      	b.n	8002cee <HAL_GPIO_Init+0xe2>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	330c      	adds	r3, #12
 8002cb6:	623b      	str	r3, [r7, #32]
 8002cb8:	e019      	b.n	8002cee <HAL_GPIO_Init+0xe2>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d102      	bne.n	8002cc8 <HAL_GPIO_Init+0xbc>
 8002cc2:	2304      	movs	r3, #4
 8002cc4:	623b      	str	r3, [r7, #32]
 8002cc6:	e012      	b.n	8002cee <HAL_GPIO_Init+0xe2>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d105      	bne.n	8002cdc <HAL_GPIO_Init+0xd0>
 8002cd0:	2308      	movs	r3, #8
 8002cd2:	623b      	str	r3, [r7, #32]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	611a      	str	r2, [r3, #16]
 8002cda:	e008      	b.n	8002cee <HAL_GPIO_Init+0xe2>
 8002cdc:	2308      	movs	r3, #8
 8002cde:	623b      	str	r3, [r7, #32]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69fa      	ldr	r2, [r7, #28]
 8002ce4:	615a      	str	r2, [r3, #20]
 8002ce6:	e002      	b.n	8002cee <HAL_GPIO_Init+0xe2>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	623b      	str	r3, [r7, #32]
 8002cec:	bf00      	nop
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	2bff      	cmp	r3, #255	; 0xff
 8002cf2:	d801      	bhi.n	8002cf8 <HAL_GPIO_Init+0xec>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	e001      	b.n	8002cfc <HAL_GPIO_Init+0xf0>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	2bff      	cmp	r3, #255	; 0xff
 8002d02:	d802      	bhi.n	8002d0a <HAL_GPIO_Init+0xfe>
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	e002      	b.n	8002d10 <HAL_GPIO_Init+0x104>
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	3b08      	subs	r3, #8
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	210f      	movs	r1, #15
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	401a      	ands	r2, r3
 8002d22:	6a39      	ldr	r1, [r7, #32]
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 8096 	beq.w	8002e6a <HAL_GPIO_Init+0x25e>
 8002d3e:	4b59      	ldr	r3, [pc, #356]	; (8002ea4 <HAL_GPIO_Init+0x298>)
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	4a58      	ldr	r2, [pc, #352]	; (8002ea4 <HAL_GPIO_Init+0x298>)
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	6193      	str	r3, [r2, #24]
 8002d4a:	4b56      	ldr	r3, [pc, #344]	; (8002ea4 <HAL_GPIO_Init+0x298>)
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	60bb      	str	r3, [r7, #8]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4a54      	ldr	r2, [pc, #336]	; (8002ea8 <HAL_GPIO_Init+0x29c>)
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	089b      	lsrs	r3, r3, #2
 8002d5c:	3302      	adds	r3, #2
 8002d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	220f      	movs	r2, #15
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	4013      	ands	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a4b      	ldr	r2, [pc, #300]	; (8002eac <HAL_GPIO_Init+0x2a0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d013      	beq.n	8002daa <HAL_GPIO_Init+0x19e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a4a      	ldr	r2, [pc, #296]	; (8002eb0 <HAL_GPIO_Init+0x2a4>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d00d      	beq.n	8002da6 <HAL_GPIO_Init+0x19a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a49      	ldr	r2, [pc, #292]	; (8002eb4 <HAL_GPIO_Init+0x2a8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d007      	beq.n	8002da2 <HAL_GPIO_Init+0x196>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a48      	ldr	r2, [pc, #288]	; (8002eb8 <HAL_GPIO_Init+0x2ac>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d101      	bne.n	8002d9e <HAL_GPIO_Init+0x192>
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e006      	b.n	8002dac <HAL_GPIO_Init+0x1a0>
 8002d9e:	2304      	movs	r3, #4
 8002da0:	e004      	b.n	8002dac <HAL_GPIO_Init+0x1a0>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e002      	b.n	8002dac <HAL_GPIO_Init+0x1a0>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <HAL_GPIO_Init+0x1a0>
 8002daa:	2300      	movs	r3, #0
 8002dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dae:	f002 0203 	and.w	r2, r2, #3
 8002db2:	0092      	lsls	r2, r2, #2
 8002db4:	4093      	lsls	r3, r2
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	493a      	ldr	r1, [pc, #232]	; (8002ea8 <HAL_GPIO_Init+0x29c>)
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	089b      	lsrs	r3, r3, #2
 8002dc2:	3302      	adds	r3, #2
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d006      	beq.n	8002de4 <HAL_GPIO_Init+0x1d8>
 8002dd6:	4b39      	ldr	r3, [pc, #228]	; (8002ebc <HAL_GPIO_Init+0x2b0>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	4938      	ldr	r1, [pc, #224]	; (8002ebc <HAL_GPIO_Init+0x2b0>)
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	600b      	str	r3, [r1, #0]
 8002de2:	e006      	b.n	8002df2 <HAL_GPIO_Init+0x1e6>
 8002de4:	4b35      	ldr	r3, [pc, #212]	; (8002ebc <HAL_GPIO_Init+0x2b0>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	43db      	mvns	r3, r3
 8002dec:	4933      	ldr	r1, [pc, #204]	; (8002ebc <HAL_GPIO_Init+0x2b0>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d006      	beq.n	8002e0c <HAL_GPIO_Init+0x200>
 8002dfe:	4b2f      	ldr	r3, [pc, #188]	; (8002ebc <HAL_GPIO_Init+0x2b0>)
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	492e      	ldr	r1, [pc, #184]	; (8002ebc <HAL_GPIO_Init+0x2b0>)
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	604b      	str	r3, [r1, #4]
 8002e0a:	e006      	b.n	8002e1a <HAL_GPIO_Init+0x20e>
 8002e0c:	4b2b      	ldr	r3, [pc, #172]	; (8002ebc <HAL_GPIO_Init+0x2b0>)
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	43db      	mvns	r3, r3
 8002e14:	4929      	ldr	r1, [pc, #164]	; (8002ebc <HAL_GPIO_Init+0x2b0>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	604b      	str	r3, [r1, #4]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d006      	beq.n	8002e34 <HAL_GPIO_Init+0x228>
 8002e26:	4b25      	ldr	r3, [pc, #148]	; (8002ebc <HAL_GPIO_Init+0x2b0>)
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	4924      	ldr	r1, [pc, #144]	; (8002ebc <HAL_GPIO_Init+0x2b0>)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
 8002e32:	e006      	b.n	8002e42 <HAL_GPIO_Init+0x236>
 8002e34:	4b21      	ldr	r3, [pc, #132]	; (8002ebc <HAL_GPIO_Init+0x2b0>)
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	491f      	ldr	r1, [pc, #124]	; (8002ebc <HAL_GPIO_Init+0x2b0>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	608b      	str	r3, [r1, #8]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d006      	beq.n	8002e5c <HAL_GPIO_Init+0x250>
 8002e4e:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <HAL_GPIO_Init+0x2b0>)
 8002e50:	68da      	ldr	r2, [r3, #12]
 8002e52:	491a      	ldr	r1, [pc, #104]	; (8002ebc <HAL_GPIO_Init+0x2b0>)
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60cb      	str	r3, [r1, #12]
 8002e5a:	e006      	b.n	8002e6a <HAL_GPIO_Init+0x25e>
 8002e5c:	4b17      	ldr	r3, [pc, #92]	; (8002ebc <HAL_GPIO_Init+0x2b0>)
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	43db      	mvns	r3, r3
 8002e64:	4915      	ldr	r1, [pc, #84]	; (8002ebc <HAL_GPIO_Init+0x2b0>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	60cb      	str	r3, [r1, #12]
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f47f aed0 	bne.w	8002c20 <HAL_GPIO_Init+0x14>
 8002e80:	bf00      	nop
 8002e82:	372c      	adds	r7, #44	; 0x2c
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	10210000 	.word	0x10210000
 8002e90:	10110000 	.word	0x10110000
 8002e94:	10120000 	.word	0x10120000
 8002e98:	10310000 	.word	0x10310000
 8002e9c:	10320000 	.word	0x10320000
 8002ea0:	10220000 	.word	0x10220000
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40010000 	.word	0x40010000
 8002eac:	40010800 	.word	0x40010800
 8002eb0:	40010c00 	.word	0x40010c00
 8002eb4:	40011000 	.word	0x40011000
 8002eb8:	40011400 	.word	0x40011400
 8002ebc:	40010400 	.word	0x40010400

08002ec0 <HAL_GPIO_ReadPin>:
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	807b      	strh	r3, [r7, #2]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	887b      	ldrh	r3, [r7, #2]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <HAL_GPIO_ReadPin+0x1e>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
 8002edc:	e001      	b.n	8002ee2 <HAL_GPIO_ReadPin+0x22>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	73fb      	strb	r3, [r7, #15]
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr

08002eee <HAL_GPIO_WritePin>:
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	807b      	strh	r3, [r7, #2]
 8002efa:	4613      	mov	r3, r2
 8002efc:	707b      	strb	r3, [r7, #1]
 8002efe:	787b      	ldrb	r3, [r7, #1]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_GPIO_WritePin+0x1e>
 8002f04:	887a      	ldrh	r2, [r7, #2]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	611a      	str	r2, [r3, #16]
 8002f0a:	e003      	b.n	8002f14 <HAL_GPIO_WritePin+0x26>
 8002f0c:	887b      	ldrh	r3, [r7, #2]
 8002f0e:	041a      	lsls	r2, r3, #16
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	611a      	str	r2, [r3, #16]
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr
	...

08002f20 <HAL_I2C_Init>:
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_I2C_Init+0x12>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e10f      	b.n	8003152 <HAL_I2C_Init+0x232>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <HAL_I2C_Init+0x2c>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7fe fa72 	bl	8001430 <HAL_I2C_MspInit>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2224      	movs	r2, #36	; 0x24
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0201 	bic.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	f001 fb40 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 8002f68:	60f8      	str	r0, [r7, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	4a7b      	ldr	r2, [pc, #492]	; (800315c <HAL_I2C_Init+0x23c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d807      	bhi.n	8002f84 <HAL_I2C_Init+0x64>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4a7a      	ldr	r2, [pc, #488]	; (8003160 <HAL_I2C_Init+0x240>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	bf94      	ite	ls
 8002f7c:	2301      	movls	r3, #1
 8002f7e:	2300      	movhi	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	e006      	b.n	8002f92 <HAL_I2C_Init+0x72>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4a77      	ldr	r2, [pc, #476]	; (8003164 <HAL_I2C_Init+0x244>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	bf94      	ite	ls
 8002f8c:	2301      	movls	r3, #1
 8002f8e:	2300      	movhi	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_I2C_Init+0x7a>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e0db      	b.n	8003152 <HAL_I2C_Init+0x232>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4a72      	ldr	r2, [pc, #456]	; (8003168 <HAL_I2C_Init+0x248>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	0c9b      	lsrs	r3, r3, #18
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	605a      	str	r2, [r3, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4a64      	ldr	r2, [pc, #400]	; (800315c <HAL_I2C_Init+0x23c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d802      	bhi.n	8002fd4 <HAL_I2C_Init+0xb4>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	e009      	b.n	8002fe8 <HAL_I2C_Init+0xc8>
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fda:	fb02 f303 	mul.w	r3, r2, r3
 8002fde:	4a63      	ldr	r2, [pc, #396]	; (800316c <HAL_I2C_Init+0x24c>)
 8002fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe4:	099b      	lsrs	r3, r3, #6
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	430b      	orrs	r3, r1
 8002fee:	6213      	str	r3, [r2, #32]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ffa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4956      	ldr	r1, [pc, #344]	; (800315c <HAL_I2C_Init+0x23c>)
 8003004:	428b      	cmp	r3, r1
 8003006:	d80d      	bhi.n	8003024 <HAL_I2C_Init+0x104>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	1e59      	subs	r1, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	fbb1 f3f3 	udiv	r3, r1, r3
 8003016:	3301      	adds	r3, #1
 8003018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301c:	2b04      	cmp	r3, #4
 800301e:	bf38      	it	cc
 8003020:	2304      	movcc	r3, #4
 8003022:	e04f      	b.n	80030c4 <HAL_I2C_Init+0x1a4>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d111      	bne.n	8003050 <HAL_I2C_Init+0x130>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	1e58      	subs	r0, r3, #1
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6859      	ldr	r1, [r3, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	440b      	add	r3, r1
 800303a:	fbb0 f3f3 	udiv	r3, r0, r3
 800303e:	3301      	adds	r3, #1
 8003040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003044:	2b00      	cmp	r3, #0
 8003046:	bf0c      	ite	eq
 8003048:	2301      	moveq	r3, #1
 800304a:	2300      	movne	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	e012      	b.n	8003076 <HAL_I2C_Init+0x156>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	1e58      	subs	r0, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6859      	ldr	r1, [r3, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	0099      	lsls	r1, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	fbb0 f3f3 	udiv	r3, r0, r3
 8003066:	3301      	adds	r3, #1
 8003068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf0c      	ite	eq
 8003070:	2301      	moveq	r3, #1
 8003072:	2300      	movne	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_I2C_Init+0x15e>
 800307a:	2301      	movs	r3, #1
 800307c:	e022      	b.n	80030c4 <HAL_I2C_Init+0x1a4>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10e      	bne.n	80030a4 <HAL_I2C_Init+0x184>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1e58      	subs	r0, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6859      	ldr	r1, [r3, #4]
 800308e:	460b      	mov	r3, r1
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	440b      	add	r3, r1
 8003094:	fbb0 f3f3 	udiv	r3, r0, r3
 8003098:	3301      	adds	r3, #1
 800309a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800309e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030a2:	e00f      	b.n	80030c4 <HAL_I2C_Init+0x1a4>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	1e58      	subs	r0, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6859      	ldr	r1, [r3, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	0099      	lsls	r1, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ba:	3301      	adds	r3, #1
 80030bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	6809      	ldr	r1, [r1, #0]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	61cb      	str	r3, [r1, #28]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69da      	ldr	r2, [r3, #28]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6911      	ldr	r1, [r2, #16]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	68d2      	ldr	r2, [r2, #12]
 80030fe:	4311      	orrs	r1, r2
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	430b      	orrs	r3, r1
 8003106:	6093      	str	r3, [r2, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695a      	ldr	r2, [r3, #20]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	60da      	str	r2, [r3, #12]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	641a      	str	r2, [r3, #64]	; 0x40
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	631a      	str	r2, [r3, #48]	; 0x30
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003150:	2300      	movs	r3, #0
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	000186a0 	.word	0x000186a0
 8003160:	001e847f 	.word	0x001e847f
 8003164:	003d08ff 	.word	0x003d08ff
 8003168:	431bde83 	.word	0x431bde83
 800316c:	10624dd3 	.word	0x10624dd3

08003170 <HAL_I2C_Mem_Write>:
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af02      	add	r7, sp, #8
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	4608      	mov	r0, r1
 800317a:	4611      	mov	r1, r2
 800317c:	461a      	mov	r2, r3
 800317e:	4603      	mov	r3, r0
 8003180:	817b      	strh	r3, [r7, #10]
 8003182:	460b      	mov	r3, r1
 8003184:	813b      	strh	r3, [r7, #8]
 8003186:	4613      	mov	r3, r2
 8003188:	80fb      	strh	r3, [r7, #6]
 800318a:	f7ff fc2f 	bl	80029ec <HAL_GetTick>
 800318e:	6178      	str	r0, [r7, #20]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b20      	cmp	r3, #32
 800319a:	f040 80d9 	bne.w	8003350 <HAL_I2C_Mem_Write+0x1e0>
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	2319      	movs	r3, #25
 80031a4:	2201      	movs	r2, #1
 80031a6:	496d      	ldr	r1, [pc, #436]	; (800335c <HAL_I2C_Mem_Write+0x1ec>)
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 fc6b 	bl	8003a84 <I2C_WaitOnFlagUntilTimeout>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <HAL_I2C_Mem_Write+0x48>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e0cc      	b.n	8003352 <HAL_I2C_Mem_Write+0x1e2>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_I2C_Mem_Write+0x56>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e0c5      	b.n	8003352 <HAL_I2C_Mem_Write+0x1e2>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d007      	beq.n	80031ec <HAL_I2C_Mem_Write+0x7c>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0201 	orr.w	r2, r2, #1
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2221      	movs	r2, #33	; 0x21
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2240      	movs	r2, #64	; 0x40
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	641a      	str	r2, [r3, #64]	; 0x40
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a3a      	ldr	r2, [r7, #32]
 8003216:	625a      	str	r2, [r3, #36]	; 0x24
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800321c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	851a      	strh	r2, [r3, #40]	; 0x28
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4a4d      	ldr	r2, [pc, #308]	; (8003360 <HAL_I2C_Mem_Write+0x1f0>)
 800322c:	62da      	str	r2, [r3, #44]	; 0x2c
 800322e:	88f8      	ldrh	r0, [r7, #6]
 8003230:	893a      	ldrh	r2, [r7, #8]
 8003232:	8979      	ldrh	r1, [r7, #10]
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	9301      	str	r3, [sp, #4]
 8003238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	4603      	mov	r3, r0
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 fac6 	bl	80037d0 <I2C_RequestMemoryWrite>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d052      	beq.n	80032f0 <HAL_I2C_Mem_Write+0x180>
 800324a:	2301      	movs	r3, #1
 800324c:	e081      	b.n	8003352 <HAL_I2C_Mem_Write+0x1e2>
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 fcec 	bl	8003c30 <I2C_WaitOnTXEFlagUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00d      	beq.n	800327a <HAL_I2C_Mem_Write+0x10a>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	2b04      	cmp	r3, #4
 8003264:	d107      	bne.n	8003276 <HAL_I2C_Mem_Write+0x106>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	2301      	movs	r3, #1
 8003278:	e06b      	b.n	8003352 <HAL_I2C_Mem_Write+0x1e2>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	781a      	ldrb	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	611a      	str	r2, [r3, #16]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	625a      	str	r2, [r3, #36]	; 0x24
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	851a      	strh	r2, [r3, #40]	; 0x28
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d11b      	bne.n	80032f0 <HAL_I2C_Mem_Write+0x180>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d017      	beq.n	80032f0 <HAL_I2C_Mem_Write+0x180>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	781a      	ldrb	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	611a      	str	r2, [r3, #16]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	625a      	str	r2, [r3, #36]	; 0x24
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	851a      	strh	r2, [r3, #40]	; 0x28
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1aa      	bne.n	800324e <HAL_I2C_Mem_Write+0xde>
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 fcd8 	bl	8003cb2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00d      	beq.n	8003324 <HAL_I2C_Mem_Write+0x1b4>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	2b04      	cmp	r3, #4
 800330e:	d107      	bne.n	8003320 <HAL_I2C_Mem_Write+0x1b0>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	2301      	movs	r3, #1
 8003322:	e016      	b.n	8003352 <HAL_I2C_Mem_Write+0x1e2>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2220      	movs	r2, #32
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800334c:	2300      	movs	r3, #0
 800334e:	e000      	b.n	8003352 <HAL_I2C_Mem_Write+0x1e2>
 8003350:	2302      	movs	r3, #2
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	00100002 	.word	0x00100002
 8003360:	ffff0000 	.word	0xffff0000

08003364 <HAL_I2C_Mem_Read>:
 8003364:	b580      	push	{r7, lr}
 8003366:	b08c      	sub	sp, #48	; 0x30
 8003368:	af02      	add	r7, sp, #8
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	4608      	mov	r0, r1
 800336e:	4611      	mov	r1, r2
 8003370:	461a      	mov	r2, r3
 8003372:	4603      	mov	r3, r0
 8003374:	817b      	strh	r3, [r7, #10]
 8003376:	460b      	mov	r3, r1
 8003378:	813b      	strh	r3, [r7, #8]
 800337a:	4613      	mov	r3, r2
 800337c:	80fb      	strh	r3, [r7, #6]
 800337e:	f7ff fb35 	bl	80029ec <HAL_GetTick>
 8003382:	6278      	str	r0, [r7, #36]	; 0x24
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b20      	cmp	r3, #32
 800338e:	f040 8218 	bne.w	80037c2 <HAL_I2C_Mem_Read+0x45e>
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	2319      	movs	r3, #25
 8003398:	2201      	movs	r2, #1
 800339a:	4981      	ldr	r1, [pc, #516]	; (80035a0 <HAL_I2C_Mem_Read+0x23c>)
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 fb71 	bl	8003a84 <I2C_WaitOnFlagUntilTimeout>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <HAL_I2C_Mem_Read+0x48>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e20b      	b.n	80037c4 <HAL_I2C_Mem_Read+0x460>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d101      	bne.n	80033ba <HAL_I2C_Mem_Read+0x56>
 80033b6:	2302      	movs	r3, #2
 80033b8:	e204      	b.n	80037c4 <HAL_I2C_Mem_Read+0x460>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d007      	beq.n	80033e0 <HAL_I2C_Mem_Read+0x7c>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2222      	movs	r2, #34	; 0x22
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2240      	movs	r2, #64	; 0x40
 80033fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	641a      	str	r2, [r3, #64]	; 0x40
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800340a:	625a      	str	r2, [r3, #36]	; 0x24
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003410:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	851a      	strh	r2, [r3, #40]	; 0x28
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4a61      	ldr	r2, [pc, #388]	; (80035a4 <HAL_I2C_Mem_Read+0x240>)
 8003420:	62da      	str	r2, [r3, #44]	; 0x2c
 8003422:	88f8      	ldrh	r0, [r7, #6]
 8003424:	893a      	ldrh	r2, [r7, #8]
 8003426:	8979      	ldrh	r1, [r7, #10]
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	9301      	str	r3, [sp, #4]
 800342c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	4603      	mov	r3, r0
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 fa56 	bl	80038e4 <I2C_RequestMemoryRead>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <HAL_I2C_Mem_Read+0xde>
 800343e:	2301      	movs	r3, #1
 8003440:	e1c0      	b.n	80037c4 <HAL_I2C_Mem_Read+0x460>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003446:	2b00      	cmp	r3, #0
 8003448:	d113      	bne.n	8003472 <HAL_I2C_Mem_Read+0x10e>
 800344a:	2300      	movs	r3, #0
 800344c:	623b      	str	r3, [r7, #32]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	623b      	str	r3, [r7, #32]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	623b      	str	r3, [r7, #32]
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	e194      	b.n	800379c <HAL_I2C_Mem_Read+0x438>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003476:	2b01      	cmp	r3, #1
 8003478:	d11d      	bne.n	80034b6 <HAL_I2C_Mem_Read+0x152>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	b672      	cpsid	i
 800348c:	2300      	movs	r3, #0
 800348e:	61fb      	str	r3, [r7, #28]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	61fb      	str	r3, [r7, #28]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	61fb      	str	r3, [r7, #28]
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	b662      	cpsie	i
 80034b4:	e172      	b.n	800379c <HAL_I2C_Mem_Read+0x438>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d11d      	bne.n	80034fa <HAL_I2C_Mem_Read+0x196>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	b672      	cpsid	i
 80034d0:	2300      	movs	r3, #0
 80034d2:	61bb      	str	r3, [r7, #24]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	61bb      	str	r3, [r7, #24]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	61bb      	str	r3, [r7, #24]
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	b662      	cpsie	i
 80034f8:	e150      	b.n	800379c <HAL_I2C_Mem_Read+0x438>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	e13c      	b.n	800379c <HAL_I2C_Mem_Read+0x438>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003526:	2b03      	cmp	r3, #3
 8003528:	f200 80f5 	bhi.w	8003716 <HAL_I2C_Mem_Read+0x3b2>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003530:	2b01      	cmp	r3, #1
 8003532:	d123      	bne.n	800357c <HAL_I2C_Mem_Read+0x218>
 8003534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003536:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 fbfb 	bl	8003d34 <I2C_WaitOnRXNEFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <HAL_I2C_Mem_Read+0x1e4>
 8003544:	2301      	movs	r3, #1
 8003546:	e13d      	b.n	80037c4 <HAL_I2C_Mem_Read+0x460>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691a      	ldr	r2, [r3, #16]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	701a      	strb	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	625a      	str	r2, [r3, #36]	; 0x24
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	851a      	strh	r2, [r3, #40]	; 0x28
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	855a      	strh	r2, [r3, #42]	; 0x2a
 800357a:	e10f      	b.n	800379c <HAL_I2C_Mem_Read+0x438>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003580:	2b02      	cmp	r3, #2
 8003582:	d150      	bne.n	8003626 <HAL_I2C_Mem_Read+0x2c2>
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358a:	2200      	movs	r2, #0
 800358c:	4906      	ldr	r1, [pc, #24]	; (80035a8 <HAL_I2C_Mem_Read+0x244>)
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 fa78 	bl	8003a84 <I2C_WaitOnFlagUntilTimeout>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d008      	beq.n	80035ac <HAL_I2C_Mem_Read+0x248>
 800359a:	2301      	movs	r3, #1
 800359c:	e112      	b.n	80037c4 <HAL_I2C_Mem_Read+0x460>
 800359e:	bf00      	nop
 80035a0:	00100002 	.word	0x00100002
 80035a4:	ffff0000 	.word	0xffff0000
 80035a8:	00010004 	.word	0x00010004
 80035ac:	b672      	cpsid	i
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	625a      	str	r2, [r3, #36]	; 0x24
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	851a      	strh	r2, [r3, #40]	; 0x28
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035f0:	b662      	cpsie	i
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	701a      	strb	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	625a      	str	r2, [r3, #36]	; 0x24
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	851a      	strh	r2, [r3, #40]	; 0x28
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003624:	e0ba      	b.n	800379c <HAL_I2C_Mem_Read+0x438>
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362c:	2200      	movs	r2, #0
 800362e:	4967      	ldr	r1, [pc, #412]	; (80037cc <HAL_I2C_Mem_Read+0x468>)
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 fa27 	bl	8003a84 <I2C_WaitOnFlagUntilTimeout>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_I2C_Mem_Read+0x2dc>
 800363c:	2301      	movs	r3, #1
 800363e:	e0c1      	b.n	80037c4 <HAL_I2C_Mem_Read+0x460>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	b672      	cpsid	i
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	701a      	strb	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	1c5a      	adds	r2, r3, #1
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	625a      	str	r2, [r3, #36]	; 0x24
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	851a      	strh	r2, [r3, #40]	; 0x28
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367a:	b29b      	uxth	r3, r3
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368a:	2200      	movs	r2, #0
 800368c:	494f      	ldr	r1, [pc, #316]	; (80037cc <HAL_I2C_Mem_Read+0x468>)
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f9f8 	bl	8003a84 <I2C_WaitOnFlagUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_I2C_Mem_Read+0x33a>
 800369a:	2301      	movs	r3, #1
 800369c:	e092      	b.n	80037c4 <HAL_I2C_Mem_Read+0x460>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	701a      	strb	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	625a      	str	r2, [r3, #36]	; 0x24
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	851a      	strh	r2, [r3, #40]	; 0x28
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036e0:	b662      	cpsie	i
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	701a      	strb	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	625a      	str	r2, [r3, #36]	; 0x24
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	851a      	strh	r2, [r3, #40]	; 0x28
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370a:	b29b      	uxth	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003714:	e042      	b.n	800379c <HAL_I2C_Mem_Read+0x438>
 8003716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003718:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 fb0a 	bl	8003d34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_I2C_Mem_Read+0x3c6>
 8003726:	2301      	movs	r3, #1
 8003728:	e04c      	b.n	80037c4 <HAL_I2C_Mem_Read+0x460>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	701a      	strb	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	625a      	str	r2, [r3, #36]	; 0x24
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	851a      	strh	r2, [r3, #40]	; 0x28
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b04      	cmp	r3, #4
 8003768:	d118      	bne.n	800379c <HAL_I2C_Mem_Read+0x438>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	701a      	strb	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	625a      	str	r2, [r3, #36]	; 0x24
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	851a      	strh	r2, [r3, #40]	; 0x28
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f47f aebe 	bne.w	8003522 <HAL_I2C_Mem_Read+0x1be>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2220      	movs	r2, #32
 80037aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80037be:	2300      	movs	r3, #0
 80037c0:	e000      	b.n	80037c4 <HAL_I2C_Mem_Read+0x460>
 80037c2:	2302      	movs	r3, #2
 80037c4:	4618      	mov	r0, r3
 80037c6:	3728      	adds	r7, #40	; 0x28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	00010004 	.word	0x00010004

080037d0 <I2C_RequestMemoryWrite>:
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af02      	add	r7, sp, #8
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	4608      	mov	r0, r1
 80037da:	4611      	mov	r1, r2
 80037dc:	461a      	mov	r2, r3
 80037de:	4603      	mov	r3, r0
 80037e0:	817b      	strh	r3, [r7, #10]
 80037e2:	460b      	mov	r3, r1
 80037e4:	813b      	strh	r3, [r7, #8]
 80037e6:	4613      	mov	r3, r2
 80037e8:	80fb      	strh	r3, [r7, #6]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	2200      	movs	r2, #0
 8003802:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f93c 	bl	8003a84 <I2C_WaitOnFlagUntilTimeout>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <I2C_RequestMemoryWrite+0x46>
 8003812:	2301      	movs	r3, #1
 8003814:	e05f      	b.n	80038d6 <I2C_RequestMemoryWrite+0x106>
 8003816:	897b      	ldrh	r3, [r7, #10]
 8003818:	b2db      	uxtb	r3, r3
 800381a:	461a      	mov	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003824:	611a      	str	r2, [r3, #16]
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	6a3a      	ldr	r2, [r7, #32]
 800382a:	492d      	ldr	r1, [pc, #180]	; (80038e0 <I2C_RequestMemoryWrite+0x110>)
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f980 	bl	8003b32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <I2C_RequestMemoryWrite+0x6c>
 8003838:	2301      	movs	r3, #1
 800383a:	e04c      	b.n	80038d6 <I2C_RequestMemoryWrite+0x106>
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003854:	6a39      	ldr	r1, [r7, #32]
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 f9ea 	bl	8003c30 <I2C_WaitOnTXEFlagUntilTimeout>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00d      	beq.n	800387e <I2C_RequestMemoryWrite+0xae>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	2b04      	cmp	r3, #4
 8003868:	d107      	bne.n	800387a <I2C_RequestMemoryWrite+0xaa>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	2301      	movs	r3, #1
 800387c:	e02b      	b.n	80038d6 <I2C_RequestMemoryWrite+0x106>
 800387e:	88fb      	ldrh	r3, [r7, #6]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d105      	bne.n	8003890 <I2C_RequestMemoryWrite+0xc0>
 8003884:	893b      	ldrh	r3, [r7, #8]
 8003886:	b2da      	uxtb	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	611a      	str	r2, [r3, #16]
 800388e:	e021      	b.n	80038d4 <I2C_RequestMemoryWrite+0x104>
 8003890:	893b      	ldrh	r3, [r7, #8]
 8003892:	0a1b      	lsrs	r3, r3, #8
 8003894:	b29b      	uxth	r3, r3
 8003896:	b2da      	uxtb	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	611a      	str	r2, [r3, #16]
 800389e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a0:	6a39      	ldr	r1, [r7, #32]
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 f9c4 	bl	8003c30 <I2C_WaitOnTXEFlagUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00d      	beq.n	80038ca <I2C_RequestMemoryWrite+0xfa>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d107      	bne.n	80038c6 <I2C_RequestMemoryWrite+0xf6>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	2301      	movs	r3, #1
 80038c8:	e005      	b.n	80038d6 <I2C_RequestMemoryWrite+0x106>
 80038ca:	893b      	ldrh	r3, [r7, #8]
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	611a      	str	r2, [r3, #16]
 80038d4:	2300      	movs	r3, #0
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	00010002 	.word	0x00010002

080038e4 <I2C_RequestMemoryRead>:
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af02      	add	r7, sp, #8
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	4608      	mov	r0, r1
 80038ee:	4611      	mov	r1, r2
 80038f0:	461a      	mov	r2, r3
 80038f2:	4603      	mov	r3, r0
 80038f4:	817b      	strh	r3, [r7, #10]
 80038f6:	460b      	mov	r3, r1
 80038f8:	813b      	strh	r3, [r7, #8]
 80038fa:	4613      	mov	r3, r2
 80038fc:	80fb      	strh	r3, [r7, #6]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	2200      	movs	r2, #0
 8003926:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 f8aa 	bl	8003a84 <I2C_WaitOnFlagUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <I2C_RequestMemoryRead+0x56>
 8003936:	2301      	movs	r3, #1
 8003938:	e09e      	b.n	8003a78 <I2C_RequestMemoryRead+0x194>
 800393a:	897b      	ldrh	r3, [r7, #10]
 800393c:	b2db      	uxtb	r3, r3
 800393e:	461a      	mov	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003948:	611a      	str	r2, [r3, #16]
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	6a3a      	ldr	r2, [r7, #32]
 800394e:	494c      	ldr	r1, [pc, #304]	; (8003a80 <I2C_RequestMemoryRead+0x19c>)
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 f8ee 	bl	8003b32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <I2C_RequestMemoryRead+0x7c>
 800395c:	2301      	movs	r3, #1
 800395e:	e08b      	b.n	8003a78 <I2C_RequestMemoryRead+0x194>
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003978:	6a39      	ldr	r1, [r7, #32]
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 f958 	bl	8003c30 <I2C_WaitOnTXEFlagUntilTimeout>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00d      	beq.n	80039a2 <I2C_RequestMemoryRead+0xbe>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	2b04      	cmp	r3, #4
 800398c:	d107      	bne.n	800399e <I2C_RequestMemoryRead+0xba>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	2301      	movs	r3, #1
 80039a0:	e06a      	b.n	8003a78 <I2C_RequestMemoryRead+0x194>
 80039a2:	88fb      	ldrh	r3, [r7, #6]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d105      	bne.n	80039b4 <I2C_RequestMemoryRead+0xd0>
 80039a8:	893b      	ldrh	r3, [r7, #8]
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	611a      	str	r2, [r3, #16]
 80039b2:	e021      	b.n	80039f8 <I2C_RequestMemoryRead+0x114>
 80039b4:	893b      	ldrh	r3, [r7, #8]
 80039b6:	0a1b      	lsrs	r3, r3, #8
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	611a      	str	r2, [r3, #16]
 80039c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c4:	6a39      	ldr	r1, [r7, #32]
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f932 	bl	8003c30 <I2C_WaitOnTXEFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00d      	beq.n	80039ee <I2C_RequestMemoryRead+0x10a>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d107      	bne.n	80039ea <I2C_RequestMemoryRead+0x106>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	2301      	movs	r3, #1
 80039ec:	e044      	b.n	8003a78 <I2C_RequestMemoryRead+0x194>
 80039ee:	893b      	ldrh	r3, [r7, #8]
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	611a      	str	r2, [r3, #16]
 80039f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fa:	6a39      	ldr	r1, [r7, #32]
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 f917 	bl	8003c30 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00d      	beq.n	8003a24 <I2C_RequestMemoryRead+0x140>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d107      	bne.n	8003a20 <I2C_RequestMemoryRead+0x13c>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	2301      	movs	r3, #1
 8003a22:	e029      	b.n	8003a78 <I2C_RequestMemoryRead+0x194>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 f81f 	bl	8003a84 <I2C_WaitOnFlagUntilTimeout>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <I2C_RequestMemoryRead+0x16c>
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e013      	b.n	8003a78 <I2C_RequestMemoryRead+0x194>
 8003a50:	897b      	ldrh	r3, [r7, #10]
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	611a      	str	r2, [r3, #16]
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	6a3a      	ldr	r2, [r7, #32]
 8003a64:	4906      	ldr	r1, [pc, #24]	; (8003a80 <I2C_RequestMemoryRead+0x19c>)
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f863 	bl	8003b32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <I2C_RequestMemoryRead+0x192>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <I2C_RequestMemoryRead+0x194>
 8003a76:	2300      	movs	r3, #0
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	00010002 	.word	0x00010002

08003a84 <I2C_WaitOnFlagUntilTimeout>:
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	71fb      	strb	r3, [r7, #7]
 8003a94:	e025      	b.n	8003ae2 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a9c:	d021      	beq.n	8003ae2 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8003a9e:	f7fe ffa5 	bl	80029ec <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d302      	bcc.n	8003ab4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d116      	bne.n	8003ae2 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	631a      	str	r2, [r3, #48]	; 0x30
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	f043 0220 	orr.w	r2, r3, #32
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	641a      	str	r2, [r3, #64]	; 0x40
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e023      	b.n	8003b2a <I2C_WaitOnFlagUntilTimeout+0xa6>
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	0c1b      	lsrs	r3, r3, #16
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d10d      	bne.n	8003b08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	43da      	mvns	r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	4013      	ands	r3, r2
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	bf0c      	ite	eq
 8003afe:	2301      	moveq	r3, #1
 8003b00:	2300      	movne	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	461a      	mov	r2, r3
 8003b06:	e00c      	b.n	8003b22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	43da      	mvns	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4013      	ands	r3, r2
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	bf0c      	ite	eq
 8003b1a:	2301      	moveq	r3, #1
 8003b1c:	2300      	movne	r3, #0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	461a      	mov	r2, r3
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d0b6      	beq.n	8003a96 <I2C_WaitOnFlagUntilTimeout+0x12>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b084      	sub	sp, #16
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	607a      	str	r2, [r7, #4]
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	e051      	b.n	8003be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b50:	d123      	bne.n	8003b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b6a:	615a      	str	r2, [r3, #20]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	631a      	str	r2, [r3, #48]	; 0x30
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f043 0204 	orr.w	r2, r3, #4
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	641a      	str	r2, [r3, #64]	; 0x40
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003b96:	2301      	movs	r3, #1
 8003b98:	e046      	b.n	8003c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ba0:	d021      	beq.n	8003be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8003ba2:	f7fe ff23 	bl	80029ec <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d302      	bcc.n	8003bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d116      	bne.n	8003be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	631a      	str	r2, [r3, #48]	; 0x30
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	f043 0220 	orr.w	r2, r3, #32
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	641a      	str	r2, [r3, #64]	; 0x40
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003be2:	2301      	movs	r3, #1
 8003be4:	e020      	b.n	8003c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	0c1b      	lsrs	r3, r3, #16
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d10c      	bne.n	8003c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	43da      	mvns	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	bf14      	ite	ne
 8003c02:	2301      	movne	r3, #1
 8003c04:	2300      	moveq	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	e00b      	b.n	8003c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	43da      	mvns	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	4013      	ands	r3, r2
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bf14      	ite	ne
 8003c1c:	2301      	movne	r3, #1
 8003c1e:	2300      	moveq	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d18d      	bne.n	8003b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8003c26:	2300      	movs	r3, #0
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <I2C_WaitOnTXEFlagUntilTimeout>:
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
 8003c3c:	e02d      	b.n	8003c9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 f8ce 	bl	8003de0 <I2C_IsAcknowledgeFailed>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e02d      	b.n	8003caa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c54:	d021      	beq.n	8003c9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8003c56:	f7fe fec9 	bl	80029ec <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d302      	bcc.n	8003c6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d116      	bne.n	8003c9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	631a      	str	r2, [r3, #48]	; 0x30
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2220      	movs	r2, #32
 8003c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f043 0220 	orr.w	r2, r3, #32
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	641a      	str	r2, [r3, #64]	; 0x40
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c96:	2301      	movs	r3, #1
 8003c98:	e007      	b.n	8003caa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca4:	2b80      	cmp	r3, #128	; 0x80
 8003ca6:	d1ca      	bne.n	8003c3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <I2C_WaitOnBTFFlagUntilTimeout>:
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b084      	sub	sp, #16
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	60f8      	str	r0, [r7, #12]
 8003cba:	60b9      	str	r1, [r7, #8]
 8003cbc:	607a      	str	r2, [r7, #4]
 8003cbe:	e02d      	b.n	8003d1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f88d 	bl	8003de0 <I2C_IsAcknowledgeFailed>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e02d      	b.n	8003d2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cd6:	d021      	beq.n	8003d1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8003cd8:	f7fe fe88 	bl	80029ec <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d302      	bcc.n	8003cee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d116      	bne.n	8003d1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	631a      	str	r2, [r3, #48]	; 0x30
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	f043 0220 	orr.w	r2, r3, #32
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	641a      	str	r2, [r3, #64]	; 0x40
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e007      	b.n	8003d2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d1ca      	bne.n	8003cc0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <I2C_WaitOnRXNEFlagUntilTimeout>:
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	e042      	b.n	8003dc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	2b10      	cmp	r3, #16
 8003d4e:	d119      	bne.n	8003d84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f06f 0210 	mvn.w	r2, #16
 8003d58:	615a      	str	r2, [r3, #20]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	631a      	str	r2, [r3, #48]	; 0x30
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	641a      	str	r2, [r3, #64]	; 0x40
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d80:	2301      	movs	r3, #1
 8003d82:	e029      	b.n	8003dd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8003d84:	f7fe fe32 	bl	80029ec <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d302      	bcc.n	8003d9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d116      	bne.n	8003dc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	; 0x30
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	f043 0220 	orr.w	r2, r3, #32
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	641a      	str	r2, [r3, #64]	; 0x40
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e007      	b.n	8003dd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd2:	2b40      	cmp	r3, #64	; 0x40
 8003dd4:	d1b5      	bne.n	8003d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <I2C_IsAcknowledgeFailed>:
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df6:	d11b      	bne.n	8003e30 <I2C_IsAcknowledgeFailed+0x50>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e00:	615a      	str	r2, [r3, #20]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	631a      	str	r2, [r3, #48]	; 0x30
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	f043 0204 	orr.w	r2, r3, #4
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	641a      	str	r2, [r3, #64]	; 0x40
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e000      	b.n	8003e32 <I2C_IsAcknowledgeFailed+0x52>
 8003e30:	2300      	movs	r3, #0
 8003e32:	4618      	mov	r0, r3
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr

08003e3c <HAL_RCC_OscConfig>:
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_RCC_OscConfig+0x12>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e26c      	b.n	8004328 <HAL_RCC_OscConfig+0x4ec>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 8087 	beq.w	8003f6a <HAL_RCC_OscConfig+0x12e>
 8003e5c:	4b92      	ldr	r3, [pc, #584]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f003 030c 	and.w	r3, r3, #12
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d00c      	beq.n	8003e82 <HAL_RCC_OscConfig+0x46>
 8003e68:	4b8f      	ldr	r3, [pc, #572]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 030c 	and.w	r3, r3, #12
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d112      	bne.n	8003e9a <HAL_RCC_OscConfig+0x5e>
 8003e74:	4b8c      	ldr	r3, [pc, #560]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e80:	d10b      	bne.n	8003e9a <HAL_RCC_OscConfig+0x5e>
 8003e82:	4b89      	ldr	r3, [pc, #548]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d06c      	beq.n	8003f68 <HAL_RCC_OscConfig+0x12c>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d168      	bne.n	8003f68 <HAL_RCC_OscConfig+0x12c>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e246      	b.n	8004328 <HAL_RCC_OscConfig+0x4ec>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea2:	d106      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x76>
 8003ea4:	4b80      	ldr	r3, [pc, #512]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a7f      	ldr	r2, [pc, #508]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	e02e      	b.n	8003f10 <HAL_RCC_OscConfig+0xd4>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10c      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x98>
 8003eba:	4b7b      	ldr	r3, [pc, #492]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a7a      	ldr	r2, [pc, #488]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	4b78      	ldr	r3, [pc, #480]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a77      	ldr	r2, [pc, #476]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ecc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ed0:	6013      	str	r3, [r2, #0]
 8003ed2:	e01d      	b.n	8003f10 <HAL_RCC_OscConfig+0xd4>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003edc:	d10c      	bne.n	8003ef8 <HAL_RCC_OscConfig+0xbc>
 8003ede:	4b72      	ldr	r3, [pc, #456]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a71      	ldr	r2, [pc, #452]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	4b6f      	ldr	r3, [pc, #444]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a6e      	ldr	r2, [pc, #440]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	e00b      	b.n	8003f10 <HAL_RCC_OscConfig+0xd4>
 8003ef8:	4b6b      	ldr	r3, [pc, #428]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a6a      	ldr	r2, [pc, #424]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	4b68      	ldr	r3, [pc, #416]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a67      	ldr	r2, [pc, #412]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d013      	beq.n	8003f40 <HAL_RCC_OscConfig+0x104>
 8003f18:	f7fe fd68 	bl	80029ec <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0xf6>
 8003f20:	f7fe fd64 	bl	80029ec <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b64      	cmp	r3, #100	; 0x64
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0xf6>
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e1fa      	b.n	8004328 <HAL_RCC_OscConfig+0x4ec>
 8003f32:	4b5d      	ldr	r3, [pc, #372]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0xe4>
 8003f3e:	e014      	b.n	8003f6a <HAL_RCC_OscConfig+0x12e>
 8003f40:	f7fe fd54 	bl	80029ec <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x11e>
 8003f48:	f7fe fd50 	bl	80029ec <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b64      	cmp	r3, #100	; 0x64
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x11e>
 8003f56:	2303      	movs	r3, #3
 8003f58:	e1e6      	b.n	8004328 <HAL_RCC_OscConfig+0x4ec>
 8003f5a:	4b53      	ldr	r3, [pc, #332]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f0      	bne.n	8003f48 <HAL_RCC_OscConfig+0x10c>
 8003f66:	e000      	b.n	8003f6a <HAL_RCC_OscConfig+0x12e>
 8003f68:	bf00      	nop
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d063      	beq.n	800403e <HAL_RCC_OscConfig+0x202>
 8003f76:	4b4c      	ldr	r3, [pc, #304]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00b      	beq.n	8003f9a <HAL_RCC_OscConfig+0x15e>
 8003f82:	4b49      	ldr	r3, [pc, #292]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f003 030c 	and.w	r3, r3, #12
 8003f8a:	2b08      	cmp	r3, #8
 8003f8c:	d11c      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x18c>
 8003f8e:	4b46      	ldr	r3, [pc, #280]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d116      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x18c>
 8003f9a:	4b43      	ldr	r3, [pc, #268]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d005      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x176>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d001      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x176>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e1ba      	b.n	8004328 <HAL_RCC_OscConfig+0x4ec>
 8003fb2:	4b3d      	ldr	r3, [pc, #244]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	4939      	ldr	r1, [pc, #228]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	600b      	str	r3, [r1, #0]
 8003fc6:	e03a      	b.n	800403e <HAL_RCC_OscConfig+0x202>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d020      	beq.n	8004012 <HAL_RCC_OscConfig+0x1d6>
 8003fd0:	4b36      	ldr	r3, [pc, #216]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	f7fe fd09 	bl	80029ec <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x1b4>
 8003fde:	f7fe fd05 	bl	80029ec <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x1b4>
 8003fec:	2303      	movs	r3, #3
 8003fee:	e19b      	b.n	8004328 <HAL_RCC_OscConfig+0x4ec>
 8003ff0:	4b2d      	ldr	r3, [pc, #180]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_RCC_OscConfig+0x1a2>
 8003ffc:	4b2a      	ldr	r3, [pc, #168]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	4927      	ldr	r1, [pc, #156]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 800400c:	4313      	orrs	r3, r2
 800400e:	600b      	str	r3, [r1, #0]
 8004010:	e015      	b.n	800403e <HAL_RCC_OscConfig+0x202>
 8004012:	4b26      	ldr	r3, [pc, #152]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	f7fe fce8 	bl	80029ec <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x1f6>
 8004020:	f7fe fce4 	bl	80029ec <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x1f6>
 800402e:	2303      	movs	r3, #3
 8004030:	e17a      	b.n	8004328 <HAL_RCC_OscConfig+0x4ec>
 8004032:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x1e4>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d03a      	beq.n	80040c0 <HAL_RCC_OscConfig+0x284>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d019      	beq.n	8004086 <HAL_RCC_OscConfig+0x24a>
 8004052:	4b17      	ldr	r3, [pc, #92]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8004054:	2201      	movs	r2, #1
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	f7fe fcc8 	bl	80029ec <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x236>
 8004060:	f7fe fcc4 	bl	80029ec <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x236>
 800406e:	2303      	movs	r3, #3
 8004070:	e15a      	b.n	8004328 <HAL_RCC_OscConfig+0x4ec>
 8004072:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f0      	beq.n	8004060 <HAL_RCC_OscConfig+0x224>
 800407e:	2001      	movs	r0, #1
 8004080:	f000 fac6 	bl	8004610 <RCC_Delay>
 8004084:	e01c      	b.n	80040c0 <HAL_RCC_OscConfig+0x284>
 8004086:	4b0a      	ldr	r3, [pc, #40]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	f7fe fcae 	bl	80029ec <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]
 8004092:	e00f      	b.n	80040b4 <HAL_RCC_OscConfig+0x278>
 8004094:	f7fe fcaa 	bl	80029ec <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d908      	bls.n	80040b4 <HAL_RCC_OscConfig+0x278>
 80040a2:	2303      	movs	r3, #3
 80040a4:	e140      	b.n	8004328 <HAL_RCC_OscConfig+0x4ec>
 80040a6:	bf00      	nop
 80040a8:	40021000 	.word	0x40021000
 80040ac:	42420000 	.word	0x42420000
 80040b0:	42420480 	.word	0x42420480
 80040b4:	4b9e      	ldr	r3, [pc, #632]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1e9      	bne.n	8004094 <HAL_RCC_OscConfig+0x258>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 80a6 	beq.w	800421a <HAL_RCC_OscConfig+0x3de>
 80040ce:	2300      	movs	r3, #0
 80040d0:	75fb      	strb	r3, [r7, #23]
 80040d2:	4b97      	ldr	r3, [pc, #604]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10d      	bne.n	80040fa <HAL_RCC_OscConfig+0x2be>
 80040de:	4b94      	ldr	r3, [pc, #592]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	4a93      	ldr	r2, [pc, #588]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 80040e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e8:	61d3      	str	r3, [r2, #28]
 80040ea:	4b91      	ldr	r3, [pc, #580]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f2:	60bb      	str	r3, [r7, #8]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2301      	movs	r3, #1
 80040f8:	75fb      	strb	r3, [r7, #23]
 80040fa:	4b8e      	ldr	r3, [pc, #568]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004102:	2b00      	cmp	r3, #0
 8004104:	d118      	bne.n	8004138 <HAL_RCC_OscConfig+0x2fc>
 8004106:	4b8b      	ldr	r3, [pc, #556]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a8a      	ldr	r2, [pc, #552]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 800410c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	f7fe fc6b 	bl	80029ec <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x2f0>
 800411a:	f7fe fc67 	bl	80029ec <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b64      	cmp	r3, #100	; 0x64
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x2f0>
 8004128:	2303      	movs	r3, #3
 800412a:	e0fd      	b.n	8004328 <HAL_RCC_OscConfig+0x4ec>
 800412c:	4b81      	ldr	r3, [pc, #516]	; (8004334 <HAL_RCC_OscConfig+0x4f8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0f0      	beq.n	800411a <HAL_RCC_OscConfig+0x2de>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d106      	bne.n	800414e <HAL_RCC_OscConfig+0x312>
 8004140:	4b7b      	ldr	r3, [pc, #492]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	4a7a      	ldr	r2, [pc, #488]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 8004146:	f043 0301 	orr.w	r3, r3, #1
 800414a:	6213      	str	r3, [r2, #32]
 800414c:	e02d      	b.n	80041aa <HAL_RCC_OscConfig+0x36e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10c      	bne.n	8004170 <HAL_RCC_OscConfig+0x334>
 8004156:	4b76      	ldr	r3, [pc, #472]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	4a75      	ldr	r2, [pc, #468]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 800415c:	f023 0301 	bic.w	r3, r3, #1
 8004160:	6213      	str	r3, [r2, #32]
 8004162:	4b73      	ldr	r3, [pc, #460]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	4a72      	ldr	r2, [pc, #456]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 8004168:	f023 0304 	bic.w	r3, r3, #4
 800416c:	6213      	str	r3, [r2, #32]
 800416e:	e01c      	b.n	80041aa <HAL_RCC_OscConfig+0x36e>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	2b05      	cmp	r3, #5
 8004176:	d10c      	bne.n	8004192 <HAL_RCC_OscConfig+0x356>
 8004178:	4b6d      	ldr	r3, [pc, #436]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	4a6c      	ldr	r2, [pc, #432]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 800417e:	f043 0304 	orr.w	r3, r3, #4
 8004182:	6213      	str	r3, [r2, #32]
 8004184:	4b6a      	ldr	r3, [pc, #424]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	4a69      	ldr	r2, [pc, #420]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 800418a:	f043 0301 	orr.w	r3, r3, #1
 800418e:	6213      	str	r3, [r2, #32]
 8004190:	e00b      	b.n	80041aa <HAL_RCC_OscConfig+0x36e>
 8004192:	4b67      	ldr	r3, [pc, #412]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	4a66      	ldr	r2, [pc, #408]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 8004198:	f023 0301 	bic.w	r3, r3, #1
 800419c:	6213      	str	r3, [r2, #32]
 800419e:	4b64      	ldr	r3, [pc, #400]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	4a63      	ldr	r2, [pc, #396]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 80041a4:	f023 0304 	bic.w	r3, r3, #4
 80041a8:	6213      	str	r3, [r2, #32]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d015      	beq.n	80041de <HAL_RCC_OscConfig+0x3a2>
 80041b2:	f7fe fc1b 	bl	80029ec <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]
 80041b8:	e00a      	b.n	80041d0 <HAL_RCC_OscConfig+0x394>
 80041ba:	f7fe fc17 	bl	80029ec <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x394>
 80041cc:	2303      	movs	r3, #3
 80041ce:	e0ab      	b.n	8004328 <HAL_RCC_OscConfig+0x4ec>
 80041d0:	4b57      	ldr	r3, [pc, #348]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0ee      	beq.n	80041ba <HAL_RCC_OscConfig+0x37e>
 80041dc:	e014      	b.n	8004208 <HAL_RCC_OscConfig+0x3cc>
 80041de:	f7fe fc05 	bl	80029ec <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]
 80041e4:	e00a      	b.n	80041fc <HAL_RCC_OscConfig+0x3c0>
 80041e6:	f7fe fc01 	bl	80029ec <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x3c0>
 80041f8:	2303      	movs	r3, #3
 80041fa:	e095      	b.n	8004328 <HAL_RCC_OscConfig+0x4ec>
 80041fc:	4b4c      	ldr	r3, [pc, #304]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1ee      	bne.n	80041e6 <HAL_RCC_OscConfig+0x3aa>
 8004208:	7dfb      	ldrb	r3, [r7, #23]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d105      	bne.n	800421a <HAL_RCC_OscConfig+0x3de>
 800420e:	4b48      	ldr	r3, [pc, #288]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	4a47      	ldr	r2, [pc, #284]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 8004214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004218:	61d3      	str	r3, [r2, #28]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 8081 	beq.w	8004326 <HAL_RCC_OscConfig+0x4ea>
 8004224:	4b42      	ldr	r3, [pc, #264]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f003 030c 	and.w	r3, r3, #12
 800422c:	2b08      	cmp	r3, #8
 800422e:	d061      	beq.n	80042f4 <HAL_RCC_OscConfig+0x4b8>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	2b02      	cmp	r3, #2
 8004236:	d146      	bne.n	80042c6 <HAL_RCC_OscConfig+0x48a>
 8004238:	4b3f      	ldr	r3, [pc, #252]	; (8004338 <HAL_RCC_OscConfig+0x4fc>)
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	f7fe fbd5 	bl	80029ec <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x41c>
 8004246:	f7fe fbd1 	bl	80029ec <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x41c>
 8004254:	2303      	movs	r3, #3
 8004256:	e067      	b.n	8004328 <HAL_RCC_OscConfig+0x4ec>
 8004258:	4b35      	ldr	r3, [pc, #212]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1f0      	bne.n	8004246 <HAL_RCC_OscConfig+0x40a>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426c:	d108      	bne.n	8004280 <HAL_RCC_OscConfig+0x444>
 800426e:	4b30      	ldr	r3, [pc, #192]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	492d      	ldr	r1, [pc, #180]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 800427c:	4313      	orrs	r3, r2
 800427e:	604b      	str	r3, [r1, #4]
 8004280:	4b2b      	ldr	r3, [pc, #172]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a19      	ldr	r1, [r3, #32]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	430b      	orrs	r3, r1
 8004292:	4927      	ldr	r1, [pc, #156]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 8004294:	4313      	orrs	r3, r2
 8004296:	604b      	str	r3, [r1, #4]
 8004298:	4b27      	ldr	r3, [pc, #156]	; (8004338 <HAL_RCC_OscConfig+0x4fc>)
 800429a:	2201      	movs	r2, #1
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	f7fe fba5 	bl	80029ec <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x47c>
 80042a6:	f7fe fba1 	bl	80029ec <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x47c>
 80042b4:	2303      	movs	r3, #3
 80042b6:	e037      	b.n	8004328 <HAL_RCC_OscConfig+0x4ec>
 80042b8:	4b1d      	ldr	r3, [pc, #116]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0f0      	beq.n	80042a6 <HAL_RCC_OscConfig+0x46a>
 80042c4:	e02f      	b.n	8004326 <HAL_RCC_OscConfig+0x4ea>
 80042c6:	4b1c      	ldr	r3, [pc, #112]	; (8004338 <HAL_RCC_OscConfig+0x4fc>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	f7fe fb8e 	bl	80029ec <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x4aa>
 80042d4:	f7fe fb8a 	bl	80029ec <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x4aa>
 80042e2:	2303      	movs	r3, #3
 80042e4:	e020      	b.n	8004328 <HAL_RCC_OscConfig+0x4ec>
 80042e6:	4b12      	ldr	r3, [pc, #72]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1f0      	bne.n	80042d4 <HAL_RCC_OscConfig+0x498>
 80042f2:	e018      	b.n	8004326 <HAL_RCC_OscConfig+0x4ea>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d101      	bne.n	8004300 <HAL_RCC_OscConfig+0x4c4>
 80042fc:	2301      	movs	r3, #1
 80042fe:	e013      	b.n	8004328 <HAL_RCC_OscConfig+0x4ec>
 8004300:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <HAL_RCC_OscConfig+0x4f4>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	429a      	cmp	r2, r3
 8004312:	d106      	bne.n	8004322 <HAL_RCC_OscConfig+0x4e6>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	429a      	cmp	r2, r3
 8004320:	d001      	beq.n	8004326 <HAL_RCC_OscConfig+0x4ea>
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <HAL_RCC_OscConfig+0x4ec>
 8004326:	2300      	movs	r3, #0
 8004328:	4618      	mov	r0, r3
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40021000 	.word	0x40021000
 8004334:	40007000 	.word	0x40007000
 8004338:	42420060 	.word	0x42420060

0800433c <HAL_RCC_ClockConfig>:
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_RCC_ClockConfig+0x14>
 800434c:	2301      	movs	r3, #1
 800434e:	e0d0      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1b6>
 8004350:	4b6a      	ldr	r3, [pc, #424]	; (80044fc <HAL_RCC_ClockConfig+0x1c0>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d910      	bls.n	8004380 <HAL_RCC_ClockConfig+0x44>
 800435e:	4b67      	ldr	r3, [pc, #412]	; (80044fc <HAL_RCC_ClockConfig+0x1c0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f023 0207 	bic.w	r2, r3, #7
 8004366:	4965      	ldr	r1, [pc, #404]	; (80044fc <HAL_RCC_ClockConfig+0x1c0>)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	4313      	orrs	r3, r2
 800436c:	600b      	str	r3, [r1, #0]
 800436e:	4b63      	ldr	r3, [pc, #396]	; (80044fc <HAL_RCC_ClockConfig+0x1c0>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d001      	beq.n	8004380 <HAL_RCC_ClockConfig+0x44>
 800437c:	2301      	movs	r3, #1
 800437e:	e0b8      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1b6>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d020      	beq.n	80043ce <HAL_RCC_ClockConfig+0x92>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x68>
 8004398:	4b59      	ldr	r3, [pc, #356]	; (8004500 <HAL_RCC_ClockConfig+0x1c4>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	4a58      	ldr	r2, [pc, #352]	; (8004500 <HAL_RCC_ClockConfig+0x1c4>)
 800439e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80043a2:	6053      	str	r3, [r2, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d005      	beq.n	80043bc <HAL_RCC_ClockConfig+0x80>
 80043b0:	4b53      	ldr	r3, [pc, #332]	; (8004500 <HAL_RCC_ClockConfig+0x1c4>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	4a52      	ldr	r2, [pc, #328]	; (8004500 <HAL_RCC_ClockConfig+0x1c4>)
 80043b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80043ba:	6053      	str	r3, [r2, #4]
 80043bc:	4b50      	ldr	r3, [pc, #320]	; (8004500 <HAL_RCC_ClockConfig+0x1c4>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	494d      	ldr	r1, [pc, #308]	; (8004500 <HAL_RCC_ClockConfig+0x1c4>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	604b      	str	r3, [r1, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d040      	beq.n	800445c <HAL_RCC_ClockConfig+0x120>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d107      	bne.n	80043f2 <HAL_RCC_ClockConfig+0xb6>
 80043e2:	4b47      	ldr	r3, [pc, #284]	; (8004500 <HAL_RCC_ClockConfig+0x1c4>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d115      	bne.n	800441a <HAL_RCC_ClockConfig+0xde>
 80043ee:	2301      	movs	r3, #1
 80043f0:	e07f      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1b6>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d107      	bne.n	800440a <HAL_RCC_ClockConfig+0xce>
 80043fa:	4b41      	ldr	r3, [pc, #260]	; (8004500 <HAL_RCC_ClockConfig+0x1c4>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d109      	bne.n	800441a <HAL_RCC_ClockConfig+0xde>
 8004406:	2301      	movs	r3, #1
 8004408:	e073      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1b6>
 800440a:	4b3d      	ldr	r3, [pc, #244]	; (8004500 <HAL_RCC_ClockConfig+0x1c4>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_RCC_ClockConfig+0xde>
 8004416:	2301      	movs	r3, #1
 8004418:	e06b      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1b6>
 800441a:	4b39      	ldr	r3, [pc, #228]	; (8004500 <HAL_RCC_ClockConfig+0x1c4>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f023 0203 	bic.w	r2, r3, #3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	4936      	ldr	r1, [pc, #216]	; (8004500 <HAL_RCC_ClockConfig+0x1c4>)
 8004428:	4313      	orrs	r3, r2
 800442a:	604b      	str	r3, [r1, #4]
 800442c:	f7fe fade 	bl	80029ec <HAL_GetTick>
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	e00a      	b.n	800444a <HAL_RCC_ClockConfig+0x10e>
 8004434:	f7fe fada 	bl	80029ec <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004442:	4293      	cmp	r3, r2
 8004444:	d901      	bls.n	800444a <HAL_RCC_ClockConfig+0x10e>
 8004446:	2303      	movs	r3, #3
 8004448:	e053      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1b6>
 800444a:	4b2d      	ldr	r3, [pc, #180]	; (8004500 <HAL_RCC_ClockConfig+0x1c4>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f003 020c 	and.w	r2, r3, #12
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	429a      	cmp	r2, r3
 800445a:	d1eb      	bne.n	8004434 <HAL_RCC_ClockConfig+0xf8>
 800445c:	4b27      	ldr	r3, [pc, #156]	; (80044fc <HAL_RCC_ClockConfig+0x1c0>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d210      	bcs.n	800448c <HAL_RCC_ClockConfig+0x150>
 800446a:	4b24      	ldr	r3, [pc, #144]	; (80044fc <HAL_RCC_ClockConfig+0x1c0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f023 0207 	bic.w	r2, r3, #7
 8004472:	4922      	ldr	r1, [pc, #136]	; (80044fc <HAL_RCC_ClockConfig+0x1c0>)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	4313      	orrs	r3, r2
 8004478:	600b      	str	r3, [r1, #0]
 800447a:	4b20      	ldr	r3, [pc, #128]	; (80044fc <HAL_RCC_ClockConfig+0x1c0>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d001      	beq.n	800448c <HAL_RCC_ClockConfig+0x150>
 8004488:	2301      	movs	r3, #1
 800448a:	e032      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1b6>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d008      	beq.n	80044aa <HAL_RCC_ClockConfig+0x16e>
 8004498:	4b19      	ldr	r3, [pc, #100]	; (8004500 <HAL_RCC_ClockConfig+0x1c4>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	4916      	ldr	r1, [pc, #88]	; (8004500 <HAL_RCC_ClockConfig+0x1c4>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	604b      	str	r3, [r1, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <HAL_RCC_ClockConfig+0x18e>
 80044b6:	4b12      	ldr	r3, [pc, #72]	; (8004500 <HAL_RCC_ClockConfig+0x1c4>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	490e      	ldr	r1, [pc, #56]	; (8004500 <HAL_RCC_ClockConfig+0x1c4>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	604b      	str	r3, [r1, #4]
 80044ca:	f000 f821 	bl	8004510 <HAL_RCC_GetSysClockFreq>
 80044ce:	4601      	mov	r1, r0
 80044d0:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <HAL_RCC_ClockConfig+0x1c4>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	091b      	lsrs	r3, r3, #4
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	4a0a      	ldr	r2, [pc, #40]	; (8004504 <HAL_RCC_ClockConfig+0x1c8>)
 80044dc:	5cd3      	ldrb	r3, [r2, r3]
 80044de:	fa21 f303 	lsr.w	r3, r1, r3
 80044e2:	4a09      	ldr	r2, [pc, #36]	; (8004508 <HAL_RCC_ClockConfig+0x1cc>)
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	4b09      	ldr	r3, [pc, #36]	; (800450c <HAL_RCC_ClockConfig+0x1d0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fe fa3c 	bl	8002968 <HAL_InitTick>
 80044f0:	2300      	movs	r3, #0
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40022000 	.word	0x40022000
 8004500:	40021000 	.word	0x40021000
 8004504:	0800e3d0 	.word	0x0800e3d0
 8004508:	20000298 	.word	0x20000298
 800450c:	200002a4 	.word	0x200002a4

08004510 <HAL_RCC_GetSysClockFreq>:
 8004510:	b490      	push	{r4, r7}
 8004512:	b08a      	sub	sp, #40	; 0x28
 8004514:	af00      	add	r7, sp, #0
 8004516:	4b2a      	ldr	r3, [pc, #168]	; (80045c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004518:	1d3c      	adds	r4, r7, #4
 800451a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800451c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004520:	4b28      	ldr	r3, [pc, #160]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	803b      	strh	r3, [r7, #0]
 8004526:	2300      	movs	r3, #0
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	2300      	movs	r3, #0
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	2300      	movs	r3, #0
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]
 8004536:	2300      	movs	r3, #0
 8004538:	623b      	str	r3, [r7, #32]
 800453a:	4b23      	ldr	r3, [pc, #140]	; (80045c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	61fb      	str	r3, [r7, #28]
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	f003 030c 	and.w	r3, r3, #12
 8004546:	2b04      	cmp	r3, #4
 8004548:	d002      	beq.n	8004550 <HAL_RCC_GetSysClockFreq+0x40>
 800454a:	2b08      	cmp	r3, #8
 800454c:	d003      	beq.n	8004556 <HAL_RCC_GetSysClockFreq+0x46>
 800454e:	e02d      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0x9c>
 8004550:	4b1e      	ldr	r3, [pc, #120]	; (80045cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004552:	623b      	str	r3, [r7, #32]
 8004554:	e02d      	b.n	80045b2 <HAL_RCC_GetSysClockFreq+0xa2>
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	0c9b      	lsrs	r3, r3, #18
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004562:	4413      	add	r3, r2
 8004564:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d013      	beq.n	800459c <HAL_RCC_GetSysClockFreq+0x8c>
 8004574:	4b14      	ldr	r3, [pc, #80]	; (80045c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	0c5b      	lsrs	r3, r3, #17
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004582:	4413      	add	r3, r2
 8004584:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	4a0f      	ldr	r2, [pc, #60]	; (80045cc <HAL_RCC_GetSysClockFreq+0xbc>)
 800458e:	fb02 f203 	mul.w	r2, r2, r3
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	fbb2 f3f3 	udiv	r3, r2, r3
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
 800459a:	e004      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0x96>
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	4a0c      	ldr	r2, [pc, #48]	; (80045d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045a0:	fb02 f303 	mul.w	r3, r2, r3
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	623b      	str	r3, [r7, #32]
 80045aa:	e002      	b.n	80045b2 <HAL_RCC_GetSysClockFreq+0xa2>
 80045ac:	4b07      	ldr	r3, [pc, #28]	; (80045cc <HAL_RCC_GetSysClockFreq+0xbc>)
 80045ae:	623b      	str	r3, [r7, #32]
 80045b0:	bf00      	nop
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	4618      	mov	r0, r3
 80045b6:	3728      	adds	r7, #40	; 0x28
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc90      	pop	{r4, r7}
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	080046d4 	.word	0x080046d4
 80045c4:	080046e4 	.word	0x080046e4
 80045c8:	40021000 	.word	0x40021000
 80045cc:	007a1200 	.word	0x007a1200
 80045d0:	003d0900 	.word	0x003d0900

080045d4 <HAL_RCC_GetHCLKFreq>:
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	4b02      	ldr	r3, [pc, #8]	; (80045e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4618      	mov	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr
 80045e4:	20000298 	.word	0x20000298

080045e8 <HAL_RCC_GetPCLK1Freq>:
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	f7ff fff2 	bl	80045d4 <HAL_RCC_GetHCLKFreq>
 80045f0:	4601      	mov	r1, r0
 80045f2:	4b05      	ldr	r3, [pc, #20]	; (8004608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	0a1b      	lsrs	r3, r3, #8
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	4a03      	ldr	r2, [pc, #12]	; (800460c <HAL_RCC_GetPCLK1Freq+0x24>)
 80045fe:	5cd3      	ldrb	r3, [r2, r3]
 8004600:	fa21 f303 	lsr.w	r3, r1, r3
 8004604:	4618      	mov	r0, r3
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40021000 	.word	0x40021000
 800460c:	0800e3e0 	.word	0x0800e3e0

08004610 <RCC_Delay>:
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <RCC_Delay+0x34>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a0a      	ldr	r2, [pc, #40]	; (8004648 <RCC_Delay+0x38>)
 800461e:	fba2 2303 	umull	r2, r3, r2, r3
 8004622:	0a5b      	lsrs	r3, r3, #9
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	fb02 f303 	mul.w	r3, r2, r3
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	bf00      	nop
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	1e5a      	subs	r2, r3, #1
 8004632:	60fa      	str	r2, [r7, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1f9      	bne.n	800462c <RCC_Delay+0x1c>
 8004638:	bf00      	nop
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	bc80      	pop	{r7}
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	20000298 	.word	0x20000298
 8004648:	10624dd3 	.word	0x10624dd3

0800464c <__libc_init_array>:
 800464c:	b570      	push	{r4, r5, r6, lr}
 800464e:	2500      	movs	r5, #0
 8004650:	4e0c      	ldr	r6, [pc, #48]	; (8004684 <__libc_init_array+0x38>)
 8004652:	4c0d      	ldr	r4, [pc, #52]	; (8004688 <__libc_init_array+0x3c>)
 8004654:	1ba4      	subs	r4, r4, r6
 8004656:	10a4      	asrs	r4, r4, #2
 8004658:	42a5      	cmp	r5, r4
 800465a:	d109      	bne.n	8004670 <__libc_init_array+0x24>
 800465c:	f000 f82e 	bl	80046bc <_init>
 8004660:	2500      	movs	r5, #0
 8004662:	4e0a      	ldr	r6, [pc, #40]	; (800468c <__libc_init_array+0x40>)
 8004664:	4c0a      	ldr	r4, [pc, #40]	; (8004690 <__libc_init_array+0x44>)
 8004666:	1ba4      	subs	r4, r4, r6
 8004668:	10a4      	asrs	r4, r4, #2
 800466a:	42a5      	cmp	r5, r4
 800466c:	d105      	bne.n	800467a <__libc_init_array+0x2e>
 800466e:	bd70      	pop	{r4, r5, r6, pc}
 8004670:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004674:	4798      	blx	r3
 8004676:	3501      	adds	r5, #1
 8004678:	e7ee      	b.n	8004658 <__libc_init_array+0xc>
 800467a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800467e:	4798      	blx	r3
 8004680:	3501      	adds	r5, #1
 8004682:	e7f2      	b.n	800466a <__libc_init_array+0x1e>
 8004684:	0800ec48 	.word	0x0800ec48
 8004688:	0800ec48 	.word	0x0800ec48
 800468c:	0800ec48 	.word	0x0800ec48
 8004690:	0800ec50 	.word	0x0800ec50

08004694 <memcpy>:
 8004694:	b510      	push	{r4, lr}
 8004696:	1e43      	subs	r3, r0, #1
 8004698:	440a      	add	r2, r1
 800469a:	4291      	cmp	r1, r2
 800469c:	d100      	bne.n	80046a0 <memcpy+0xc>
 800469e:	bd10      	pop	{r4, pc}
 80046a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046a8:	e7f7      	b.n	800469a <memcpy+0x6>

080046aa <memset>:
 80046aa:	4603      	mov	r3, r0
 80046ac:	4402      	add	r2, r0
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d100      	bne.n	80046b4 <memset+0xa>
 80046b2:	4770      	bx	lr
 80046b4:	f803 1b01 	strb.w	r1, [r3], #1
 80046b8:	e7f9      	b.n	80046ae <memset+0x4>
	...

080046bc <_init>:
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046be:	bf00      	nop
 80046c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c2:	bc08      	pop	{r3}
 80046c4:	469e      	mov	lr, r3
 80046c6:	4770      	bx	lr

080046c8 <_fini>:
 80046c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ca:	bf00      	nop
 80046cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ce:	bc08      	pop	{r3}
 80046d0:	469e      	mov	lr, r3
 80046d2:	4770      	bx	lr
