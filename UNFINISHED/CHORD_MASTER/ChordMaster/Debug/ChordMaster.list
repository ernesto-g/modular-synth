
ChordMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000448c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a5e8  08004598  08004598  00014598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb80  0800eb80  000202ac  2**0
                  CONTENTS
  4 .ARM          00000000  0800eb80  0800eb80  000202ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800eb80  0800eb80  000202ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800eb80  0800eb80  0001eb80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb88  0800eb88  0001eb88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ac  20000000  0800eb8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004548  200002ac  0800ee38  000202ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200047f4  0800ee38  000247f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002637d  00000000  00000000  000202d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004c24  00000000  00000000  00046652  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000103e8  00000000  00000000  0004b276  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000be0  00000000  00000000  0005b660  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000038c0  00000000  00000000  0005c240  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001878f  00000000  00000000  0005fb00  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000ea02  00000000  00000000  0007828f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00079044  00000000  00000000  00086c91  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000ffcd5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ae4  00000000  00000000  000ffd50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002ac 	.word	0x200002ac
 8000128:	00000000 	.word	0x00000000
 800012c:	08004580 	.word	0x08004580

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002b0 	.word	0x200002b0
 8000148:	08004580 	.word	0x08004580

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <_ZN6braids16AnalogOscillator21ComputePhaseIncrementEs>:
uint32_t AnalogOscillator::ComputePhaseIncrement(int16_t midi_pitch) {
  if (midi_pitch >= kHighestNote) {
    midi_pitch = kHighestNote - 1;
  }
  
  int32_t ref_pitch = midi_pitch;
 8000160:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000164:	4299      	cmp	r1, r3
 8000166:	bfa8      	it	ge
 8000168:	4619      	movge	r1, r3
  ref_pitch -= kPitchTableStart;
  
  size_t num_shifts = 0;
 800016a:	2000      	movs	r0, #0
uint32_t AnalogOscillator::ComputePhaseIncrement(int16_t midi_pitch) {
 800016c:	b510      	push	{r4, lr}
  ref_pitch -= kPitchTableStart;
 800016e:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
  while (ref_pitch < 0) {
 8000172:	f511 61c0 	adds.w	r1, r1, #1536	; 0x600
    ref_pitch += kOctave;
    ++num_shifts;
 8000176:	f100 0001 	add.w	r0, r0, #1
  while (ref_pitch < 0) {
 800017a:	d4fa      	bmi.n	8000172 <_ZN6braids16AnalogOscillator21ComputePhaseIncrementEs+0x12>
  }
  
  uint32_t a = lut_oscillator_increments[ref_pitch >> 4];
 800017c:	4c07      	ldr	r4, [pc, #28]	; (800019c <_ZN6braids16AnalogOscillator21ComputePhaseIncrementEs+0x3c>)
 800017e:	110a      	asrs	r2, r1, #4
 8000180:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
  uint32_t b = lut_oscillator_increments[(ref_pitch >> 4) + 1];
 8000184:	3201      	adds	r2, #1
  uint32_t phase_increment = a + \
      (static_cast<int32_t>(b - a) * (ref_pitch & 0xf) >> 4);
 8000186:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800018a:	f001 010f 	and.w	r1, r1, #15
 800018e:	1ad2      	subs	r2, r2, r3
 8000190:	4351      	muls	r1, r2
  uint32_t phase_increment = a + \
 8000192:	eb03 1121 	add.w	r1, r3, r1, asr #4
  phase_increment >>= num_shifts;
  return phase_increment;
}
 8000196:	fa21 f000 	lsr.w	r0, r1, r0
 800019a:	bd10      	pop	{r4, pc}
 800019c:	08005050 	.word	0x08005050

080001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>:

void AnalogOscillator::Render(
    const uint8_t* sync_in,
    int16_t* buffer,
    uint8_t* sync_out,
    size_t size) {
 80001a0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001a4:	4604      	mov	r4, r0
 80001a6:	469a      	mov	sl, r3
  RenderFn fn = fn_table_[shape_];
 80001a8:	7f00      	ldrb	r0, [r0, #28]
 80001aa:	4b20      	ldr	r3, [pc, #128]	; (800022c <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x8c>)
    size_t size) {
 80001ac:	4691      	mov	r9, r2
  RenderFn fn = fn_table_[shape_];
 80001ae:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]
 80001b2:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
  
  if (shape_ != previous_shape_) {
 80001b6:	7f63      	ldrb	r3, [r4, #29]
    size_t size) {
 80001b8:	4688      	mov	r8, r1
  if (shape_ != previous_shape_) {
 80001ba:	4283      	cmp	r3, r0
    size_t size) {
 80001bc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  RenderFn fn = fn_table_[shape_];
 80001c0:	6857      	ldr	r7, [r2, #4]
  if (shape_ != previous_shape_) {
 80001c2:	d00f      	beq.n	80001e4 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x44>
  AnalogOscillator() { }
  ~AnalogOscillator() { }
  
  inline void Init() {
    phase_ = 0;
    phase_increment_ = 1;
 80001c4:	2100      	movs	r1, #0
 80001c6:	2301      	movs	r3, #1
 80001c8:	e9c4 1300 	strd	r1, r3, [r4]
    high_ = false;
    parameter_ = previous_parameter_ = 0;
    aux_parameter_ = 0;
    discontinuity_depth_ = -16383;
 80001cc:	f24c 0301 	movw	r3, #49153	; 0xc001
 80001d0:	82a3      	strh	r3, [r4, #20]
    pitch_ = 60 << 7;
 80001d2:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
    high_ = false;
 80001d6:	7321      	strb	r1, [r4, #12]
    parameter_ = previous_parameter_ = 0;
 80001d8:	8221      	strh	r1, [r4, #16]
 80001da:	81e1      	strh	r1, [r4, #14]
    aux_parameter_ = 0;
 80001dc:	8261      	strh	r1, [r4, #18]
    pitch_ = 60 << 7;
 80001de:	82e3      	strh	r3, [r4, #22]
    next_sample_ = 0;
 80001e0:	61a1      	str	r1, [r4, #24]
    Init();
    previous_shape_ = shape_;
 80001e2:	7760      	strb	r0, [r4, #29]
  }
  
  phase_increment_ = ComputePhaseIncrement(pitch_);
 80001e4:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 80001e8:	4620      	mov	r0, r4
 80001ea:	4631      	mov	r1, r6
 80001ec:	f7ff ffb8 	bl	8000160 <_ZN6braids16AnalogOscillator21ComputePhaseIncrementEs>
  
  if (pitch_ > kHighestNote) {
 80001f0:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
  phase_increment_ = ComputePhaseIncrement(pitch_);
 80001f4:	6060      	str	r0, [r4, #4]
  if (pitch_ > kHighestNote) {
 80001f6:	dd14      	ble.n	8000222 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x82>
    pitch_ = kHighestNote;
 80001f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  } else if (pitch_ < 0) {
    pitch_ = 0;
 80001fc:	82e3      	strh	r3, [r4, #22]
  }
  
  (this->*fn)(sync_in, buffer, sync_out, size);
 80001fe:	107b      	asrs	r3, r7, #1
 8000200:	07fa      	lsls	r2, r7, #31
 8000202:	eb04 0003 	add.w	r0, r4, r3
 8000206:	bf48      	it	mi
 8000208:	58e3      	ldrmi	r3, [r4, r3]
 800020a:	464a      	mov	r2, r9
 800020c:	bf48      	it	mi
 800020e:	595d      	ldrmi	r5, [r3, r5]
 8000210:	4641      	mov	r1, r8
 8000212:	4653      	mov	r3, sl
 8000214:	46ac      	mov	ip, r5
 8000216:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
}
 800021a:	b001      	add	sp, #4
 800021c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  (this->*fn)(sync_in, buffer, sync_out, size);
 8000220:	4760      	bx	ip
  } else if (pitch_ < 0) {
 8000222:	2e00      	cmp	r6, #0
 8000224:	daeb      	bge.n	80001fe <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x5e>
    pitch_ = 0;
 8000226:	2300      	movs	r3, #0
 8000228:	e7e8      	b.n	80001fc <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj+0x5c>
 800022a:	bf00      	nop
 800022c:	200002c8 	.word	0x200002c8

08000230 <_ZN6braids3Svf4InitEv>:
  ~Svf() { }
  
  void Init() {
    lp_ = 0;
    bp_ = 0;
    frequency_ = 33 << 7;
 8000230:	f44f 5284 	mov.w	r2, #4224	; 0x1080
 8000234:	8042      	strh	r2, [r0, #2]
    resonance_ = 16384;
 8000236:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    lp_ = 0;
 800023a:	2300      	movs	r3, #0
    resonance_ = 16384;
 800023c:	8082      	strh	r2, [r0, #4]
    dirty_ = true;
 800023e:	2201      	movs	r2, #1
    bp_ = 0;
 8000240:	e9c0 3305 	strd	r3, r3, [r0, #20]
    dirty_ = true;
 8000244:	7002      	strb	r2, [r0, #0]
    punch_ = 0;
 8000246:	6083      	str	r3, [r0, #8]
    mode_ = SVF_MODE_BP;
 8000248:	7702      	strb	r2, [r0, #28]
  }
 800024a:	4770      	bx	lr

0800024c <_ZN6stmlib6Random7GetWordEv>:
  static inline void Seed(uint32_t seed) {
    rng_state_ = seed;
  }

  static inline uint32_t GetWord() {
    rng_state_ = rng_state_ * 1664525L + 1013904223L;
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <_ZN6stmlib6Random7GetWordEv+0x10>)
 800024e:	4904      	ldr	r1, [pc, #16]	; (8000260 <_ZN6stmlib6Random7GetWordEv+0x14>)
 8000250:	6818      	ldr	r0, [r3, #0]
 8000252:	4a04      	ldr	r2, [pc, #16]	; (8000264 <_ZN6stmlib6Random7GetWordEv+0x18>)
 8000254:	fb01 2000 	mla	r0, r1, r0, r2
 8000258:	6018      	str	r0, [r3, #0]
    return state();
  }
 800025a:	4770      	bx	lr
 800025c:	200002a0 	.word	0x200002a0
 8000260:	0019660d 	.word	0x0019660d
 8000264:	3c6ef35f 	.word	0x3c6ef35f

08000268 <_ZN6stmlib6Random9GetSampleEv>:
  
  static inline int16_t GetSample() {
 8000268:	b508      	push	{r3, lr}
    return static_cast<int16_t>(GetWord() >> 16);
 800026a:	f7ff ffef 	bl	800024c <_ZN6stmlib6Random7GetWordEv>
  }
 800026e:	1400      	asrs	r0, r0, #16
 8000270:	bd08      	pop	{r3, pc}
	...

08000274 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj>:
}

void DigitalOscillator::RenderQuestionMark(
    const uint8_t* sync,
    int16_t* buffer,
    size_t size) {
 8000274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000278:	4690      	mov	r8, r2
  ClockedNoiseState* state = &state_.clk;
  
  if (strike_) {
 800027a:	7f02      	ldrb	r2, [r0, #28]
    size_t size) {
 800027c:	4604      	mov	r4, r0
 800027e:	4699      	mov	r9, r3
  if (strike_) {
 8000280:	b15a      	cbz	r2, 800029a <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x26>
    state->rng_state = 0;
    state->cycle_phase = 0;
    state->sample = 10;
 8000282:	210a      	movs	r1, #10
 8000284:	8601      	strh	r1, [r0, #48]	; 0x30
    state->cycle_phase_increment = -1;
 8000286:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    state->rng_state = 0;
 800028a:	2200      	movs	r2, #0
    state->cycle_phase_increment = -1;
 800028c:	6241      	str	r1, [r0, #36]	; 0x24
    state->seed = 32767;
 800028e:	f647 71ff 	movw	r1, #32767	; 0x7fff
    state->rng_state = 0;
 8000292:	6282      	str	r2, [r0, #40]	; 0x28
    state->cycle_phase = 0;
 8000294:	6202      	str	r2, [r0, #32]
    state->seed = 32767;
 8000296:	62c1      	str	r1, [r0, #44]	; 0x2c
    strike_ = false;
 8000298:	7702      	strb	r2, [r0, #28]
  }
  
  uint32_t phase = phase_;
  uint32_t increment = phase_increment_;
  uint32_t dit_duration = 3600 + ((32767 - parameter_[0]) >> 2);
 800029a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
  int32_t noise_threshold = 1024 + (parameter_[1] >> 3);
 800029e:	f9b4 700e 	ldrsh.w	r7, [r4, #14]
  uint32_t dit_duration = 3600 + ((32767 - parameter_[0]) >> 2);
 80002a2:	f5c6 46ff 	rsb	r6, r6, #32640	; 0x7f80
 80002a6:	367f      	adds	r6, #127	; 0x7f
 80002a8:	10b6      	asrs	r6, r6, #2
  int32_t noise_threshold = 1024 + (parameter_[1] >> 3);
 80002aa:	10ff      	asrs	r7, r7, #3
 80002ac:	f8df a138 	ldr.w	sl, [pc, #312]	; 80003e8 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x174>
  uint32_t increment = phase_increment_;
 80002b0:	e9d4 b300 	ldrd	fp, r3, [r4]
  uint32_t dit_duration = 3600 + ((32767 - parameter_[0]) >> 2);
 80002b4:	f506 6661 	add.w	r6, r6, #3600	; 0xe10
  uint32_t increment = phase_increment_;
 80002b8:	9300      	str	r3, [sp, #0]
  int32_t noise_threshold = 1024 + (parameter_[1] >> 3);
 80002ba:	f507 6780 	add.w	r7, r7, #1024	; 0x400
  while (size--) {
 80002be:	f119 39ff 	adds.w	r9, r9, #4294967295	; 0xffffffff
 80002c2:	f0c0 8085 	bcc.w	80003d0 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x15c>
    phase += increment;
 80002c6:	9b00      	ldr	r3, [sp, #0]
    int32_t sample;
    if (state->rng_state) {
 80002c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    phase += increment;
 80002ca:	449b      	add	fp, r3
    if (state->rng_state) {
 80002cc:	2800      	cmp	r0, #0
 80002ce:	d07b      	beq.n	80003c8 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x154>
  return (a * (65535 - balance) + b * balance) >> 16;
}

inline int16_t Interpolate824(const int16_t* table, uint32_t phase) {
  int32_t a = table[phase >> 24];
  int32_t b = table[(phase >> 24) + 1];
 80002d0:	4b42      	ldr	r3, [pc, #264]	; (80003dc <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x168>)
  int32_t a = table[phase >> 24];
 80002d2:	ea4f 621b 	mov.w	r2, fp, lsr #24
 80002d6:	f93a 5012 	ldrsh.w	r5, [sl, r2, lsl #1]
  int32_t b = table[(phase >> 24) + 1];
 80002da:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
  return a + ((b - a) * static_cast<int32_t>((phase >> 8) & 0xffff) >> 16);
 80002de:	eba2 0c05 	sub.w	ip, r2, r5
 80002e2:	f3cb 220f 	ubfx	r2, fp, #8, #16
 80002e6:	fb02 f20c 	mul.w	r2, r2, ip
 80002ea:	eb05 4522 	add.w	r5, r5, r2, asr #16
      sample = (Interpolate824(wav_sine, phase) * 3) >> 2;
 80002ee:	b22d      	sxth	r5, r5
 80002f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80002f4:	10ad      	asrs	r5, r5, #2
    } else {
      sample = 0;
    }
    if (++state->cycle_phase > dit_duration) {
 80002f6:	6a22      	ldr	r2, [r4, #32]
 80002f8:	3201      	adds	r2, #1
 80002fa:	42b2      	cmp	r2, r6
 80002fc:	6222      	str	r2, [r4, #32]
 80002fe:	d92a      	bls.n	8000356 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0xe2>
      --state->sample;
 8000300:	f8b4 c030 	ldrh.w	ip, [r4, #48]	; 0x30
 8000304:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8000308:	fa0f f38c 	sxth.w	r3, ip
 800030c:	8623      	strh	r3, [r4, #48]	; 0x30
      if (state->sample == 0) {
 800030e:	bb03      	cbnz	r3, 8000352 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0xde>
        ++state->cycle_phase_increment;
        state->rng_state = !state->rng_state;
 8000310:	fab0 f080 	clz	r0, r0
        ++state->cycle_phase_increment;
 8000314:	6a62      	ldr	r2, [r4, #36]	; 0x24
        state->rng_state = !state->rng_state;
 8000316:	0940      	lsrs	r0, r0, #5
        ++state->cycle_phase_increment;
 8000318:	3201      	adds	r2, #1

        size_t address = state->cycle_phase_increment >> 2;
        size_t shift = (state->cycle_phase_increment & 0x3) << 1;
        state->sample = (2 << ((wt_code[address] >> shift) & 3)) - 1;
 800031a:	4931      	ldr	r1, [pc, #196]	; (80003e0 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x16c>)
        ++state->cycle_phase_increment;
 800031c:	6262      	str	r2, [r4, #36]	; 0x24
        state->rng_state = !state->rng_state;
 800031e:	62a0      	str	r0, [r4, #40]	; 0x28
        size_t address = state->cycle_phase_increment >> 2;
 8000320:	0890      	lsrs	r0, r2, #2
        state->sample = (2 << ((wt_code[address] >> shift) & 3)) - 1;
 8000322:	5c08      	ldrb	r0, [r1, r0]
        size_t shift = (state->cycle_phase_increment & 0x3) << 1;
 8000324:	0052      	lsls	r2, r2, #1
 8000326:	f002 0206 	and.w	r2, r2, #6
        state->sample = (2 << ((wt_code[address] >> shift) & 3)) - 1;
 800032a:	fa40 f202 	asr.w	r2, r0, r2
 800032e:	f002 0003 	and.w	r0, r2, #3
 8000332:	2202      	movs	r2, #2
 8000334:	4082      	lsls	r2, r0
 8000336:	3a01      	subs	r2, #1
 8000338:	b292      	uxth	r2, r2
        if (state->sample == 15) {
 800033a:	2a0f      	cmp	r2, #15
          state->sample = 100;
 800033c:	bf02      	ittt	eq
 800033e:	2264      	moveq	r2, #100	; 0x64
 8000340:	8622      	strheq	r2, [r4, #48]	; 0x30
          state->rng_state = 0;
          state->cycle_phase_increment = - 1;
 8000342:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
        }
        phase = 1L << 30;
 8000346:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
        state->sample = (2 << ((wt_code[address] >> shift) & 3)) - 1;
 800034a:	bf12      	itee	ne
 800034c:	8622      	strhne	r2, [r4, #48]	; 0x30
          state->rng_state = 0;
 800034e:	62a3      	streq	r3, [r4, #40]	; 0x28
          state->cycle_phase_increment = - 1;
 8000350:	6262      	streq	r2, [r4, #36]	; 0x24
      }
      state->cycle_phase = 0;
 8000352:	2200      	movs	r2, #0
 8000354:	6222      	str	r2, [r4, #32]
    }
    state->seed += Random::GetSample() >> 2;
 8000356:	f7ff ff87 	bl	8000268 <_ZN6stmlib6Random9GetSampleEv>
 800035a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800035c:	eb02 02a0 	add.w	r2, r2, r0, asr #2
 8000360:	62e2      	str	r2, [r4, #44]	; 0x2c
    int32_t noise_intensity = state->seed >> 8;
 8000362:	1212      	asrs	r2, r2, #8
 8000364:	2a00      	cmp	r2, #0
 8000366:	bfb8      	it	lt
 8000368:	4252      	neglt	r2, r2
    if (noise_intensity < 0) {
      noise_intensity = -noise_intensity;
    }
    if (noise_intensity < noise_threshold) {
 800036a:	4297      	cmp	r7, r2
 800036c:	dc2e      	bgt.n	80003cc <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x158>
 800036e:	f5b2 5f7a 	cmp.w	r2, #16000	; 0x3e80
 8000372:	bfa8      	it	ge
 8000374:	f44f 527a 	movge.w	r2, #16000	; 0x3e80
 8000378:	9201      	str	r2, [sp, #4]
      noise_intensity = noise_threshold;
    }
    if (noise_intensity > 16000) {
      noise_intensity = 16000;
    }
    int32_t noise = (Random::GetSample() * noise_intensity >> 15);
 800037a:	f7ff ff75 	bl	8000268 <_ZN6stmlib6Random9GetSampleEv>
 800037e:	f647 7eff 	movw	lr, #32767	; 0x7fff
 8000382:	9a01      	ldr	r2, [sp, #4]
    noise = noise * wav_sine[(phase >> 22) & 0xff] >> 15;
 8000384:	f3cb 5c87 	ubfx	ip, fp, #22, #8
    int32_t noise = (Random::GetSample() * noise_intensity >> 15);
 8000388:	4342      	muls	r2, r0
    noise = noise * wav_sine[(phase >> 22) & 0xff] >> 15;
 800038a:	f93a c01c 	ldrsh.w	ip, [sl, ip, lsl #1]
    int32_t noise = (Random::GetSample() * noise_intensity >> 15);
 800038e:	13d2      	asrs	r2, r2, #15
    noise = noise * wav_sine[(phase >> 22) & 0xff] >> 15;
 8000390:	fb02 f20c 	mul.w	r2, r2, ip
    sample += noise;
 8000394:	eb05 35e2 	add.w	r5, r5, r2, asr #15
 8000398:	4575      	cmp	r5, lr
 800039a:	bfa8      	it	ge
 800039c:	4675      	movge	r5, lr
 800039e:	4911      	ldr	r1, [pc, #68]	; (80003e4 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x170>)
    CLIP(sample);
    int32_t distorted = sample * sample >> 14;
    sample += distorted * parameter_[1] >> 15;
 80003a0:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 80003a4:	428d      	cmp	r5, r1
 80003a6:	bfb8      	it	lt
 80003a8:	460d      	movlt	r5, r1
    int32_t distorted = sample * sample >> 14;
 80003aa:	fb05 f005 	mul.w	r0, r5, r5
 80003ae:	1380      	asrs	r0, r0, #14
    sample += distorted * parameter_[1] >> 15;
 80003b0:	4342      	muls	r2, r0
 80003b2:	eb05 35e2 	add.w	r5, r5, r2, asr #15
 80003b6:	4575      	cmp	r5, lr
 80003b8:	bfa8      	it	ge
 80003ba:	4675      	movge	r5, lr
    CLIP(sample);
    *buffer++ = sample;
 80003bc:	428d      	cmp	r5, r1
 80003be:	bfb8      	it	lt
 80003c0:	460d      	movlt	r5, r1
 80003c2:	f828 5b02 	strh.w	r5, [r8], #2
  while (size--) {
 80003c6:	e77a      	b.n	80002be <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x4a>
      sample = 0;
 80003c8:	4605      	mov	r5, r0
 80003ca:	e794      	b.n	80002f6 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x82>
 80003cc:	463a      	mov	r2, r7
 80003ce:	e7d3      	b.n	8000378 <_ZN6braids17DigitalOscillator18RenderQuestionMarkEPKhPsj+0x104>
  }
  phase_ = phase;
 80003d0:	f8c4 b000 	str.w	fp, [r4]
}
 80003d4:	b003      	add	sp, #12
 80003d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003da:	bf00      	nop
 80003dc:	08005902 	.word	0x08005902
 80003e0:	080054d8 	.word	0x080054d8
 80003e4:	ffff8001 	.word	0xffff8001
 80003e8:	08005900 	.word	0x08005900

080003ec <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>:
  int32_t ref_pitch = midi_pitch;
 80003ec:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80003f0:	4299      	cmp	r1, r3
 80003f2:	bfa8      	it	ge
 80003f4:	4619      	movge	r1, r3
  size_t num_shifts = 0;
 80003f6:	2000      	movs	r0, #0
uint32_t DigitalOscillator::ComputePhaseIncrement(int16_t midi_pitch) {
 80003f8:	b510      	push	{r4, lr}
  ref_pitch -= kPitchTableStart;
 80003fa:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
  while (ref_pitch < 0) {
 80003fe:	f511 61c0 	adds.w	r1, r1, #1536	; 0x600
    ++num_shifts;
 8000402:	f100 0001 	add.w	r0, r0, #1
  while (ref_pitch < 0) {
 8000406:	d4fa      	bmi.n	80003fe <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs+0x12>
  uint32_t a = lut_oscillator_increments[ref_pitch >> 4];
 8000408:	4c07      	ldr	r4, [pc, #28]	; (8000428 <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs+0x3c>)
 800040a:	110a      	asrs	r2, r1, #4
 800040c:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
  uint32_t b = lut_oscillator_increments[(ref_pitch >> 4) + 1];
 8000410:	3201      	adds	r2, #1
      (static_cast<int32_t>(b - a) * (ref_pitch & 0xf) >> 4);
 8000412:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8000416:	f001 010f 	and.w	r1, r1, #15
 800041a:	1ad2      	subs	r2, r2, r3
 800041c:	4351      	muls	r1, r2
  uint32_t phase_increment = a + \
 800041e:	eb03 1121 	add.w	r1, r3, r1, asr #4
}
 8000422:	fa21 f000 	lsr.w	r0, r1, r0
 8000426:	bd10      	pop	{r4, pc}
 8000428:	08005050 	.word	0x08005050

0800042c <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj>:
    size_t size) {
 800042c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000430:	b08f      	sub	sp, #60	; 0x3c
 8000432:	9304      	str	r3, [sp, #16]
  if (strike_) {
 8000434:	7f03      	ldrb	r3, [r0, #28]
    size_t size) {
 8000436:	4604      	mov	r4, r0
 8000438:	4615      	mov	r5, r2
  if (strike_) {
 800043a:	b15b      	cbz	r3, 8000454 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0x28>
 800043c:	f100 0620 	add.w	r6, r0, #32
 8000440:	f100 0730 	add.w	r7, r0, #48	; 0x30
      state_.saw.phase[i] = Random::GetWord();
 8000444:	f7ff ff02 	bl	800024c <_ZN6stmlib6Random7GetWordEv>
 8000448:	f846 0b04 	str.w	r0, [r6], #4
    for (size_t i = 0; i < 4; ++i) {
 800044c:	42b7      	cmp	r7, r6
 800044e:	d1f9      	bne.n	8000444 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0x18>
    strike_ = false;
 8000450:	2300      	movs	r3, #0
 8000452:	7723      	strb	r3, [r4, #28]
  uint16_t chord_integral = parameter_[1] >> 11;
 8000454:	f9b4 800e 	ldrsh.w	r8, [r4, #14]
 8000458:	2206      	movs	r2, #6
  phase_1 = state_.saw.phase[1];
 800045a:	e9d4 6708 	ldrd	r6, r7, [r4, #32]
  uint16_t chord_integral = parameter_[1] >> 11;
 800045e:	f3c8 28cf 	ubfx	r8, r8, #11, #16
 8000462:	f1b8 0f12 	cmp.w	r8, #18
 8000466:	bf28      	it	cs
 8000468:	f04f 0812 	movcs.w	r8, #18
  for (size_t i = 0; i < 3; ++i) {
 800046c:	f04f 0900 	mov.w	r9, #0
  phase_increment_0 = phase_increment_;
 8000470:	6863      	ldr	r3, [r4, #4]
    phase_increment[i] = ComputePhaseIncrement(pitch_ + detune);
 8000472:	f8b4 b018 	ldrh.w	fp, [r4, #24]
  phase_increment_0 = phase_increment_;
 8000476:	9308      	str	r3, [sp, #32]
  phase_2 = state_.saw.phase[2];
 8000478:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    phase_increment[i] = ComputePhaseIncrement(pitch_ + detune);
 800047a:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
  phase_2 = state_.saw.phase[2];
 800047e:	9301      	str	r3, [sp, #4]
  phase_3 = state_.saw.phase[3];
 8000480:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000482:	9300      	str	r3, [sp, #0]
 8000484:	4b15      	ldr	r3, [pc, #84]	; (80004dc <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0xb0>)
 8000486:	fb02 3808 	mla	r8, r2, r8, r3
    phase_increment[i] = ComputePhaseIncrement(pitch_ + detune);
 800048a:	f838 1019 	ldrh.w	r1, [r8, r9, lsl #1]
 800048e:	4620      	mov	r0, r4
 8000490:	4459      	add	r1, fp
 8000492:	b209      	sxth	r1, r1
 8000494:	f7ff ffaa 	bl	80003ec <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
 8000498:	f84a 0029 	str.w	r0, [sl, r9, lsl #2]
  for (size_t i = 0; i < 3; ++i) {
 800049c:	f109 0901 	add.w	r9, r9, #1
 80004a0:	f1b9 0f03 	cmp.w	r9, #3
 80004a4:	d1f1      	bne.n	800048a <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0x5e>
  const uint8_t* wave_1 = wt_waves + mini_wave_line[parameter_[0] >> 10] * 129;
 80004a6:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80004aa:	480d      	ldr	r0, [pc, #52]	; (80004e0 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0xb4>)
 80004ac:	128b      	asrs	r3, r1, #10
  uint16_t wave_xfade = parameter_[0] << 6;
 80004ae:	0189      	lsls	r1, r1, #6
 80004b0:	fa1f fb81 	uxth.w	fp, r1
    phase_1 += phase_increment[0];
 80004b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  const uint8_t* wave_1 = wt_waves + mini_wave_line[parameter_[0] >> 10] * 129;
 80004b6:	5cc2      	ldrb	r2, [r0, r3]
    phase_1 += phase_increment[0];
 80004b8:	9105      	str	r1, [sp, #20]
  const uint8_t* wave_2 = wt_waves + mini_wave_line[(parameter_[0] >> 10) + 1] * 129;
 80004ba:	4418      	add	r0, r3
    phase_2 += phase_increment[1];
 80004bc:	990c      	ldr	r1, [sp, #48]	; 0x30
  const uint8_t* wave_2 = wt_waves + mini_wave_line[(parameter_[0] >> 10) + 1] * 129;
 80004be:	7843      	ldrb	r3, [r0, #1]
  const uint8_t* wave_1 = wt_waves + mini_wave_line[parameter_[0] >> 10] * 129;
 80004c0:	f8df c020 	ldr.w	ip, [pc, #32]	; 80004e4 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0xb8>
    phase_2 += phase_increment[1];
 80004c4:	9106      	str	r1, [sp, #24]
    phase_3 += phase_increment[2];
 80004c6:	990d      	ldr	r1, [sp, #52]	; 0x34
  const uint8_t* wave_1 = wt_waves + mini_wave_line[parameter_[0] >> 10] * 129;
 80004c8:	eb02 12c2 	add.w	r2, r2, r2, lsl #7
  const uint8_t* wave_2 = wt_waves + mini_wave_line[(parameter_[0] >> 10) + 1] * 129;
 80004cc:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
  const uint8_t* wave_1 = wt_waves + mini_wave_line[parameter_[0] >> 10] * 129;
 80004d0:	4462      	add	r2, ip
  const uint8_t* wave_2 = wt_waves + mini_wave_line[(parameter_[0] >> 10) + 1] * 129;
 80004d2:	4463      	add	r3, ip
    phase_3 += phase_increment[2];
 80004d4:	9107      	str	r1, [sp, #28]
 80004d6:	9502      	str	r5, [sp, #8]
 80004d8:	e006      	b.n	80004e8 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0xbc>
 80004da:	bf00      	nop
 80004dc:	080045cc 	.word	0x080045cc
 80004e0:	080045aa 	.word	0x080045aa
 80004e4:	08005b02 	.word	0x08005b02
 80004e8:	9902      	ldr	r1, [sp, #8]
 80004ea:	3104      	adds	r1, #4
 80004ec:	9102      	str	r1, [sp, #8]
  while (size) {
 80004ee:	9904      	ldr	r1, [sp, #16]
 80004f0:	2900      	cmp	r1, #0
 80004f2:	f000 8181 	beq.w	80007f8 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0x3cc>
    phase_0 += phase_increment_0;
 80004f6:	9908      	ldr	r1, [sp, #32]
 80004f8:	9806      	ldr	r0, [sp, #24]
 80004fa:	440e      	add	r6, r1
 80004fc:	9905      	ldr	r1, [sp, #20]
  uint32_t b = table[(phase >> 24) + 1];
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
}

inline int16_t Interpolate824(const uint8_t* table, uint32_t phase) {
  int32_t a = table[phase >> 24];
 80004fe:	0e75      	lsrs	r5, r6, #25
 8000500:	4439      	add	r1, r7
 8000502:	9103      	str	r1, [sp, #12]
 8000504:	9901      	ldr	r1, [sp, #4]
  int32_t b = table[(phase >> 24) + 1];
  return (a << 8) + \
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000506:	f3c6 0957 	ubfx	r9, r6, #1, #24
 800050a:	4401      	add	r1, r0
 800050c:	9101      	str	r1, [sp, #4]
 800050e:	9807      	ldr	r0, [sp, #28]
 8000510:	9900      	ldr	r1, [sp, #0]
 8000512:	4401      	add	r1, r0
 8000514:	468a      	mov	sl, r1
  int32_t b = table[(phase >> 24) + 1];
 8000516:	1c69      	adds	r1, r5, #1
  int32_t a = table[phase >> 24];
 8000518:	5d50      	ldrb	r0, [r2, r5]
  int32_t b = table[(phase >> 24) + 1];
 800051a:	5c57      	ldrb	r7, [r2, r1]
 800051c:	9109      	str	r1, [sp, #36]	; 0x24
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800051e:	1a3f      	subs	r7, r7, r0
 8000520:	fb09 f707 	mul.w	r7, r9, r7
  return (a << 8) + \
 8000524:	0201      	lsls	r1, r0, #8
  int32_t a = table[phase >> 24];
 8000526:	9803      	ldr	r0, [sp, #12]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000528:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
  int32_t a = table[phase >> 24];
 800052c:	ea4f 6c50 	mov.w	ip, r0, lsr #25
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000530:	eb01 4127 	add.w	r1, r1, r7, asr #16
 8000534:	9f03      	ldr	r7, [sp, #12]
  int32_t b = table[(phase >> 24) + 1];
 8000536:	f10c 0801 	add.w	r8, ip, #1
  int32_t a = table[phase >> 24];
 800053a:	f812 000c 	ldrb.w	r0, [r2, ip]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800053e:	f3c7 0e57 	ubfx	lr, r7, #1, #24
  int32_t b = table[(phase >> 24) + 1];
 8000542:	f812 7008 	ldrb.w	r7, [r2, r8]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000546:	b289      	uxth	r1, r1
 8000548:	1a3f      	subs	r7, r7, r0
 800054a:	fb0e f707 	mul.w	r7, lr, r7
 800054e:	9100      	str	r1, [sp, #0]
  return (a << 8) + \
 8000550:	0200      	lsls	r0, r0, #8
  int32_t b = table[(phase >> 24) + 1];
 8000552:	9909      	ldr	r1, [sp, #36]	; 0x24
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000554:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
  int32_t a = table[phase >> 24];
 8000558:	5d5d      	ldrb	r5, [r3, r5]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800055a:	eb00 4727 	add.w	r7, r0, r7, asr #16
  int32_t a = table[phase >> 24];
 800055e:	f813 000c 	ldrb.w	r0, [r3, ip]
  int32_t b = table[(phase >> 24) + 1];
 8000562:	f813 c001 	ldrb.w	ip, [r3, r1]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000566:	b2bf      	uxth	r7, r7
 8000568:	ebac 0c05 	sub.w	ip, ip, r5
 800056c:	fb09 f90c 	mul.w	r9, r9, ip
  return (a << 8) + \
 8000570:	022d      	lsls	r5, r5, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000572:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
 8000576:	eb05 4929 	add.w	r9, r5, r9, asr #16
  int32_t b = table[(phase >> 24) + 1];
 800057a:	f813 5008 	ldrb.w	r5, [r3, r8]
inline int16_t Crossfade(
    const uint8_t* table_a,
    const uint8_t* table_b,
    uint32_t phase,
    uint16_t balance) {
  int32_t a = Interpolate824(table_a, phase);
 800057e:	f9bd c000 	ldrsh.w	ip, [sp]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000582:	1a2d      	subs	r5, r5, r0
 8000584:	fb0e fe05 	mul.w	lr, lr, r5
  return (a << 8) + \
 8000588:	0200      	lsls	r0, r0, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800058a:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 800058e:	eb00 4e2e 	add.w	lr, r0, lr, asr #16
  int32_t a = Interpolate824(table_a, phase);
 8000592:	b23d      	sxth	r5, r7
  int32_t b = Interpolate824(table_b, phase);
 8000594:	fa0f fe8e 	sxth.w	lr, lr
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 8000598:	ebae 0e05 	sub.w	lr, lr, r5
  int32_t a = table[phase >> 24];
 800059c:	9801      	ldr	r0, [sp, #4]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 800059e:	fb0b fe0e 	mul.w	lr, fp, lr
  int32_t b = Interpolate824(table_b, phase);
 80005a2:	fa0f f989 	sxth.w	r9, r9
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80005a6:	9d01      	ldr	r5, [sp, #4]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 80005a8:	eba9 090c 	sub.w	r9, r9, ip
  int32_t a = table[phase >> 24];
 80005ac:	ea4f 6c50 	mov.w	ip, r0, lsr #25
  int32_t b = table[(phase >> 24) + 1];
 80005b0:	f10c 0801 	add.w	r8, ip, #1
  int32_t a = table[phase >> 24];
 80005b4:	f812 000c 	ldrb.w	r0, [r2, ip]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 80005b8:	eb07 472e 	add.w	r7, r7, lr, asr #16
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80005bc:	f3c5 0e57 	ubfx	lr, r5, #1, #24
  int32_t b = table[(phase >> 24) + 1];
 80005c0:	f812 5008 	ldrb.w	r5, [r2, r8]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 80005c4:	fb0b f909 	mul.w	r9, fp, r9
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80005c8:	1a2d      	subs	r5, r5, r0
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 80005ca:	9900      	ldr	r1, [sp, #0]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80005cc:	fb0e f505 	mul.w	r5, lr, r5
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 80005d0:	eb01 4129 	add.w	r1, r1, r9, asr #16
  return (a << 8) + \
 80005d4:	0200      	lsls	r0, r0, #8
    sample += Crossfade(wave_1, wave_2, phase_1 >> 1, wave_xfade);
 80005d6:	b23f      	sxth	r7, r7
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80005d8:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
    sample += Crossfade(wave_1, wave_2, phase_0 >> 1, wave_xfade);
 80005dc:	b209      	sxth	r1, r1
    sample += Crossfade(wave_1, wave_2, phase_1 >> 1, wave_xfade);
 80005de:	4439      	add	r1, r7
 80005e0:	eb00 4525 	add.w	r5, r0, r5, asr #16
  int32_t b = table[(phase >> 24) + 1];
 80005e4:	f813 7008 	ldrb.w	r7, [r3, r8]
  int32_t a = table[phase >> 24];
 80005e8:	f813 000c 	ldrb.w	r0, [r3, ip]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80005ec:	b2ad      	uxth	r5, r5
 80005ee:	1a3f      	subs	r7, r7, r0
 80005f0:	fb0e fe07 	mul.w	lr, lr, r7
  return (a << 8) + \
 80005f4:	0200      	lsls	r0, r0, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80005f6:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 80005fa:	eb00 4e2e 	add.w	lr, r0, lr, asr #16
  int32_t b = Interpolate824(table_b, phase);
 80005fe:	fa0f fe8e 	sxth.w	lr, lr
  int32_t a = Interpolate824(table_a, phase);
 8000602:	b22f      	sxth	r7, r5
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 8000604:	ebae 0707 	sub.w	r7, lr, r7
 8000608:	fb0b f707 	mul.w	r7, fp, r7
 800060c:	eb05 4727 	add.w	r7, r5, r7, asr #16
  int32_t a = table[phase >> 24];
 8000610:	ea4f 655a 	mov.w	r5, sl, lsr #25
  int32_t b = table[(phase >> 24) + 1];
 8000614:	f105 0e01 	add.w	lr, r5, #1
    sample += Crossfade(wave_1, wave_2, phase_2 >> 1, wave_xfade);
 8000618:	b23f      	sxth	r7, r7
 800061a:	440f      	add	r7, r1
 800061c:	f812 000e 	ldrb.w	r0, [r2, lr]
  int32_t a = table[phase >> 24];
 8000620:	5d51      	ldrb	r1, [r2, r5]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000622:	f3ca 0c57 	ubfx	ip, sl, #1, #24
 8000626:	1a40      	subs	r0, r0, r1
 8000628:	fb0c f000 	mul.w	r0, ip, r0
  return (a << 8) + \
 800062c:	0209      	lsls	r1, r1, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800062e:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8000632:	eb01 4020 	add.w	r0, r1, r0, asr #16
  int32_t a = table[phase >> 24];
 8000636:	5d59      	ldrb	r1, [r3, r5]
  int32_t b = table[(phase >> 24) + 1];
 8000638:	f813 500e 	ldrb.w	r5, [r3, lr]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800063c:	b280      	uxth	r0, r0
 800063e:	1a6d      	subs	r5, r5, r1
 8000640:	fb0c fc05 	mul.w	ip, ip, r5
  return (a << 8) + \
 8000644:	0209      	lsls	r1, r1, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000646:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 800064a:	eb01 4c2c 	add.w	ip, r1, ip, asr #16
  int32_t a = Interpolate824(table_a, phase);
 800064e:	b205      	sxth	r5, r0
  int32_t b = Interpolate824(table_b, phase);
 8000650:	fa0f fc8c 	sxth.w	ip, ip
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 8000654:	ebac 0c05 	sub.w	ip, ip, r5
 8000658:	fb0b fc0c 	mul.w	ip, fp, ip
 800065c:	eb00 402c 	add.w	r0, r0, ip, asr #16
    sample += Crossfade(wave_1, wave_2, phase_3 >> 1, wave_xfade);
 8000660:	b200      	sxth	r0, r0
    *buffer++ = sample >> 2;
 8000662:	9902      	ldr	r1, [sp, #8]
    sample += Crossfade(wave_1, wave_2, phase_3 >> 1, wave_xfade);
 8000664:	4438      	add	r0, r7
    *buffer++ = sample >> 2;
 8000666:	1080      	asrs	r0, r0, #2
 8000668:	f821 0c04 	strh.w	r0, [r1, #-4]
 800066c:	9908      	ldr	r1, [sp, #32]
 800066e:	9803      	ldr	r0, [sp, #12]
 8000670:	440e      	add	r6, r1
 8000672:	9905      	ldr	r1, [sp, #20]
  int32_t a = table[phase >> 24];
 8000674:	0e75      	lsrs	r5, r6, #25
 8000676:	180f      	adds	r7, r1, r0
 8000678:	9801      	ldr	r0, [sp, #4]
 800067a:	9906      	ldr	r1, [sp, #24]
 800067c:	ea4f 6e57 	mov.w	lr, r7, lsr #25
 8000680:	4401      	add	r1, r0
 8000682:	9101      	str	r1, [sp, #4]
 8000684:	9907      	ldr	r1, [sp, #28]
 8000686:	5d50      	ldrb	r0, [r2, r5]
 8000688:	4451      	add	r1, sl
 800068a:	9100      	str	r1, [sp, #0]
  int32_t b = table[(phase >> 24) + 1];
 800068c:	1c69      	adds	r1, r5, #1
 800068e:	f812 c001 	ldrb.w	ip, [r2, r1]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000692:	f3c6 0a57 	ubfx	sl, r6, #1, #24
 8000696:	ebac 0c00 	sub.w	ip, ip, r0
 800069a:	fb0a fc0c 	mul.w	ip, sl, ip
  int32_t b = table[(phase >> 24) + 1];
 800069e:	9109      	str	r1, [sp, #36]	; 0x24
  return (a << 8) + \
 80006a0:	0201      	lsls	r1, r0, #8
  int32_t b = table[(phase >> 24) + 1];
 80006a2:	f10e 0901 	add.w	r9, lr, #1
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006a6:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
  int32_t a = table[phase >> 24];
 80006aa:	f812 000e 	ldrb.w	r0, [r2, lr]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006ae:	eb01 412c 	add.w	r1, r1, ip, asr #16
  int32_t b = table[(phase >> 24) + 1];
 80006b2:	f812 c009 	ldrb.w	ip, [r2, r9]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006b6:	f3c7 0857 	ubfx	r8, r7, #1, #24
 80006ba:	ebac 0c00 	sub.w	ip, ip, r0
 80006be:	fb08 fc0c 	mul.w	ip, r8, ip
 80006c2:	b289      	uxth	r1, r1
 80006c4:	9103      	str	r1, [sp, #12]
  return (a << 8) + \
 80006c6:	0200      	lsls	r0, r0, #8
  int32_t b = table[(phase >> 24) + 1];
 80006c8:	9909      	ldr	r1, [sp, #36]	; 0x24
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006ca:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
  int32_t a = table[phase >> 24];
 80006ce:	5d5d      	ldrb	r5, [r3, r5]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006d0:	eb00 4c2c 	add.w	ip, r0, ip, asr #16
  int32_t a = table[phase >> 24];
 80006d4:	f813 000e 	ldrb.w	r0, [r3, lr]
  int32_t b = table[(phase >> 24) + 1];
 80006d8:	f813 e001 	ldrb.w	lr, [r3, r1]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006dc:	fa1f fc8c 	uxth.w	ip, ip
 80006e0:	ebae 0e05 	sub.w	lr, lr, r5
 80006e4:	fb0a fa0e 	mul.w	sl, sl, lr
  return (a << 8) + \
 80006e8:	022d      	lsls	r5, r5, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006ea:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
 80006ee:	eb05 4a2a 	add.w	sl, r5, sl, asr #16
  int32_t b = table[(phase >> 24) + 1];
 80006f2:	f813 5009 	ldrb.w	r5, [r3, r9]
  int32_t a = Interpolate824(table_a, phase);
 80006f6:	f9bd e00c 	ldrsh.w	lr, [sp, #12]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80006fa:	1a2d      	subs	r5, r5, r0
 80006fc:	fb08 f805 	mul.w	r8, r8, r5
  return (a << 8) + \
 8000700:	0200      	lsls	r0, r0, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000702:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 8000706:	eb00 4828 	add.w	r8, r0, r8, asr #16
  int32_t a = Interpolate824(table_a, phase);
 800070a:	fa0f f58c 	sxth.w	r5, ip
  int32_t b = Interpolate824(table_b, phase);
 800070e:	fa0f f888 	sxth.w	r8, r8
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 8000712:	eba8 0805 	sub.w	r8, r8, r5
  int32_t a = table[phase >> 24];
 8000716:	9801      	ldr	r0, [sp, #4]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 8000718:	fb0b f808 	mul.w	r8, fp, r8
  int32_t b = Interpolate824(table_b, phase);
 800071c:	fa0f fa8a 	sxth.w	sl, sl
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000720:	9d01      	ldr	r5, [sp, #4]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 8000722:	ebaa 0a0e 	sub.w	sl, sl, lr
  int32_t a = table[phase >> 24];
 8000726:	ea4f 6e50 	mov.w	lr, r0, lsr #25
  int32_t b = table[(phase >> 24) + 1];
 800072a:	f10e 0901 	add.w	r9, lr, #1
  int32_t a = table[phase >> 24];
 800072e:	f812 000e 	ldrb.w	r0, [r2, lr]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 8000732:	eb0c 4c28 	add.w	ip, ip, r8, asr #16
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000736:	f3c5 0857 	ubfx	r8, r5, #1, #24
  int32_t b = table[(phase >> 24) + 1];
 800073a:	f812 5009 	ldrb.w	r5, [r2, r9]
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 800073e:	fb0b fa0a 	mul.w	sl, fp, sl
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000742:	1a2d      	subs	r5, r5, r0
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 8000744:	9903      	ldr	r1, [sp, #12]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000746:	fb08 f505 	mul.w	r5, r8, r5
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 800074a:	eb01 412a 	add.w	r1, r1, sl, asr #16
  return (a << 8) + \
 800074e:	0200      	lsls	r0, r0, #8
    sample += Crossfade(wave_1, wave_2, phase_1 >> 1, wave_xfade);
 8000750:	fa0f fc8c 	sxth.w	ip, ip
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000754:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
    sample += Crossfade(wave_1, wave_2, phase_0 >> 1, wave_xfade);
 8000758:	b209      	sxth	r1, r1
    sample += Crossfade(wave_1, wave_2, phase_1 >> 1, wave_xfade);
 800075a:	4461      	add	r1, ip
 800075c:	eb00 4525 	add.w	r5, r0, r5, asr #16
  int32_t b = table[(phase >> 24) + 1];
 8000760:	f813 c009 	ldrb.w	ip, [r3, r9]
  int32_t a = table[phase >> 24];
 8000764:	f813 000e 	ldrb.w	r0, [r3, lr]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000768:	b2ad      	uxth	r5, r5
 800076a:	ebac 0c00 	sub.w	ip, ip, r0
 800076e:	fb08 f80c 	mul.w	r8, r8, ip
  return (a << 8) + \
 8000772:	0200      	lsls	r0, r0, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 8000774:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 8000778:	eb00 4828 	add.w	r8, r0, r8, asr #16
  int32_t b = Interpolate824(table_b, phase);
 800077c:	fa0f f888 	sxth.w	r8, r8
  int32_t a = Interpolate824(table_a, phase);
 8000780:	fa0f fc85 	sxth.w	ip, r5
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 8000784:	eba8 0c0c 	sub.w	ip, r8, ip
 8000788:	fb0b fc0c 	mul.w	ip, fp, ip
 800078c:	eb05 4c2c 	add.w	ip, r5, ip, asr #16
    sample += Crossfade(wave_1, wave_2, phase_2 >> 1, wave_xfade);
 8000790:	fa0f fc8c 	sxth.w	ip, ip
 8000794:	448c      	add	ip, r1
  int32_t a = table[phase >> 24];
 8000796:	9900      	ldr	r1, [sp, #0]
 8000798:	0e4d      	lsrs	r5, r1, #25
 800079a:	5d51      	ldrb	r1, [r2, r5]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 800079c:	9800      	ldr	r0, [sp, #0]
  int32_t b = table[(phase >> 24) + 1];
 800079e:	f105 0801 	add.w	r8, r5, #1
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80007a2:	f3c0 0e57 	ubfx	lr, r0, #1, #24
  int32_t b = table[(phase >> 24) + 1];
 80007a6:	f812 0008 	ldrb.w	r0, [r2, r8]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80007aa:	1a40      	subs	r0, r0, r1
 80007ac:	fb0e f000 	mul.w	r0, lr, r0
  return (a << 8) + \
 80007b0:	0209      	lsls	r1, r1, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80007b2:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 80007b6:	eb01 4020 	add.w	r0, r1, r0, asr #16
  int32_t a = table[phase >> 24];
 80007ba:	5d59      	ldrb	r1, [r3, r5]
  int32_t b = table[(phase >> 24) + 1];
 80007bc:	f813 5008 	ldrb.w	r5, [r3, r8]
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80007c0:	b280      	uxth	r0, r0
 80007c2:	1a6d      	subs	r5, r5, r1
 80007c4:	fb0e fe05 	mul.w	lr, lr, r5
  return (a << 8) + \
 80007c8:	0209      	lsls	r1, r1, #8
      ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
 80007ca:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 80007ce:	eb01 4e2e 	add.w	lr, r1, lr, asr #16
  int32_t a = Interpolate824(table_a, phase);
 80007d2:	b205      	sxth	r5, r0
  int32_t b = Interpolate824(table_b, phase);
 80007d4:	fa0f fe8e 	sxth.w	lr, lr
  return a + ((b - a) * static_cast<int32_t>(balance) >> 16);
 80007d8:	ebae 0e05 	sub.w	lr, lr, r5
 80007dc:	fb0b fe0e 	mul.w	lr, fp, lr
 80007e0:	eb00 402e 	add.w	r0, r0, lr, asr #16
    sample += Crossfade(wave_1, wave_2, phase_3 >> 1, wave_xfade);
 80007e4:	b200      	sxth	r0, r0
    *buffer++ = sample >> 2;
 80007e6:	9902      	ldr	r1, [sp, #8]
    sample += Crossfade(wave_1, wave_2, phase_3 >> 1, wave_xfade);
 80007e8:	4460      	add	r0, ip
    *buffer++ = sample >> 2;
 80007ea:	1080      	asrs	r0, r0, #2
 80007ec:	f821 0c02 	strh.w	r0, [r1, #-2]
    size -= 2;
 80007f0:	9904      	ldr	r1, [sp, #16]
 80007f2:	3902      	subs	r1, #2
 80007f4:	9104      	str	r1, [sp, #16]
  while (size) {
 80007f6:	e677      	b.n	80004e8 <_ZN6braids17DigitalOscillator20RenderWaveParaphonicEPKhPsj+0xbc>
  state_.saw.phase[2] = phase_2;
 80007f8:	9b01      	ldr	r3, [sp, #4]
  state_.saw.phase[1] = phase_1;
 80007fa:	e9c4 6708 	strd	r6, r7, [r4, #32]
  state_.saw.phase[2] = phase_2;
 80007fe:	62a3      	str	r3, [r4, #40]	; 0x28
  state_.saw.phase[3] = phase_3;
 8000800:	9b00      	ldr	r3, [sp, #0]
 8000802:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8000804:	b00f      	add	sp, #60	; 0x3c
 8000806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800080a:	bf00      	nop

0800080c <_ZN6braids17DigitalOscillator12ComputeDelayEs>:
  int32_t ref_pitch = midi_pitch;
 800080c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8000810:	bfa8      	it	ge
 8000812:	f44f 4180 	movge.w	r1, #16384	; 0x4000
  size_t num_shifts = 0;
 8000816:	2300      	movs	r3, #0
uint32_t DigitalOscillator::ComputeDelay(int16_t midi_pitch) {
 8000818:	b510      	push	{r4, lr}
  ref_pitch -= kPitchTableStart;
 800081a:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
  while (ref_pitch < 0) {
 800081e:	2900      	cmp	r1, #0
 8000820:	da03      	bge.n	800082a <_ZN6braids17DigitalOscillator12ComputeDelayEs+0x1e>
    ref_pitch += kOctave;
 8000822:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
    ++num_shifts;
 8000826:	3301      	adds	r3, #1
  while (ref_pitch < 0) {
 8000828:	e7f9      	b.n	800081e <_ZN6braids17DigitalOscillator12ComputeDelayEs+0x12>
  uint32_t a = lut_oscillator_delays[ref_pitch >> 4];
 800082a:	4c08      	ldr	r4, [pc, #32]	; (800084c <_ZN6braids17DigitalOscillator12ComputeDelayEs+0x40>)
 800082c:	110a      	asrs	r2, r1, #4
 800082e:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
  uint32_t b = lut_oscillator_delays[(ref_pitch >> 4) + 1];
 8000832:	3201      	adds	r2, #1
  uint32_t delay = a + (static_cast<int32_t>(b - a) * (ref_pitch & 0xf) >> 4);  
 8000834:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8000838:	f001 010f 	and.w	r1, r1, #15
 800083c:	1a12      	subs	r2, r2, r0
 800083e:	4351      	muls	r1, r2
  delay >>= 12 - num_shifts;
 8000840:	f1c3 030c 	rsb	r3, r3, #12
  uint32_t delay = a + (static_cast<int32_t>(b - a) * (ref_pitch & 0xf) >> 4);  
 8000844:	eb00 1021 	add.w	r0, r0, r1, asr #4
}
 8000848:	40d8      	lsrs	r0, r3
 800084a:	bd10      	pop	{r4, pc}
 800084c:	08004ecc 	.word	0x08004ecc

08000850 <_ZN6braids17DigitalOscillator6RenderEPKhPsj>:
    size_t size) {
 8000850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000854:	4617      	mov	r7, r2
  if (shape_ >= OSC_SHAPE_FM &&
 8000856:	7f42      	ldrb	r2, [r0, #29]
    size_t size) {
 8000858:	4698      	mov	r8, r3
  if (shape_ >= OSC_SHAPE_FM &&
 800085a:	f1a2 030c 	sub.w	r3, r2, #12
 800085e:	2b02      	cmp	r3, #2
    size_t size) {
 8000860:	4604      	mov	r4, r0
 8000862:	460e      	mov	r6, r1
  if (shape_ >= OSC_SHAPE_FM &&
 8000864:	d810      	bhi.n	8000888 <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0x38>
    uint16_t integral = parameter_[1] >> 8;
 8000866:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    int16_t a = lut_fm_frequency_quantizer[integral];
 800086a:	4d3b      	ldr	r5, [pc, #236]	; (8000958 <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0x108>)
 800086c:	f3c3 200f 	ubfx	r0, r3, #8, #16
 8000870:	f835 1010 	ldrh.w	r1, [r5, r0, lsl #1]
    int16_t b = lut_fm_frequency_quantizer[integral + 1];
 8000874:	3001      	adds	r0, #1
    parameter_[1] = a + ((b - a) * fractional >> 8);
 8000876:	f935 0010 	ldrsh.w	r0, [r5, r0, lsl #1]
 800087a:	b20d      	sxth	r5, r1
 800087c:	1b40      	subs	r0, r0, r5
 800087e:	b2db      	uxtb	r3, r3
 8000880:	4343      	muls	r3, r0
 8000882:	eb01 2323 	add.w	r3, r1, r3, asr #8
 8000886:	81e3      	strh	r3, [r4, #14]
  RenderFn fn = fn_table_[shape_];
 8000888:	4b34      	ldr	r3, [pc, #208]	; (800095c <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0x10c>)
 800088a:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800088e:	f853 9032 	ldr.w	r9, [r3, r2, lsl #3]
  if (shape_ != previous_shape_) {
 8000892:	7fa3      	ldrb	r3, [r4, #30]
  RenderFn fn = fn_table_[shape_];
 8000894:	f8d1 a004 	ldr.w	sl, [r1, #4]
  if (shape_ != previous_shape_) {
 8000898:	4293      	cmp	r3, r2
 800089a:	d034      	beq.n	8000906 <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0xb6>

  DigitalOscillator() { }
  ~DigitalOscillator() { }
  
  inline void Init() {
    memset(&state_, 0, sizeof(state_));
 800089c:	22c4      	movs	r2, #196	; 0xc4
 800089e:	2100      	movs	r1, #0
 80008a0:	f104 0020 	add.w	r0, r4, #32
 80008a4:	f003 fe63 	bl	800456e <memset>
  Excitation() { }
  ~Excitation() { }

  void Init() {
    delay_ = 0;
    decay_ = 4093;
 80008a8:	2500      	movs	r5, #0
 80008aa:	f640 73fd 	movw	r3, #4093	; 0xffd
    pulse_[0].Init();
    pulse_[1].Init();
    pulse_[2].Init();
    pulse_[3].Init();
    svf_[0].Init();
 80008ae:	f504 709a 	add.w	r0, r4, #308	; 0x134
 80008b2:	e9c4 5339 	strd	r5, r3, [r4, #228]	; 0xe4
 80008b6:	e9c4 533e 	strd	r5, r3, [r4, #248]	; 0xf8
 80008ba:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80008be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    counter_ = 0;
    state_ = 0;
 80008c2:	e9c4 553b 	strd	r5, r5, [r4, #236]	; 0xec
    counter_ = 0;
 80008c6:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    state_ = 0;
 80008ca:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    delay_ = 0;
 80008ce:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
    counter_ = 0;
 80008d2:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
    state_ = 0;
 80008d6:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
    delay_ = 0;
 80008da:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
    counter_ = 0;
 80008de:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
    state_ = 0;
 80008e2:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 80008e6:	f7ff fca3 	bl	8000230 <_ZN6braids3Svf4InitEv>
    svf_[1].Init();
 80008ea:	f504 70aa 	add.w	r0, r4, #340	; 0x154
 80008ee:	f7ff fc9f 	bl	8000230 <_ZN6braids3Svf4InitEv>
    svf_[2].Init();
 80008f2:	f504 70ba 	add.w	r0, r4, #372	; 0x174
 80008f6:	f7ff fc9b 	bl	8000230 <_ZN6braids3Svf4InitEv>
    phase_ = 0;
    strike_ = true;
 80008fa:	2301      	movs	r3, #1
 80008fc:	7723      	strb	r3, [r4, #28]
    init_ = true;
 80008fe:	76e3      	strb	r3, [r4, #27]
    previous_shape_ = shape_;
 8000900:	7f63      	ldrb	r3, [r4, #29]
    phase_ = 0;
 8000902:	6025      	str	r5, [r4, #0]
 8000904:	77a3      	strb	r3, [r4, #30]
  phase_increment_ = ComputePhaseIncrement(pitch_);
 8000906:	f9b4 5018 	ldrsh.w	r5, [r4, #24]
 800090a:	4620      	mov	r0, r4
 800090c:	4629      	mov	r1, r5
 800090e:	f7ff fd6d 	bl	80003ec <_ZN6braids17DigitalOscillator21ComputePhaseIncrementEs>
  delay_ = ComputeDelay(pitch_);
 8000912:	4629      	mov	r1, r5
  phase_increment_ = ComputePhaseIncrement(pitch_);
 8000914:	6060      	str	r0, [r4, #4]
  delay_ = ComputeDelay(pitch_);
 8000916:	4620      	mov	r0, r4
 8000918:	f7ff ff78 	bl	800080c <_ZN6braids17DigitalOscillator12ComputeDelayEs>
  if (pitch_ > kHighestNote) {
 800091c:	f5b5 4f8c 	cmp.w	r5, #17920	; 0x4600
  delay_ = ComputeDelay(pitch_);
 8000920:	60a0      	str	r0, [r4, #8]
  if (pitch_ > kHighestNote) {
 8000922:	dd14      	ble.n	800094e <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0xfe>
    pitch_ = kHighestNote;
 8000924:	f44f 438c 	mov.w	r3, #17920	; 0x4600
    pitch_ = 0;
 8000928:	8323      	strh	r3, [r4, #24]
  (this->*fn)(sync, buffer, size);
 800092a:	ea4f 036a 	mov.w	r3, sl, asr #1
 800092e:	f01a 0f01 	tst.w	sl, #1
 8000932:	eb04 0003 	add.w	r0, r4, r3
 8000936:	bf18      	it	ne
 8000938:	58e3      	ldrne	r3, [r4, r3]
 800093a:	463a      	mov	r2, r7
 800093c:	bf18      	it	ne
 800093e:	f853 9009 	ldrne.w	r9, [r3, r9]
 8000942:	4631      	mov	r1, r6
 8000944:	4643      	mov	r3, r8
 8000946:	46cc      	mov	ip, r9
}
 8000948:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  (this->*fn)(sync, buffer, size);
 800094c:	4760      	bx	ip
  } else if (pitch_ < 0) {
 800094e:	2d00      	cmp	r5, #0
 8000950:	daeb      	bge.n	800092a <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0xda>
    pitch_ = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	e7e8      	b.n	8000928 <_ZN6braids17DigitalOscillator6RenderEPKhPsj+0xd8>
 8000956:	bf00      	nop
 8000958:	080051d4 	.word	0x080051d4
 800095c:	20000000 	.word	0x20000000

08000960 <_ZN6braids15MacroOscillator10RenderBuzzEPKhPsj>:
}

void MacroOscillator::RenderBuzz(
    const uint8_t* sync,
    int16_t* buffer,
    size_t size) {
 8000960:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  analog_oscillator_[0].set_parameter(parameter_[0]);
 8000964:	f9b0 7000 	ldrsh.w	r7, [r0]
    size_t size) {
 8000968:	4604      	mov	r4, r0
  inline void set_pitch(int16_t pitch) {
    pitch_ = pitch;
  }

  inline void set_parameter(int16_t parameter) {
    parameter_ = parameter;
 800096a:	f8a0 7066 	strh.w	r7, [r0, #102]	; 0x66
    shape_ = shape;
 800096e:	2008      	movs	r0, #8
 8000970:	461e      	mov	r6, r3
 8000972:	4688      	mov	r8, r1
 8000974:	4615      	mov	r5, r2
  analog_oscillator_[0].set_shape(OSC_SHAPE_BUZZ);
  analog_oscillator_[0].set_pitch(pitch_);
 8000976:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800097a:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
 800097e:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94

  analog_oscillator_[1].set_parameter(parameter_[0]);
  analog_oscillator_[1].set_shape(OSC_SHAPE_BUZZ);
  analog_oscillator_[1].set_pitch(pitch_ + (parameter_[1] >> 8));
 8000982:	f994 0003 	ldrsb.w	r0, [r4, #3]
    pitch_ = pitch;
 8000986:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800098a:	4403      	add	r3, r0
    parameter_ = parameter;
 800098c:	f8a4 7086 	strh.w	r7, [r4, #134]	; 0x86
    pitch_ = pitch;
 8000990:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e

  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8000994:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000998:	2300      	movs	r3, #0
 800099a:	9600      	str	r6, [sp, #0]
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 800099c:	f104 0722 	add.w	r7, r4, #34	; 0x22
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 80009a0:	f7ff fbfe 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 80009a4:	463a      	mov	r2, r7
 80009a6:	9600      	str	r6, [sp, #0]
 80009a8:	2300      	movs	r3, #0
 80009aa:	4641      	mov	r1, r8
 80009ac:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80009b0:	f7ff fbf6 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
 80009b4:	1eaa      	subs	r2, r5, #2
  int16_t* temp_buffer = temp_buffer_;
  while (size--) {
 80009b6:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 80009ba:	d309      	bcc.n	80009d0 <_ZN6braids15MacroOscillator10RenderBuzzEPKhPsj+0x70>
    *buffer >>= 1;
 80009bc:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 80009c0:	105b      	asrs	r3, r3, #1
 80009c2:	8013      	strh	r3, [r2, #0]
    *buffer += *temp_buffer >> 1;
 80009c4:	f937 1b02 	ldrsh.w	r1, [r7], #2
 80009c8:	eb03 0361 	add.w	r3, r3, r1, asr #1
 80009cc:	8013      	strh	r3, [r2, #0]
  while (size--) {
 80009ce:	e7f2      	b.n	80009b6 <_ZN6braids15MacroOscillator10RenderBuzzEPKhPsj+0x56>
    buffer++;
    temp_buffer++;
  }
}
 80009d0:	b002      	add	sp, #8
 80009d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080009d6 <_ZN6braids15MacroOscillator10RenderCSawEPKhPsj>:
    size_t size) {
 80009d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80009d8:	461d      	mov	r5, r3
 80009da:	8903      	ldrh	r3, [r0, #8]
 80009dc:	4604      	mov	r4, r0
 80009de:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
    shape_ = shape;
 80009e2:	2302      	movs	r3, #2
 80009e4:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    parameter_ = parameter;
 80009e8:	8803      	ldrh	r3, [r0, #0]
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 80009ea:	3058      	adds	r0, #88	; 0x58
 80009ec:	81c3      	strh	r3, [r0, #14]
  }

  inline void set_aux_parameter(int16_t parameter) {
    aux_parameter_ = parameter;
 80009ee:	f830 3c56 	ldrh.w	r3, [r0, #-86]
    size_t size) {
 80009f2:	4616      	mov	r6, r2
 80009f4:	8243      	strh	r3, [r0, #18]
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 80009f6:	2300      	movs	r3, #0
 80009f8:	9500      	str	r5, [sp, #0]
 80009fa:	f7ff fbd1 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
    *buffer++ = (s * 13) >> 3;
 80009fe:	210d      	movs	r1, #13
  int16_t shift = -(parameter_[1] - 32767) >> 4;
 8000a00:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8000a04:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 8000a08:	337f      	adds	r3, #127	; 0x7f
 8000a0a:	111a      	asrs	r2, r3, #4
  while (size--) {
 8000a0c:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 8000a10:	d307      	bcc.n	8000a22 <_ZN6braids15MacroOscillator10RenderCSawEPKhPsj+0x4c>
    int32_t s = *buffer + shift;
 8000a12:	f9b6 3000 	ldrsh.w	r3, [r6]
 8000a16:	4413      	add	r3, r2
    *buffer++ = (s * 13) >> 3;
 8000a18:	434b      	muls	r3, r1
 8000a1a:	10db      	asrs	r3, r3, #3
 8000a1c:	f826 3b02 	strh.w	r3, [r6], #2
  while (size--) {
 8000a20:	e7f4      	b.n	8000a0c <_ZN6braids15MacroOscillator10RenderCSawEPKhPsj+0x36>
}
 8000a22:	b002      	add	sp, #8
 8000a24:	bd70      	pop	{r4, r5, r6, pc}

08000a26 <_ZN6braids15MacroOscillator15RenderSawSquareEPKhPsj>:
    size_t size) {
 8000a26:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000a2a:	461d      	mov	r5, r3
  analog_oscillator_[0].set_parameter(parameter_[0]);
 8000a2c:	f9b0 3000 	ldrsh.w	r3, [r0]
    size_t size) {
 8000a30:	4604      	mov	r4, r0
    parameter_ = parameter;
 8000a32:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
 8000a36:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
  analog_oscillator_[0].set_pitch(pitch_);
 8000a3a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    size_t size) {
 8000a3e:	4688      	mov	r8, r1
    pitch_ = pitch;
 8000a40:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
 8000a44:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
    shape_ = shape;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
 8000a4e:	2303      	movs	r3, #3
  int16_t* square_buffer = temp_buffer_;
 8000a50:	f100 0722 	add.w	r7, r0, #34	; 0x22
 8000a54:	f880 3094 	strb.w	r3, [r0, #148]	; 0x94
  analog_oscillator_[0].Render(sync, saw_buffer, NULL, size);
 8000a58:	2300      	movs	r3, #0
 8000a5a:	3058      	adds	r0, #88	; 0x58
 8000a5c:	9500      	str	r5, [sp, #0]
    size_t size) {
 8000a5e:	4616      	mov	r6, r2
  analog_oscillator_[0].Render(sync, saw_buffer, NULL, size);
 8000a60:	f7ff fb9e 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync, square_buffer, NULL, size);
 8000a64:	2300      	movs	r3, #0
 8000a66:	463a      	mov	r2, r7
 8000a68:	4641      	mov	r1, r8
 8000a6a:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8000a6e:	9500      	str	r5, [sp, #0]
 8000a70:	f7ff fb96 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  BEGIN_INTERPOLATE_PARAMETER_1
 8000a74:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8000a78:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
          *square_buffer++) * 148 >> 8;
 8000a7c:	f04f 0e94 	mov.w	lr, #148	; 0x94
  BEGIN_INTERPOLATE_PARAMETER_1
 8000a80:	1a13      	subs	r3, r2, r0
 8000a82:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000a86:	fbb2 f2f5 	udiv	r2, r2, r5
 8000a8a:	435a      	muls	r2, r3
  return (a * (65535 - balance) + b * balance) >> 16;
 8000a8c:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8000a90:	4611      	mov	r1, r2
  while (size--) {
 8000a92:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 8000a96:	d316      	bcc.n	8000ac6 <_ZN6braids15MacroOscillator15RenderSawSquareEPKhPsj+0xa0>
    INTERPOLATE_PARAMETER_1
 8000a98:	eb00 33e1 	add.w	r3, r0, r1, asr #15
    uint16_t balance = parameter_1 << 1;
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	fa1f f883 	uxth.w	r8, r3
    int16_t attenuated_square = static_cast<int32_t>(
 8000aa2:	f937 3b02 	ldrsh.w	r3, [r7], #2
 8000aa6:	f936 ab02 	ldrsh.w	sl, [r6], #2
          *square_buffer++) * 148 >> 8;
 8000aaa:	fb0e f303 	mul.w	r3, lr, r3
 8000aae:	ebac 0908 	sub.w	r9, ip, r8
 8000ab2:	fb09 f90a 	mul.w	r9, r9, sl
 8000ab6:	121b      	asrs	r3, r3, #8
 8000ab8:	fb08 9303 	mla	r3, r8, r3, r9
 8000abc:	141b      	asrs	r3, r3, #16
 8000abe:	f826 3c02 	strh.w	r3, [r6, #-2]
 8000ac2:	4411      	add	r1, r2
  while (size--) {
 8000ac4:	e7e5      	b.n	8000a92 <_ZN6braids15MacroOscillator15RenderSawSquareEPKhPsj+0x6c>
  END_INTERPOLATE_PARAMETER_1
 8000ac6:	8863      	ldrh	r3, [r4, #2]
 8000ac8:	80e3      	strh	r3, [r4, #6]
}
 8000aca:	b002      	add	sp, #8
 8000acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000ad0 <_ZN6braids15MacroOscillator9RenderSubEPKhPsj>:
    size_t size) {
 8000ad0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad4:	461d      	mov	r5, r3
  AnalogOscillatorShape base_shape = shape_ == MACRO_OSC_SHAPE_SQUARE_SUB ?
 8000ad6:	f244 234c 	movw	r3, #16972	; 0x424c
    size_t size) {
 8000ada:	4604      	mov	r4, r0
  AnalogOscillatorShape base_shape = shape_ == MACRO_OSC_SHAPE_SQUARE_SUB ?
 8000adc:	5cc3      	ldrb	r3, [r0, r3]
    parameter_ = parameter;
 8000ade:	8800      	ldrh	r0, [r0, #0]
 8000ae0:	2b05      	cmp	r3, #5
 8000ae2:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
    shape_ = shape;
 8000ae6:	f04f 0003 	mov.w	r0, #3
 8000aea:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
  int16_t octave = parameter_[1] < 16384 ? (24 << 7) : (12 << 7);
 8000aee:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
  AnalogOscillatorShape base_shape = shape_ == MACRO_OSC_SHAPE_SQUARE_SUB ?
 8000af2:	bf14      	ite	ne
 8000af4:	2301      	movne	r3, #1
 8000af6:	2303      	moveq	r3, #3
  int16_t octave = parameter_[1] < 16384 ? (24 << 7) : (12 << 7);
 8000af8:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8000afc:	bfac      	ite	ge
 8000afe:	f44f 60c0 	movge.w	r0, #1536	; 0x600
 8000b02:	f44f 6040 	movlt.w	r0, #3072	; 0xc00
    parameter_ = parameter;
 8000b06:	2700      	movs	r7, #0
    size_t size) {
 8000b08:	4689      	mov	r9, r1
    shape_ = shape;
 8000b0a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  analog_oscillator_[0].set_pitch(pitch_);
 8000b0e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    parameter_ = parameter;
 8000b12:	f8a4 7086 	strh.w	r7, [r4, #134]	; 0x86
    pitch_ = pitch;
 8000b16:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
  analog_oscillator_[1].set_pitch(pitch_ - octave);
 8000b1a:	1a1b      	subs	r3, r3, r0
 8000b1c:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8000b20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000b24:	463b      	mov	r3, r7
 8000b26:	9500      	str	r5, [sp, #0]
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 8000b28:	f104 0622 	add.w	r6, r4, #34	; 0x22
    size_t size) {
 8000b2c:	4690      	mov	r8, r2
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8000b2e:	f7ff fb37 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 8000b32:	463b      	mov	r3, r7
 8000b34:	4632      	mov	r2, r6
 8000b36:	4649      	mov	r1, r9
 8000b38:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8000b3c:	9500      	str	r5, [sp, #0]
 8000b3e:	f7ff fb2f 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  BEGIN_INTERPOLATE_PARAMETER_1
 8000b42:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8000b46:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
        ? (16383 - parameter_1) : (parameter_1 - 16384)) << 1;
 8000b4a:	f643 7eff 	movw	lr, #16383	; 0x3fff
  BEGIN_INTERPOLATE_PARAMETER_1
 8000b4e:	1bcb      	subs	r3, r1, r7
 8000b50:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000b54:	fbb1 f1f5 	udiv	r1, r1, r5
 8000b58:	4359      	muls	r1, r3
 8000b5a:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8000b5e:	4608      	mov	r0, r1
 8000b60:	f1a8 0202 	sub.w	r2, r8, #2
  while (size--) {
 8000b64:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 8000b68:	d31a      	bcc.n	8000ba0 <_ZN6braids15MacroOscillator9RenderSubEPKhPsj+0xd0>
    INTERPOLATE_PARAMETER_1
 8000b6a:	eb07 38e0 	add.w	r8, r7, r0, asr #15
 8000b6e:	fa1f f388 	uxth.w	r3, r8
    uint16_t sub_gain = (parameter_1 < 16384
 8000b72:	f5b8 4f80 	cmp.w	r8, #16384	; 0x4000
        ? (16383 - parameter_1) : (parameter_1 - 16384)) << 1;
 8000b76:	bfb4      	ite	lt
 8000b78:	ebae 0303 	sublt.w	r3, lr, r3
 8000b7c:	f5a3 4380 	subge.w	r3, r3, #16384	; 0x4000
 8000b80:	f936 ab02 	ldrsh.w	sl, [r6], #2
    uint16_t sub_gain = (parameter_1 < 16384
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	ebac 0903 	sub.w	r9, ip, r3
 8000b8c:	fb03 f30a 	mul.w	r3, r3, sl
 8000b90:	f932 8f02 	ldrsh.w	r8, [r2, #2]!
 8000b94:	4408      	add	r0, r1
 8000b96:	fb09 3308 	mla	r3, r9, r8, r3
 8000b9a:	141b      	asrs	r3, r3, #16
 8000b9c:	8013      	strh	r3, [r2, #0]
  while (size--) {
 8000b9e:	e7e1      	b.n	8000b64 <_ZN6braids15MacroOscillator9RenderSubEPKhPsj+0x94>
  END_INTERPOLATE_PARAMETER_1
 8000ba0:	8863      	ldrh	r3, [r4, #2]
 8000ba2:	80e3      	strh	r3, [r4, #6]
}
 8000ba4:	b002      	add	sp, #8
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000baa <_ZN6braids15MacroOscillator14RenderDualSyncEPKhPsj>:
    size_t size) {
 8000baa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000bae:	461d      	mov	r5, r3
  AnalogOscillatorShape base_shape = shape_ == MACRO_OSC_SHAPE_SQUARE_SYNC ?
 8000bb0:	f244 234c 	movw	r3, #16972	; 0x424c
 8000bb4:	f04f 0800 	mov.w	r8, #0
 8000bb8:	5cc3      	ldrb	r3, [r0, r3]
    size_t size) {
 8000bba:	4604      	mov	r4, r0
  AnalogOscillatorShape base_shape = shape_ == MACRO_OSC_SHAPE_SQUARE_SYNC ?
 8000bbc:	2b07      	cmp	r3, #7
 8000bbe:	bf0c      	ite	eq
 8000bc0:	2003      	moveq	r0, #3
 8000bc2:	4640      	movne	r0, r8
  analog_oscillator_[0].set_pitch(pitch_);
 8000bc4:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    shape_ = shape;
 8000bc8:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
 8000bcc:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
  analog_oscillator_[1].set_pitch(pitch_ + (parameter_[0] >> 2));
 8000bd0:	f9b4 0000 	ldrsh.w	r0, [r4]
    pitch_ = pitch;
 8000bd4:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
  analog_oscillator_[0].Render(sync, buffer, sync_buffer_, size);
 8000bd8:	f104 090a 	add.w	r9, r4, #10
  analog_oscillator_[1].set_pitch(pitch_ + (parameter_[0] >> 2));
 8000bdc:	eb03 03a0 	add.w	r3, r3, r0, asr #2
 8000be0:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
  analog_oscillator_[0].Render(sync, buffer, sync_buffer_, size);
 8000be4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000be8:	464b      	mov	r3, r9
    parameter_ = parameter;
 8000bea:	f8a4 8066 	strh.w	r8, [r4, #102]	; 0x66
 8000bee:	f8a4 8086 	strh.w	r8, [r4, #134]	; 0x86
 8000bf2:	9500      	str	r5, [sp, #0]
  analog_oscillator_[1].Render(sync_buffer_, temp_buffer_, NULL, size);
 8000bf4:	f104 0622 	add.w	r6, r4, #34	; 0x22
    size_t size) {
 8000bf8:	4617      	mov	r7, r2
  analog_oscillator_[0].Render(sync, buffer, sync_buffer_, size);
 8000bfa:	f7ff fad1 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync_buffer_, temp_buffer_, NULL, size);
 8000bfe:	4643      	mov	r3, r8
 8000c00:	4632      	mov	r2, r6
 8000c02:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8000c06:	9500      	str	r5, [sp, #0]
 8000c08:	4649      	mov	r1, r9
 8000c0a:	f7ff fac9 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  BEGIN_INTERPOLATE_PARAMETER_1
 8000c0e:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8000c12:	f9b4 c006 	ldrsh.w	ip, [r4, #6]
 8000c16:	1eba      	subs	r2, r7, #2
 8000c18:	eba0 030c 	sub.w	r3, r0, ip
 8000c1c:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8000c20:	fbb0 f0f5 	udiv	r0, r0, r5
 8000c24:	4358      	muls	r0, r3
 8000c26:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8000c2a:	4607      	mov	r7, r0
  while (size--) {
 8000c2c:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 8000c30:	d313      	bcc.n	8000c5a <_ZN6braids15MacroOscillator14RenderDualSyncEPKhPsj+0xb0>
    INTERPOLATE_PARAMETER_1
 8000c32:	eb0c 31e7 	add.w	r1, ip, r7, asr #15
 8000c36:	f936 9b02 	ldrsh.w	r9, [r6], #2
    uint16_t balance = parameter_1 << 1;
 8000c3a:	0049      	lsls	r1, r1, #1
 8000c3c:	b289      	uxth	r1, r1
 8000c3e:	ebae 0801 	sub.w	r8, lr, r1
 8000c42:	fb01 f109 	mul.w	r1, r1, r9
 8000c46:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 8000c4a:	4407      	add	r7, r0
 8000c4c:	fb08 1303 	mla	r3, r8, r3, r1
    *buffer = (Mix(*buffer, *temp_buffer, balance) >> 2) * 3;
 8000c50:	149b      	asrs	r3, r3, #18
 8000c52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000c56:	8013      	strh	r3, [r2, #0]
  while (size--) {
 8000c58:	e7e8      	b.n	8000c2c <_ZN6braids15MacroOscillator14RenderDualSyncEPKhPsj+0x82>
  END_INTERPOLATE_PARAMETER_1
 8000c5a:	8863      	ldrh	r3, [r4, #2]
 8000c5c:	80e3      	strh	r3, [r4, #6]
}
 8000c5e:	b003      	add	sp, #12
 8000c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c64 <_ZN6braids15MacroOscillator18RenderSineTriangleEPKhPsj>:
    size_t size) {
 8000c64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  int32_t attenuation_sine = 32767 - 6 * (pitch_ - (92 << 7));
 8000c68:	f06f 0c05 	mvn.w	ip, #5
 8000c6c:	f647 75ff 	movw	r5, #32767	; 0x7fff
    size_t size) {
 8000c70:	4604      	mov	r4, r0
  int32_t attenuation_sine = 32767 - 6 * (pitch_ - (92 << 7));
 8000c72:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
    size_t size) {
 8000c76:	461e      	mov	r6, r3
  int32_t attenuation_sine = 32767 - 6 * (pitch_ - (92 << 7));
 8000c78:	f5a0 5338 	sub.w	r3, r0, #11776	; 0x2e00
 8000c7c:	fb0c 5303 	mla	r3, ip, r3, r5
 8000c80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  analog_oscillator_[0].set_parameter(timbre * attenuation_sine >> 15);
 8000c84:	42ab      	cmp	r3, r5
 8000c86:	bfa8      	it	ge
 8000c88:	462b      	movge	r3, r5
  int32_t timbre = parameter_[0];
 8000c8a:	f9b4 e000 	ldrsh.w	lr, [r4]
  int32_t attenuation_tri = 32767 - 7 * (pitch_ - (80 << 7));
 8000c8e:	f5a0 5c20 	sub.w	ip, r0, #10240	; 0x2800
  analog_oscillator_[0].set_parameter(timbre * attenuation_sine >> 15);
 8000c92:	fb0e f303 	mul.w	r3, lr, r3
 8000c96:	13db      	asrs	r3, r3, #15
 8000c98:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    shape_ = shape;
 8000c9c:	2307      	movs	r3, #7
  int32_t attenuation_tri = 32767 - 7 * (pitch_ - (80 << 7));
 8000c9e:	ebac 0ccc 	sub.w	ip, ip, ip, lsl #3
 8000ca2:	44ac      	add	ip, r5
 8000ca4:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
  analog_oscillator_[1].set_parameter(timbre * attenuation_tri >> 15);
 8000ca8:	45ac      	cmp	ip, r5
 8000caa:	bfa8      	it	ge
 8000cac:	46ac      	movge	ip, r5
 8000cae:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
 8000cb2:	2306      	movs	r3, #6
    size_t size) {
 8000cb4:	4688      	mov	r8, r1
  analog_oscillator_[1].set_parameter(timbre * attenuation_tri >> 15);
 8000cb6:	fb0e fe0c 	mul.w	lr, lr, ip
 8000cba:	ea4f 3eee 	mov.w	lr, lr, asr #15
 8000cbe:	f8a4 e086 	strh.w	lr, [r4, #134]	; 0x86
    pitch_ = pitch;
 8000cc2:	f8a4 006e 	strh.w	r0, [r4, #110]	; 0x6e
 8000cc6:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    shape_ = shape;
 8000cca:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8000cce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	9600      	str	r6, [sp, #0]
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 8000cd6:	f104 0922 	add.w	r9, r4, #34	; 0x22
    size_t size) {
 8000cda:	4617      	mov	r7, r2
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8000cdc:	f7ff fa60 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync, temp_buffer_, NULL, size);
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	464a      	mov	r2, r9
 8000ce4:	4641      	mov	r1, r8
 8000ce6:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8000cea:	9600      	str	r6, [sp, #0]
 8000cec:	f7ff fa58 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  BEGIN_INTERPOLATE_PARAMETER_1
 8000cf0:	fbb5 f5f6 	udiv	r5, r5, r6
 8000cf4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8000cf8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8000cfc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d00:	1a9b      	subs	r3, r3, r2
 8000d02:	435d      	muls	r5, r3
 8000d04:	4629      	mov	r1, r5
 8000d06:	3f02      	subs	r7, #2
  while (size--) {
 8000d08:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 8000d0c:	d311      	bcc.n	8000d32 <_ZN6braids15MacroOscillator18RenderSineTriangleEPKhPsj+0xce>
    INTERPOLATE_PARAMETER_1
 8000d0e:	eb02 33e1 	add.w	r3, r2, r1, asr #15
 8000d12:	f939 8b02 	ldrsh.w	r8, [r9], #2
    uint16_t balance = parameter_1 << 1;
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	eba0 0e03 	sub.w	lr, r0, r3
 8000d1e:	fb03 f308 	mul.w	r3, r3, r8
 8000d22:	f937 cf02 	ldrsh.w	ip, [r7, #2]!
 8000d26:	4429      	add	r1, r5
 8000d28:	fb0e 330c 	mla	r3, lr, ip, r3
 8000d2c:	141b      	asrs	r3, r3, #16
 8000d2e:	803b      	strh	r3, [r7, #0]
  while (size--) {
 8000d30:	e7ea      	b.n	8000d08 <_ZN6braids15MacroOscillator18RenderSineTriangleEPKhPsj+0xa4>
  END_INTERPOLATE_PARAMETER_1
 8000d32:	8863      	ldrh	r3, [r4, #2]
 8000d34:	80e3      	strh	r3, [r4, #6]
}
 8000d36:	b003      	add	sp, #12
 8000d38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000d3c <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj>:
    size_t size) {
 8000d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d40:	4617      	mov	r7, r2
  if (parameter_[0] <= 10922) {
 8000d42:	f642 22aa 	movw	r2, #10922	; 0x2aaa
    size_t size) {
 8000d46:	461e      	mov	r6, r3
  analog_oscillator_[0].set_pitch(pitch_);
 8000d48:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    size_t size) {
 8000d4c:	b087      	sub	sp, #28
    pitch_ = pitch;
 8000d4e:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
 8000d52:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
  if (parameter_[0] <= 10922) {
 8000d56:	f9b0 3000 	ldrsh.w	r3, [r0]
    size_t size) {
 8000d5a:	4604      	mov	r4, r0
  if (parameter_[0] <= 10922) {
 8000d5c:	4293      	cmp	r3, r2
    size_t size) {
 8000d5e:	4689      	mov	r9, r1
 8000d60:	f04f 0500 	mov.w	r5, #0
  if (parameter_[0] <= 10922) {
 8000d64:	f300 808b 	bgt.w	8000e7e <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x142>
    shape_ = shape;
 8000d68:	2204      	movs	r2, #4
    parameter_ = parameter;
 8000d6a:	f8a0 5066 	strh.w	r5, [r0, #102]	; 0x66
 8000d6e:	f8a0 5086 	strh.w	r5, [r0, #134]	; 0x86
    shape_ = shape;
 8000d72:	f880 5094 	strb.w	r5, [r0, #148]	; 0x94
    balance = parameter_[0] * 6;
 8000d76:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8000d7a:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
 8000d7e:	006d      	lsls	r5, r5, #1
    balance = 65535 - (parameter_[0] - 10923) * 6;
 8000d80:	b2ad      	uxth	r5, r5
  analog_oscillator_[0].Render(sync, shape_1, NULL, size);
 8000d82:	4649      	mov	r1, r9
 8000d84:	2300      	movs	r3, #0
 8000d86:	463a      	mov	r2, r7
 8000d88:	f104 0058 	add.w	r0, r4, #88	; 0x58
  int16_t* shape_2 = temp_buffer_;
 8000d8c:	f104 0822 	add.w	r8, r4, #34	; 0x22
  analog_oscillator_[0].Render(sync, shape_1, NULL, size);
 8000d90:	9600      	str	r6, [sp, #0]
 8000d92:	f7ff fa05 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  analog_oscillator_[1].Render(sync, shape_2, NULL, size);
 8000d96:	4649      	mov	r1, r9
 8000d98:	2300      	movs	r3, #0
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8000da0:	9600      	str	r6, [sp, #0]
 8000da2:	f7ff f9fd 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  int32_t lp_cutoff = pitch_ - (parameter_[1] >> 1) + 128 * 128;
 8000da6:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8000daa:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
  uint32_t a = table[phase >> 24];
 8000dae:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8000edc <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x1a0>
 8000db2:	eba2 0361 	sub.w	r3, r2, r1, asr #1
 8000db6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
  int32_t f = Interpolate824(lut_svf_cutoff, lp_cutoff << 17);
 8000dba:	f383 030f 	usat	r3, #15, r3
 8000dbe:	045b      	lsls	r3, r3, #17
 8000dc0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8000dc4:	f83c 001e 	ldrh.w	r0, [ip, lr, lsl #1]
  uint32_t b = table[(phase >> 24) + 1];
 8000dc8:	f10c 0c02 	add.w	ip, ip, #2
 8000dcc:	f83c c01e 	ldrh.w	ip, [ip, lr, lsl #1]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	ebac 0c00 	sub.w	ip, ip, r0
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	fb03 f30c 	mul.w	r3, r3, ip
 8000ddc:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  if (pitch_ > (80 << 7)) {
 8000de0:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
  int32_t f = Interpolate824(lut_svf_cutoff, lp_cutoff << 17);
 8000de4:	b283      	uxth	r3, r0
    fuzz_amount -= (pitch_ - (80 << 7)) << 4;
 8000de6:	bfc8      	it	gt
 8000de8:	f5a2 5220 	subgt.w	r2, r2, #10240	; 0x2800
  int32_t f = Interpolate824(lut_svf_cutoff, lp_cutoff << 17);
 8000dec:	9303      	str	r3, [sp, #12]
  int32_t fuzz_amount = parameter_[1] << 1;
 8000dee:	ea4f 0341 	mov.w	r3, r1, lsl #1
    fuzz_amount -= (pitch_ - (80 << 7)) << 4;
 8000df2:	bfc4      	itt	gt
 8000df4:	eba3 1302 	subgt.w	r3, r3, r2, lsl #4
 8000df8:	ea23 73e3 	bicgt.w	r3, r3, r3, asr #31
  return (a * (65535 - balance) + b * balance) >> 16;
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	f647 7bff 	movw	fp, #32767	; 0x7fff
 8000e04:	f5c5 497f 	rsb	r9, r5, #65280	; 0xff00
 8000e08:	b29b      	uxth	r3, r3
  int32_t lp_state = lp_state_;
 8000e0a:	f8d4 c054 	ldr.w	ip, [r4, #84]	; 0x54
  int32_t a = table[index >> 8];
 8000e0e:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8000ee0 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x1a4>
  return (a * (65535 - balance) + b * balance) >> 16;
 8000e12:	f109 09ff 	add.w	r9, r9, #255	; 0xff
 8000e16:	9204      	str	r2, [sp, #16]
 8000e18:	9305      	str	r3, [sp, #20]
  while (size--) {
 8000e1a:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 8000e1e:	d353      	bcc.n	8000ec8 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x18c>
 8000e20:	f938 3b02 	ldrsh.w	r3, [r8], #2
 8000e24:	f937 2b02 	ldrsh.w	r2, [r7], #2
 8000e28:	436b      	muls	r3, r5
 8000e2a:	fb09 3202 	mla	r2, r9, r2, r3
    lp_state += (sample - lp_state) * f >> 15;
 8000e2e:	9903      	ldr	r1, [sp, #12]
 8000e30:	1412      	asrs	r2, r2, #16
 8000e32:	eba2 030c 	sub.w	r3, r2, ip
 8000e36:	434b      	muls	r3, r1
 8000e38:	eb0c 3ce3 	add.w	ip, ip, r3, asr #15
 8000e3c:	45dc      	cmp	ip, fp
 8000e3e:	bfa8      	it	ge
 8000e40:	46dc      	movge	ip, fp
 8000e42:	4b24      	ldr	r3, [pc, #144]	; (8000ed4 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x198>)
  int32_t b = table[(index >> 8) + 1];
 8000e44:	4824      	ldr	r0, [pc, #144]	; (8000ed8 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x19c>)
 8000e46:	459c      	cmp	ip, r3
 8000e48:	bfb8      	it	lt
 8000e4a:	469c      	movlt	ip, r3
    shifted_sample = lp_state + 32768;
 8000e4c:	f50c 4100 	add.w	r1, ip, #32768	; 0x8000
  int32_t a = table[index >> 8];
 8000e50:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8000e54:	f93a 301e 	ldrsh.w	r3, [sl, lr, lsl #1]
  int32_t b = table[(index >> 8) + 1];
 8000e58:	f930 e01e 	ldrsh.w	lr, [r0, lr, lsl #1]
  return a + ((b - a) * static_cast<int32_t>(index & 0xff) >> 8);
 8000e5c:	b2c9      	uxtb	r1, r1
 8000e5e:	ebae 0e03 	sub.w	lr, lr, r3
 8000e62:	fb01 f10e 	mul.w	r1, r1, lr
 8000e66:	eb03 2121 	add.w	r1, r3, r1, asr #8
  return (a * (65535 - balance) + b * balance) >> 16;
 8000e6a:	9b05      	ldr	r3, [sp, #20]
 8000e6c:	b209      	sxth	r1, r1
 8000e6e:	435a      	muls	r2, r3
 8000e70:	9b04      	ldr	r3, [sp, #16]
 8000e72:	fb03 2101 	mla	r1, r3, r1, r2
 8000e76:	1409      	asrs	r1, r1, #16
 8000e78:	f827 1c02 	strh.w	r1, [r7, #-2]
  while (size--) {
 8000e7c:	e7cd      	b.n	8000e1a <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0xde>
  } else if (parameter_[0] <= 21845) {
 8000e7e:	f245 5255 	movw	r2, #21845	; 0x5555
 8000e82:	4293      	cmp	r3, r2
 8000e84:	dc10      	bgt.n	8000ea8 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x16c>
 8000e86:	2203      	movs	r2, #3
    balance = 65535 - (parameter_[0] - 10923) * 6;
 8000e88:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 8000e8c:	3b2b      	subs	r3, #43	; 0x2b
 8000e8e:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
    parameter_ = parameter;
 8000e92:	f8a0 5066 	strh.w	r5, [r0, #102]	; 0x66
 8000e96:	f8a0 5086 	strh.w	r5, [r0, #134]	; 0x86
    shape_ = shape;
 8000e9a:	f880 5094 	strb.w	r5, [r0, #148]	; 0x94
 8000e9e:	005d      	lsls	r5, r3, #1
 8000ea0:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
 8000ea4:	3d01      	subs	r5, #1
 8000ea6:	e76b      	b.n	8000d80 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x44>
    analog_oscillator_[0].set_parameter((parameter_[0] - 21846) * 3);
 8000ea8:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 8000eac:	3b56      	subs	r3, #86	; 0x56
 8000eae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    parameter_ = parameter;
 8000eb2:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
    shape_ = shape;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
 8000ebc:	2305      	movs	r3, #5
    parameter_ = parameter;
 8000ebe:	f8a0 5086 	strh.w	r5, [r0, #134]	; 0x86
    shape_ = shape;
 8000ec2:	f880 3094 	strb.w	r3, [r0, #148]	; 0x94
 8000ec6:	e75c      	b.n	8000d82 <_ZN6braids15MacroOscillator11RenderMorphEPKhPsj+0x46>
  lp_state_ = lp_state;
 8000ec8:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
}
 8000ecc:	b007      	add	sp, #28
 8000ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ed2:	bf00      	nop
 8000ed4:	ffff8001 	.word	0xffff8001
 8000ed8:	08004ccc 	.word	0x08004ccc
 8000edc:	080048c6 	.word	0x080048c6
 8000ee0:	08004cca 	.word	0x08004cca

08000ee4 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj>:
    size_t size) {
 8000ee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ee8:	461d      	mov	r5, r3
  switch (shape_) {
 8000eea:	f244 234c 	movw	r3, #16972	; 0x424c
 8000eee:	5cc3      	ldrb	r3, [r0, r3]
    size_t size) {
 8000ef0:	4614      	mov	r4, r2
 8000ef2:	3b09      	subs	r3, #9
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	bf98      	it	ls
 8000efa:	4a3c      	ldrls	r2, [pc, #240]	; (8000fec <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0x108>)
 8000efc:	460e      	mov	r6, r1
 8000efe:	bf98      	it	ls
 8000f00:	5cd1      	ldrbls	r1, [r2, r3]
    int16_t detune_1 = intervals[parameter_[i] >> 9];
 8000f02:	f9b0 3000 	ldrsh.w	r3, [r0]
 8000f06:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8000ff0 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0x10c>
 8000f0a:	ea4f 2e63 	mov.w	lr, r3, asr #9
 8000f0e:	f93c 801e 	ldrsh.w	r8, [ip, lr, lsl #1]
    int16_t detune_2 = intervals[((parameter_[i] >> 8) + 1) >> 1];
 8000f12:	ea4f 2e23 	mov.w	lr, r3, asr #8
 8000f16:	f10e 0e01 	add.w	lr, lr, #1
 8000f1a:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    int16_t detune = detune_1 + ((detune_2 - detune_1) * xfade >> 16);
 8000f1e:	f93c e01e 	ldrsh.w	lr, [ip, lr, lsl #1]
    uint16_t xfade = parameter_[i] << 8;
 8000f22:	ea4f 2303 	mov.w	r3, r3, lsl #8
    int16_t detune = detune_1 + ((detune_2 - detune_1) * xfade >> 16);
 8000f26:	ebae 0e08 	sub.w	lr, lr, r8
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	fb03 f30e 	mul.w	r3, r3, lr
  analog_oscillator_[0].set_pitch(pitch_);
 8000f30:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  switch (shape_) {
 8000f34:	bf88      	it	hi
 8000f36:	2105      	movhi	r1, #5
    pitch_ = pitch;
 8000f38:	f8a0 706e 	strh.w	r7, [r0, #110]	; 0x6e
    analog_oscillator_[i + 1].set_pitch(pitch_ + detune);
 8000f3c:	4447      	add	r7, r8
 8000f3e:	eb07 4323 	add.w	r3, r7, r3, asr #16
 8000f42:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
    int16_t detune_1 = intervals[parameter_[i] >> 9];
 8000f46:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    parameter_ = parameter;
 8000f4a:	2200      	movs	r2, #0
    int16_t detune_2 = intervals[((parameter_[i] >> 8) + 1) >> 1];
 8000f4c:	ea4f 2e23 	mov.w	lr, r3, asr #8
 8000f50:	f10e 0e01 	add.w	lr, lr, #1
    int16_t detune_1 = intervals[parameter_[i] >> 9];
 8000f54:	125f      	asrs	r7, r3, #9
    int16_t detune_2 = intervals[((parameter_[i] >> 8) + 1) >> 1];
 8000f56:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    int16_t detune_1 = intervals[parameter_[i] >> 9];
 8000f5a:	f93c 7017 	ldrsh.w	r7, [ip, r7, lsl #1]
    int16_t detune = detune_1 + ((detune_2 - detune_1) * xfade >> 16);
 8000f5e:	f93c c01e 	ldrsh.w	ip, [ip, lr, lsl #1]
    uint16_t xfade = parameter_[i] << 8;
 8000f62:	021b      	lsls	r3, r3, #8
    int16_t detune = detune_1 + ((detune_2 - detune_1) * xfade >> 16);
 8000f64:	ebac 0c07 	sub.w	ip, ip, r7
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	fb03 f30c 	mul.w	r3, r3, ip
    analog_oscillator_[i + 1].set_pitch(pitch_ + detune);
 8000f6e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8000f72:	f8a0 2066 	strh.w	r2, [r0, #102]	; 0x66
 8000f76:	4467      	add	r7, ip
 8000f78:	eb07 4323 	add.w	r3, r7, r3, asr #16
    pitch_ = pitch;
 8000f7c:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
  std::fill(&buffer[0], &buffer[size], 0);
 8000f80:	4623      	mov	r3, r4
    parameter_ = parameter;
 8000f82:	f8a0 2086 	strh.w	r2, [r0, #134]	; 0x86
 8000f86:	f8a0 20a6 	strh.w	r2, [r0, #166]	; 0xa6
    shape_ = shape;
 8000f8a:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 8000f8e:	f880 1094 	strb.w	r1, [r0, #148]	; 0x94
 8000f92:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
 8000f96:	eb04 0845 	add.w	r8, r4, r5, lsl #1
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 8000f9a:	4598      	cmp	r8, r3
 8000f9c:	d002      	beq.n	8000fa4 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xc0>
	*__first = __tmp;
 8000f9e:	f823 2b02 	strh.w	r2, [r3], #2
 8000fa2:	e7fa      	b.n	8000f9a <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xb6>
      buffer[j] += temp_buffer_[j] * 21 >> 6;
 8000fa4:	f04f 0b15 	mov.w	fp, #21
 8000fa8:	f100 0758 	add.w	r7, r0, #88	; 0x58
 8000fac:	f100 0ab8 	add.w	sl, r0, #184	; 0xb8
    analog_oscillator_[i].Render(sync, temp_buffer_, NULL, size);
 8000fb0:	f100 0922 	add.w	r9, r0, #34	; 0x22
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	4638      	mov	r0, r7
 8000fb8:	9500      	str	r5, [sp, #0]
 8000fba:	464a      	mov	r2, r9
 8000fbc:	4631      	mov	r1, r6
 8000fbe:	f7ff f8ef 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
 8000fc2:	4648      	mov	r0, r9
 8000fc4:	4623      	mov	r3, r4
    for (size_t j = 0; j < size; ++j) {
 8000fc6:	4598      	cmp	r8, r3
 8000fc8:	d00a      	beq.n	8000fe0 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xfc>
      buffer[j] += temp_buffer_[j] * 21 >> 6;
 8000fca:	f930 1b02 	ldrsh.w	r1, [r0], #2
 8000fce:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fd2:	fb0b f101 	mul.w	r1, fp, r1
 8000fd6:	eb02 12a1 	add.w	r2, r2, r1, asr #6
 8000fda:	f823 2b02 	strh.w	r2, [r3], #2
    for (size_t j = 0; j < size; ++j) {
 8000fde:	e7f2      	b.n	8000fc6 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xe2>
 8000fe0:	3720      	adds	r7, #32
  for (size_t i = 0; i < 3; ++i) {
 8000fe2:	4557      	cmp	r7, sl
 8000fe4:	d1e6      	bne.n	8000fb4 <_ZN6braids15MacroOscillator12RenderTripleEPKhPsj+0xd0>
}
 8000fe6:	b003      	add	sp, #12
 8000fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fec:	0800463e 	.word	0x0800463e
 8000ff0:	08004642 	.word	0x08004642

08000ff4 <_ZN6braids15MacroOscillator13RenderSawCombEPKhPsj>:
}

void MacroOscillator::RenderSawComb(
  const uint8_t* sync,
  int16_t* buffer,
  size_t size) {
 8000ff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000ff6:	461d      	mov	r5, r3
    parameter_ = parameter;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
    pitch_ = pitch;
 8001000:	8900      	ldrh	r0, [r0, #8]
    shape_ = shape;
 8001002:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    pitch_ = pitch;
 8001006:	f8a4 006e 	strh.w	r0, [r4, #110]	; 0x6e
  analog_oscillator_[0].set_parameter(0);
  analog_oscillator_[0].set_pitch(pitch_);
  analog_oscillator_[0].set_shape(OSC_SHAPE_SAW);
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 800100a:	9500      	str	r5, [sp, #0]
 800100c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  size_t size) {
 8001010:	4617      	mov	r7, r2
 8001012:	460e      	mov	r6, r1
  analog_oscillator_[0].Render(sync, buffer, NULL, size);
 8001014:	f7ff f8c4 	bl	80001a0 <_ZN6braids16AnalogOscillator6RenderEPKhPsPhj>
  
  digital_oscillator_.set_parameters(parameter_[0], parameter_[1]);
 8001018:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  }

  inline void set_parameters(
      int16_t parameter_1,
      int16_t parameter_2) {
    parameter_[0] = parameter_1;
 800101c:	8822      	ldrh	r2, [r4, #0]
    parameter_[1] = parameter_2;
 800101e:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
    if (pitch_ > (90 << 7) && pitch > (90 << 7)) {
 8001022:	f9b4 30d0 	ldrsh.w	r3, [r4, #208]	; 0xd0
    parameter_[0] = parameter_1;
 8001026:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
    if (pitch_ > (90 << 7) && pitch > (90 << 7)) {
 800102a:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 800102e:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
  digital_oscillator_.set_pitch(pitch_);
 8001032:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8001036:	dd11      	ble.n	800105c <_ZN6braids15MacroOscillator13RenderSawCombEPKhPsj+0x68>
 8001038:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 800103c:	dd0e      	ble.n	800105c <_ZN6braids15MacroOscillator13RenderSawCombEPKhPsj+0x68>
      pitch_ = (static_cast<int32_t>(pitch_) + pitch) >> 1;
 800103e:	4413      	add	r3, r2
 8001040:	105b      	asrs	r3, r3, #1
 8001042:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
    shape_ = shape;
 8001046:	2302      	movs	r3, #2
  digital_oscillator_.set_shape(OSC_SHAPE_COMB_FILTER);
  digital_oscillator_.Render(sync, buffer, size);
 8001048:	463a      	mov	r2, r7
 800104a:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
 800104e:	4631      	mov	r1, r6
 8001050:	462b      	mov	r3, r5
}
 8001052:	b003      	add	sp, #12
 8001054:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  digital_oscillator_.Render(sync, buffer, size);
 8001058:	f7ff bbfa 	b.w	8000850 <_ZN6braids17DigitalOscillator6RenderEPKhPsj>
      pitch_ = pitch;
 800105c:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
 8001060:	e7f1      	b.n	8001046 <_ZN6braids15MacroOscillator13RenderSawCombEPKhPsj+0x52>

08001062 <_ZN6braids15MacroOscillator13RenderDigitalEPKhPsj>:
    size_t size) {
 8001062:	b470      	push	{r4, r5, r6}
  digital_oscillator_.set_parameters(parameter_[0], parameter_[1]);
 8001064:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
    parameter_[0] = parameter_1;
 8001068:	8805      	ldrh	r5, [r0, #0]
    parameter_[1] = parameter_2;
 800106a:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
    if (pitch_ > (90 << 7) && pitch > (90 << 7)) {
 800106e:	f9b0 40d0 	ldrsh.w	r4, [r0, #208]	; 0xd0
    parameter_[0] = parameter_1;
 8001072:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
    if (pitch_ > (90 << 7) && pitch > (90 << 7)) {
 8001076:	f5b4 5f34 	cmp.w	r4, #11520	; 0x2d00
 800107a:	f100 06b8 	add.w	r6, r0, #184	; 0xb8
  digital_oscillator_.set_pitch(pitch_);
 800107e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8001082:	dd10      	ble.n	80010a6 <_ZN6braids15MacroOscillator13RenderDigitalEPKhPsj+0x44>
 8001084:	f5b5 5f34 	cmp.w	r5, #11520	; 0x2d00
 8001088:	dd0d      	ble.n	80010a6 <_ZN6braids15MacroOscillator13RenderDigitalEPKhPsj+0x44>
      pitch_ = (static_cast<int32_t>(pitch_) + pitch) >> 1;
 800108a:	442c      	add	r4, r5
 800108c:	1064      	asrs	r4, r4, #1
 800108e:	f8a0 40d0 	strh.w	r4, [r0, #208]	; 0xd0
      shape_ - MACRO_OSC_SHAPE_TRIPLE_RING_MOD));
 8001092:	f244 244c 	movw	r4, #16972	; 0x424c
 8001096:	5d04      	ldrb	r4, [r0, r4]
 8001098:	3c0d      	subs	r4, #13
    shape_ = shape;
 800109a:	f880 40d5 	strb.w	r4, [r0, #213]	; 0xd5
  digital_oscillator_.Render(sync, buffer, size);
 800109e:	4630      	mov	r0, r6
}
 80010a0:	bc70      	pop	{r4, r5, r6}
  digital_oscillator_.Render(sync, buffer, size);
 80010a2:	f7ff bbd5 	b.w	8000850 <_ZN6braids17DigitalOscillator6RenderEPKhPsj>
      pitch_ = pitch;
 80010a6:	f8a0 50d0 	strh.w	r5, [r0, #208]	; 0xd0
 80010aa:	e7f2      	b.n	8001092 <_ZN6braids15MacroOscillator13RenderDigitalEPKhPsj+0x30>

080010ac <_ZN6braids15MacroOscillator6RenderEPKhPsj>:
    size_t size) {
 80010ac:	b4f0      	push	{r4, r5, r6, r7}
  RenderFn fn = fn_table_[shape_];
 80010ae:	f244 254c 	movw	r5, #16972	; 0x424c
 80010b2:	4c09      	ldr	r4, [pc, #36]	; (80010d8 <_ZN6braids15MacroOscillator6RenderEPKhPsj+0x2c>)
 80010b4:	5d45      	ldrb	r5, [r0, r5]
 80010b6:	eb04 06c5 	add.w	r6, r4, r5, lsl #3
 80010ba:	6876      	ldr	r6, [r6, #4]
 80010bc:	f854 4035 	ldr.w	r4, [r4, r5, lsl #3]
  (this->*fn)(sync, buffer, size);
 80010c0:	1075      	asrs	r5, r6, #1
 80010c2:	07f6      	lsls	r6, r6, #31
 80010c4:	eb00 0705 	add.w	r7, r0, r5
 80010c8:	bf44      	itt	mi
 80010ca:	5940      	ldrmi	r0, [r0, r5]
 80010cc:	5904      	ldrmi	r4, [r0, r4]
 80010ce:	4638      	mov	r0, r7
 80010d0:	46a4      	mov	ip, r4
}
 80010d2:	bcf0      	pop	{r4, r5, r6, r7}
  (this->*fn)(sync, buffer, size);
 80010d4:	4760      	bx	ip
 80010d6:	bf00      	nop
 80010d8:	20000118 	.word	0x20000118

080010dc <_ZN6braids9Quantizer4InitEv>:
#include <cstdlib>

namespace braids {

void Quantizer::Init() {
  enabled_ = true;
 80010dc:	2301      	movs	r3, #1
 80010de:	7003      	strb	r3, [r0, #0]
  codeword_ = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
  previous_boundary_ = 0;
 80010e6:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  next_boundary_ = 0;
 80010ea:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 80010ee:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80010f2:	3002      	adds	r0, #2
  for (int16_t i = 0; i < 128; ++i) {
    codebook_[i] = (i - 64) << 7;
 80010f4:	f820 3b02 	strh.w	r3, [r0], #2
 80010f8:	3380      	adds	r3, #128	; 0x80
 80010fa:	b29b      	uxth	r3, r3
  for (int16_t i = 0; i < 128; ++i) {
 80010fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001100:	d1f8      	bne.n	80010f4 <_ZN6braids9Quantizer4InitEv+0x18>
  }
}
 8001102:	4770      	bx	lr

08001104 <_ZN6braids9Quantizer9ConfigureEPKssj>:

void Quantizer::Configure(
    const int16_t* notes,
    int16_t span,
    size_t num_notes) {
 8001104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  enabled_ = notes != NULL && num_notes != 0 && span != 0;
 8001108:	b3a1      	cbz	r1, 8001174 <_ZN6braids9Quantizer9ConfigureEPKssj+0x70>
 800110a:	b39b      	cbz	r3, 8001174 <_ZN6braids9Quantizer9ConfigureEPKssj+0x70>
 800110c:	b392      	cbz	r2, 8001174 <_ZN6braids9Quantizer9ConfigureEPKssj+0x70>
 800110e:	2401      	movs	r4, #1
 8001110:	4607      	mov	r7, r0
 8001112:	f807 4b82 	strb.w	r4, [r7], #130
  if (enabled_) {
    int32_t octave = 0;
    size_t note = 0;
 8001116:	2400      	movs	r4, #0
 8001118:	f647 78ff 	movw	r8, #32767	; 0x7fff
    int32_t octave = 0;
 800111c:	4626      	mov	r6, r4
    int16_t root = 0;
    for (int32_t i = 0; i < 64; ++i) {
      int32_t up = root + notes[note] + span * octave;
      int32_t down = root + notes[num_notes - 1 - note] + (-octave - 1) * span;
 800111e:	f103 4e00 	add.w	lr, r3, #2147483648	; 0x80000000
      CLIP(up)
      CLIP(down)
      codebook_[64 + i] = up;
 8001122:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800117c <_ZN6braids9Quantizer9ConfigureEPKssj+0x78>
 8001126:	f100 0c80 	add.w	ip, r0, #128	; 0x80
      int32_t down = root + notes[num_notes - 1 - note] + (-octave - 1) * span;
 800112a:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800112e:	ebae 0504 	sub.w	r5, lr, r4
 8001132:	f931 b015 	ldrsh.w	fp, [r1, r5, lsl #1]
 8001136:	43f5      	mvns	r5, r6
      int32_t up = root + notes[note] + span * octave;
 8001138:	f931 a014 	ldrsh.w	sl, [r1, r4, lsl #1]
      int32_t down = root + notes[num_notes - 1 - note] + (-octave - 1) * span;
 800113c:	fb02 b505 	mla	r5, r2, r5, fp
      int32_t up = root + notes[note] + span * octave;
 8001140:	fb06 aa02 	mla	sl, r6, r2, sl
 8001144:	45c2      	cmp	sl, r8
 8001146:	bfa8      	it	ge
 8001148:	46c2      	movge	sl, r8
 800114a:	4545      	cmp	r5, r8
 800114c:	bfa8      	it	ge
 800114e:	4645      	movge	r5, r8
      codebook_[64 + i] = up;
 8001150:	45ca      	cmp	sl, r9
 8001152:	bfb8      	it	lt
 8001154:	46ca      	movlt	sl, r9
      codebook_[64 - i - 1] = down;
 8001156:	454d      	cmp	r5, r9
 8001158:	bfb8      	it	lt
 800115a:	464d      	movlt	r5, r9
      ++note;
 800115c:	3401      	adds	r4, #1
      if (note >= num_notes) {
 800115e:	42a3      	cmp	r3, r4
      codebook_[64 + i] = up;
 8001160:	f827 ab02 	strh.w	sl, [r7], #2
      codebook_[64 - i - 1] = down;
 8001164:	f82c 5902 	strh.w	r5, [ip], #-2
        note = 0;
        ++octave;
 8001168:	bf9c      	itt	ls
 800116a:	3601      	addls	r6, #1
        note = 0;
 800116c:	2400      	movls	r4, #0
    for (int32_t i = 0; i < 64; ++i) {
 800116e:	4560      	cmp	r0, ip
 8001170:	d1dd      	bne.n	800112e <_ZN6braids9Quantizer9ConfigureEPKssj+0x2a>
 8001172:	e001      	b.n	8001178 <_ZN6braids9Quantizer9ConfigureEPKssj+0x74>
  enabled_ = notes != NULL && num_notes != 0 && span != 0;
 8001174:	2300      	movs	r3, #0
 8001176:	7003      	strb	r3, [r0, #0]
      }
    }
  }
}
 8001178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800117c:	ffff8001 	.word	0xffff8001

08001180 <_ZN6braids9Quantizer7ProcessEll>:

int32_t Quantizer::Process(int32_t pitch, int32_t root) {
  if (!enabled_) {
 8001180:	7803      	ldrb	r3, [r0, #0]
int32_t Quantizer::Process(int32_t pitch, int32_t root) {
 8001182:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!enabled_) {
 8001184:	b15b      	cbz	r3, 800119e <_ZN6braids9Quantizer7ProcessEll+0x1e>
    return pitch;
  }

  pitch -= root;
  if (pitch >= previous_boundary_ && pitch <= next_boundary_) {
 8001186:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
  pitch -= root;
 800118a:	1a89      	subs	r1, r1, r2
  if (pitch >= previous_boundary_ && pitch <= next_boundary_) {
 800118c:	428b      	cmp	r3, r1
 800118e:	dc08      	bgt.n	80011a2 <_ZN6braids9Quantizer7ProcessEll+0x22>
 8001190:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8001194:	428b      	cmp	r3, r1
 8001196:	db04      	blt.n	80011a2 <_ZN6braids9Quantizer7ProcessEll+0x22>
    // We're still in the voronoi cell for the active codeword.
    pitch = codeword_;
 8001198:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    // Enlarge the current voronoi cell a bit for hysteresis.
    previous_boundary_ = (9 * codebook_[q - 1] + 7 * codeword_) >> 4;
    next_boundary_ = (9 * codebook_[q + 1] + 7 * codeword_) >> 4;
    pitch = codeword_;
  }
  pitch += root;
 800119c:	4411      	add	r1, r2
  return pitch;
}
 800119e:	4608      	mov	r0, r1
 80011a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 80011a2:	247b      	movs	r4, #123	; 0x7b
        static_cast<int16_t>(pitch)) - &codebook_[0];
 80011a4:	b20f      	sxth	r7, r1
    int16_t upper_bound_index = std::upper_bound(
 80011a6:	f100 0308 	add.w	r3, r0, #8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 80011aa:	2c00      	cmp	r4, #0
 80011ac:	dd0c      	ble.n	80011c8 <_ZN6braids9Quantizer7ProcessEll+0x48>
	{
	  _DistanceType __half = __len >> 1;
 80011ae:	1065      	asrs	r5, r4, #1
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__val, __middle))
 80011b0:	f933 c015 	ldrsh.w	ip, [r3, r5, lsl #1]
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
 80011b4:	eb03 0645 	add.w	r6, r3, r5, lsl #1
 80011b8:	45bc      	cmp	ip, r7
 80011ba:	dc03      	bgt.n	80011c4 <_ZN6braids9Quantizer7ProcessEll+0x44>
	    __len = __half;
	  else
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 80011bc:	1b64      	subs	r4, r4, r5
	      ++__first;
 80011be:	1cb3      	adds	r3, r6, #2
	      __len = __len - __half - 1;
 80011c0:	3c01      	subs	r4, #1
 80011c2:	e7f2      	b.n	80011aa <_ZN6braids9Quantizer7ProcessEll+0x2a>
	  _DistanceType __half = __len >> 1;
 80011c4:	462c      	mov	r4, r5
 80011c6:	e7f0      	b.n	80011aa <_ZN6braids9Quantizer7ProcessEll+0x2a>
    int16_t q = -1;
 80011c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    int16_t best_distance = 16384;
 80011cc:	f44f 4680 	mov.w	r6, #16384	; 0x4000
        static_cast<int16_t>(pitch)) - &codebook_[0];
 80011d0:	1c84      	adds	r4, r0, #2
 80011d2:	1b1b      	subs	r3, r3, r4
 80011d4:	105b      	asrs	r3, r3, #1
 80011d6:	b21f      	sxth	r7, r3
    int16_t lower_bound_index = upper_bound_index - 2;
 80011d8:	3b02      	subs	r3, #2
 80011da:	b21b      	sxth	r3, r3
    for (int16_t i = lower_bound_index; i <= upper_bound_index; ++i) {
 80011dc:	42bb      	cmp	r3, r7
 80011de:	dc11      	bgt.n	8001204 <_ZN6braids9Quantizer7ProcessEll+0x84>
      int16_t distance = abs(pitch - codebook_[i]);
 80011e0:	eb00 0443 	add.w	r4, r0, r3, lsl #1
 80011e4:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 80011e8:	1b0c      	subs	r4, r1, r4
 80011ea:	2c00      	cmp	r4, #0
 80011ec:	bfb8      	it	lt
 80011ee:	4264      	neglt	r4, r4
 80011f0:	b224      	sxth	r4, r4
      if (distance < best_distance) {
 80011f2:	42a6      	cmp	r6, r4
 80011f4:	bfc8      	it	gt
 80011f6:	461d      	movgt	r5, r3
 80011f8:	f103 0301 	add.w	r3, r3, #1
 80011fc:	bfc8      	it	gt
 80011fe:	4626      	movgt	r6, r4
 8001200:	b21b      	sxth	r3, r3
    for (int16_t i = lower_bound_index; i <= upper_bound_index; ++i) {
 8001202:	e7eb      	b.n	80011dc <_ZN6braids9Quantizer7ProcessEll+0x5c>
 8001204:	eb00 0345 	add.w	r3, r0, r5, lsl #1
    codeword_ = codebook_[q];
 8001208:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 800120c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    previous_boundary_ = (9 * codebook_[q - 1] + 7 * codeword_) >> 4;
 8001210:	f930 4015 	ldrsh.w	r4, [r0, r5, lsl #1]
 8001214:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 8001218:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800121c:	4434      	add	r4, r6
 800121e:	1124      	asrs	r4, r4, #4
 8001220:	f8c0 4108 	str.w	r4, [r0, #264]	; 0x108
    next_boundary_ = (9 * codebook_[q + 1] + 7 * codeword_) >> 4;
 8001224:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001228:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800122c:	4433      	add	r3, r6
 800122e:	111b      	asrs	r3, r3, #4
 8001230:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8001234:	e7b2      	b.n	800119c <_ZN6braids9Quantizer7ProcessEll+0x1c>
	...

08001238 <_ZN6braids8Settings5ResetEv>:
  }
  CheckPaques();
}

void Settings::Reset() {
  memcpy(&data_, &kInitSettings, sizeof(SettingsData));
 8001238:	2260      	movs	r2, #96	; 0x60
void Settings::Reset() {
 800123a:	b508      	push	{r3, lr}
  memcpy(&data_, &kInitSettings, sizeof(SettingsData));
 800123c:	4903      	ldr	r1, [pc, #12]	; (800124c <_ZN6braids8Settings5ResetEv+0x14>)
 800123e:	f003 f98b 	bl	8004558 <memcpy>
  data_.magic_byte = 'M';
 8001242:	224d      	movs	r2, #77	; 0x4d
 8001244:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
}
 8001248:	bd08      	pop	{r3, pc}
 800124a:	bf00      	nop
 800124c:	0800de4c 	.word	0x0800de4c

08001250 <_ZN6braids8Settings11CheckPaquesEv>:
  data_.magic_byte = 'M';
  //storage.ParsimoniousSave(data_, &version_token_);
  CheckPaques();
}

void Settings::CheckPaques() {
 8001250:	b510      	push	{r4, lr}
  paques_ = !strcmp(data_.marquee_text, "49");
 8001252:	4905      	ldr	r1, [pc, #20]	; (8001268 <_ZN6braids8Settings11CheckPaquesEv+0x18>)
void Settings::CheckPaques() {
 8001254:	4604      	mov	r4, r0
  paques_ = !strcmp(data_.marquee_text, "49");
 8001256:	3028      	adds	r0, #40	; 0x28
 8001258:	f7fe ff78 	bl	800014c <strcmp>
 800125c:	fab0 f080 	clz	r0, r0
 8001260:	0940      	lsrs	r0, r0, #5
 8001262:	f884 0062 	strb.w	r0, [r4, #98]	; 0x62
}
 8001266:	bd10      	pop	{r4, pc}
 8001268:	0800dc02 	.word	0x0800dc02

0800126c <_ZN6braids8Settings4InitEv>:
void Settings::Init() {
 800126c:	b570      	push	{r4, r5, r6, lr}
 800126e:	4604      	mov	r4, r0
 8001270:	260c      	movs	r6, #12
    Reset();
 8001272:	f7ff ffe1 	bl	8001238 <_ZN6braids8Settings5ResetEv>
  for (int32_t i = 0; i <= SETTING_LAST_EDITABLE_SETTING; ++i) {
 8001276:	2200      	movs	r2, #0
  bool settings_within_range = true;
 8001278:	2301      	movs	r3, #1
        value >= setting_metadata.min_value && \
 800127a:	481b      	ldr	r0, [pc, #108]	; (80012e8 <_ZN6braids8Settings4InitEv+0x7c>)
 800127c:	b15b      	cbz	r3, 8001296 <_ZN6braids8Settings4InitEv+0x2a>
 800127e:	fb06 f102 	mul.w	r1, r6, r2
  }
  
  uint8_t GetValue(Setting setting) const {
    const uint8_t* data = static_cast<const uint8_t*>(
        static_cast<const void*>(&data_));
    return data[setting];
 8001282:	5ca5      	ldrb	r5, [r4, r2]
    settings_within_range = settings_within_range && \
 8001284:	5c0b      	ldrb	r3, [r1, r0]
 8001286:	42ab      	cmp	r3, r5
 8001288:	d82b      	bhi.n	80012e2 <_ZN6braids8Settings4InitEv+0x76>
        value <= setting_metadata.max_value;
 800128a:	4401      	add	r1, r0
        value >= setting_metadata.min_value && \
 800128c:	784b      	ldrb	r3, [r1, #1]
 800128e:	42ab      	cmp	r3, r5
 8001290:	bf34      	ite	cc
 8001292:	2300      	movcc	r3, #0
 8001294:	2301      	movcs	r3, #1
  for (int32_t i = 0; i <= SETTING_LAST_EDITABLE_SETTING; ++i) {
 8001296:	3201      	adds	r2, #1
 8001298:	2a14      	cmp	r2, #20
 800129a:	d1ef      	bne.n	800127c <_ZN6braids8Settings4InitEv+0x10>
  settings_within_range = settings_within_range && data_.magic_byte == 'M';
 800129c:	b1cb      	cbz	r3, 80012d2 <_ZN6braids8Settings4InitEv+0x66>
 800129e:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
 80012a2:	2b4d      	cmp	r3, #77	; 0x4d
 80012a4:	d115      	bne.n	80012d2 <_ZN6braids8Settings4InitEv+0x66>
    settings_within_range = settings_within_range && \
 80012a6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 80012a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012ac:	d911      	bls.n	80012d2 <_ZN6braids8Settings4InitEv+0x66>
    settings_within_range = settings_within_range && \
 80012ae:	f641 733f 	movw	r3, #7999	; 0x1f3f
 80012b2:	f643 617e 	movw	r1, #15998	; 0x3e7e
 80012b6:	8c22      	ldrh	r2, [r4, #32]
 80012b8:	441a      	add	r2, r3
 80012ba:	b292      	uxth	r2, r2
 80012bc:	428a      	cmp	r2, r1
 80012be:	d808      	bhi.n	80012d2 <_ZN6braids8Settings4InitEv+0x66>
    settings_within_range = settings_within_range && \
 80012c0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80012c2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80012c6:	d904      	bls.n	80012d2 <_ZN6braids8Settings4InitEv+0x66>
    settings_within_range = settings_within_range && \
 80012c8:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 80012ca:	4413      	add	r3, r2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	428b      	cmp	r3, r1
 80012d0:	d902      	bls.n	80012d8 <_ZN6braids8Settings4InitEv+0x6c>
    Reset();
 80012d2:	4620      	mov	r0, r4
 80012d4:	f7ff ffb0 	bl	8001238 <_ZN6braids8Settings5ResetEv>
  CheckPaques();
 80012d8:	4620      	mov	r0, r4
}
 80012da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  CheckPaques();
 80012de:	f7ff bfb7 	b.w	8001250 <_ZN6braids8Settings11CheckPaquesEv>
        value >= setting_metadata.min_value && \
 80012e2:	2300      	movs	r3, #0
 80012e4:	e7d7      	b.n	8001296 <_ZN6braids8Settings4InitEv+0x2a>
 80012e6:	bf00      	nop
 80012e8:	0800dc08 	.word	0x0800dc08

080012ec <_ZN6braids8Settings4SaveEv>:
  data_.magic_byte = 'M';
 80012ec:	234d      	movs	r3, #77	; 0x4d
 80012ee:	f880 305f 	strb.w	r3, [r0, #95]	; 0x5f
  CheckPaques();
 80012f2:	f7ff bfad 	b.w	8001250 <_ZN6braids8Settings11CheckPaquesEv>

080012f6 <_ZN6braids3Adc4InitEv>:
namespace braids {
  

void Adc::Init(void) {

}
 80012f6:	4770      	bx	lr

080012f8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f8:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fa:	2414      	movs	r4, #20
{
 80012fc:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fe:	4622      	mov	r2, r4
 8001300:	2100      	movs	r1, #0
 8001302:	a808      	add	r0, sp, #32
 8001304:	f003 f933 	bl	800456e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001308:	4622      	mov	r2, r4
 800130a:	2100      	movs	r1, #0
 800130c:	a801      	add	r0, sp, #4
 800130e:	f003 f92e 	bl	800456e <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001312:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001314:	2201      	movs	r2, #1
 8001316:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800131a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800131e:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001322:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001326:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001328:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800132a:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800132c:	f002 fce8 	bl	8003d00 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001330:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001332:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001336:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800133a:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800133c:	4621      	mov	r1, r4
 800133e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001340:	e9cd 3203 	strd	r3, r2, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001344:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001346:	f002 ff5b 	bl	8004200 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800134a:	b010      	add	sp, #64	; 0x40
 800134c:	bd10      	pop	{r4, pc}
	...

08001350 <main>:
{
 8001350:	b500      	push	{lr}
 8001352:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8001354:	f001 fa54 	bl	8002800 <HAL_Init>
  SystemClock_Config();
 8001358:	f7ff ffce 	bl	80012f8 <_Z18SystemClock_Configv>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	2210      	movs	r2, #16
 800135e:	2100      	movs	r1, #0
 8001360:	eb0d 0002 	add.w	r0, sp, r2
 8001364:	f003 f903 	bl	800456e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <main+0x84>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800136a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001370:	4819      	ldr	r0, [pc, #100]	; (80013d8 <main+0x88>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	f042 0210 	orr.w	r2, r2, #16
 8001376:	619a      	str	r2, [r3, #24]
 8001378:	699a      	ldr	r2, [r3, #24]
 800137a:	f002 0210 	and.w	r2, r2, #16
 800137e:	9201      	str	r2, [sp, #4]
 8001380:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001382:	699a      	ldr	r2, [r3, #24]
 8001384:	f042 0220 	orr.w	r2, r2, #32
 8001388:	619a      	str	r2, [r3, #24]
 800138a:	699a      	ldr	r2, [r3, #24]
 800138c:	f002 0220 	and.w	r2, r2, #32
 8001390:	9202      	str	r2, [sp, #8]
 8001392:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001394:	699a      	ldr	r2, [r3, #24]
 8001396:	f042 0204 	orr.w	r2, r2, #4
 800139a:	619a      	str	r2, [r3, #24]
 800139c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	9303      	str	r3, [sp, #12]
 80013a6:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80013a8:	f001 fd03 	bl	8002db2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013b0:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2100      	movs	r1, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ba:	4807      	ldr	r0, [pc, #28]	; (80013d8 <main+0x88>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	e9cd 1306 	strd	r1, r3, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c0:	a904      	add	r1, sp, #16
 80013c2:	f001 fb85 	bl	8002ad0 <HAL_GPIO_Init>
  ml.init();
 80013c6:	a804      	add	r0, sp, #16
 80013c8:	f000 f97c 	bl	80016c4 <_ZN8MainLoop4initEv>
	  ml.loop();
 80013cc:	a804      	add	r0, sp, #16
 80013ce:	f000 fba3 	bl	8001b18 <_ZN8MainLoop4loopEv>
 80013d2:	e7fb      	b.n	80013cc <main+0x7c>
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40011000 	.word	0x40011000

080013dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_MspInit+0x5c>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	4a14      	ldr	r2, [pc, #80]	; (8001438 <HAL_MspInit+0x5c>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6193      	str	r3, [r2, #24]
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_MspInit+0x5c>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <HAL_MspInit+0x5c>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <HAL_MspInit+0x5c>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	61d3      	str	r3, [r2, #28]
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <HAL_MspInit+0x5c>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <HAL_MspInit+0x60>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	4a04      	ldr	r2, [pc, #16]	; (800143c <HAL_MspInit+0x60>)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr
 8001438:	40021000 	.word	0x40021000
 800143c:	40010000 	.word	0x40010000

08001440 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a15      	ldr	r2, [pc, #84]	; (80014b0 <HAL_I2C_MspInit+0x70>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d123      	bne.n	80014a8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <HAL_I2C_MspInit+0x74>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a13      	ldr	r2, [pc, #76]	; (80014b4 <HAL_I2C_MspInit+0x74>)
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <HAL_I2C_MspInit+0x74>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001478:	23c0      	movs	r3, #192	; 0xc0
 800147a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800147c:	2312      	movs	r3, #18
 800147e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001480:	2303      	movs	r3, #3
 8001482:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	4619      	mov	r1, r3
 800148a:	480b      	ldr	r0, [pc, #44]	; (80014b8 <HAL_I2C_MspInit+0x78>)
 800148c:	f001 fb20 	bl	8002ad0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <HAL_I2C_MspInit+0x74>)
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <HAL_I2C_MspInit+0x74>)
 8001496:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800149a:	61d3      	str	r3, [r2, #28]
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_I2C_MspInit+0x74>)
 800149e:	69db      	ldr	r3, [r3, #28]
 80014a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014a8:	bf00      	nop
 80014aa:	3720      	adds	r7, #32
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40005400 	.word	0x40005400
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40010c00 	.word	0x40010c00

080014bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <HardFault_Handler+0x4>

080014ce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <MemManage_Handler+0x4>

080014d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <BusFault_Handler+0x4>

080014da <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014de:	e7fe      	b.n	80014de <UsageFault_Handler+0x4>

080014e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001508:	f001 f9c0 	bl	800288c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}

08001510 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <SystemInit+0x5c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a14      	ldr	r2, [pc, #80]	; (800156c <SystemInit+0x5c>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <SystemInit+0x5c>)
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	4911      	ldr	r1, [pc, #68]	; (800156c <SystemInit+0x5c>)
 8001526:	4b12      	ldr	r3, [pc, #72]	; (8001570 <SystemInit+0x60>)
 8001528:	4013      	ands	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <SystemInit+0x5c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0e      	ldr	r2, [pc, #56]	; (800156c <SystemInit+0x5c>)
 8001532:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800153a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800153c:	4b0b      	ldr	r3, [pc, #44]	; (800156c <SystemInit+0x5c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0a      	ldr	r2, [pc, #40]	; (800156c <SystemInit+0x5c>)
 8001542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001546:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <SystemInit+0x5c>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	4a07      	ldr	r2, [pc, #28]	; (800156c <SystemInit+0x5c>)
 800154e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001552:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <SystemInit+0x5c>)
 8001556:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800155a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <SystemInit+0x64>)
 800155e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001562:	609a      	str	r2, [r3, #8]
#endif 
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	40021000 	.word	0x40021000
 8001570:	f8ff0000 	.word	0xf8ff0000
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <_ZL14callbackRenderi>:



static void callbackRender(int flagEndHalf)
{
	flagRender = 1;
 8001578:	2201      	movs	r2, #1
 800157a:	4b05      	ldr	r3, [pc, #20]	; (8001590 <_ZL14callbackRenderi+0x18>)
	if(flagEndHalf==1)
 800157c:	4290      	cmp	r0, r2
	flagRender = 1;
 800157e:	701a      	strb	r2, [r3, #0]
		indexBufferRender=1;
	}
	else
	{
		// transfer reach half, so I can start writing the first half
		indexBufferRender=0;
 8001580:	bf18      	it	ne
 8001582:	2200      	movne	r2, #0
 8001584:	4b03      	ldr	r3, [pc, #12]	; (8001594 <_ZL14callbackRenderi+0x1c>)
		indexBufferRender=1;
 8001586:	bf0c      	ite	eq
 8001588:	7018      	strbeq	r0, [r3, #0]
		indexBufferRender=0;
 800158a:	701a      	strbne	r2, [r3, #0]
	}
}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000374 	.word	0x20000374
 8001594:	200003f5 	.word	0x200003f5

08001598 <_ZN6braids15MacroOscillator4InitEv>:
  typedef void (MacroOscillator::*RenderFn)(const uint8_t*, int16_t*, size_t);

  MacroOscillator() { }
  ~MacroOscillator() { }
  
  inline void Init() {
 8001598:	b570      	push	{r4, r5, r6, lr}
    pitch_ = 60 << 7;
 800159a:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
    phase_increment_ = 1;
 800159e:	2500      	movs	r5, #0
 80015a0:	2601      	movs	r6, #1
    discontinuity_depth_ = -16383;
 80015a2:	f24c 0201 	movw	r2, #49153	; 0xc001
 80015a6:	4604      	mov	r4, r0
 80015a8:	f8a0 206c 	strh.w	r2, [r0, #108]	; 0x6c
    pitch_ = 60 << 7;
 80015ac:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
    discontinuity_depth_ = -16383;
 80015b0:	f8a0 208c 	strh.w	r2, [r0, #140]	; 0x8c
    pitch_ = 60 << 7;
 80015b4:	f8a0 308e 	strh.w	r3, [r0, #142]	; 0x8e
    discontinuity_depth_ = -16383;
 80015b8:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
    pitch_ = 60 << 7;
 80015bc:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
    phase_increment_ = 1;
 80015c0:	e9c0 5616 	strd	r5, r6, [r0, #88]	; 0x58
    high_ = false;
 80015c4:	f880 5064 	strb.w	r5, [r0, #100]	; 0x64
    parameter_ = previous_parameter_ = 0;
 80015c8:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
 80015cc:	f8a0 5066 	strh.w	r5, [r0, #102]	; 0x66
    aux_parameter_ = 0;
 80015d0:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
    next_sample_ = 0;
 80015d4:	6705      	str	r5, [r0, #112]	; 0x70
    phase_increment_ = 1;
 80015d6:	e9c0 561e 	strd	r5, r6, [r0, #120]	; 0x78
    high_ = false;
 80015da:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
    parameter_ = previous_parameter_ = 0;
 80015de:	f8a0 5088 	strh.w	r5, [r0, #136]	; 0x88
 80015e2:	f8a0 5086 	strh.w	r5, [r0, #134]	; 0x86
    aux_parameter_ = 0;
 80015e6:	f8a0 508a 	strh.w	r5, [r0, #138]	; 0x8a
    next_sample_ = 0;
 80015ea:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    phase_increment_ = 1;
 80015ee:	e9c0 5626 	strd	r5, r6, [r0, #152]	; 0x98
    high_ = false;
 80015f2:	f880 50a4 	strb.w	r5, [r0, #164]	; 0xa4
    parameter_ = previous_parameter_ = 0;
 80015f6:	f8a0 50a8 	strh.w	r5, [r0, #168]	; 0xa8
 80015fa:	f8a0 50a6 	strh.w	r5, [r0, #166]	; 0xa6
    aux_parameter_ = 0;
 80015fe:	f8a0 50aa 	strh.w	r5, [r0, #170]	; 0xaa
    next_sample_ = 0;
 8001602:	f8c0 50b0 	str.w	r5, [r0, #176]	; 0xb0
    memset(&state_, 0, sizeof(state_));
 8001606:	22c4      	movs	r2, #196	; 0xc4
 8001608:	4629      	mov	r1, r5
 800160a:	30d8      	adds	r0, #216	; 0xd8
 800160c:	f002 ffaf 	bl	800456e <memset>
    decay_ = 4093;
 8001610:	f640 73fd 	movw	r3, #4093	; 0xffd
    frequency_ = 33 << 7;
 8001614:	f44f 5284 	mov.w	r2, #4224	; 0x1080
 8001618:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
 800161c:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
 8001620:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
 8001624:	f8c4 31dc 	str.w	r3, [r4, #476]	; 0x1dc
    resonance_ = 16384;
 8001628:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    delay_ = 0;
 800162c:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
    counter_ = 0;
 8001630:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
    state_ = 0;
 8001634:	f8c4 51a8 	str.w	r5, [r4, #424]	; 0x1a8
    delay_ = 0;
 8001638:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
    counter_ = 0;
 800163c:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    state_ = 0;
 8001640:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
    delay_ = 0;
 8001644:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    counter_ = 0;
 8001648:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
    state_ = 0;
 800164c:	f8c4 51d0 	str.w	r5, [r4, #464]	; 0x1d0
    delay_ = 0;
 8001650:	f8c4 51d8 	str.w	r5, [r4, #472]	; 0x1d8
    counter_ = 0;
 8001654:	f8c4 51e0 	str.w	r5, [r4, #480]	; 0x1e0
    state_ = 0;
 8001658:	f8c4 51e4 	str.w	r5, [r4, #484]	; 0x1e4
    lp_ = 0;
 800165c:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    bp_ = 0;
 8001660:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
    frequency_ = 33 << 7;
 8001664:	f8a4 21ee 	strh.w	r2, [r4, #494]	; 0x1ee
    resonance_ = 16384;
 8001668:	f8a4 31f0 	strh.w	r3, [r4, #496]	; 0x1f0
    dirty_ = true;
 800166c:	f884 61ec 	strb.w	r6, [r4, #492]	; 0x1ec
    punch_ = 0;
 8001670:	f8c4 51f4 	str.w	r5, [r4, #500]	; 0x1f4
    mode_ = SVF_MODE_BP;
 8001674:	f884 6208 	strb.w	r6, [r4, #520]	; 0x208
    lp_ = 0;
 8001678:	f8c4 5220 	str.w	r5, [r4, #544]	; 0x220
    bp_ = 0;
 800167c:	f8c4 5224 	str.w	r5, [r4, #548]	; 0x224
    frequency_ = 33 << 7;
 8001680:	f8a4 220e 	strh.w	r2, [r4, #526]	; 0x20e
    resonance_ = 16384;
 8001684:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
    dirty_ = true;
 8001688:	f884 620c 	strb.w	r6, [r4, #524]	; 0x20c
    punch_ = 0;
 800168c:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
    mode_ = SVF_MODE_BP;
 8001690:	f884 6228 	strb.w	r6, [r4, #552]	; 0x228
    lp_ = 0;
 8001694:	f8c4 5240 	str.w	r5, [r4, #576]	; 0x240
    bp_ = 0;
 8001698:	f8c4 5244 	str.w	r5, [r4, #580]	; 0x244
    frequency_ = 33 << 7;
 800169c:	f8a4 222e 	strh.w	r2, [r4, #558]	; 0x22e
    resonance_ = 16384;
 80016a0:	f8a4 3230 	strh.w	r3, [r4, #560]	; 0x230
    dirty_ = true;
 80016a4:	f884 622c 	strb.w	r6, [r4, #556]	; 0x22c
    punch_ = 0;
 80016a8:	f8c4 5234 	str.w	r5, [r4, #564]	; 0x234
    mode_ = SVF_MODE_BP;
 80016ac:	f884 6248 	strb.w	r6, [r4, #584]	; 0x248
    phase_ = 0;
 80016b0:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
    strike_ = true;
 80016b4:	f884 60d4 	strb.w	r6, [r4, #212]	; 0xd4
    init_ = true;
 80016b8:	f884 60d3 	strb.w	r6, [r4, #211]	; 0xd3
    analog_oscillator_[0].Init();
    analog_oscillator_[1].Init();
    analog_oscillator_[2].Init();
    digital_oscillator_.Init();
    lp_state_ = 0;
 80016bc:	6565      	str	r5, [r4, #84]	; 0x54
    previous_parameter_[0] = 0;
 80016be:	6065      	str	r5, [r4, #4]
    previous_parameter_[1] = 0;
  }
 80016c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080016c4 <_ZN8MainLoop4initEv>:


void MainLoop::init(void)
{
 80016c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;
	for(i=0; i<SAMPLES_BUFFER_SIZE; i++)
 80016c6:	2400      	movs	r4, #0
	{
		samplesBuffer[i] = 0;
 80016c8:	4625      	mov	r5, r4
 80016ca:	4b35      	ldr	r3, [pc, #212]	; (80017a0 <_ZN8MainLoop4initEv+0xdc>)
 80016cc:	54e5      	strb	r5, [r4, r3]
	for(i=0; i<SAMPLES_BUFFER_SIZE; i++)
 80016ce:	3401      	adds	r4, #1
 80016d0:	2c30      	cmp	r4, #48	; 0x30
 80016d2:	d1fb      	bne.n	80016cc <_ZN8MainLoop4initEv+0x8>
	}
    memset(sync_samples, 0, SAMPLES_BUFFER_SIZE/2);
 80016d4:	2218      	movs	r2, #24
 80016d6:	2100      	movs	r1, #0
 80016d8:	4832      	ldr	r0, [pc, #200]	; (80017a4 <_ZN8MainLoop4initEv+0xe0>)
 80016da:	f002 ff48 	bl	800456e <memset>

	mehal_init((uint32_t*)samplesBuffer,SAMPLES_BUFFER_SIZE,callbackRender);
 80016de:	4621      	mov	r1, r4
 80016e0:	4a31      	ldr	r2, [pc, #196]	; (80017a8 <_ZN8MainLoop4initEv+0xe4>)
 80016e2:	482f      	ldr	r0, [pc, #188]	; (80017a0 <_ZN8MainLoop4initEv+0xdc>)
 80016e4:	f000 fe16 	bl	8002314 <mehal_init>

	settings.Init();
 80016e8:	4830      	ldr	r0, [pc, #192]	; (80017ac <_ZN8MainLoop4initEv+0xe8>)
 80016ea:	f7ff fdbf 	bl	800126c <_ZN6braids8Settings4InitEv>
	osc.Init();
 80016ee:	4830      	ldr	r0, [pc, #192]	; (80017b0 <_ZN8MainLoop4initEv+0xec>)
 80016f0:	f7ff ff52 	bl	8001598 <_ZN6braids15MacroOscillator4InitEv>
	quantizer.Init();
 80016f4:	482f      	ldr	r0, [pc, #188]	; (80017b4 <_ZN8MainLoop4initEv+0xf0>)
 80016f6:	f7ff fcf1 	bl	80010dc <_ZN6braids9Quantizer4InitEv>

  void Init() {
    target_[ENV_SEGMENT_ATTACK] = 65535;
    target_[ENV_SEGMENT_DECAY] = 0;
    target_[ENV_SEGMENT_DEAD] = 0;
    increment_[ENV_SEGMENT_DEAD] = 0;
 80016fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016fe:	4b2e      	ldr	r3, [pc, #184]	; (80017b8 <_ZN8MainLoop4initEv+0xf4>)
	envelope.Init();
	//jitter_source.Init();
	adc.Init();
 8001700:	482e      	ldr	r0, [pc, #184]	; (80017bc <_ZN8MainLoop4initEv+0xf8>)
 8001702:	609d      	str	r5, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
    target_[ENV_SEGMENT_DECAY] = 0;
 8001706:	821d      	strh	r5, [r3, #16]
 8001708:	f7ff fdf5 	bl	80012f6 <_ZN6braids3Adc4InitEv>
	userInterface.init(&adc,&memory);
 800170c:	4a2c      	ldr	r2, [pc, #176]	; (80017c0 <_ZN8MainLoop4initEv+0xfc>)
 800170e:	492b      	ldr	r1, [pc, #172]	; (80017bc <_ZN8MainLoop4initEv+0xf8>)
 8001710:	482c      	ldr	r0, [pc, #176]	; (80017c4 <_ZN8MainLoop4initEv+0x100>)
 8001712:	f000 faff 	bl	8001d14 <_ZN2Ui4initEPN6braids3AdcEP6Memory>
	//ws.Init(GetUniqueId(1));


	// calibration
	int32_t adc_code_c2=memory.readUInt32(Memory::ADDR_ADC_CODE_C2);
 8001716:	2100      	movs	r1, #0
 8001718:	4829      	ldr	r0, [pc, #164]	; (80017c0 <_ZN8MainLoop4initEv+0xfc>)
 800171a:	f000 fd97 	bl	800224c <_ZN6Memory10readUInt32Et>
	if(adc_code_c2<0 || adc_code_c2>4095) adc_code_c2=82;

	int32_t adc_code_c4=memory.readUInt32(Memory::ADDR_ADC_CODE_C4);
 800171e:	2104      	movs	r1, #4
 8001720:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8001724:	bf34      	ite	cc
 8001726:	4604      	movcc	r4, r0
 8001728:	2452      	movcs	r4, #82	; 0x52
 800172a:	4825      	ldr	r0, [pc, #148]	; (80017c0 <_ZN8MainLoop4initEv+0xfc>)
 800172c:	f000 fd8e 	bl	800224c <_ZN6Memory10readUInt32Et>
 8001730:	f240 279f 	movw	r7, #671	; 0x29f
	if(adc_code_c4<0 || adc_code_c4>4095) adc_code_c4=671;

	int32_t adc_code_fm=memory.readUInt32(Memory::ADDR_ADC_CODE_FM);
 8001734:	2108      	movs	r1, #8
 8001736:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800173a:	bf38      	it	cc
 800173c:	4607      	movcc	r7, r0
 800173e:	4820      	ldr	r0, [pc, #128]	; (80017c0 <_ZN8MainLoop4initEv+0xfc>)
 8001740:	f000 fd84 	bl	800224c <_ZN6Memory10readUInt32Et>
	if(adc_code_fm<0 || adc_code_fm>4095) adc_code_fm=0;

	int32_t adc_code_p0_min= memory.readUInt32(Memory::ADDR_ADC_CODE_P0_MIN);
 8001744:	210c      	movs	r1, #12
 8001746:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800174a:	bf34      	ite	cc
 800174c:	4606      	movcc	r6, r0
 800174e:	2600      	movcs	r6, #0
 8001750:	481b      	ldr	r0, [pc, #108]	; (80017c0 <_ZN8MainLoop4initEv+0xfc>)
 8001752:	f000 fd7b 	bl	800224c <_ZN6Memory10readUInt32Et>
	if(adc_code_p0_min<0 || adc_code_p0_min>4095) adc_code_p0_min=0;

	int32_t adc_code_p0_max= memory.readUInt32(Memory::ADDR_ADC_CODE_P0_MAX);
 8001756:	2110      	movs	r1, #16
 8001758:	4819      	ldr	r0, [pc, #100]	; (80017c0 <_ZN8MainLoop4initEv+0xfc>)
 800175a:	f000 fd77 	bl	800224c <_ZN6Memory10readUInt32Et>
	if(adc_code_p0_max<0 || adc_code_p0_max>4095) adc_code_p0_max=4095;

	int32_t adc_code_p1_min= memory.readUInt32(Memory::ADDR_ADC_CODE_P1_MIN);
 800175e:	2114      	movs	r1, #20
 8001760:	4817      	ldr	r0, [pc, #92]	; (80017c0 <_ZN8MainLoop4initEv+0xfc>)
 8001762:	f000 fd73 	bl	800224c <_ZN6Memory10readUInt32Et>
	if(adc_code_p1_min<0 || adc_code_p1_min>4095) adc_code_p1_min=0;

	int32_t adc_code_p1_max= memory.readUInt32(Memory::ADDR_ADC_CODE_P1_MAX);
 8001766:	2118      	movs	r1, #24
 8001768:	4815      	ldr	r0, [pc, #84]	; (80017c0 <_ZN8MainLoop4initEv+0xfc>)
 800176a:	f000 fd6f 	bl	800224c <_ZN6Memory10readUInt32Et>
      int32_t adc_code_fm,
      int32_t adc_code_p0_min,
      int32_t adc_code_p0_max,
      int32_t adc_code_p1_min,
      int32_t adc_code_p1_max) {
    if (adc_code_c4 != adc_code_c2) {
 800176e:	42bc      	cmp	r4, r7
 8001770:	4d0e      	ldr	r5, [pc, #56]	; (80017ac <_ZN8MainLoop4initEv+0xe8>)
 8001772:	d00d      	beq.n	8001790 <_ZN8MainLoop4initEv+0xcc>
      int32_t scale = (24 * 128 * 4096L) / (adc_code_c4 - adc_code_c2);
 8001774:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8001778:	1b3a      	subs	r2, r7, r4
 800177a:	fb93 f3f2 	sdiv	r3, r3, r2
      data_.pitch_cv_scale = scale;
      data_.pitch_cv_offset = (60 << 7) - 
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 800177e:	443c      	add	r4, r7
 8001780:	1064      	asrs	r4, r4, #1
      data_.pitch_cv_scale = scale;
 8001782:	61ab      	str	r3, [r5, #24]
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 8001784:	4363      	muls	r3, r4
 8001786:	131b      	asrs	r3, r3, #12
      data_.pitch_cv_offset = (60 << 7) - 
 8001788:	f5c3 53f0 	rsb	r3, r3, #7680	; 0x1e00
 800178c:	616b      	str	r3, [r5, #20]
      data_.fm_cv_offset = adc_code_fm;
 800178e:	61ee      	str	r6, [r5, #28]
    //     int32_t offset = -(min_code[i] * scale >> 12) - 40;
    //     data_.parameter_cv_offset[i] = offset;
    //     data_.parameter_cv_scale[i] = scale;
    //   }
    // }
    Save();
 8001790:	4806      	ldr	r0, [pc, #24]	; (80017ac <_ZN8MainLoop4initEv+0xe8>)
 8001792:	f7ff fdab 	bl	80012ec <_ZN6braids8Settings4SaveEv>
    data[setting] = value;
 8001796:	2304      	movs	r3, #4
 8001798:	706b      	strb	r3, [r5, #1]
 800179a:	2301      	movs	r3, #1
 800179c:	722b      	strb	r3, [r5, #8]
	//________________________________

	settings.SetValue(SETTING_RESOLUTION,RESOLUTION_8_BIT);
	settings.SetValue(SETTING_PITCH_OCTAVE,1); // C2: Lowest octave

}
 800179e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017a0:	2000038e 	.word	0x2000038e
 80017a4:	20000375 	.word	0x20000375
 80017a8:	08001579 	.word	0x08001579
 80017ac:	20000310 	.word	0x20000310
 80017b0:	20000408 	.word	0x20000408
 80017b4:	20004680 	.word	0x20004680
 80017b8:	2000465c 	.word	0x2000465c
 80017bc:	200003fc 	.word	0x200003fc
 80017c0:	20004658 	.word	0x20004658
 80017c4:	200003c0 	.word	0x200003c0

080017c8 <_ZN8MainLoop6renderEPhm>:
	}
	//______________
}

void MainLoop::render(uint8_t* out, uint32_t outSize)
{
 80017c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017cc:	b083      	sub	sp, #12
    return data[setting];
 80017ce:	4db5      	ldr	r5, [pc, #724]	; (8001aa4 <_ZN8MainLoop6renderEPhm+0x2dc>)
 80017d0:	af00      	add	r7, sp, #0
	  static int16_t previous_shape = 0;
	  static uint16_t gain_lp;

	  envelope.Update(
	      settings.GetValue(SETTING_AD_ATTACK) * 8,
	      settings.GetValue(SETTING_AD_DECAY) * 8);
 80017d2:	7beb      	ldrb	r3, [r5, #15]
{
 80017d4:	6079      	str	r1, [r7, #4]
 80017d6:	4690      	mov	r8, r2
  inline EnvelopeSegment segment() const {
    return static_cast<EnvelopeSegment>(segment_);
  }

  inline void Update(int32_t a, int32_t d) {
    increment_[ENV_SEGMENT_ATTACK] = lut_env_portamento_increments[a];
 80017d8:	49b3      	ldr	r1, [pc, #716]	; (8001aa8 <_ZN8MainLoop6renderEPhm+0x2e0>)
	      settings.GetValue(SETTING_AD_ATTACK) * 8,
 80017da:	7baa      	ldrb	r2, [r5, #14]
	      settings.GetValue(SETTING_AD_DECAY) * 8);
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	4cb3      	ldr	r4, [pc, #716]	; (8001aac <_ZN8MainLoop6renderEPhm+0x2e4>)
    increment_[ENV_SEGMENT_DECAY] = lut_env_portamento_increments[d];
 80017e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    increment_[ENV_SEGMENT_ATTACK] = lut_env_portamento_increments[a];
 80017e4:	00d2      	lsls	r2, r2, #3
 80017e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    increment_[ENV_SEGMENT_DECAY] = lut_env_portamento_increments[d];
 80017ea:	6063      	str	r3, [r4, #4]
    segment_ = segment;
    phase_ = 0;
  }

  inline uint16_t Render() {
    uint32_t increment = increment_[segment_];
 80017ec:	6963      	ldr	r3, [r4, #20]
    increment_[ENV_SEGMENT_ATTACK] = lut_env_portamento_increments[a];
 80017ee:	6022      	str	r2, [r4, #0]
 80017f0:	6a21      	ldr	r1, [r4, #32]
 80017f2:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 80017f6:	2000      	movs	r0, #0
 80017f8:	1852      	adds	r2, r2, r1
 80017fa:	bf28      	it	cs
 80017fc:	2001      	movcs	r0, #1
    phase_ += increment;
 80017fe:	6222      	str	r2, [r4, #32]
    if (phase_ < increment) {
 8001800:	b198      	cbz	r0, 800182a <_ZN8MainLoop6renderEPhm+0x62>
      value_ = Mix(a_, b_, 65535);
      Trigger(static_cast<EnvelopeSegment>(segment_ + 1));
 8001802:	3301      	adds	r3, #1
 8001804:	b2db      	uxtb	r3, r3
    if (segment == ENV_SEGMENT_DEAD) {
 8001806:	2b02      	cmp	r3, #2
      value_ = 0;
 8001808:	bf0c      	ite	eq
 800180a:	2200      	moveq	r2, #0
  return (a * (65535 - balance) + b * balance) >> 16;
 800180c:	8b62      	ldrhne	r2, [r4, #26]
    segment_ = segment;
 800180e:	6163      	str	r3, [r4, #20]
 8001810:	bf1c      	itt	ne
 8001812:	ebc2 4202 	rsbne	r2, r2, r2, lsl #16
 8001816:	1412      	asrne	r2, r2, #16
      value_ = 0;
 8001818:	83a2      	strh	r2, [r4, #28]
    a_ = value_;
 800181a:	8ba2      	ldrh	r2, [r4, #28]
 800181c:	8322      	strh	r2, [r4, #24]
    b_ = target_[segment];
 800181e:	eb04 0243 	add.w	r2, r4, r3, lsl #1
    phase_ = 0;
 8001822:	2300      	movs	r3, #0
    b_ = target_[segment];
 8001824:	8992      	ldrh	r2, [r2, #12]
    phase_ = 0;
 8001826:	6223      	str	r3, [r4, #32]
    b_ = target_[segment];
 8001828:	8362      	strh	r2, [r4, #26]
    }
    if (increment_[segment_]) {
 800182a:	6963      	ldr	r3, [r4, #20]
 800182c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001830:	b1c3      	cbz	r3, 8001864 <_ZN8MainLoop6renderEPhm+0x9c>
      value_ = Mix(a_, b_, Interpolate824(lut_env_expo, phase_));
 8001832:	6a22      	ldr	r2, [r4, #32]
  uint32_t a = table[phase >> 24];
 8001834:	499e      	ldr	r1, [pc, #632]	; (8001ab0 <_ZN8MainLoop6renderEPhm+0x2e8>)
 8001836:	0e10      	lsrs	r0, r2, #24
 8001838:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
  uint32_t b = table[(phase >> 24) + 1];
 800183c:	3102      	adds	r1, #2
 800183e:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 8001842:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8001846:	1ac9      	subs	r1, r1, r3
 8001848:	434a      	muls	r2, r1
  return (a * (65535 - balance) + b * balance) >> 16;
 800184a:	8b60      	ldrh	r0, [r4, #26]
  return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
 800184c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  return (a * (65535 - balance) + b * balance) >> 16;
 8001850:	b29b      	uxth	r3, r3
 8001852:	f5c3 417f 	rsb	r1, r3, #65280	; 0xff00
 8001856:	4343      	muls	r3, r0
 8001858:	8b22      	ldrh	r2, [r4, #24]
 800185a:	31ff      	adds	r1, #255	; 0xff
 800185c:	fb01 3302 	mla	r3, r1, r2, r3
 8001860:	141b      	asrs	r3, r3, #16
 8001862:	83a3      	strh	r3, [r4, #28]
  
  inline void set_shape(MacroOscillatorShape shape) {
    if (shape != shape_) {
 8001864:	f244 234c 	movw	r3, #16972	; 0x424c
 8001868:	4e92      	ldr	r6, [pc, #584]	; (8001ab4 <_ZN8MainLoop6renderEPhm+0x2ec>)

	  uint32_t ad_value = envelope.Render();


	  // Shape modulation
	  osc.set_shape(settings.shape());
 800186a:	782a      	ldrb	r2, [r5, #0]
 800186c:	5cf1      	ldrb	r1, [r6, r3]
	    CONSTRAIN(value, 0, 32767);

	    parameters[i] = value;
	  }*/
	  //osc.set_parameters(parameters[0], parameters[1]);
	  osc.set_parameters(userInterface.getParamFromCurrentWaveTable(), userInterface.getParamFromCurrentChord());
 800186e:	4892      	ldr	r0, [pc, #584]	; (8001ab8 <_ZN8MainLoop6renderEPhm+0x2f0>)
 8001870:	4291      	cmp	r1, r2
  inline uint32_t phase_increment() const {
    return phase_increment_;
  }
  
  inline void Strike() {
    strike_ = true;
 8001872:	bf1c      	itt	ne
 8001874:	2101      	movne	r1, #1
 8001876:	f886 10d4 	strbne.w	r1, [r6, #212]	; 0xd4
      Strike();
    }
    shape_ = shape;
 800187a:	54f2      	strb	r2, [r6, r3]
    }
    return value_;
 800187c:	f8b4 901c 	ldrh.w	r9, [r4, #28]
 8001880:	f000 f9da 	bl	8001c38 <_ZN2Ui28getParamFromCurrentWaveTableEv>
 8001884:	4682      	mov	sl, r0
 8001886:	488c      	ldr	r0, [pc, #560]	; (8001ab8 <_ZN8MainLoop6renderEPhm+0x2f0>)
 8001888:	f000 f9d0 	bl	8001c2c <_ZN2Ui24getParamFromCurrentChordEv>
  }
  
  inline int32_t adc_to_pitch(int32_t pitch_adc_code) const {
    if (data_.pitch_range == PITCH_RANGE_EXTERNAL ||
 800188c:	79ea      	ldrb	r2, [r5, #7]
		  return this->currentValues[0];
	  }
	  else if(index==2)
	  {
		  ///pitch
		  return this->currentValues[4];
 800188e:	4b8b      	ldr	r3, [pc, #556]	; (8001abc <_ZN8MainLoop6renderEPhm+0x2f4>)
 8001890:	f012 0ffb 	tst.w	r2, #251	; 0xfb
  inline int16_t pitch() const { return pitch_; }

  inline void set_parameters(
      int16_t parameter_1,
      int16_t parameter_2) {
    parameter_[0] = parameter_1;
 8001894:	f8a6 a000 	strh.w	sl, [r6]
    parameter_[1] = parameter_2;
 8001898:	8070      	strh	r0, [r6, #2]
	  //_________________________________________________


	  // Apply hysteresis to ADC reading to prevent a single bit error to move
	  // the quantized pitch up and down the quantization boundary.
	  int32_t pitch = quantizer.Process(
 800189a:	8919      	ldrh	r1, [r3, #8]
 800189c:	f040 8086 	bne.w	80019ac <_ZN8MainLoop6renderEPhm+0x1e4>
        data_.pitch_range == PITCH_RANGE_LFO) {
      pitch_adc_code = pitch_adc_code * data_.pitch_cv_scale >> 12;
 80018a0:	69aa      	ldr	r2, [r5, #24]
 80018a2:	434a      	muls	r2, r1
      pitch_adc_code += data_.pitch_cv_offset;
 80018a4:	6969      	ldr	r1, [r5, #20]
 80018a6:	eb01 3122 	add.w	r1, r1, r2, asr #12
    return data_.quantizer_root;
 80018aa:	7cea      	ldrb	r2, [r5, #19]
	      settings.adc_to_pitch(adc.channel(ADC_CHANNEL_PITCH)),
	      (60 + settings.quantizer_root()) << 7);
 80018ac:	4884      	ldr	r0, [pc, #528]	; (8001ac0 <_ZN8MainLoop6renderEPhm+0x2f8>)
 80018ae:	323c      	adds	r2, #60	; 0x3c
 80018b0:	01d2      	lsls	r2, r2, #7
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	f7ff fc64 	bl	8001180 <_ZN6braids9Quantizer7ProcessEll>
	    pitch += settings.adc_to_fm(adc.channel(ADC_CHANNEL_FM));
	  }*/

	  // Check if the pitch has changed to cause an auto-retrigger
	  int32_t pitch_delta = pitch - previous_pitch;
	  if (settings.data().auto_trig &&
 80018b8:	7929      	ldrb	r1, [r5, #4]
	      (60 + settings.quantizer_root()) << 7);
 80018ba:	4683      	mov	fp, r0
 80018bc:	f8df a220 	ldr.w	sl, [pc, #544]	; 8001ae0 <_ZN8MainLoop6renderEPhm+0x318>
 80018c0:	4880      	ldr	r0, [pc, #512]	; (8001ac4 <_ZN8MainLoop6renderEPhm+0x2fc>)
	  if (settings.data().auto_trig &&
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	b149      	cbz	r1, 80018da <_ZN8MainLoop6renderEPhm+0x112>
	  int32_t pitch_delta = pitch - previous_pitch;
 80018c6:	f9b0 1000 	ldrsh.w	r1, [r0]
 80018ca:	ebab 0101 	sub.w	r1, fp, r1
	      //(pitch_delta >= 0x40 || -pitch_delta >= 0x40)) {
			(pitch_delta >= 0x70 || -pitch_delta >= 0x70)) { // too much noise in this hardware
 80018ce:	316f      	adds	r1, #111	; 0x6f
	  if (settings.data().auto_trig &&
 80018d0:	29de      	cmp	r1, #222	; 0xde
		  trigger_flag = true;
 80018d2:	bf84      	itt	hi
 80018d4:	2101      	movhi	r1, #1
 80018d6:	f88a 1000 	strbhi.w	r1, [sl]
	  // JITTER VCO DRIFT
	  //pitch += jitter_source.Render(settings.vco_drift());

	  // Fine tune adjust
	  //pitch += adc.channel(ADC_CHANNEL_FINE_TUNE) >> 8; //pitch += internal_adc.value() >> 8;
	  uint16_t fineTuneAdc = 4095 - adc.channel(ADC_CHANNEL_FINE_TUNE);
 80018da:	889b      	ldrh	r3, [r3, #4]
	  previous_pitch = pitch;
 80018dc:	f8a0 b000 	strh.w	fp, [r0]
	  uint16_t fineTuneAdc = 4095 - adc.channel(ADC_CHANNEL_FINE_TUNE);
 80018e0:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80018e4:	330f      	adds	r3, #15
 80018e6:	b29b      	uxth	r3, r3
	  if(fineTuneAdc>=(2048+256))
 80018e8:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 80018ec:	d373      	bcc.n	80019d6 <_ZN8MainLoop6renderEPhm+0x20e>
	  {
		  pitch += ((fineTuneAdc-(2048+256))*128)/(4095-(2048+256));
 80018ee:	f240 61ff 	movw	r1, #1791	; 0x6ff
 80018f2:	f5a3 6310 	sub.w	r3, r3, #2304	; 0x900
 80018f6:	01db      	lsls	r3, r3, #7
 80018f8:	fb93 f3f1 	sdiv	r3, r3, r1
		  userInterface.showUnCalibrated();
	  }
	  else if(fineTuneAdc<=(2048-256))
	  {
		  pitch += (fineTuneAdc*128)/(2048-256) - 128;
		  userInterface.showUnCalibrated();
 80018fc:	486e      	ldr	r0, [pc, #440]	; (8001ab8 <_ZN8MainLoop6renderEPhm+0x2f0>)
		  pitch += (fineTuneAdc*128)/(2048-256) - 128;
 80018fe:	449b      	add	fp, r3
		  userInterface.showUnCalibrated();
 8001900:	f000 f9a0 	bl	8001c44 <_ZN2Ui16showUnCalibratedEv>
    return data[setting];
 8001904:	7c2b      	ldrb	r3, [r5, #16]
		  // no adjust. calibrated
		  userInterface.showCalibrated();
	  }
	  //___________

	  pitch += ad_value * settings.GetValue(SETTING_AD_FM) >> 7;
 8001906:	fb09 f103 	mul.w	r1, r9, r3
 800190a:	eb0b 12d1 	add.w	r2, fp, r1, lsr #7
	    pitch = 16383;
	  } else if (pitch < 0) {
	    pitch = 0;
	  }

	  if (settings.vco_flatten()) {
 800190e:	7aa9      	ldrb	r1, [r5, #10]
 8001910:	f382 020e 	usat	r2, #14, r2
 8001914:	b181      	cbz	r1, 8001938 <_ZN8MainLoop6renderEPhm+0x170>
	    pitch = Interpolate88(lut_vco_detune, pitch << 2);
 8001916:	0092      	lsls	r2, r2, #2
 8001918:	b292      	uxth	r2, r2
  int32_t a = table[index >> 8];
 800191a:	486b      	ldr	r0, [pc, #428]	; (8001ac8 <_ZN8MainLoop6renderEPhm+0x300>)
 800191c:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8001920:	f830 101c 	ldrh.w	r1, [r0, ip, lsl #1]
  int32_t b = table[(index >> 8) + 1];
 8001924:	3002      	adds	r0, #2
 8001926:	f830 001c 	ldrh.w	r0, [r0, ip, lsl #1]
  return a + ((b - a) * static_cast<int32_t>(index & 0xff) >> 8);
 800192a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 800192e:	1a40      	subs	r0, r0, r1
 8001930:	4342      	muls	r2, r0
 8001932:	eb01 2222 	add.w	r2, r1, r2, asr #8
 8001936:	b292      	uxth	r2, r2
    }
    return pitch_adc_code;
  }
  
  inline int32_t pitch_transposition() const {
    int32_t t = data_.pitch_range == PITCH_RANGE_LFO ? -36 << 7 : 0;
 8001938:	79e8      	ldrb	r0, [r5, #7]
    t += (static_cast<int32_t>(data_.pitch_octave) - 2) * 12 * 128;
 800193a:	f44f 6cc0 	mov.w	ip, #1536	; 0x600
    int32_t t = data_.pitch_range == PITCH_RANGE_LFO ? -36 << 7 : 0;
 800193e:	2804      	cmp	r0, #4
 8001940:	4862      	ldr	r0, [pc, #392]	; (8001acc <_ZN8MainLoop6renderEPhm+0x304>)
 8001942:	bf18      	it	ne
 8001944:	2000      	movne	r0, #0
	  }
	  osc.set_pitch(pitch + settings.pitch_transposition());
 8001946:	7a29      	ldrb	r1, [r5, #8]
    t += (static_cast<int32_t>(data_.pitch_octave) - 2) * 12 * 128;
 8001948:	3902      	subs	r1, #2
 800194a:	fb0c 0101 	mla	r1, ip, r1, r0
 800194e:	440a      	add	r2, r1
    pitch_ = pitch;
 8001950:	8132      	strh	r2, [r6, #8]

	  if (trigger_flag) {
 8001952:	f89a 2000 	ldrb.w	r2, [sl]
 8001956:	b15a      	cbz	r2, 8001970 <_ZN8MainLoop6renderEPhm+0x1a8>
 8001958:	2201      	movs	r2, #1
 800195a:	f886 20d4 	strb.w	r2, [r6, #212]	; 0xd4
    a_ = value_;
 800195e:	8ba2      	ldrh	r2, [r4, #28]
 8001960:	8322      	strh	r2, [r4, #24]
    b_ = target_[segment];
 8001962:	89a2      	ldrh	r2, [r4, #12]
 8001964:	8362      	strh	r2, [r4, #26]
    segment_ = segment;
 8001966:	2200      	movs	r2, #0
 8001968:	6162      	str	r2, [r4, #20]
    phase_ = 0;
 800196a:	6222      	str	r2, [r4, #32]
	    osc.Strike();
	    envelope.Trigger(ENV_SEGMENT_ATTACK);
	    //ui.StepMarquee();
	    trigger_flag = false;
 800196c:	f88a 2000 	strb.w	r2, [sl]
	  }
	  //_________________________________________________________________


	  int16_t audio_samples[outSize];
 8001970:	ea4f 0248 	mov.w	r2, r8, lsl #1
 8001974:	3208      	adds	r2, #8
 8001976:	f022 0207 	bic.w	r2, r2, #7
 800197a:	ebad 0d02 	sub.w	sp, sp, r2
	  int16_t* render_buffer = audio_samples; //int16_t* render_buffer = audio_samples[render_block];

	  if (settings.GetValue(SETTING_AD_VCA) != 0
	    || settings.GetValue(SETTING_AD_TIMBRE) != 0
	    || settings.GetValue(SETTING_AD_COLOR) != 0
	    || settings.GetValue(SETTING_AD_FM) != 0) {
 800197e:	7caa      	ldrb	r2, [r5, #18]
	  int16_t audio_samples[outSize];
 8001980:	466c      	mov	r4, sp
	    || settings.GetValue(SETTING_AD_FM) != 0) {
 8001982:	bba2      	cbnz	r2, 80019ee <_ZN8MainLoop6renderEPhm+0x226>
	    || settings.GetValue(SETTING_AD_TIMBRE) != 0
 8001984:	78ea      	ldrb	r2, [r5, #3]
 8001986:	bb92      	cbnz	r2, 80019ee <_ZN8MainLoop6renderEPhm+0x226>
	    || settings.GetValue(SETTING_AD_COLOR) != 0
 8001988:	7c6a      	ldrb	r2, [r5, #17]
 800198a:	bb82      	cbnz	r2, 80019ee <_ZN8MainLoop6renderEPhm+0x226>
	    || settings.GetValue(SETTING_AD_FM) != 0) {
 800198c:	bb7b      	cbnz	r3, 80019ee <_ZN8MainLoop6renderEPhm+0x226>
	    memset(sync_buffer, 0, outSize);
	  }
	  else
	  {
		  //Trigger in sync event (this is placed in sampler interrupt timer in braids)
		  memset(sync_buffer, 0, outSize);
 800198e:	4e50      	ldr	r6, [pc, #320]	; (8001ad0 <_ZN8MainLoop6renderEPhm+0x308>)
 8001990:	4619      	mov	r1, r3
 8001992:	4642      	mov	r2, r8
 8001994:	4630      	mov	r0, r6
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	f002 fde9 	bl	800456e <memset>
		  if(flagTriggerInEvent==1)
 800199c:	494d      	ldr	r1, [pc, #308]	; (8001ad4 <_ZN8MainLoop6renderEPhm+0x30c>)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	680a      	ldr	r2, [r1, #0]
 80019a2:	2a01      	cmp	r2, #1
 80019a4:	d128      	bne.n	80019f8 <_ZN8MainLoop6renderEPhm+0x230>
		  {
			  flagTriggerInEvent=0;
 80019a6:	600b      	str	r3, [r1, #0]
			  sync_buffer[0]=1;
 80019a8:	7032      	strb	r2, [r6, #0]
 80019aa:	e025      	b.n	80019f8 <_ZN8MainLoop6renderEPhm+0x230>
    } else if (data_.pitch_range == PITCH_RANGE_FREE) {
 80019ac:	2a01      	cmp	r2, #1
 80019ae:	d107      	bne.n	80019c0 <_ZN8MainLoop6renderEPhm+0x1f8>
      pitch_adc_code = pitch_adc_code * data_.pitch_cv_scale >> 12;
 80019b0:	69aa      	ldr	r2, [r5, #24]
      pitch_adc_code = (pitch_adc_code - 1638);
 80019b2:	f2a1 6166 	subw	r1, r1, #1638	; 0x666
      pitch_adc_code = pitch_adc_code * data_.pitch_cv_scale >> 12;
 80019b6:	4351      	muls	r1, r2
 80019b8:	1309      	asrs	r1, r1, #12
      pitch_adc_code += 60 << 7;
 80019ba:	f501 51f0 	add.w	r1, r1, #7680	; 0x1e00
 80019be:	e774      	b.n	80018aa <_ZN8MainLoop6renderEPhm+0xe2>
    } else if (data_.pitch_range == PITCH_RANGE_440) {
 80019c0:	2a03      	cmp	r2, #3
 80019c2:	d005      	beq.n	80019d0 <_ZN8MainLoop6renderEPhm+0x208>
      pitch_adc_code = (pitch_adc_code - 1638) * 9 >> 1;
 80019c4:	f2a1 6166 	subw	r1, r1, #1638	; 0x666
 80019c8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80019cc:	1049      	asrs	r1, r1, #1
 80019ce:	e7f4      	b.n	80019ba <_ZN8MainLoop6renderEPhm+0x1f2>
      pitch_adc_code = 69 << 7;
 80019d0:	f44f 510a 	mov.w	r1, #8832	; 0x2280
 80019d4:	e769      	b.n	80018aa <_ZN8MainLoop6renderEPhm+0xe2>
	  else if(fineTuneAdc<=(2048-256))
 80019d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80019da:	d804      	bhi.n	80019e6 <_ZN8MainLoop6renderEPhm+0x21e>
		  pitch += (fineTuneAdc*128)/(2048-256) - 128;
 80019dc:	210e      	movs	r1, #14
 80019de:	fb93 f3f1 	sdiv	r3, r3, r1
 80019e2:	3b80      	subs	r3, #128	; 0x80
 80019e4:	e78a      	b.n	80018fc <_ZN8MainLoop6renderEPhm+0x134>
		  userInterface.showCalibrated();
 80019e6:	4834      	ldr	r0, [pc, #208]	; (8001ab8 <_ZN8MainLoop6renderEPhm+0x2f0>)
 80019e8:	f000 f938 	bl	8001c5c <_ZN2Ui14showCalibratedEv>
 80019ec:	e78a      	b.n	8001904 <_ZN8MainLoop6renderEPhm+0x13c>
	    memset(sync_buffer, 0, outSize);
 80019ee:	4642      	mov	r2, r8
 80019f0:	2100      	movs	r1, #0
 80019f2:	4837      	ldr	r0, [pc, #220]	; (8001ad0 <_ZN8MainLoop6renderEPhm+0x308>)
 80019f4:	f002 fdbb 	bl	800456e <memset>
		  }
		  //______________________
	  }

	  osc.Render(sync_buffer, render_buffer, outSize);
 80019f8:	4643      	mov	r3, r8
 80019fa:	4622      	mov	r2, r4
 80019fc:	4934      	ldr	r1, [pc, #208]	; (8001ad0 <_ZN8MainLoop6renderEPhm+0x308>)
 80019fe:	482d      	ldr	r0, [pc, #180]	; (8001ab4 <_ZN8MainLoop6renderEPhm+0x2ec>)
 8001a00:	f7ff fb54 	bl	80010ac <_ZN6braids15MacroOscillator6RenderEPKhPsj>

	  // Copy to DAC buffer with sample rate and bit reduction applied.
	    int16_t sample = 0;
	    size_t decimation_factor = decimation_factors[settings.data().sample_rate];
	    uint16_t bit_mask = bit_reduction_masks[settings.data().resolution];
	    int32_t gain = settings.GetValue(SETTING_AD_VCA) ? ad_value : 65535;
 8001a04:	f64f 70ff 	movw	r0, #65535	; 0xffff
	    uint16_t signature = settings.signature() * settings.signature() * 4095;
 8001a08:	f04f 0e00 	mov.w	lr, #0
	    size_t decimation_factor = decimation_factors[settings.data().sample_rate];
 8001a0c:	78aa      	ldrb	r2, [r5, #2]
 8001a0e:	4b32      	ldr	r3, [pc, #200]	; (8001ad8 <_ZN8MainLoop6renderEPhm+0x310>)
 8001a10:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8001ae4 <_ZN8MainLoop6renderEPhm+0x31c>
 8001a14:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
	    uint16_t bit_mask = bit_reduction_masks[settings.data().resolution];
 8001a18:	786a      	ldrb	r2, [r5, #1]
 8001a1a:	4b30      	ldr	r3, [pc, #192]	; (8001adc <_ZN8MainLoop6renderEPhm+0x314>)
 8001a1c:	f8ba c000 	ldrh.w	ip, [sl]
 8001a20:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
	    int32_t gain = settings.GetValue(SETTING_AD_VCA) ? ad_value : 65535;
 8001a24:	7cab      	ldrb	r3, [r5, #18]
	    for (size_t i = 0; i < outSize; ++i) {
 8001a26:	4672      	mov	r2, lr
	    int32_t gain = settings.GetValue(SETTING_AD_VCA) ? ad_value : 65535;
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf08      	it	eq
 8001a2c:	4681      	moveq	r9, r0
	    uint16_t signature = settings.signature() * settings.signature() * 4095;
 8001a2e:	7b2b      	ldrb	r3, [r5, #12]
	    int16_t sample = 0;
 8001a30:	4675      	mov	r5, lr
	    uint16_t signature = settings.signature() * settings.signature() * 4095;
 8001a32:	435b      	muls	r3, r3
 8001a34:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 8001a38:	b29b      	uxth	r3, r3
  return (a * (65535 - balance) + b * balance) >> 16;
 8001a3a:	1ac3      	subs	r3, r0, r3
	    for (size_t i = 0; i < outSize; ++i) {
 8001a3c:	4542      	cmp	r2, r8
 8001a3e:	d111      	bne.n	8001a64 <_ZN8MainLoop6renderEPhm+0x29c>
 8001a40:	f1be 0f00 	cmp.w	lr, #0
 8001a44:	d001      	beq.n	8001a4a <_ZN8MainLoop6renderEPhm+0x282>
 8001a46:	f8aa c000 	strh.w	ip, [sl]
	      render_buffer[i] = Mix(sample, warped, signature);
	    }

	  // Copy rendered buffer to DMA buffer (8bits)
	  uint32_t i;
	  for(i=0; i<outSize; i++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d024      	beq.n	8001a9a <_ZN8MainLoop6renderEPhm+0x2d2>
	  {
		  out[i] = (uint8_t) (((uint16_t)(  -(render_buffer[i]) + 32768U )) >>8)  ;
 8001a50:	f834 1013 	ldrh.w	r1, [r4, r3, lsl #1]
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f5c1 4100 	rsb	r1, r1, #32768	; 0x8000
 8001a5a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8001a5e:	54c1      	strb	r1, [r0, r3]
	  for(i=0; i<outSize; i++)
 8001a60:	3301      	adds	r3, #1
 8001a62:	e7f3      	b.n	8001a4c <_ZN8MainLoop6renderEPhm+0x284>
	      if ((i % decimation_factor) == 0) {
 8001a64:	fbb2 f0f1 	udiv	r0, r2, r1
 8001a68:	fb01 2010 	mls	r0, r1, r0, r2
 8001a6c:	b918      	cbnz	r0, 8001a76 <_ZN8MainLoop6renderEPhm+0x2ae>
	        sample = render_buffer[i] & bit_mask;
 8001a6e:	f834 5012 	ldrh.w	r5, [r4, r2, lsl #1]
 8001a72:	4035      	ands	r5, r6
 8001a74:	b22d      	sxth	r5, r5
	      sample = sample * gain_lp >> 16;
 8001a76:	fb0c f005 	mul.w	r0, ip, r5
 8001a7a:	1400      	asrs	r0, r0, #16
 8001a7c:	b205      	sxth	r5, r0
 8001a7e:	4358      	muls	r0, r3
	      gain_lp += (gain - gain_lp) >> 4;
 8001a80:	eba9 0e0c 	sub.w	lr, r9, ip
 8001a84:	eb0c 1c2e 	add.w	ip, ip, lr, asr #4
 8001a88:	1400      	asrs	r0, r0, #16
 8001a8a:	f824 0012 	strh.w	r0, [r4, r2, lsl #1]
 8001a8e:	fa1f fc8c 	uxth.w	ip, ip
	    for (size_t i = 0; i < outSize; ++i) {
 8001a92:	3201      	adds	r2, #1
 8001a94:	f04f 0e01 	mov.w	lr, #1
 8001a98:	e7d0      	b.n	8001a3c <_ZN8MainLoop6renderEPhm+0x274>
	  }
	  //___________________________________________

}
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000310 	.word	0x20000310
 8001aa8:	080052d8 	.word	0x080052d8
 8001aac:	2000465c 	.word	0x2000465c
 8001ab0:	080046c4 	.word	0x080046c4
 8001ab4:	20000408 	.word	0x20000408
 8001ab8:	200003c0 	.word	0x200003c0
 8001abc:	200003fc 	.word	0x200003fc
 8001ac0:	20004680 	.word	0x20004680
 8001ac4:	20004792 	.word	0x20004792
 8001ac8:	08004ac8 	.word	0x08004ac8
 8001acc:	ffffee00 	.word	0xffffee00
 8001ad0:	20000375 	.word	0x20000375
 8001ad4:	200003f8 	.word	0x200003f8
 8001ad8:	0800e320 	.word	0x0800e320
 8001adc:	0800e32e 	.word	0x0800e32e
 8001ae0:	2000038d 	.word	0x2000038d
 8001ae4:	20004794 	.word	0x20004794

08001ae8 <_ZN8MainLoop15adcStateMachineEv>:


void MainLoop::adcStateMachine(void)
{
 8001ae8:	b538      	push	{r3, r4, r5, lr}
	static uint8_t chn=0;

	adc.updateChannelValue(chn,mehal_readADC(chn));
 8001aea:	4c09      	ldr	r4, [pc, #36]	; (8001b10 <_ZN8MainLoop15adcStateMachineEv+0x28>)
 8001aec:	7825      	ldrb	r5, [r4, #0]
 8001aee:	4628      	mov	r0, r5
 8001af0:	f000 fd9c 	bl	800262c <mehal_readADC>

  }

  void updateChannelValue(uint8_t chn,uint16_t value)
  {
	  if(chn<ADC_CHANNELS)
 8001af4:	2d04      	cmp	r5, #4
	  {
		  this->currentValues[chn] = value;
 8001af6:	bf9c      	itt	ls
 8001af8:	4a06      	ldrls	r2, [pc, #24]	; (8001b14 <_ZN8MainLoop15adcStateMachineEv+0x2c>)
 8001afa:	f822 0015 	strhls.w	r0, [r2, r5, lsl #1]

	chn++;
 8001afe:	7822      	ldrb	r2, [r4, #0]
 8001b00:	3201      	adds	r2, #1
 8001b02:	b2d2      	uxtb	r2, r2
	if(chn>=ADC_CHANNELS)
 8001b04:	2a04      	cmp	r2, #4
	{
		chn=0;
 8001b06:	bf88      	it	hi
 8001b08:	2200      	movhi	r2, #0
 8001b0a:	7022      	strb	r2, [r4, #0]
	}

}
 8001b0c:	bd38      	pop	{r3, r4, r5, pc}
 8001b0e:	bf00      	nop
 8001b10:	20004790 	.word	0x20004790
 8001b14:	200003fc 	.word	0x200003fc

08001b18 <_ZN8MainLoop4loopEv>:
{
 8001b18:	b570      	push	{r4, r5, r6, lr}
 8001b1a:	4605      	mov	r5, r0
	userInterface.loop();
 8001b1c:	4825      	ldr	r0, [pc, #148]	; (8001bb4 <_ZN8MainLoop4loopEv+0x9c>)
 8001b1e:	f000 f941 	bl	8001da4 <_ZN2Ui4loopEv>
	uint8_t currentGate = mehal_readGateInput();
 8001b22:	f000 fdcf 	bl	80026c4 <mehal_readGateInput>
 8001b26:	4a24      	ldr	r2, [pc, #144]	; (8001bb8 <_ZN8MainLoop4loopEv+0xa0>)
	if(currentGate==0 && prevGate==1)
 8001b28:	b930      	cbnz	r0, 8001b38 <_ZN8MainLoop4loopEv+0x20>
 8001b2a:	7813      	ldrb	r3, [r2, #0]
 8001b2c:	2b01      	cmp	r3, #1
		trigger_flag=true;
 8001b2e:	bf01      	itttt	eq
 8001b30:	4922      	ldreq	r1, [pc, #136]	; (8001bbc <_ZN8MainLoop4loopEv+0xa4>)
 8001b32:	700b      	strbeq	r3, [r1, #0]
		flagTriggerInEvent=1;
 8001b34:	4922      	ldreq	r1, [pc, #136]	; (8001bc0 <_ZN8MainLoop4loopEv+0xa8>)
 8001b36:	600b      	streq	r3, [r1, #0]
	prevGate = currentGate;
 8001b38:	7010      	strb	r0, [r2, #0]
    return data[setting];
 8001b3a:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <_ZN8MainLoop4loopEv+0xac>)
    if (current_scale != settings.GetValue(SETTING_QUANTIZER_SCALE)) {
 8001b3c:	4a22      	ldr	r2, [pc, #136]	; (8001bc8 <_ZN8MainLoop4loopEv+0xb0>)
 8001b3e:	7a5b      	ldrb	r3, [r3, #9]
 8001b40:	7811      	ldrb	r1, [r2, #0]
 8001b42:	4299      	cmp	r1, r3
 8001b44:	d00c      	beq.n	8001b60 <_ZN8MainLoop4loopEv+0x48>
      current_scale = settings.GetValue(SETTING_QUANTIZER_SCALE);
 8001b46:	7013      	strb	r3, [r2, #0]
  }
  
  int32_t Process(int32_t pitch, int32_t root);
  
  void Configure(const Scale& scale) {
    Configure(scale.notes, scale.span, scale.num_notes);
 8001b48:	2228      	movs	r2, #40	; 0x28
 8001b4a:	435a      	muls	r2, r3
 8001b4c:	491f      	ldr	r1, [pc, #124]	; (8001bcc <_ZN8MainLoop4loopEv+0xb4>)
 8001b4e:	f102 0008 	add.w	r0, r2, #8
 8001b52:	188b      	adds	r3, r1, r2
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	5e8a      	ldrsh	r2, [r1, r2]
 8001b58:	4401      	add	r1, r0
 8001b5a:	481d      	ldr	r0, [pc, #116]	; (8001bd0 <_ZN8MainLoop4loopEv+0xb8>)
 8001b5c:	f7ff fad2 	bl	8001104 <_ZN6braids9Quantizer9ConfigureEPKssj>
	if(flagRender==1)
 8001b60:	4e1c      	ldr	r6, [pc, #112]	; (8001bd4 <_ZN8MainLoop4loopEv+0xbc>)
    this->adcStateMachine();
 8001b62:	4628      	mov	r0, r5
 8001b64:	f7ff ffc0 	bl	8001ae8 <_ZN8MainLoop15adcStateMachineEv>
	if(flagRender==1)
 8001b68:	7832      	ldrb	r2, [r6, #0]
 8001b6a:	2a01      	cmp	r2, #1
 8001b6c:	d121      	bne.n	8001bb2 <_ZN8MainLoop4loopEv+0x9a>
		if(indexBufferRender==0)
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <_ZN8MainLoop4loopEv+0xc0>)
 8001b70:	7819      	ldrb	r1, [r3, #0]
			out = samplesBuffer+(SAMPLES_BUFFER_SIZE/2);
 8001b72:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <_ZN8MainLoop4loopEv+0xc4>)
 8001b74:	f103 0418 	add.w	r4, r3, #24
 8001b78:	2900      	cmp	r1, #0
 8001b7a:	bf08      	it	eq
 8001b7c:	461c      	moveq	r4, r3
		mehal_debugPinSet();
 8001b7e:	f000 fd9f 	bl	80026c0 <mehal_debugPinSet>
		this->render(out,SAMPLES_BUFFER_SIZE/2);
 8001b82:	4621      	mov	r1, r4
		sysTickDivisor++;
 8001b84:	4c16      	ldr	r4, [pc, #88]	; (8001be0 <_ZN8MainLoop4loopEv+0xc8>)
		this->render(out,SAMPLES_BUFFER_SIZE/2);
 8001b86:	2218      	movs	r2, #24
 8001b88:	4628      	mov	r0, r5
 8001b8a:	f7ff fe1d 	bl	80017c8 <_ZN8MainLoop6renderEPhm>
		mehal_debugPinReset();
 8001b8e:	f000 fd98 	bl	80026c2 <mehal_debugPinReset>
		sysTickDivisor++;
 8001b92:	7823      	ldrb	r3, [r4, #0]
 8001b94:	3301      	adds	r3, #1
 8001b96:	b2db      	uxtb	r3, r3
		if(sysTickDivisor>=4)
 8001b98:	2b03      	cmp	r3, #3
		sysTickDivisor++;
 8001b9a:	7023      	strb	r3, [r4, #0]
		if(sysTickDivisor>=4)
 8001b9c:	d904      	bls.n	8001ba8 <_ZN8MainLoop4loopEv+0x90>
			userInterface.sysTick(); // 1ms
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <_ZN8MainLoop4loopEv+0x9c>)
 8001ba0:	f000 f867 	bl	8001c72 <_ZN2Ui7sysTickEv>
			sysTickDivisor=0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	7023      	strb	r3, [r4, #0]
		userInterface.justFinishedRender(); // notify the UI the render has finished. Now there is time to update the display
 8001ba8:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <_ZN8MainLoop4loopEv+0x9c>)
 8001baa:	f000 f8f7 	bl	8001d9c <_ZN2Ui18justFinishedRenderEv>
		flagRender=0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	7033      	strb	r3, [r6, #0]
}
 8001bb2:	bd70      	pop	{r4, r5, r6, pc}
 8001bb4:	200003c0 	.word	0x200003c0
 8001bb8:	2000029d 	.word	0x2000029d
 8001bbc:	2000038d 	.word	0x2000038d
 8001bc0:	200003f8 	.word	0x200003f8
 8001bc4:	20000310 	.word	0x20000310
 8001bc8:	2000029c 	.word	0x2000029c
 8001bcc:	0800e33c 	.word	0x0800e33c
 8001bd0:	20004680 	.word	0x20004680
 8001bd4:	20000374 	.word	0x20000374
 8001bd8:	200003f5 	.word	0x200003f5
 8001bdc:	2000038e 	.word	0x2000038e
 8001be0:	200003f4 	.word	0x200003f4

08001be4 <_GLOBAL__sub_I__ZN6stmlib11GetUniqueIdEh>:
  Adc() { }
 8001be4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <_GLOBAL__sub_I__ZN6stmlib11GetUniqueIdEh+0x1c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	8019      	strh	r1, [r3, #0]
 8001bee:	8059      	strh	r1, [r3, #2]
 8001bf0:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001bf4:	f8c3 2006 	str.w	r2, [r3, #6]
 8001bf8:	8099      	strh	r1, [r3, #4]
//#define OSCILLATOR_INDEX_LEN	43
#define OSCILLATOR_INDEX_LEN	32

using namespace braids;

class Ui
 8001bfa:	4b02      	ldr	r3, [pc, #8]	; (8001c04 <_GLOBAL__sub_I__ZN6stmlib11GetUniqueIdEh+0x20>)
 8001bfc:	759a      	strb	r2, [r3, #22]
}
 8001bfe:	4770      	bx	lr
 8001c00:	200003fc 	.word	0x200003fc
 8001c04:	200003c0 	.word	0x200003c0

08001c08 <_ZNK7Encoder9incrementEv.isra.0>:
  inline bool pressed_immediate() const {
    //return !GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13);
	  return !mehal_readEncoderSwitch();
  }
  
  inline int32_t increment() const {
 8001c08:	f000 0003 	and.w	r0, r0, #3
    int32_t increment = 0;
    uint8_t a = quadrature_decoding_state_[0];
    uint8_t b = quadrature_decoding_state_[1];
    if ((a & 0x03) == 0x02 && (b & 0x03) == 0x00) {
 8001c0c:	2802      	cmp	r0, #2
 8001c0e:	f001 0103 	and.w	r1, r1, #3
 8001c12:	d100      	bne.n	8001c16 <_ZNK7Encoder9incrementEv.isra.0+0xe>
 8001c14:	b129      	cbz	r1, 8001c22 <_ZNK7Encoder9incrementEv.isra.0+0x1a>
      increment = -1;
    } else {
      if ((b & 0x03) == 0x02 && (a & 0x03) == 0x00) {
 8001c16:	2902      	cmp	r1, #2
 8001c18:	d106      	bne.n	8001c28 <_ZNK7Encoder9incrementEv.isra.0+0x20>
 8001c1a:	fab0 f080 	clz	r0, r0
 8001c1e:	0940      	lsrs	r0, r0, #5
 8001c20:	4770      	bx	lr
      increment = -1;
 8001c22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c26:	4770      	bx	lr
    int32_t increment = 0;
 8001c28:	2000      	movs	r0, #0
        increment = 1;
      }
    }
    return increment;
  }
 8001c2a:	4770      	bx	lr

08001c2c <_ZN2Ui24getParamFromCurrentChordEv>:
};


uint16_t Ui::getParamFromCurrentChord(void)
{
	return  (((uint16_t)currentChord)<<11);
 8001c2c:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
 8001c30:	02c0      	lsls	r0, r0, #11
}
 8001c32:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8001c36:	4770      	bx	lr

08001c38 <_ZN2Ui28getParamFromCurrentWaveTableEv>:

uint16_t Ui::getParamFromCurrentWaveTable(void)
{
	return (((uint16_t)currentOscillator)<<10);
 8001c38:	f990 0010 	ldrsb.w	r0, [r0, #16]
 8001c3c:	0280      	lsls	r0, r0, #10
}
 8001c3e:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 8001c42:	4770      	bx	lr

08001c44 <_ZN2Ui16showUnCalibratedEv>:

	return osc_shape;
}

void Ui::showUnCalibrated(void)
{
 8001c44:	b510      	push	{r4, lr}
 8001c46:	4604      	mov	r4, r0
	display.showDigitDot();
 8001c48:	f000 faa1 	bl	800218e <_ZN7Display12showDigitDotEv>
	if(flagUncal!=1)
 8001c4c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8001c50:	2b01      	cmp	r3, #1
	{
		flagUncal=1;
 8001c52:	bf1c      	itt	ne
 8001c54:	f240 1301 	movwne	r3, #257	; 0x101
 8001c58:	85a3      	strhne	r3, [r4, #44]	; 0x2c
		fineTuneChanged=1;
	}
}
 8001c5a:	bd10      	pop	{r4, pc}

08001c5c <_ZN2Ui14showCalibratedEv>:
void Ui::showCalibrated(void)
{
 8001c5c:	b510      	push	{r4, lr}
 8001c5e:	4604      	mov	r4, r0
	display.hideDigitDot();
 8001c60:	f000 fa98 	bl	8002194 <_ZN7Display12hideDigitDotEv>
	if(flagUncal!=0)
 8001c64:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8001c68:	b113      	cbz	r3, 8001c70 <_ZN2Ui14showCalibratedEv+0x14>
	{
		flagUncal=0;
 8001c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c6e:	85a3      	strh	r3, [r4, #44]	; 0x2c
		fineTuneChanged=1;
	}
}
 8001c70:	bd10      	pop	{r4, pc}

08001c72 <_ZN2Ui7sysTickEv>:

void Ui::sysTick(void)
{
 8001c72:	b510      	push	{r4, lr}
 8001c74:	4604      	mov	r4, r0
	encoder.sysTick();
 8001c76:	3004      	adds	r0, #4
 8001c78:	f000 fa96 	bl	80021a8 <_ZN7Encoder7sysTickEv>

	if(timeoutCalibCounter>0)
 8001c7c:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	dd04      	ble.n	8001c8e <_ZN2Ui7sysTickEv+0x1c>
	{
		timeoutCalibCounter--;
 8001c84:	3b01      	subs	r3, #1
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	82a3      	strh	r3, [r4, #20]
		if(timeoutCalibCounter==0)
 8001c8a:	b903      	cbnz	r3, 8001c8e <_ZN2Ui7sysTickEv+0x1c>
		{
			enterCalibCounter=0;
 8001c8c:	75a3      	strb	r3, [r4, #22]
		}
	}
}
 8001c8e:	bd10      	pop	{r4, pc}

08001c90 <_ZN2Ui15saveAllSettingsEv>:

void Ui::saveAllSettings(void)
{
 8001c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c92:	4605      	mov	r5, r0
 8001c94:	2400      	movs	r4, #0
	uint16_t i;
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
	{
		Setting setting_ = CONFIG_ITEMS[i].option;
 8001c96:	4f07      	ldr	r7, [pc, #28]	; (8001cb4 <_ZN2Ui15saveAllSettingsEv+0x24>)
 8001c98:	4e07      	ldr	r6, [pc, #28]	; (8001cb8 <_ZN2Ui15saveAllSettingsEv+0x28>)
 8001c9a:	193b      	adds	r3, r7, r4
 8001c9c:	785b      	ldrb	r3, [r3, #1]
		int16_t value = settings.GetValue(setting_);
		this->memory->writeUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))), (uint16_t)value);
 8001c9e:	f104 0120 	add.w	r1, r4, #32
 8001ca2:	5cf2      	ldrb	r2, [r6, r3]
 8001ca4:	b289      	uxth	r1, r1
 8001ca6:	69e8      	ldr	r0, [r5, #28]
 8001ca8:	3402      	adds	r4, #2
 8001caa:	f000 fb0a 	bl	80022c2 <_ZN6Memory11writeUInt16Ett>
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
 8001cae:	2c16      	cmp	r4, #22
 8001cb0:	d1f3      	bne.n	8001c9a <_ZN2Ui15saveAllSettingsEv+0xa>
	}
}
 8001cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cb4:	0800eae4 	.word	0x0800eae4
 8001cb8:	20000310 	.word	0x20000310

08001cbc <_ZN2Ui15loadAllSettingsEv>:
void Ui::loadAllSettings(void)
{
 8001cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cc0:	4680      	mov	r8, r0
 8001cc2:	2400      	movs	r4, #0
	uint16_t i;
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
	{
		Setting setting_ = CONFIG_ITEMS[i].option;
 8001cc4:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8001d10 <_ZN2Ui15loadAllSettingsEv+0x54>
  inline bool paques() const {
    return paques_;
  }
  
  static const SettingMetadata& metadata(Setting setting) {
    return metadata_[setting];
 8001cc8:	4e0f      	ldr	r6, [pc, #60]	; (8001d08 <_ZN2Ui15loadAllSettingsEv+0x4c>)
    data[setting] = value;
 8001cca:	4f10      	ldr	r7, [pc, #64]	; (8001d0c <_ZN2Ui15loadAllSettingsEv+0x50>)

		int16_t valMem = (int16_t)this->memory->readUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))));
 8001ccc:	f104 0120 	add.w	r1, r4, #32
		Setting setting_ = CONFIG_ITEMS[i].option;
 8001cd0:	eb09 0304 	add.w	r3, r9, r4
		int16_t valMem = (int16_t)this->memory->readUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))));
 8001cd4:	b289      	uxth	r1, r1
 8001cd6:	f8d8 001c 	ldr.w	r0, [r8, #28]
		Setting setting_ = CONFIG_ITEMS[i].option;
 8001cda:	785d      	ldrb	r5, [r3, #1]
		int16_t valMem = (int16_t)this->memory->readUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))));
 8001cdc:	f000 facd 	bl	800227a <_ZN6Memory10readUInt16Et>
    return metadata_[setting];
 8001ce0:	230c      	movs	r3, #12
 8001ce2:	436b      	muls	r3, r5
 8001ce4:	199a      	adds	r2, r3, r6

		int16_t value = settings.metadata(setting_).Clip(valMem);
 8001ce6:	7852      	ldrb	r2, [r2, #1]
		int16_t valMem = (int16_t)this->memory->readUInt16(Memory::ADDR_BASE_SETTINGS+(i*(sizeof(uint16_t))));
 8001ce8:	b200      	sxth	r0, r0
    if (value > max_value) {
 8001cea:	4290      	cmp	r0, r2
		int16_t value = settings.metadata(setting_).Clip(valMem);
 8001cec:	5d9b      	ldrb	r3, [r3, r6]
 8001cee:	dd06      	ble.n	8001cfe <_ZN2Ui15loadAllSettingsEv+0x42>
      value = max_value;
 8001cf0:	b210      	sxth	r0, r2
 8001cf2:	3402      	adds	r4, #2
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
 8001cf4:	2c16      	cmp	r4, #22
		settings.SetValue(setting_, value);
 8001cf6:	55e8      	strb	r0, [r5, r7]
	for(i=0; i<CONFIG_ITEMS_SYMBOLS_LEN; i++)
 8001cf8:	d1e8      	bne.n	8001ccc <_ZN2Ui15loadAllSettingsEv+0x10>
	}
}
 8001cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    } else if (value < min_value) {
 8001cfe:	4298      	cmp	r0, r3
      value = min_value;
 8001d00:	bfb8      	it	lt
 8001d02:	b218      	sxthlt	r0, r3
 8001d04:	e7f5      	b.n	8001cf2 <_ZN2Ui15loadAllSettingsEv+0x36>
 8001d06:	bf00      	nop
 8001d08:	0800dc08 	.word	0x0800dc08
 8001d0c:	20000310 	.word	0x20000310
 8001d10:	0800eae4 	.word	0x0800eae4

08001d14 <_ZN2Ui4initEPN6braids3AdcEP6Memory>:
void Ui::init(Adc* adc,Memory* memory) {
 8001d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d16:	4604      	mov	r4, r0
 8001d18:	4616      	mov	r6, r2
 8001d1a:	460f      	mov	r7, r1
	display.init();
 8001d1c:	f000 f9d2 	bl	80020c4 <_ZN7Display4initEv>
	encoder.Init();
 8001d20:	1d20      	adds	r0, r4, #4
 8001d22:	f000 fa3a 	bl	800219a <_ZN7Encoder4InitEv>
	this->flagUncal=2;
 8001d26:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <_ZN2Ui4initEPN6braids3AdcEP6Memory+0x7c>)
	state = UI_STATE_SELECT_OSCILLATOR;
 8001d28:	2500      	movs	r5, #0
	this->flagUncal=2;
 8001d2a:	62e3      	str	r3, [r4, #44]	; 0x2c
	this->flagJustFinishedRender=0;
 8001d2c:	f44f 6330 	mov.w	r3, #2816	; 0xb00
	state = UI_STATE_SELECT_OSCILLATOR;
 8001d30:	7465      	strb	r5, [r4, #17]
	timeoutCalibCounter=0;
 8001d32:	82a5      	strh	r5, [r4, #20]
	enterCalibCounter=0;
 8001d34:	75a5      	strb	r5, [r4, #22]
	this->flagJustFinishedRender=0;
 8001d36:	8623      	strh	r3, [r4, #48]	; 0x30
	this->memory = memory;
 8001d38:	e9c4 7606 	strd	r7, r6, [r4, #24]
	currentOscillator=(int8_t)memory->readUInt8(Memory::ADDR_CURRENT_OSCILLATOR);
 8001d3c:	211c      	movs	r1, #28
 8001d3e:	4630      	mov	r0, r6
 8001d40:	f000 fa8f 	bl	8002262 <_ZN6Memory9readUInt8Et>
 8001d44:	b240      	sxtb	r0, r0
	if(currentOscillator>=OSCILLATOR_INDEX_LEN)
 8001d46:	281f      	cmp	r0, #31
	currentOscillator=(int8_t)memory->readUInt8(Memory::ADDR_CURRENT_OSCILLATOR);
 8001d48:	bfd4      	ite	le
 8001d4a:	7420      	strble	r0, [r4, #16]
		currentOscillator=0;
 8001d4c:	7425      	strbgt	r5, [r4, #16]
	display.showChar(LIMITED_OSCILLATORS[currentOscillator].symbol);
 8001d4e:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8001d52:	4d10      	ldr	r5, [pc, #64]	; (8001d94 <_ZN2Ui4initEPN6braids3AdcEP6Memory+0x80>)
 8001d54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001d58:	442b      	add	r3, r5
 8001d5a:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f000 f9b4 	bl	80020cc <_ZN7Display8showCharEa>
	display.showBank(LIMITED_OSCILLATORS[currentOscillator].bank);
 8001d64:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8001d68:	4620      	mov	r0, r4
 8001d6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001d6e:	441d      	add	r5, r3
 8001d70:	7869      	ldrb	r1, [r5, #1]
 8001d72:	f000 f9c5 	bl	8002100 <_ZN7Display8showBankEh>
    data[setting] = value;
 8001d76:	2228      	movs	r2, #40	; 0x28
 8001d78:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <_ZN2Ui4initEPN6braids3AdcEP6Memory+0x84>)
	display.showConfig(0);
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	701a      	strb	r2, [r3, #0]
 8001d7e:	2100      	movs	r1, #0
 8001d80:	f000 f9d7 	bl	8002132 <_ZN7Display10showConfigEh>
	loadAllSettings();
 8001d84:	4620      	mov	r0, r4
}
 8001d86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	loadAllSettings();
 8001d8a:	f7ff bf97 	b.w	8001cbc <_ZN2Ui15loadAllSettingsEv>
 8001d8e:	bf00      	nop
 8001d90:	00010002 	.word	0x00010002
 8001d94:	0800eafa 	.word	0x0800eafa
 8001d98:	20000310 	.word	0x20000310

08001d9c <_ZN2Ui18justFinishedRenderEv>:

void Ui::justFinishedRender(void)
{
	flagJustFinishedRender=1;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
}
 8001da2:	4770      	bx	lr

08001da4 <_ZN2Ui4loopEv>:

void Ui::loop(void) {
 8001da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001da8:	4604      	mov	r4, r0

	encoder.loop();
 8001daa:	1d05      	adds	r5, r0, #4
 8001dac:	4628      	mov	r0, r5
 8001dae:	f000 fa00 	bl	80021b2 <_ZN7Encoder4loopEv>

	switch(state)
 8001db2:	7c63      	ldrb	r3, [r4, #17]
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d87a      	bhi.n	8001eae <_ZN2Ui4loopEv+0x10a>
 8001db8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001dbc:	007b0005 	.word	0x007b0005
 8001dc0:	011100df 	.word	0x011100df
 8001dc4:	0131      	.short	0x0131
	{
		case UI_STATE_SELECT_OSCILLATOR:
		{
			if(flagJustFinishedRender)
 8001dc6:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8001dca:	b3d3      	cbz	r3, 8001e42 <_ZN2Ui4loopEv+0x9e>
			{
				flagJustFinishedRender=0;
 8001dcc:	2300      	movs	r3, #0
				if(fineTuneChanged)
 8001dce:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
				flagJustFinishedRender=0;
 8001dd2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
				if(fineTuneChanged)
 8001dd6:	b162      	cbz	r2, 8001df2 <_ZN2Ui4loopEv+0x4e>
				{
					fineTuneChanged=0;
 8001dd8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
					display.showChar(LIMITED_OSCILLATORS[currentOscillator].symbol); // update display to show DOT
 8001ddc:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8001de0:	4ab4      	ldr	r2, [pc, #720]	; (80020b4 <_ZN2Ui4loopEv+0x310>)
 8001de2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001de6:	4413      	add	r3, r2
 8001de8:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8001dec:	4620      	mov	r0, r4
 8001dee:	f000 f96d 	bl	80020cc <_ZN7Display8showCharEa>
				}
				if(oscillatorChanged)
 8001df2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8001df6:	b1b3      	cbz	r3, 8001e26 <_ZN2Ui4loopEv+0x82>
				{
					oscillatorChanged=0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
					display.showChar(LIMITED_OSCILLATORS[currentOscillator].symbol);
 8001dfe:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8001e02:	4eac      	ldr	r6, [pc, #688]	; (80020b4 <_ZN2Ui4loopEv+0x310>)
 8001e04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001e08:	4433      	add	r3, r6
 8001e0a:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8001e0e:	4620      	mov	r0, r4
 8001e10:	f000 f95c 	bl	80020cc <_ZN7Display8showCharEa>
					display.showBank(LIMITED_OSCILLATORS[currentOscillator].bank);
 8001e14:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8001e18:	4620      	mov	r0, r4
 8001e1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001e1e:	441e      	add	r6, r3
 8001e20:	7871      	ldrb	r1, [r6, #1]
 8001e22:	f000 f96d 	bl	8002100 <_ZN7Display8showBankEh>

				}
				if(flagPendingSetCurrentOscillator)
 8001e26:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8001e2a:	b153      	cbz	r3, 8001e42 <_ZN2Ui4loopEv+0x9e>
				{
					flagPendingSetCurrentOscillator=0;
 8001e2c:	2100      	movs	r1, #0
					//settings.SetValue(SETTING_OSCILLATOR_SHAPE, LIMITED_OSCILLATORS[currentOscillator].osc);
					display.showConfig(0);
 8001e2e:	4620      	mov	r0, r4
					flagPendingSetCurrentOscillator=0;
 8001e30:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
					display.showConfig(0);
 8001e34:	f000 f97d 	bl	8002132 <_ZN7Display10showConfigEh>
					memory->writeUInt8NoWait(Memory::ADDR_CURRENT_OSCILLATOR, (uint8_t)currentOscillator);
 8001e38:	7c22      	ldrb	r2, [r4, #16]
 8001e3a:	211c      	movs	r1, #28
 8001e3c:	69e0      	ldr	r0, [r4, #28]
 8001e3e:	f000 fa34 	bl	80022aa <_ZN6Memory16writeUInt8NoWaitEth>
				}
			}

			int32_t increment = encoder.increment();
 8001e42:	79a1      	ldrb	r1, [r4, #6]
 8001e44:	7960      	ldrb	r0, [r4, #5]
 8001e46:	f7ff fedf 	bl	8001c08 <_ZNK7Encoder9incrementEv.isra.0>
			if (increment != 0)
 8001e4a:	2800      	cmp	r0, #0
 8001e4c:	d018      	beq.n	8001e80 <_ZN2Ui4loopEv+0xdc>
 8001e4e:	7c23      	ldrb	r3, [r4, #16]
				if(currentOscillator>=OSCILLATOR_INDEX_LEN)
					currentOscillator=(OSCILLATOR_INDEX_LEN-1);
				if(currentOscillator<0)
					currentOscillator=0;

				oscillatorChanged=1; // to update display later
 8001e50:	f04f 0101 	mov.w	r1, #1
					currentOscillator++;
 8001e54:	bfcc      	ite	gt
 8001e56:	3301      	addgt	r3, #1
					currentOscillator--;
 8001e58:	f103 33ff 	addle.w	r3, r3, #4294967295	; 0xffffffff
 8001e5c:	7423      	strb	r3, [r4, #16]
				if(currentOscillator>=OSCILLATOR_INDEX_LEN)
 8001e5e:	f994 3010 	ldrsb.w	r3, [r4, #16]
				oscillatorChanged=1; // to update display later
 8001e62:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
				if(currentOscillator>=OSCILLATOR_INDEX_LEN)
 8001e66:	2b1f      	cmp	r3, #31
					currentOscillator=(OSCILLATOR_INDEX_LEN-1);
 8001e68:	bfc4      	itt	gt
 8001e6a:	231f      	movgt	r3, #31
 8001e6c:	7423      	strbgt	r3, [r4, #16]
				if(currentOscillator<0)
 8001e6e:	f994 3010 	ldrsb.w	r3, [r4, #16]
				display.showConfig(1);
 8001e72:	4620      	mov	r0, r4
				if(currentOscillator<0)
 8001e74:	2b00      	cmp	r3, #0
					currentOscillator=0;
 8001e76:	bfbc      	itt	lt
 8001e78:	2300      	movlt	r3, #0
 8001e7a:	7423      	strblt	r3, [r4, #16]
				display.showConfig(1);
 8001e7c:	f000 f959 	bl	8002132 <_ZN7Display10showConfigEh>
			}
			if(encoder.pressed())
 8001e80:	4628      	mov	r0, r5
 8001e82:	f000 f9de 	bl	8002242 <_ZN7Encoder7pressedEv>
 8001e86:	b110      	cbz	r0, 8001e8e <_ZN2Ui4loopEv+0xea>
			{
				flagPendingSetCurrentOscillator=1;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
			}

			if(encoder.pressedLong())
 8001e8e:	4628      	mov	r0, r5
 8001e90:	f000 f9d1 	bl	8002236 <_ZN7Encoder11pressedLongEv>
 8001e94:	b158      	cbz	r0, 8001eae <_ZN2Ui4loopEv+0x10a>
			{
				state = UI_STATE_CONFIG_MENU;
 8001e96:	2101      	movs	r1, #1
				display.showConfig(1);
 8001e98:	4620      	mov	r0, r4
				state = UI_STATE_CONFIG_MENU;
 8001e9a:	7461      	strb	r1, [r4, #17]
				display.showConfig(1);
 8001e9c:	f000 f949 	bl	8002132 <_ZN7Display10showConfigEh>
				display.showBank(2); // both off
 8001ea0:	2102      	movs	r1, #2
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	f000 f92c 	bl	8002100 <_ZN7Display8showBankEh>
				configIndex=0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	74a3      	strb	r3, [r4, #18]

				// Calibration mode detection
				if(enterCalibCounter==0)
					timeoutCalibCounter=2000;

				enterCalibCounter++;
 8001eac:	75a3      	strb	r3, [r4, #22]
			}
			break;
		}
	}

}
 8001eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(encoder.pressedLong())
 8001eb2:	4628      	mov	r0, r5
 8001eb4:	f000 f9bf 	bl	8002236 <_ZN7Encoder11pressedLongEv>
 8001eb8:	b1e8      	cbz	r0, 8001ef6 <_ZN2Ui4loopEv+0x152>
				state = UI_STATE_SELECT_OSCILLATOR;
 8001eba:	2100      	movs	r1, #0
				display.showConfig(0);
 8001ebc:	4620      	mov	r0, r4
				state = UI_STATE_SELECT_OSCILLATOR;
 8001ebe:	7461      	strb	r1, [r4, #17]
				display.showConfig(0);
 8001ec0:	f000 f937 	bl	8002132 <_ZN7Display10showConfigEh>
				display.showBank(LIMITED_OSCILLATORS[currentOscillator].bank);
 8001ec4:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8001ec8:	4d7a      	ldr	r5, [pc, #488]	; (80020b4 <_ZN2Ui4loopEv+0x310>)
 8001eca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001ece:	442b      	add	r3, r5
 8001ed0:	7859      	ldrb	r1, [r3, #1]
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	f000 f914 	bl	8002100 <_ZN7Display8showBankEh>
				display.showChar(LIMITED_OSCILLATORS[currentOscillator].symbol);
 8001ed8:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8001edc:	4620      	mov	r0, r4
 8001ede:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001ee2:	441d      	add	r5, r3
 8001ee4:	f995 1002 	ldrsb.w	r1, [r5, #2]
 8001ee8:	f000 f8f0 	bl	80020cc <_ZN7Display8showCharEa>
				saveAllSettings();
 8001eec:	4620      	mov	r0, r4
}
 8001eee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				saveAllSettings();
 8001ef2:	f7ff becd 	b.w	8001c90 <_ZN2Ui15saveAllSettingsEv>
			display.showChar(CONFIG_ITEMS[configIndex].symbol);
 8001ef6:	f994 2012 	ldrsb.w	r2, [r4, #18]
 8001efa:	4b6f      	ldr	r3, [pc, #444]	; (80020b8 <_ZN2Ui4loopEv+0x314>)
 8001efc:	4620      	mov	r0, r4
 8001efe:	f913 1012 	ldrsb.w	r1, [r3, r2, lsl #1]
 8001f02:	f000 f8e3 	bl	80020cc <_ZN7Display8showCharEa>
			int32_t increment = encoder.increment();
 8001f06:	79a1      	ldrb	r1, [r4, #6]
 8001f08:	7960      	ldrb	r0, [r4, #5]
 8001f0a:	f7ff fe7d 	bl	8001c08 <_ZNK7Encoder9incrementEv.isra.0>
			if (increment != 0)
 8001f0e:	2800      	cmp	r0, #0
 8001f10:	d011      	beq.n	8001f36 <_ZN2Ui4loopEv+0x192>
 8001f12:	7ca3      	ldrb	r3, [r4, #18]
					configIndex++;
 8001f14:	bfcc      	ite	gt
 8001f16:	3301      	addgt	r3, #1
					configIndex--;
 8001f18:	f103 33ff 	addle.w	r3, r3, #4294967295	; 0xffffffff
 8001f1c:	74a3      	strb	r3, [r4, #18]
				if(configIndex>=CONFIG_ITEMS_SYMBOLS_LEN)
 8001f1e:	f994 3012 	ldrsb.w	r3, [r4, #18]
 8001f22:	2b0a      	cmp	r3, #10
					configIndex=CONFIG_ITEMS_SYMBOLS_LEN-1;
 8001f24:	bfc4      	itt	gt
 8001f26:	230a      	movgt	r3, #10
 8001f28:	74a3      	strbgt	r3, [r4, #18]
				if(configIndex<0)
 8001f2a:	f994 3012 	ldrsb.w	r3, [r4, #18]
 8001f2e:	2b00      	cmp	r3, #0
					configIndex=0;
 8001f30:	bfbc      	itt	lt
 8001f32:	2300      	movlt	r3, #0
 8001f34:	74a3      	strblt	r3, [r4, #18]
			if(encoder.pressed())
 8001f36:	4628      	mov	r0, r5
 8001f38:	f000 f983 	bl	8002242 <_ZN7Encoder7pressedEv>
 8001f3c:	2800      	cmp	r0, #0
 8001f3e:	d0b6      	beq.n	8001eae <_ZN2Ui4loopEv+0x10a>
				state = UI_STATE_SET_VALUE;
 8001f40:	2302      	movs	r3, #2
 8001f42:	7463      	strb	r3, [r4, #17]
				if(enterCalibCounter==0)
 8001f44:	7da3      	ldrb	r3, [r4, #22]
 8001f46:	b913      	cbnz	r3, 8001f4e <_ZN2Ui4loopEv+0x1aa>
					timeoutCalibCounter=2000;
 8001f48:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001f4c:	82a2      	strh	r2, [r4, #20]
				enterCalibCounter++;
 8001f4e:	3301      	adds	r3, #1
 8001f50:	b2db      	uxtb	r3, r3
				if(enterCalibCounter>=4)
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	d9aa      	bls.n	8001eac <_ZN2Ui4loopEv+0x108>
					enterCalibCounter=0;
 8001f56:	2300      	movs	r3, #0
					state = UI_STATE_CALIB;
 8001f58:	2503      	movs	r5, #3
					enterCalibCounter=0;
 8001f5a:	75a3      	strb	r3, [r4, #22]
					display.showConfig(1);
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	4620      	mov	r0, r4
					state = UI_STATE_CALIB;
 8001f60:	7465      	strb	r5, [r4, #17]
					display.showConfig(1);
 8001f62:	f000 f8e6 	bl	8002132 <_ZN7Display10showConfigEh>
					display.showBank(3); // all leds ON
 8001f66:	4629      	mov	r1, r5
 8001f68:	4620      	mov	r0, r4
 8001f6a:	f000 f8c9 	bl	8002100 <_ZN7Display8showBankEh>
					display.showChar('2');
 8001f6e:	2132      	movs	r1, #50	; 0x32
				display.showChar('4');
 8001f70:	4620      	mov	r0, r4
}
 8001f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				display.showChar('4');
 8001f76:	f000 b8a9 	b.w	80020cc <_ZN7Display8showCharEa>
			Setting setting_ = CONFIG_ITEMS[configIndex].option;
 8001f7a:	f994 2012 	ldrsb.w	r2, [r4, #18]
 8001f7e:	4b4e      	ldr	r3, [pc, #312]	; (80020b8 <_ZN2Ui4loopEv+0x314>)
    return data[setting];
 8001f80:	4f4e      	ldr	r7, [pc, #312]	; (80020bc <_ZN2Ui4loopEv+0x318>)
 8001f82:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8001f86:	785b      	ldrb	r3, [r3, #1]
			int32_t increment = encoder.increment();
 8001f88:	79a1      	ldrb	r1, [r4, #6]
 8001f8a:	7960      	ldrb	r0, [r4, #5]
 8001f8c:	5dda      	ldrb	r2, [r3, r7]
 8001f8e:	f7ff fe3b 	bl	8001c08 <_ZNK7Encoder9incrementEv.isra.0>
 8001f92:	4e4b      	ldr	r6, [pc, #300]	; (80020c0 <_ZN2Ui4loopEv+0x31c>)
			if (increment != 0)
 8001f94:	b988      	cbnz	r0, 8001fba <_ZN2Ui4loopEv+0x216>
			int16_t value = settings.GetValue(setting_);
 8001f96:	b212      	sxth	r2, r2
			display.showValue(settings.metadata(setting_).max_value,value);
 8001f98:	210c      	movs	r1, #12
 8001f9a:	fb01 6303 	mla	r3, r1, r3, r6
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	7859      	ldrb	r1, [r3, #1]
 8001fa4:	f000 f8c8 	bl	8002138 <_ZN7Display9showValueEhh>
			if(encoder.pressed())
 8001fa8:	4628      	mov	r0, r5
 8001faa:	f000 f94a 	bl	8002242 <_ZN7Encoder7pressedEv>
 8001fae:	2800      	cmp	r0, #0
 8001fb0:	f43f af7d 	beq.w	8001eae <_ZN2Ui4loopEv+0x10a>
				state = UI_STATE_CONFIG_MENU;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	7463      	strb	r3, [r4, #17]
}
 8001fb8:	e779      	b.n	8001eae <_ZN2Ui4loopEv+0x10a>
    return metadata_[setting];
 8001fba:	210c      	movs	r1, #12
 8001fbc:	4359      	muls	r1, r3
 8001fbe:	eb06 0c01 	add.w	ip, r6, r1
				value = settings.metadata(setting_).Clip(value + increment);
 8001fc2:	4402      	add	r2, r0
 8001fc4:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8001fc8:	b212      	sxth	r2, r2
    if (value > max_value) {
 8001fca:	4290      	cmp	r0, r2
 8001fcc:	5c71      	ldrb	r1, [r6, r1]
 8001fce:	da02      	bge.n	8001fd6 <_ZN2Ui4loopEv+0x232>
      value = max_value;
 8001fd0:	b202      	sxth	r2, r0
				settings.SetValue(setting_, value);
 8001fd2:	55da      	strb	r2, [r3, r7]
 8001fd4:	e7e0      	b.n	8001f98 <_ZN2Ui4loopEv+0x1f4>
    } else if (value < min_value) {
 8001fd6:	428a      	cmp	r2, r1
      value = min_value;
 8001fd8:	bfb8      	it	lt
 8001fda:	b20a      	sxthlt	r2, r1
 8001fdc:	e7f9      	b.n	8001fd2 <_ZN2Ui4loopEv+0x22e>
			if(encoder.pressedLong())
 8001fde:	4628      	mov	r0, r5
 8001fe0:	f000 f929 	bl	8002236 <_ZN7Encoder11pressedLongEv>
 8001fe4:	b150      	cbz	r0, 8001ffc <_ZN2Ui4loopEv+0x258>
				state = UI_STATE_CONFIG_MENU;
 8001fe6:	2101      	movs	r1, #1
				display.showConfig(1);
 8001fe8:	4620      	mov	r0, r4
				state = UI_STATE_CONFIG_MENU;
 8001fea:	7461      	strb	r1, [r4, #17]
				display.showConfig(1);
 8001fec:	f000 f8a1 	bl	8002132 <_ZN7Display10showConfigEh>
				display.showBank(2); // all leds OFF
 8001ff0:	4620      	mov	r0, r4
}
 8001ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				display.showBank(2); // all leds OFF
 8001ff6:	2102      	movs	r1, #2
 8001ff8:	f000 b882 	b.w	8002100 <_ZN7Display8showBankEh>
			if(encoder.pressed())
 8001ffc:	4628      	mov	r0, r5
 8001ffe:	f000 f920 	bl	8002242 <_ZN7Encoder7pressedEv>
 8002002:	2800      	cmp	r0, #0
 8002004:	f43f af53 	beq.w	8001eae <_ZN2Ui4loopEv+0x10a>
				adc_code_c2 = adc->channel(ADC_CHANNEL_PITCH);
 8002008:	69a3      	ldr	r3, [r4, #24]
				display.showChar('4');
 800200a:	2134      	movs	r1, #52	; 0x34
				adc_code_c2 = adc->channel(ADC_CHANNEL_PITCH);
 800200c:	891a      	ldrh	r2, [r3, #8]
 800200e:	6222      	str	r2, [r4, #32]
				adc_code_p0_min = adc->channel(ADC_CHANNEL_PARAM0);
 8002010:	885a      	ldrh	r2, [r3, #2]
 8002012:	6262      	str	r2, [r4, #36]	; 0x24
				adc_code_p1_min = adc->channel(ADC_CHANNEL_PARAM1);
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	62a3      	str	r3, [r4, #40]	; 0x28
				state = UI_STATE_CALIB_STEP_2;
 8002018:	2304      	movs	r3, #4
 800201a:	7463      	strb	r3, [r4, #17]
 800201c:	e7a8      	b.n	8001f70 <_ZN2Ui4loopEv+0x1cc>
			if(encoder.pressedLong())
 800201e:	4628      	mov	r0, r5
 8002020:	f000 f909 	bl	8002236 <_ZN7Encoder11pressedLongEv>
 8002024:	4680      	mov	r8, r0
 8002026:	2800      	cmp	r0, #0
 8002028:	d1dd      	bne.n	8001fe6 <_ZN2Ui4loopEv+0x242>
			if(encoder.pressed())
 800202a:	4628      	mov	r0, r5
 800202c:	f000 f909 	bl	8002242 <_ZN7Encoder7pressedEv>
 8002030:	2800      	cmp	r0, #0
 8002032:	f43f af3c 	beq.w	8001eae <_ZN2Ui4loopEv+0x10a>
				int32_t adc_code_c4 = adc->channel(ADC_CHANNEL_PITCH);
 8002036:	69a3      	ldr	r3, [r4, #24]
				settings.Calibrate(adc_code_c2,
 8002038:	6a22      	ldr	r2, [r4, #32]
		  return this->currentValues[4];
 800203a:	891d      	ldrh	r5, [r3, #8]
		  return this->currentValues[1];
 800203c:	885f      	ldrh	r7, [r3, #2]
    if (adc_code_c4 != adc_code_c2) {
 800203e:	42aa      	cmp	r2, r5
		  return this->currentValues[0];
 8002040:	881e      	ldrh	r6, [r3, #0]
 8002042:	d00f      	beq.n	8002064 <_ZN2Ui4loopEv+0x2c0>
      int32_t scale = (24 * 128 * 4096L) / (adc_code_c4 - adc_code_c2);
 8002044:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8002048:	1aa9      	subs	r1, r5, r2
 800204a:	fb93 f3f1 	sdiv	r3, r3, r1
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 800204e:	442a      	add	r2, r5
      data_.pitch_cv_scale = scale;
 8002050:	491a      	ldr	r1, [pc, #104]	; (80020bc <_ZN2Ui4loopEv+0x318>)
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 8002052:	1052      	asrs	r2, r2, #1
      data_.pitch_cv_scale = scale;
 8002054:	618b      	str	r3, [r1, #24]
          (scale * ((adc_code_c2 + adc_code_c4) >> 1) >> 12);
 8002056:	4353      	muls	r3, r2
 8002058:	131b      	asrs	r3, r3, #12
      data_.pitch_cv_offset = (60 << 7) - 
 800205a:	f5c3 53f0 	rsb	r3, r3, #7680	; 0x1e00
 800205e:	614b      	str	r3, [r1, #20]
      data_.fm_cv_offset = adc_code_fm;
 8002060:	f8c1 801c 	str.w	r8, [r1, #28]
    Save();
 8002064:	4815      	ldr	r0, [pc, #84]	; (80020bc <_ZN2Ui4loopEv+0x318>)
 8002066:	f7ff f941 	bl	80012ec <_ZN6braids8Settings4SaveEv>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_C2, adc_code_c2);
 800206a:	6a22      	ldr	r2, [r4, #32]
 800206c:	2100      	movs	r1, #0
 800206e:	69e0      	ldr	r0, [r4, #28]
 8002070:	f000 f90f 	bl	8002292 <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_C4, adc_code_c4);
 8002074:	462a      	mov	r2, r5
 8002076:	2104      	movs	r1, #4
 8002078:	69e0      	ldr	r0, [r4, #28]
 800207a:	f000 f90a 	bl	8002292 <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_FM, adc_code_fm);
 800207e:	2200      	movs	r2, #0
 8002080:	2108      	movs	r1, #8
 8002082:	69e0      	ldr	r0, [r4, #28]
 8002084:	f000 f905 	bl	8002292 <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_P0_MIN, adc_code_p0_min);
 8002088:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800208a:	210c      	movs	r1, #12
 800208c:	69e0      	ldr	r0, [r4, #28]
 800208e:	f000 f900 	bl	8002292 <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_P0_MAX, adc_code_p0_max);
 8002092:	463a      	mov	r2, r7
 8002094:	2110      	movs	r1, #16
 8002096:	69e0      	ldr	r0, [r4, #28]
 8002098:	f000 f8fb 	bl	8002292 <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_P1_MIN, adc_code_p1_min);
 800209c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800209e:	2114      	movs	r1, #20
 80020a0:	69e0      	ldr	r0, [r4, #28]
 80020a2:	f000 f8f6 	bl	8002292 <_ZN6Memory11writeUInt32Etm>
				this->memory->writeUInt32(Memory::ADDR_ADC_CODE_P1_MAX, adc_code_p1_max);
 80020a6:	4632      	mov	r2, r6
 80020a8:	2118      	movs	r1, #24
 80020aa:	69e0      	ldr	r0, [r4, #28]
 80020ac:	f000 f8f1 	bl	8002292 <_ZN6Memory11writeUInt32Etm>
 80020b0:	e780      	b.n	8001fb4 <_ZN2Ui4loopEv+0x210>
 80020b2:	bf00      	nop
 80020b4:	0800eafa 	.word	0x0800eafa
 80020b8:	0800eae4 	.word	0x0800eae4
 80020bc:	20000310 	.word	0x20000310
 80020c0:	0800dc08 	.word	0x0800dc08

080020c4 <_ZN7Display4initEv>:
		0b00000000, // Y *
		0b00000000  // Z *
};

void Display::init(void) {
	this->dotState=0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	7003      	strb	r3, [r0, #0]
}
 80020c8:	4770      	bx	lr
	...

080020cc <_ZN7Display8showCharEa>:

void Display::showChar(int8_t c) {

	uint8_t data;

	if(c>='A' && c<='Z')
 80020cc:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b19      	cmp	r3, #25
		data = CHARS_TABLE[c - 'A'];
 80020d4:	bf95      	itete	ls
 80020d6:	4b08      	ldrls	r3, [pc, #32]	; (80020f8 <_ZN7Display8showCharEa+0x2c>)
	else
		data = NUMBERS_TABLE[c - '0'];
 80020d8:	4b08      	ldrhi	r3, [pc, #32]	; (80020fc <_ZN7Display8showCharEa+0x30>)
		data = CHARS_TABLE[c - 'A'];
 80020da:	18c9      	addls	r1, r1, r3
		data = NUMBERS_TABLE[c - '0'];
 80020dc:	18c9      	addhi	r1, r1, r3
		data = CHARS_TABLE[c - 'A'];
 80020de:	bf94      	ite	ls
 80020e0:	f811 3c41 	ldrbls.w	r3, [r1, #-65]
		data = NUMBERS_TABLE[c - '0'];
 80020e4:	f811 3c30 	ldrbhi.w	r3, [r1, #-48]

	data = data | (this->dotState<<7);
 80020e8:	7800      	ldrb	r0, [r0, #0]
 80020ea:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7

	data = ~data;
 80020ee:	43c0      	mvns	r0, r0

	mehal_sendDataTo595(data);
 80020f0:	b2c0      	uxtb	r0, r0
 80020f2:	f000 bb07 	b.w	8002704 <mehal_sendDataTo595>
 80020f6:	bf00      	nop
 80020f8:	0800eb5a 	.word	0x0800eb5a
 80020fc:	0800eb74 	.word	0x0800eb74

08002100 <_ZN7Display8showBankEh>:
}

void Display::showBank(uint8_t bankNumber) {
 8002100:	b508      	push	{r3, lr}

	switch(bankNumber)
 8002102:	2903      	cmp	r1, #3
 8002104:	d814      	bhi.n	8002130 <_ZN7Display8showBankEh+0x30>
 8002106:	e8df f001 	tbb	[pc, r1]
 800210a:	0a02      	.short	0x0a02
 800210c:	110f      	.short	0x110f
	{
		case 0:
			mehal_setBank0Led(1);
 800210e:	2001      	movs	r0, #1
		case 1:
			mehal_setBank0Led(0);
			mehal_setBank1Led(1);
			break;
		case 2:
			mehal_setBank0Led(0);
 8002110:	f000 fb44 	bl	800279c <mehal_setBank0Led>
			mehal_setBank1Led(0);
 8002114:	2000      	movs	r0, #0
		case 3:
			mehal_setBank0Led(1);
			mehal_setBank1Led(1);
			break;
	}
}
 8002116:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			mehal_setBank1Led(1);
 800211a:	f000 bb33 	b.w	8002784 <mehal_setBank1Led>
			mehal_setBank0Led(0);
 800211e:	2000      	movs	r0, #0
			mehal_setBank0Led(1);
 8002120:	f000 fb3c 	bl	800279c <mehal_setBank0Led>
			mehal_setBank1Led(1);
 8002124:	2001      	movs	r0, #1
 8002126:	e7f6      	b.n	8002116 <_ZN7Display8showBankEh+0x16>
			mehal_setBank0Led(0);
 8002128:	2000      	movs	r0, #0
 800212a:	e7f1      	b.n	8002110 <_ZN7Display8showBankEh+0x10>
			mehal_setBank0Led(1);
 800212c:	2001      	movs	r0, #1
 800212e:	e7f7      	b.n	8002120 <_ZN7Display8showBankEh+0x20>
}
 8002130:	bd08      	pop	{r3, pc}

08002132 <_ZN7Display10showConfigEh>:

void Display::showConfig(uint8_t flagOnOff) {

	mehal_setConfigLed(flagOnOff);
 8002132:	4608      	mov	r0, r1
 8002134:	f000 bb1a 	b.w	800276c <mehal_setConfigLed>

08002138 <_ZN7Display9showValueEhh>:
}

void Display::showValue(uint8_t maxValue,uint8_t value)
{
	switch(maxValue)
 8002138:	3901      	subs	r1, #1
 800213a:	2912      	cmp	r1, #18
 800213c:	d826      	bhi.n	800218c <_ZN7Display9showValueEhh+0x54>
 800213e:	e8df f001 	tbb	[pc, r1]
 8002142:	1812      	.short	0x1812
 8002144:	25251e25 	.word	0x25251e25
 8002148:	25252525 	.word	0x25252525
 800214c:	2525251e 	.word	0x2525251e
 8002150:	2525250a 	.word	0x2525250a
 8002154:	1e          	.byte	0x1e
 8002155:	00          	.byte	0x00
	{
		case 15:
		{
			// 0 to 15 scale
			uint16_t val = value*9/15;
 8002156:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
 800215a:	220f      	movs	r2, #15
 800215c:	fb91 f1f2 	sdiv	r1, r1, r2
			showChar('0'+val);
 8002160:	3130      	adds	r1, #48	; 0x30
		case 19:
		{
			if(value<=9)
				showChar('0'+value);
			else
				showChar('A'+(value-10));
 8002162:	b249      	sxtb	r1, r1
 8002164:	e001      	b.n	800216a <_ZN7Display9showValueEhh+0x32>
			if(value==0)
 8002166:	b912      	cbnz	r2, 800216e <_ZN7Display9showValueEhh+0x36>
				showChar('0');
 8002168:	2130      	movs	r1, #48	; 0x30
				showChar('A'+(value-10));
 800216a:	f7ff bfaf 	b.w	80020cc <_ZN7Display8showCharEa>
				showChar('1');
 800216e:	2131      	movs	r1, #49	; 0x31
 8002170:	e7fb      	b.n	800216a <_ZN7Display9showValueEhh+0x32>
			if(value==0)
 8002172:	2a00      	cmp	r2, #0
 8002174:	d0f8      	beq.n	8002168 <_ZN7Display9showValueEhh+0x30>
			else if(value==1)
 8002176:	2a01      	cmp	r2, #1
 8002178:	d0f9      	beq.n	800216e <_ZN7Display9showValueEhh+0x36>
				showChar('2');
 800217a:	2132      	movs	r1, #50	; 0x32
 800217c:	e7f5      	b.n	800216a <_ZN7Display9showValueEhh+0x32>
			if(value<=9)
 800217e:	2a09      	cmp	r2, #9
				showChar('0'+value);
 8002180:	bf94      	ite	ls
 8002182:	f102 0130 	addls.w	r1, r2, #48	; 0x30
				showChar('A'+(value-10));
 8002186:	f102 0137 	addhi.w	r1, r2, #55	; 0x37
 800218a:	e7ea      	b.n	8002162 <_ZN7Display9showValueEhh+0x2a>

			break;
		}

	}
}
 800218c:	4770      	bx	lr

0800218e <_ZN7Display12showDigitDotEv>:

void Display::showDigitDot(void)
{
	this->dotState=1;
 800218e:	2301      	movs	r3, #1
 8002190:	7003      	strb	r3, [r0, #0]
}
 8002192:	4770      	bx	lr

08002194 <_ZN7Display12hideDigitDotEv>:
 8002194:	2300      	movs	r3, #0
 8002196:	7003      	strb	r3, [r0, #0]
 8002198:	4770      	bx	lr

0800219a <_ZN7Encoder4InitEv>:
#define ENCODER_SW_STATE_WAIT_RELEASE 	1
#define ENCODER_SW_STATE_DEBOUNCE		2


void Encoder::Init() {
  switch_state_ = 0xff;
 800219a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800219e:	8003      	strh	r3, [r0, #0]
  quadrature_decoding_state_[0] = quadrature_decoding_state_[1] = 0xff;
 80021a0:	7083      	strb	r3, [r0, #2]
  state = ENCODER_SW_STATE_IDLE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	7203      	strb	r3, [r0, #8]
}
 80021a6:	4770      	bx	lr

080021a8 <_ZN7Encoder7sysTickEv>:

void Encoder::sysTick(void) {
	if(swTimeout>0)
 80021a8:	6843      	ldr	r3, [r0, #4]
 80021aa:	b10b      	cbz	r3, 80021b0 <_ZN7Encoder7sysTickEv+0x8>
	{
		swTimeout--;
 80021ac:	3b01      	subs	r3, #1
 80021ae:	6043      	str	r3, [r0, #4]
	}
}
 80021b0:	4770      	bx	lr

080021b2 <_ZN7Encoder4loopEv>:


void Encoder::loop(void) {
 80021b2:	b538      	push	{r3, r4, r5, lr}
	switch(state)
 80021b4:	7a03      	ldrb	r3, [r0, #8]
void Encoder::loop(void) {
 80021b6:	4604      	mov	r4, r0
	switch(state)
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d022      	beq.n	8002202 <_ZN7Encoder4loopEv+0x50>
 80021bc:	d317      	bcc.n	80021ee <_ZN7Encoder4loopEv+0x3c>
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d030      	beq.n	8002224 <_ZN7Encoder4loopEv+0x72>
			break;
		}
	}

	// encoder reading
	  switch_state_ = (switch_state_ << 1) | \
 80021c2:	7825      	ldrb	r5, [r4, #0]
			  mehal_readEncoderSwitch();
 80021c4:	f000 fa86 	bl	80026d4 <mehal_readEncoderSwitch>
	  switch_state_ = (switch_state_ << 1) | \
 80021c8:	006d      	lsls	r5, r5, #1
 80021ca:	b26d      	sxtb	r5, r5
 80021cc:	4328      	orrs	r0, r5
 80021ce:	7020      	strb	r0, [r4, #0]

	  quadrature_decoding_state_[0] = (quadrature_decoding_state_[0] << 1) | \
 80021d0:	7865      	ldrb	r5, [r4, #1]
			  mehal_readEncoderB();
 80021d2:	f000 fa8f 	bl	80026f4 <mehal_readEncoderB>
	  quadrature_decoding_state_[0] = (quadrature_decoding_state_[0] << 1) | \
 80021d6:	006d      	lsls	r5, r5, #1
 80021d8:	b26d      	sxtb	r5, r5
 80021da:	4328      	orrs	r0, r5
 80021dc:	7060      	strb	r0, [r4, #1]

	  quadrature_decoding_state_[1] = (quadrature_decoding_state_[1] << 1) | \
 80021de:	78a5      	ldrb	r5, [r4, #2]
			  mehal_readEncoderA();
 80021e0:	f000 fa80 	bl	80026e4 <mehal_readEncoderA>
	  quadrature_decoding_state_[1] = (quadrature_decoding_state_[1] << 1) | \
 80021e4:	006d      	lsls	r5, r5, #1
 80021e6:	b26d      	sxtb	r5, r5
 80021e8:	4328      	orrs	r0, r5
 80021ea:	70a0      	strb	r0, [r4, #2]
	//_________
}
 80021ec:	bd38      	pop	{r3, r4, r5, pc}
			if(mehal_readEncoderSwitch()==0)
 80021ee:	f000 fa71 	bl	80026d4 <mehal_readEncoderSwitch>
 80021f2:	2800      	cmp	r0, #0
 80021f4:	d1e5      	bne.n	80021c2 <_ZN7Encoder4loopEv+0x10>
				state = ENCODER_SW_STATE_WAIT_RELEASE;
 80021f6:	2301      	movs	r3, #1
 80021f8:	7223      	strb	r3, [r4, #8]
				swTimeout = 3000;
 80021fa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80021fe:	6063      	str	r3, [r4, #4]
 8002200:	e7df      	b.n	80021c2 <_ZN7Encoder4loopEv+0x10>
			if(swTimeout==0)
 8002202:	6842      	ldr	r2, [r0, #4]
 8002204:	b922      	cbnz	r2, 8002210 <_ZN7Encoder4loopEv+0x5e>
				flagLongPress=1;
 8002206:	7243      	strb	r3, [r0, #9]
				state = ENCODER_SW_STATE_DEBOUNCE;
 8002208:	2302      	movs	r3, #2
 800220a:	7203      	strb	r3, [r0, #8]
				swTimeout = 100;
 800220c:	2364      	movs	r3, #100	; 0x64
 800220e:	6043      	str	r3, [r0, #4]
			if(mehal_readEncoderSwitch()==1)
 8002210:	f000 fa60 	bl	80026d4 <mehal_readEncoderSwitch>
 8002214:	2801      	cmp	r0, #1
 8002216:	d1d4      	bne.n	80021c2 <_ZN7Encoder4loopEv+0x10>
				state = ENCODER_SW_STATE_DEBOUNCE;
 8002218:	2302      	movs	r3, #2
 800221a:	7223      	strb	r3, [r4, #8]
				swTimeout = 100;
 800221c:	2364      	movs	r3, #100	; 0x64
				flagShortPress=1;
 800221e:	72a0      	strb	r0, [r4, #10]
				swTimeout = 100;
 8002220:	6063      	str	r3, [r4, #4]
 8002222:	e7ce      	b.n	80021c2 <_ZN7Encoder4loopEv+0x10>
			if(mehal_readEncoderSwitch()==1)
 8002224:	f000 fa56 	bl	80026d4 <mehal_readEncoderSwitch>
 8002228:	2801      	cmp	r0, #1
 800222a:	d1ca      	bne.n	80021c2 <_ZN7Encoder4loopEv+0x10>
				if(swTimeout==0)
 800222c:	6863      	ldr	r3, [r4, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1c7      	bne.n	80021c2 <_ZN7Encoder4loopEv+0x10>
					state = ENCODER_SW_STATE_IDLE;
 8002232:	7223      	strb	r3, [r4, #8]
 8002234:	e7c5      	b.n	80021c2 <_ZN7Encoder4loopEv+0x10>

08002236 <_ZN7Encoder11pressedLongEv>:

bool Encoder::pressedLong(void)
{
	bool r = flagLongPress;
 8002236:	7a43      	ldrb	r3, [r0, #9]
	if(r!=0)
 8002238:	b10b      	cbz	r3, 800223e <_ZN7Encoder11pressedLongEv+0x8>
		flagLongPress=0;
 800223a:	2200      	movs	r2, #0
 800223c:	7242      	strb	r2, [r0, #9]

	return r;
}
 800223e:	4618      	mov	r0, r3
 8002240:	4770      	bx	lr

08002242 <_ZN7Encoder7pressedEv>:

bool Encoder::pressed(void) {
 8002242:	4603      	mov	r3, r0
    //return switch_state_ == 0x00;
	bool r = flagShortPress;
	flagShortPress=0;
 8002244:	2200      	movs	r2, #0
	bool r = flagShortPress;
 8002246:	7a80      	ldrb	r0, [r0, #10]
	flagShortPress=0;
 8002248:	729a      	strb	r2, [r3, #10]
	return r;
  }
 800224a:	4770      	bx	lr

0800224c <_ZN6Memory10readUInt32Et>:
#include <stdint.h>
#include "hal/MultiEngineHAL.h"
#include "hal/Memory.h"

uint32_t Memory::readUInt32(uint16_t address)
{
 800224c:	b507      	push	{r0, r1, r2, lr}
	uint32_t value;
	mehal_i2cMemRead(address,(uint8_t*)&value, sizeof(uint32_t));
 800224e:	2204      	movs	r2, #4
{
 8002250:	4608      	mov	r0, r1
	mehal_i2cMemRead(address,(uint8_t*)&value, sizeof(uint32_t));
 8002252:	eb0d 0102 	add.w	r1, sp, r2
 8002256:	f000 fa09 	bl	800266c <mehal_i2cMemRead>
	return value;
}
 800225a:	9801      	ldr	r0, [sp, #4]
 800225c:	b003      	add	sp, #12
 800225e:	f85d fb04 	ldr.w	pc, [sp], #4

08002262 <_ZN6Memory9readUInt8Et>:
uint8_t Memory::readUInt8(uint16_t address)
{
 8002262:	b507      	push	{r0, r1, r2, lr}
 8002264:	4608      	mov	r0, r1
	uint8_t value;
	mehal_i2cMemRead(address, &value, sizeof(uint8_t));
 8002266:	2201      	movs	r2, #1
 8002268:	f10d 0107 	add.w	r1, sp, #7
 800226c:	f000 f9fe 	bl	800266c <mehal_i2cMemRead>
	return value;
}
 8002270:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002274:	b003      	add	sp, #12
 8002276:	f85d fb04 	ldr.w	pc, [sp], #4

0800227a <_ZN6Memory10readUInt16Et>:

uint16_t Memory::readUInt16(uint16_t address)
{
 800227a:	b507      	push	{r0, r1, r2, lr}
 800227c:	4608      	mov	r0, r1
	uint16_t value;
	mehal_i2cMemRead(address, (uint8_t*)&value, sizeof(uint16_t));
 800227e:	2202      	movs	r2, #2
 8002280:	f10d 0106 	add.w	r1, sp, #6
 8002284:	f000 f9f2 	bl	800266c <mehal_i2cMemRead>
	return value;
}
 8002288:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800228c:	b003      	add	sp, #12
 800228e:	f85d fb04 	ldr.w	pc, [sp], #4

08002292 <_ZN6Memory11writeUInt32Etm>:

uint8_t Memory::writeUInt32(uint16_t address,uint32_t value)
{
 8002292:	b507      	push	{r0, r1, r2, lr}
 8002294:	4608      	mov	r0, r1
 8002296:	a902      	add	r1, sp, #8
 8002298:	f841 2d04 	str.w	r2, [r1, #-4]!
	return mehal_i2cMemWrite(address, (uint8_t*)&value, sizeof(uint32_t),1);
 800229c:	2301      	movs	r3, #1
 800229e:	2204      	movs	r2, #4
 80022a0:	f000 f9f6 	bl	8002690 <mehal_i2cMemWrite>
}
 80022a4:	b003      	add	sp, #12
 80022a6:	f85d fb04 	ldr.w	pc, [sp], #4

080022aa <_ZN6Memory16writeUInt8NoWaitEth>:
{
	return mehal_i2cMemWrite(address, &value, sizeof(uint8_t),1);
}

uint8_t Memory::writeUInt8NoWait(uint16_t address,uint8_t value)
{
 80022aa:	b507      	push	{r0, r1, r2, lr}
 80022ac:	4608      	mov	r0, r1
 80022ae:	a902      	add	r1, sp, #8
 80022b0:	f801 2d01 	strb.w	r2, [r1, #-1]!
	return mehal_i2cMemWrite(address, &value, sizeof(uint8_t),0);
 80022b4:	2300      	movs	r3, #0
 80022b6:	2201      	movs	r2, #1
 80022b8:	f000 f9ea 	bl	8002690 <mehal_i2cMemWrite>
}
 80022bc:	b003      	add	sp, #12
 80022be:	f85d fb04 	ldr.w	pc, [sp], #4

080022c2 <_ZN6Memory11writeUInt16Ett>:

uint8_t Memory::writeUInt16(uint16_t address,uint16_t value)
{
 80022c2:	b507      	push	{r0, r1, r2, lr}
 80022c4:	4608      	mov	r0, r1
 80022c6:	a902      	add	r1, sp, #8
 80022c8:	f821 2d02 	strh.w	r2, [r1, #-2]!
	return mehal_i2cMemWrite(address, (uint8_t*)&value, sizeof(uint16_t),1);
 80022cc:	2301      	movs	r3, #1
 80022ce:	2202      	movs	r2, #2
 80022d0:	f000 f9de 	bl	8002690 <mehal_i2cMemWrite>
}
 80022d4:	b003      	add	sp, #12
 80022d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080022dc <DMA1_Channel5_IRQHandler>:

static void (*callbackDMA)(int) = NULL;
static void MX_I2C1_Init(void);

void DMA1_Channel5_IRQHandler()
{
 80022dc:	b510      	push	{r4, lr}
	// check if the "transfer complete event" has triggered the interrupt
	if( DMA1->ISR & DMA_ISR_TCIF5 ){
 80022de:	4c0b      	ldr	r4, [pc, #44]	; (800230c <DMA1_Channel5_IRQHandler+0x30>)
 80022e0:	6820      	ldr	r0, [r4, #0]
 80022e2:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80022e6:	d005      	beq.n	80022f4 <DMA1_Channel5_IRQHandler+0x18>
		// complete transfer
		if(callbackDMA!=NULL)
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <DMA1_Channel5_IRQHandler+0x34>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	b14b      	cbz	r3, 8002302 <DMA1_Channel5_IRQHandler+0x26>
			callbackDMA(1);
 80022ee:	2001      	movs	r0, #1
	}
	else if(DMA1->ISR & DMA_ISR_HTIF5)
	{
		// half transfer
		if(callbackDMA!=NULL)
			callbackDMA(0);
 80022f0:	4798      	blx	r3
 80022f2:	e006      	b.n	8002302 <DMA1_Channel5_IRQHandler+0x26>
	else if(DMA1->ISR & DMA_ISR_HTIF5)
 80022f4:	6823      	ldr	r3, [r4, #0]
 80022f6:	035b      	lsls	r3, r3, #13
 80022f8:	d503      	bpl.n	8002302 <DMA1_Channel5_IRQHandler+0x26>
		if(callbackDMA!=NULL)
 80022fa:	4b05      	ldr	r3, [pc, #20]	; (8002310 <DMA1_Channel5_IRQHandler+0x34>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f6      	bne.n	80022f0 <DMA1_Channel5_IRQHandler+0x14>
	}
	// clear the interrupt flag
	DMA1->IFCR |= DMA_IFCR_CGIF5;
 8002302:	6863      	ldr	r3, [r4, #4]
 8002304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002308:	6063      	str	r3, [r4, #4]
}
 800230a:	bd10      	pop	{r4, pc}
 800230c:	40020000 	.word	0x40020000
 8002310:	20004798 	.word	0x20004798

08002314 <mehal_init>:

void mehal_init(uint32_t* samplesBuffer,uint32_t samplesBufferSize,void (*fnCallbackDMA)(int))
{
 8002314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	callbackDMA = fnCallbackDMA;
 8002318:	4bb8      	ldr	r3, [pc, #736]	; (80025fc <mehal_init+0x2e8>)

	/* TIMER 2 SETUP FOR PWM */
	// enable timer 2 clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800231a:	4db9      	ldr	r5, [pc, #740]	; (8002600 <mehal_init+0x2ec>)
	callbackDMA = fnCallbackDMA;
 800231c:	601a      	str	r2, [r3, #0]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800231e:	69eb      	ldr	r3, [r5, #28]
	// enable AFIO and GPIO port A clock
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN | RCC_APB2ENR_IOPAEN;
	// configure pin PA0 as AFIO push-pull output with max speed
	GPIOA->CRL &=~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0);
 8002320:	4eb8      	ldr	r6, [pc, #736]	; (8002604 <mehal_init+0x2f0>)
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	61eb      	str	r3, [r5, #28]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN | RCC_APB2ENR_IOPAEN;
 8002328:	69ab      	ldr	r3, [r5, #24]
	GPIOA->CRL |= GPIO_CRL_MODE0 | GPIO_CRL_CNF0_1;

	// set timer 2 prescaler to 1, so the timer frequency is equal to the APB2 frequency (here 72MHz)
	// the actual prescaling factor is PSC+1
	TIM2->PSC = 0;
 800232a:	2400      	movs	r4, #0
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN | RCC_APB2ENR_IOPAEN;
 800232c:	f043 0305 	orr.w	r3, r3, #5
 8002330:	61ab      	str	r3, [r5, #24]
	GPIOA->CRL &=~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0);
 8002332:	6833      	ldr	r3, [r6, #0]
	// set the auto-reload value, i.e. the max counter value
	TIM2->ARR = 255;
 8002334:	22ff      	movs	r2, #255	; 0xff
	GPIOA->CRL &=~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0);
 8002336:	f023 030f 	bic.w	r3, r3, #15
 800233a:	6033      	str	r3, [r6, #0]
	GPIOA->CRL |= GPIO_CRL_MODE0 | GPIO_CRL_CNF0_1;
 800233c:	6833      	ldr	r3, [r6, #0]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233e:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 8002342:	f043 030b 	orr.w	r3, r3, #11
 8002346:	6033      	str	r3, [r6, #0]
	TIM2->PSC = 0;
 8002348:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800234c:	629c      	str	r4, [r3, #40]	; 0x28
	TIM2->ARR = 255;
 800234e:	62da      	str	r2, [r3, #44]	; 0x2c
	// set the output compare value which determines the duty cycle
	TIM2->CCR1 = 128;
 8002350:	2280      	movs	r2, #128	; 0x80
 8002352:	635a      	str	r2, [r3, #52]	; 0x34
	// refer to ST's app note "AN4776" p.14-16 for details about preload
	// PWM mode 1: duty_cycle = CCRx / ARR
	// PWM mode 2: duty_cycle = 1 - CCRx / ARR
	// if the counter is not up- but downcounting it is inverted
	// by default, the timers are upcounting
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1PE;
 8002354:	699a      	ldr	r2, [r3, #24]
{
 8002356:	b087      	sub	sp, #28
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1PE;
 8002358:	f042 0268 	orr.w	r2, r2, #104	; 0x68
 800235c:	619a      	str	r2, [r3, #24]
	// set polarity of the output to non-inverted (default, so actually not necessary)
	TIM2->CCER &=~TIM_CCER_CC1P;
 800235e:	6a1a      	ldr	r2, [r3, #32]
 8002360:	f022 0202 	bic.w	r2, r2, #2
 8002364:	621a      	str	r2, [r3, #32]
	// enable the compare outputs
	TIM2->CCER |= TIM_CCER_CC1E;
 8002366:	6a1a      	ldr	r2, [r3, #32]
 8002368:	f042 0201 	orr.w	r2, r2, #1
 800236c:	621a      	str	r2, [r3, #32]
	 	so here f_PWM = f_APB2 / ( 2*(PSC+1)*ARR ) = approx. 140.6 kHz
	*/
	//TIM2->CR1 |= TIM_CR1_CMS;

	// enable the timer 2 counter
	TIM2->CR1 |= TIM_CR1_CEN;
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	f042 0201 	orr.w	r2, r2, #1
 8002374:	601a      	str	r2, [r3, #0]


	/* DMA SETUP */
	//enable DMA1 clock
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8002376:	696b      	ldr	r3, [r5, #20]
	// set the peripheral address where to put the data
	// in this case it's the timers compare (duty-cycle) register
	DMA1_Channel5->CPAR = (uint32_t) (&(TIM2->CCR1));
 8002378:	4aa3      	ldr	r2, [pc, #652]	; (8002608 <mehal_init+0x2f4>)
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	616b      	str	r3, [r5, #20]
	DMA1_Channel5->CPAR = (uint32_t) (&(TIM2->CCR1));
 8002380:	4ba2      	ldr	r3, [pc, #648]	; (800260c <mehal_init+0x2f8>)
 8002382:	609a      	str	r2, [r3, #8]
	// set the memory address from where to fetch the data
	// this is the starting address of our array of samples
	DMA1_Channel5->CMAR = (uint32_t) samplesBuffer;
 8002384:	60d8      	str	r0, [r3, #12]
	//DMA1_Channel5->CMAR = (uint32_t) sine_LUT;
	// set the number of data (samples) to be transferred
	DMA1_Channel5->CNDTR = samplesBufferSize;
 8002386:	6059      	str	r1, [r3, #4]
	//DMA1_Channel5->CNDTR = 9; //for sine_LUT
	// set data transfer direction to "memory->peripheral"
	DMA1_Channel5->CCR |= DMA_CCR_DIR;
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	f042 0210 	orr.w	r2, r2, #16
 800238e:	601a      	str	r2, [r3, #0]
	// set the DMA channel priority to "high"
	DMA1_Channel5->CCR |= DMA_CCR_PL_1;
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002396:	601a      	str	r2, [r3, #0]

	// enable circular mode (this means it will be repeated eternally)
	DMA1_Channel5->CCR |= DMA_CCR_CIRC;
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	f042 0220 	orr.w	r2, r2, #32
 800239e:	601a      	str	r2, [r3, #0]

	// enable memory increment mode
	DMA1_Channel5->CCR |= DMA_CCR_MINC;
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023a6:	601a      	str	r2, [r3, #0]
	// disable peripheral increment mode
	DMA1_Channel5->CCR &=~DMA_CCR_PINC;
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023ae:	601a      	str	r2, [r3, #0]
	// set memory size to 8bit
	DMA1_Channel5->CCR &=~DMA_CCR_MSIZE;
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80023b6:	601a      	str	r2, [r3, #0]
	// set peripheral size to 16bit
	DMA1_Channel5->CCR |= DMA_CCR_PSIZE_0;
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023be:	601a      	str	r2, [r3, #0]

	// enable transfer complete interrupt and halft complete interrupt
	DMA1_Channel5->CCR |= DMA_CCR_TCIE;
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	f042 0202 	orr.w	r2, r2, #2
 80023c6:	601a      	str	r2, [r3, #0]
	DMA1_Channel5->CCR |= DMA_CCR_HTIE;
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	f042 0204 	orr.w	r2, r2, #4
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	4a8f      	ldr	r2, [pc, #572]	; (8002610 <mehal_init+0x2fc>)
 80023d2:	f8c2 9000 	str.w	r9, [r2]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80023d6:	b662      	cpsie	i
	// globally enable interrupts
	__enable_irq();
	//________________________________________________________________

	// enable the DMA channel
	DMA1_Channel5->CCR |= DMA_CCR_EN;
 80023d8:	681a      	ldr	r2, [r3, #0]

	// PIN  B11 GATE_IN
	GPIO_InitStruct.Pin = GPIO_PIN_11;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023da:	2702      	movs	r7, #2
	DMA1_Channel5->CCR |= DMA_CCR_EN;
 80023dc:	f042 0201 	orr.w	r2, r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
	TIM1->ARR = 750; // 96Khz
 80023e2:	f240 22ee 	movw	r2, #750	; 0x2ee
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e6:	f04f 0801 	mov.w	r8, #1
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 80023ea:	f44f 6b00 	mov.w	fp, #2048	; 0x800
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	// PIN  B12 ENC_A
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80023ee:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80023f2:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f4:	a902      	add	r1, sp, #8
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80023f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023fa:	61ab      	str	r3, [r5, #24]
	TIM1->PSC = 0;
 80023fc:	4b85      	ldr	r3, [pc, #532]	; (8002614 <mehal_init+0x300>)
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fe:	4886      	ldr	r0, [pc, #536]	; (8002618 <mehal_init+0x304>)
	TIM1->PSC = 0;
 8002400:	629c      	str	r4, [r3, #40]	; 0x28
	TIM1->ARR = 750; // 96Khz
 8002402:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->DIER |= TIM_DIER_UDE;
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800240a:	60da      	str	r2, [r3, #12]
	TIM1->CR1 |= TIM_CR1_CEN;
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	f042 0201 	orr.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]
	__HAL_RCC_GPIOB_CLK_ENABLE(); // Enable clck for portb
 8002414:	69ab      	ldr	r3, [r5, #24]
 8002416:	f043 0308 	orr.w	r3, r3, #8
 800241a:	61ab      	str	r3, [r5, #24]
 800241c:	69ab      	ldr	r3, [r5, #24]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	9b00      	ldr	r3, [sp, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE(); // Enable clck for porta
 8002426:	69ab      	ldr	r3, [r5, #24]
 8002428:	f043 0304 	orr.w	r3, r3, #4
 800242c:	61ab      	str	r3, [r5, #24]
 800242e:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	9403      	str	r4, [sp, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE(); // Enable clck for porta
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	9301      	str	r3, [sp, #4]
 8002438:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 800243a:	f8cd b008 	str.w	fp, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243e:	e9cd 8704 	strd	r8, r7, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002442:	f000 fb45 	bl	8002ad0 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002446:	a902      	add	r1, sp, #8
 8002448:	4873      	ldr	r0, [pc, #460]	; (8002618 <mehal_init+0x304>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800244a:	e9cd a402 	strd	sl, r4, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244e:	e9cd 8704 	strd	r8, r7, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002452:	f000 fb3d 	bl	8002ad0 <HAL_GPIO_Init>

	// PIN  B13 ENC_B
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002456:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800245a:	a902      	add	r1, sp, #8
 800245c:	486e      	ldr	r0, [pc, #440]	; (8002618 <mehal_init+0x304>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800245e:	e9cd 3402 	strd	r3, r4, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002462:	e9cd 8704 	strd	r8, r7, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002466:	f000 fb33 	bl	8002ad0 <HAL_GPIO_Init>

	// PIN  B14 ENC_SW
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 800246a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246e:	a902      	add	r1, sp, #8
 8002470:	4869      	ldr	r0, [pc, #420]	; (8002618 <mehal_init+0x304>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002472:	e9cd 3402 	strd	r3, r4, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002476:	e9cd 8704 	strd	r8, r7, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247a:	f000 fb29 	bl	8002ad0 <HAL_GPIO_Init>
	// PIN  B15 LED_CONFIG
	GPIO_InitStruct.Pin = GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247e:	a902      	add	r1, sp, #8
 8002480:	4865      	ldr	r0, [pc, #404]	; (8002618 <mehal_init+0x304>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002482:	e9cd 9802 	strd	r9, r8, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002486:	e9cd 4704 	strd	r4, r7, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248a:	f000 fb21 	bl	8002ad0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); //Configure GPIO pin Output Level
 800248e:	4649      	mov	r1, r9


	// PIN  A1 ANALOG INPUT PARAM2
	GPIO_InitStruct.Pin = GPIO_PIN_1;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002490:	f04f 0903 	mov.w	r9, #3
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); //Configure GPIO pin Output Level
 8002494:	4622      	mov	r2, r4
 8002496:	4860      	ldr	r0, [pc, #384]	; (8002618 <mehal_init+0x304>)
 8002498:	f000 fc8b 	bl	8002db2 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249c:	a902      	add	r1, sp, #8
 800249e:	4630      	mov	r0, r6
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	e9cd 9403 	strd	r9, r4, [sp, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80024a4:	9702      	str	r7, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a6:	9705      	str	r7, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a8:	f000 fb12 	bl	8002ad0 <HAL_GPIO_Init>

	// PIN  A2 ANALOG INPUT PARAM1
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024ac:	2304      	movs	r3, #4
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ae:	a902      	add	r1, sp, #8
 80024b0:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024b2:	e9cd 3902 	strd	r3, r9, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b6:	e9cd 4704 	strd	r4, r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ba:	f000 fb09 	bl	8002ad0 <HAL_GPIO_Init>

	// PIN  A3 ANALOG INPUT FINE_TUNE
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024be:	2308      	movs	r3, #8
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c0:	4630      	mov	r0, r6
 80024c2:	eb0d 0103 	add.w	r1, sp, r3
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024c6:	e9cd 3902 	strd	r3, r9, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ca:	e9cd 4704 	strd	r4, r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ce:	f000 faff 	bl	8002ad0 <HAL_GPIO_Init>

	// PIN  A4 ANALOG INPUT FM
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024d2:	2310      	movs	r3, #16
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d4:	a902      	add	r1, sp, #8
 80024d6:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024d8:	e9cd 3902 	strd	r3, r9, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	e9cd 4704 	strd	r4, r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e0:	f000 faf6 	bl	8002ad0 <HAL_GPIO_Init>

	// PIN  A5 ANALOG INPUT PITCH
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80024e4:	2320      	movs	r3, #32
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024e6:	e9cd 3902 	strd	r3, r9, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);


	// PIN  A8 LED_BANK1
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 80024ea:	f44f 7980 	mov.w	r9, #256	; 0x100
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ee:	a902      	add	r1, sp, #8
 80024f0:	4630      	mov	r0, r6
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f2:	e9cd 4704 	strd	r4, r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f6:	f000 faeb 	bl	8002ad0 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fa:	a902      	add	r1, sp, #8
 80024fc:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fe:	e9cd 9802 	strd	r9, r8, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002502:	e9cd 4704 	strd	r4, r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002506:	f000 fae3 	bl	8002ad0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //Configure GPIO pin Output Level
 800250a:	4649      	mov	r1, r9

	// PIN  A9 LED_BANK0
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 800250c:	f44f 7900 	mov.w	r9, #512	; 0x200
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //Configure GPIO pin Output Level
 8002510:	4622      	mov	r2, r4
 8002512:	4630      	mov	r0, r6
 8002514:	f000 fc4d 	bl	8002db2 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002518:	a902      	add	r1, sp, #8
 800251a:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800251c:	e9cd 9802 	strd	r9, r8, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002520:	e9cd 4704 	strd	r4, r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002524:	f000 fad4 	bl	8002ad0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //Configure GPIO pin Output Level
 8002528:	4649      	mov	r1, r9

	// PIN  A10 DISPLAY_CLK
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 800252a:	f44f 6980 	mov.w	r9, #1024	; 0x400
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //Configure GPIO pin Output Level
 800252e:	4622      	mov	r2, r4
 8002530:	4630      	mov	r0, r6
 8002532:	f000 fc3e 	bl	8002db2 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002536:	a902      	add	r1, sp, #8
 8002538:	4630      	mov	r0, r6
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253a:	e9cd 4704 	strd	r4, r7, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800253e:	e9cd 9802 	strd	r9, r8, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002542:	f000 fac5 	bl	8002ad0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); //Configure GPIO pin Output Level
 8002546:	4622      	mov	r2, r4
 8002548:	4649      	mov	r1, r9
 800254a:	4630      	mov	r0, r6
 800254c:	f000 fc31 	bl	8002db2 <HAL_GPIO_WritePin>
	// PIN  A11 DISPLAY_LATCH
	GPIO_InitStruct.Pin = GPIO_PIN_11;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002550:	a902      	add	r1, sp, #8
 8002552:	4630      	mov	r0, r6
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002554:	e9cd 4704 	strd	r4, r7, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002558:	e9cd b802 	strd	fp, r8, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255c:	f000 fab8 	bl	8002ad0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET); //Configure GPIO pin Output Level
 8002560:	4622      	mov	r2, r4
 8002562:	4659      	mov	r1, fp
 8002564:	4630      	mov	r0, r6
 8002566:	f000 fc24 	bl	8002db2 <HAL_GPIO_WritePin>
	// PIN  A12 DISPLAY_DATA
	GPIO_InitStruct.Pin = GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256a:	a902      	add	r1, sp, #8
 800256c:	4630      	mov	r0, r6
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256e:	e9cd 4704 	strd	r4, r7, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002572:	e9cd a802 	strd	sl, r8, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002576:	f000 faab 	bl	8002ad0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); //Configure GPIO pin Output Level
 800257a:	4622      	mov	r2, r4
 800257c:	4651      	mov	r1, sl
 800257e:	4630      	mov	r0, r6
 8002580:	f000 fc17 	bl	8002db2 <HAL_GPIO_WritePin>


	// Configure ADC1
	// set ADC clock prescaler to 6 to get a 12MHZ ADC clock (14MHz is maximum)
	RCC->CFGR &=~RCC_CFGR_ADCPRE_0;
 8002584:	686b      	ldr	r3, [r5, #4]
	RCC->CFGR |= RCC_CFGR_ADCPRE_1;
	// enable ADC1 clock
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
	// enable ADC1
	ADC1->CR2 |= ADC_CR2_ADON;
 8002586:	4c25      	ldr	r4, [pc, #148]	; (800261c <mehal_init+0x308>)
	RCC->CFGR &=~RCC_CFGR_ADCPRE_0;
 8002588:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800258c:	606b      	str	r3, [r5, #4]
	RCC->CFGR |= RCC_CFGR_ADCPRE_1;
 800258e:	686b      	ldr	r3, [r5, #4]
	ADC1->SMPR2 &=~(ADC_SMPR2_SMP0_2 | ADC_SMPR2_SMP0_1 | ADC_SMPR2_SMP0_0);
	// set data alignment to right
	ADC1->CR2 &=~ADC_CR2_ALIGN;
	// wait 10µs before ADC calibration
	//delay(10);
	HAL_Delay(1); // 1ms
 8002590:	4640      	mov	r0, r8
	RCC->CFGR |= RCC_CFGR_ADCPRE_1;
 8002592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002596:	606b      	str	r3, [r5, #4]
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8002598:	69ab      	ldr	r3, [r5, #24]
 800259a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800259e:	61ab      	str	r3, [r5, #24]
	ADC1->CR2 |= ADC_CR2_ADON;
 80025a0:	68a3      	ldr	r3, [r4, #8]
 80025a2:	ea43 0308 	orr.w	r3, r3, r8
 80025a6:	60a3      	str	r3, [r4, #8]
	ADC1->CR2 |= (ADC_CR2_EXTSEL_2 | ADC_CR2_EXTSEL_1 | ADC_CR2_EXTSEL_0);
 80025a8:	68a3      	ldr	r3, [r4, #8]
 80025aa:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 80025ae:	60a3      	str	r3, [r4, #8]
	ADC1->SMPR2 &=~(ADC_SMPR2_SMP0_2 | ADC_SMPR2_SMP0_1 | ADC_SMPR2_SMP0_0);
 80025b0:	6923      	ldr	r3, [r4, #16]
 80025b2:	f023 0307 	bic.w	r3, r3, #7
 80025b6:	6123      	str	r3, [r4, #16]
	ADC1->CR2 &=~ADC_CR2_ALIGN;
 80025b8:	68a3      	ldr	r3, [r4, #8]
 80025ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025be:	60a3      	str	r3, [r4, #8]
	HAL_Delay(1); // 1ms
 80025c0:	f000 f980 	bl	80028c4 <HAL_Delay>
	// start calibration of ADC1
	ADC1->CR2 |= ADC_CR2_CAL;
 80025c4:	68a3      	ldr	r3, [r4, #8]
 80025c6:	f043 0304 	orr.w	r3, r3, #4
 80025ca:	60a3      	str	r3, [r4, #8]
	// wait until calibration is finished
	while( (ADC1->CR2) & ADC_CR2_CAL );
 80025cc:	68a3      	ldr	r3, [r4, #8]
 80025ce:	f013 0304 	ands.w	r3, r3, #4
 80025d2:	d1fb      	bne.n	80025cc <mehal_init+0x2b8>
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025d4:	4812      	ldr	r0, [pc, #72]	; (8002620 <mehal_init+0x30c>)
  hi2c1.Init.ClockSpeed = 400000;
 80025d6:	4913      	ldr	r1, [pc, #76]	; (8002624 <mehal_init+0x310>)
 80025d8:	4a13      	ldr	r2, [pc, #76]	; (8002628 <mehal_init+0x314>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
 80025da:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.ClockSpeed = 400000;
 80025de:	e9c0 1200 	strd	r1, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025e6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025ea:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025ee:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025f0:	f000 fbf8 	bl	8002de4 <HAL_I2C_Init>
}
 80025f4:	b007      	add	sp, #28
 80025f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025fa:	bf00      	nop
 80025fc:	20004798 	.word	0x20004798
 8002600:	40021000 	.word	0x40021000
 8002604:	40010800 	.word	0x40010800
 8002608:	40000034 	.word	0x40000034
 800260c:	40020058 	.word	0x40020058
 8002610:	e000e100 	.word	0xe000e100
 8002614:	40012c00 	.word	0x40012c00
 8002618:	40010c00 	.word	0x40010c00
 800261c:	40012400 	.word	0x40012400
 8002620:	2000479c 	.word	0x2000479c
 8002624:	40005400 	.word	0x40005400
 8002628:	00061a80 	.word	0x00061a80

0800262c <mehal_readADC>:
	channel = channel + 1; // A0 is not used (its PWM output)
 800262c:	3001      	adds	r0, #1
 800262e:	b2c0      	uxtb	r0, r0
	if( (channel>17) || (channel<0) ) return 0xFFFF;
 8002630:	2811      	cmp	r0, #17
 8002632:	d816      	bhi.n	8002662 <mehal_readADC+0x36>
	ADC1->SQR1 = 0;
 8002634:	2200      	movs	r2, #0
 8002636:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <mehal_readADC+0x3c>)
 8002638:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1->SQR3 = (channel << ADC_SQR3_SQ1_Pos);
 800263a:	6358      	str	r0, [r3, #52]	; 0x34
	ADC1->SR &=~ADC_SR_EOC;
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	f022 0202 	bic.w	r2, r2, #2
 8002642:	601a      	str	r2, [r3, #0]
	ADC1->CR2 |= ADC_CR2_ADON;
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	609a      	str	r2, [r3, #8]
	ADC1->CR2 |= ADC_CR2_SWSTART;
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002652:	609a      	str	r2, [r3, #8]
	while( !(ADC1->SR & ADC_SR_EOC) );
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	0792      	lsls	r2, r2, #30
 8002658:	d5fc      	bpl.n	8002654 <mehal_readADC+0x28>
	return ((ADC1->DR) & 0b111111111111);
 800265a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800265c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8002660:	4770      	bx	lr
	if( (channel>17) || (channel<0) ) return 0xFFFF;
 8002662:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8002666:	4770      	bx	lr
 8002668:	40012400 	.word	0x40012400

0800266c <mehal_i2cMemRead>:

}


uint8_t mehal_i2cMemRead(uint16_t memAddress,uint8_t *pData, uint16_t size)
{
 800266c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return (uint8_t)HAL_I2C_Mem_Read(&hi2c1, MEM_ADDRESS, memAddress, I2C_MEMADD_SIZE_8BIT, pData, size, 300);
 800266e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002672:	9100      	str	r1, [sp, #0]
 8002674:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002678:	21a0      	movs	r1, #160	; 0xa0
 800267a:	4602      	mov	r2, r0
 800267c:	2301      	movs	r3, #1
 800267e:	4803      	ldr	r0, [pc, #12]	; (800268c <mehal_i2cMemRead+0x20>)
 8002680:	f000 fdd2 	bl	8003228 <HAL_I2C_Mem_Read>
}
 8002684:	b005      	add	sp, #20
 8002686:	f85d fb04 	ldr.w	pc, [sp], #4
 800268a:	bf00      	nop
 800268c:	2000479c 	.word	0x2000479c

08002690 <mehal_i2cMemWrite>:

uint8_t mehal_i2cMemWrite(uint16_t memAddress,uint8_t *pData, uint16_t size,uint8_t flagWait)
{
 8002690:	b530      	push	{r4, r5, lr}
 8002692:	461d      	mov	r5, r3
	uint8_t r;
	r= (uint8_t)HAL_I2C_Mem_Write(&hi2c1, MEM_ADDRESS, memAddress, I2C_MEMADD_SIZE_8BIT, pData, size, 500);
 8002694:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
{
 8002698:	b085      	sub	sp, #20
	r= (uint8_t)HAL_I2C_Mem_Write(&hi2c1, MEM_ADDRESS, memAddress, I2C_MEMADD_SIZE_8BIT, pData, size, 500);
 800269a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800269e:	9100      	str	r1, [sp, #0]
 80026a0:	4602      	mov	r2, r0
 80026a2:	2301      	movs	r3, #1
 80026a4:	21a0      	movs	r1, #160	; 0xa0
 80026a6:	4805      	ldr	r0, [pc, #20]	; (80026bc <mehal_i2cMemWrite+0x2c>)
 80026a8:	f000 fcc4 	bl	8003034 <HAL_I2C_Mem_Write>
 80026ac:	4604      	mov	r4, r0
	if(flagWait)
 80026ae:	b115      	cbz	r5, 80026b6 <mehal_i2cMemWrite+0x26>
}


void mehal_delay(uint32_t t)
{
	  HAL_Delay(t);
 80026b0:	201e      	movs	r0, #30
 80026b2:	f000 f907 	bl	80028c4 <HAL_Delay>
}
 80026b6:	4620      	mov	r0, r4
 80026b8:	b005      	add	sp, #20
 80026ba:	bd30      	pop	{r4, r5, pc}
 80026bc:	2000479c 	.word	0x2000479c

080026c0 <mehal_debugPinSet>:
}
 80026c0:	4770      	bx	lr

080026c2 <mehal_debugPinReset>:
 80026c2:	4770      	bx	lr

080026c4 <mehal_readGateInput>:
	return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 80026c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026c8:	4801      	ldr	r0, [pc, #4]	; (80026d0 <mehal_readGateInput+0xc>)
 80026ca:	f000 bb5b 	b.w	8002d84 <HAL_GPIO_ReadPin>
 80026ce:	bf00      	nop
 80026d0:	40010c00 	.word	0x40010c00

080026d4 <mehal_readEncoderSwitch>:
	return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80026d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026d8:	4801      	ldr	r0, [pc, #4]	; (80026e0 <mehal_readEncoderSwitch+0xc>)
 80026da:	f000 bb53 	b.w	8002d84 <HAL_GPIO_ReadPin>
 80026de:	bf00      	nop
 80026e0:	40010c00 	.word	0x40010c00

080026e4 <mehal_readEncoderA>:
	return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 80026e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026e8:	4801      	ldr	r0, [pc, #4]	; (80026f0 <mehal_readEncoderA+0xc>)
 80026ea:	f000 bb4b 	b.w	8002d84 <HAL_GPIO_ReadPin>
 80026ee:	bf00      	nop
 80026f0:	40010c00 	.word	0x40010c00

080026f4 <mehal_readEncoderB>:
	return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 80026f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026f8:	4801      	ldr	r0, [pc, #4]	; (8002700 <mehal_readEncoderB+0xc>)
 80026fa:	f000 bb43 	b.w	8002d84 <HAL_GPIO_ReadPin>
 80026fe:	bf00      	nop
 8002700:	40010c00 	.word	0x40010c00

08002704 <mehal_sendDataTo595>:
{
 8002704:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002706:	2200      	movs	r2, #0
 8002708:	f44f 6100 	mov.w	r1, #2048	; 0x800
{
 800270c:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800270e:	4816      	ldr	r0, [pc, #88]	; (8002768 <mehal_sendDataTo595+0x64>)
 8002710:	f000 fb4f 	bl	8002db2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002714:	2200      	movs	r2, #0
 8002716:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800271a:	4813      	ldr	r0, [pc, #76]	; (8002768 <mehal_sendDataTo595+0x64>)
 800271c:	f000 fb49 	bl	8002db2 <HAL_GPIO_WritePin>
 8002720:	2400      	movs	r4, #0
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002722:	4e11      	ldr	r6, [pc, #68]	; (8002768 <mehal_sendDataTo595+0x64>)
		if( (data&(0x80>>i)) == 0)
 8002724:	2280      	movs	r2, #128	; 0x80
 8002726:	4122      	asrs	r2, r4
 8002728:	402a      	ands	r2, r5
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800272a:	bf18      	it	ne
 800272c:	2201      	movne	r2, #1
 800272e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002732:	4630      	mov	r0, r6
 8002734:	f000 fb3d 	bl	8002db2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002738:	2201      	movs	r2, #1
 800273a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800273e:	480a      	ldr	r0, [pc, #40]	; (8002768 <mehal_sendDataTo595+0x64>)
 8002740:	f000 fb37 	bl	8002db2 <HAL_GPIO_WritePin>
 8002744:	3401      	adds	r4, #1
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002746:	2200      	movs	r2, #0
 8002748:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800274c:	4806      	ldr	r0, [pc, #24]	; (8002768 <mehal_sendDataTo595+0x64>)
 800274e:	f000 fb30 	bl	8002db2 <HAL_GPIO_WritePin>
	for(i=0; i<8;i++)
 8002752:	2c08      	cmp	r4, #8
 8002754:	d1e6      	bne.n	8002724 <mehal_sendDataTo595+0x20>
}
 8002756:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800275a:	2201      	movs	r2, #1
 800275c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002760:	4801      	ldr	r0, [pc, #4]	; (8002768 <mehal_sendDataTo595+0x64>)
 8002762:	f000 bb26 	b.w	8002db2 <HAL_GPIO_WritePin>
 8002766:	bf00      	nop
 8002768:	40010800 	.word	0x40010800

0800276c <mehal_setConfigLed>:
	if(state==1)
 800276c:	2801      	cmp	r0, #1
{
 800276e:	4602      	mov	r2, r0
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8002770:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002774:	bf18      	it	ne
 8002776:	2200      	movne	r2, #0
 8002778:	4801      	ldr	r0, [pc, #4]	; (8002780 <mehal_setConfigLed+0x14>)
 800277a:	f000 bb1a 	b.w	8002db2 <HAL_GPIO_WritePin>
 800277e:	bf00      	nop
 8002780:	40010c00 	.word	0x40010c00

08002784 <mehal_setBank1Led>:
	if(state==1)
 8002784:	2801      	cmp	r0, #1
{
 8002786:	4602      	mov	r2, r0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002788:	f44f 7180 	mov.w	r1, #256	; 0x100
 800278c:	bf18      	it	ne
 800278e:	2200      	movne	r2, #0
 8002790:	4801      	ldr	r0, [pc, #4]	; (8002798 <mehal_setBank1Led+0x14>)
 8002792:	f000 bb0e 	b.w	8002db2 <HAL_GPIO_WritePin>
 8002796:	bf00      	nop
 8002798:	40010800 	.word	0x40010800

0800279c <mehal_setBank0Led>:
	if(state==1)
 800279c:	2801      	cmp	r0, #1
{
 800279e:	4602      	mov	r2, r0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80027a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027a4:	bf18      	it	ne
 80027a6:	2200      	movne	r2, #0
 80027a8:	4801      	ldr	r0, [pc, #4]	; (80027b0 <mehal_setBank0Led+0x14>)
 80027aa:	f000 bb02 	b.w	8002db2 <HAL_GPIO_WritePin>
 80027ae:	bf00      	nop
 80027b0:	40010800 	.word	0x40010800

080027b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80027b4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80027b6:	e003      	b.n	80027c0 <LoopCopyDataInit>

080027b8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80027ba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80027bc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80027be:	3104      	adds	r1, #4

080027c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80027c0:	480a      	ldr	r0, [pc, #40]	; (80027ec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80027c2:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80027c4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80027c6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80027c8:	d3f6      	bcc.n	80027b8 <CopyDataInit>
  ldr r2, =_sbss
 80027ca:	4a0a      	ldr	r2, [pc, #40]	; (80027f4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80027cc:	e002      	b.n	80027d4 <LoopFillZerobss>

080027ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80027ce:	2300      	movs	r3, #0
  str r3, [r2], #4
 80027d0:	f842 3b04 	str.w	r3, [r2], #4

080027d4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80027d4:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80027d6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80027d8:	d3f9      	bcc.n	80027ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027da:	f7fe fe99 	bl	8001510 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027de:	f001 fe97 	bl	8004510 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027e2:	f7fe fdb5 	bl	8001350 <main>
  bx lr
 80027e6:	4770      	bx	lr
  ldr r3, =_sidata
 80027e8:	0800eb8c 	.word	0x0800eb8c
  ldr r0, =_sdata
 80027ec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80027f0:	200002ac 	.word	0x200002ac
  ldr r2, =_sbss
 80027f4:	200002ac 	.word	0x200002ac
  ldr r3, = _ebss
 80027f8:	200047f4 	.word	0x200047f4

080027fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027fc:	e7fe      	b.n	80027fc <ADC1_2_IRQHandler>
	...

08002800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <HAL_Init+0x28>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a07      	ldr	r2, [pc, #28]	; (8002828 <HAL_Init+0x28>)
 800280a:	f043 0310 	orr.w	r3, r3, #16
 800280e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002810:	2003      	movs	r0, #3
 8002812:	f000 f929 	bl	8002a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002816:	2000      	movs	r0, #0
 8002818:	f000 f808 	bl	800282c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800281c:	f7fe fdde 	bl	80013dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40022000 	.word	0x40022000

0800282c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002834:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_InitTick+0x54>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_InitTick+0x58>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	4619      	mov	r1, r3
 800283e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002842:	fbb3 f3f1 	udiv	r3, r3, r1
 8002846:	fbb2 f3f3 	udiv	r3, r2, r3
 800284a:	4618      	mov	r0, r3
 800284c:	f000 f933 	bl	8002ab6 <HAL_SYSTICK_Config>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e00e      	b.n	8002878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b0f      	cmp	r3, #15
 800285e:	d80a      	bhi.n	8002876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002860:	2200      	movs	r2, #0
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002868:	f000 f909 	bl	8002a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800286c:	4a06      	ldr	r2, [pc, #24]	; (8002888 <HAL_InitTick+0x5c>)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	e000      	b.n	8002878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	20000298 	.word	0x20000298
 8002884:	200002a8 	.word	0x200002a8
 8002888:	200002a4 	.word	0x200002a4

0800288c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <HAL_IncTick+0x1c>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	4b05      	ldr	r3, [pc, #20]	; (80028ac <HAL_IncTick+0x20>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4413      	add	r3, r2
 800289c:	4a03      	ldr	r2, [pc, #12]	; (80028ac <HAL_IncTick+0x20>)
 800289e:	6013      	str	r3, [r2, #0]
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	200002a8 	.word	0x200002a8
 80028ac:	200047f0 	.word	0x200047f0

080028b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  return uwTick;
 80028b4:	4b02      	ldr	r3, [pc, #8]	; (80028c0 <HAL_GetTick+0x10>)
 80028b6:	681b      	ldr	r3, [r3, #0]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr
 80028c0:	200047f0 	.word	0x200047f0

080028c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028cc:	f7ff fff0 	bl	80028b0 <HAL_GetTick>
 80028d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028dc:	d005      	beq.n	80028ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028de:	4b09      	ldr	r3, [pc, #36]	; (8002904 <HAL_Delay+0x40>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4413      	add	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028ea:	bf00      	nop
 80028ec:	f7ff ffe0 	bl	80028b0 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d8f7      	bhi.n	80028ec <HAL_Delay+0x28>
  {
  }
}
 80028fc:	bf00      	nop
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	200002a8 	.word	0x200002a8

08002908 <__NVIC_SetPriorityGrouping>:
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002918:	4b0c      	ldr	r3, [pc, #48]	; (800294c <__NVIC_SetPriorityGrouping+0x44>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002924:	4013      	ands	r3, r2
 8002926:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800293a:	4a04      	ldr	r2, [pc, #16]	; (800294c <__NVIC_SetPriorityGrouping+0x44>)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	60d3      	str	r3, [r2, #12]
}
 8002940:	bf00      	nop
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	e000ed00 	.word	0xe000ed00

08002950 <__NVIC_GetPriorityGrouping>:
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002954:	4b04      	ldr	r3, [pc, #16]	; (8002968 <__NVIC_GetPriorityGrouping+0x18>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	0a1b      	lsrs	r3, r3, #8
 800295a:	f003 0307 	and.w	r3, r3, #7
}
 800295e:	4618      	mov	r0, r3
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	6039      	str	r1, [r7, #0]
 8002976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297c:	2b00      	cmp	r3, #0
 800297e:	db0a      	blt.n	8002996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	b2da      	uxtb	r2, r3
 8002984:	490c      	ldr	r1, [pc, #48]	; (80029b8 <__NVIC_SetPriority+0x4c>)
 8002986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298a:	0112      	lsls	r2, r2, #4
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	440b      	add	r3, r1
 8002990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002994:	e00a      	b.n	80029ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4908      	ldr	r1, [pc, #32]	; (80029bc <__NVIC_SetPriority+0x50>)
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	3b04      	subs	r3, #4
 80029a4:	0112      	lsls	r2, r2, #4
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	440b      	add	r3, r1
 80029aa:	761a      	strb	r2, [r3, #24]
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	e000e100 	.word	0xe000e100
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b089      	sub	sp, #36	; 0x24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f1c3 0307 	rsb	r3, r3, #7
 80029da:	2b04      	cmp	r3, #4
 80029dc:	bf28      	it	cs
 80029de:	2304      	movcs	r3, #4
 80029e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3304      	adds	r3, #4
 80029e6:	2b06      	cmp	r3, #6
 80029e8:	d902      	bls.n	80029f0 <NVIC_EncodePriority+0x30>
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3b03      	subs	r3, #3
 80029ee:	e000      	b.n	80029f2 <NVIC_EncodePriority+0x32>
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43da      	mvns	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	401a      	ands	r2, r3
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a12:	43d9      	mvns	r1, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a18:	4313      	orrs	r3, r2
         );
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3724      	adds	r7, #36	; 0x24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a34:	d301      	bcc.n	8002a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a36:	2301      	movs	r3, #1
 8002a38:	e00f      	b.n	8002a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a3a:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <SysTick_Config+0x40>)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a42:	210f      	movs	r1, #15
 8002a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a48:	f7ff ff90 	bl	800296c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <SysTick_Config+0x40>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a52:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <SysTick_Config+0x40>)
 8002a54:	2207      	movs	r2, #7
 8002a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	e000e010 	.word	0xe000e010

08002a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff ff49 	bl	8002908 <__NVIC_SetPriorityGrouping>
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b086      	sub	sp, #24
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	4603      	mov	r3, r0
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	607a      	str	r2, [r7, #4]
 8002a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a90:	f7ff ff5e 	bl	8002950 <__NVIC_GetPriorityGrouping>
 8002a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	68b9      	ldr	r1, [r7, #8]
 8002a9a:	6978      	ldr	r0, [r7, #20]
 8002a9c:	f7ff ff90 	bl	80029c0 <NVIC_EncodePriority>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff5f 	bl	800296c <__NVIC_SetPriority>
}
 8002aae:	bf00      	nop
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff ffb0 	bl	8002a24 <SysTick_Config>
 8002ac4:	4603      	mov	r3, r0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b08b      	sub	sp, #44	; 0x2c
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ada:	2300      	movs	r3, #0
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ae2:	e127      	b.n	8002d34 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	69fa      	ldr	r2, [r7, #28]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	f040 8116 	bne.w	8002d2e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b12      	cmp	r3, #18
 8002b08:	d034      	beq.n	8002b74 <HAL_GPIO_Init+0xa4>
 8002b0a:	2b12      	cmp	r3, #18
 8002b0c:	d80d      	bhi.n	8002b2a <HAL_GPIO_Init+0x5a>
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d02b      	beq.n	8002b6a <HAL_GPIO_Init+0x9a>
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d804      	bhi.n	8002b20 <HAL_GPIO_Init+0x50>
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d031      	beq.n	8002b7e <HAL_GPIO_Init+0xae>
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d01c      	beq.n	8002b58 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b1e:	e048      	b.n	8002bb2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d043      	beq.n	8002bac <HAL_GPIO_Init+0xdc>
 8002b24:	2b11      	cmp	r3, #17
 8002b26:	d01b      	beq.n	8002b60 <HAL_GPIO_Init+0x90>
          break;
 8002b28:	e043      	b.n	8002bb2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b2a:	4a89      	ldr	r2, [pc, #548]	; (8002d50 <HAL_GPIO_Init+0x280>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d026      	beq.n	8002b7e <HAL_GPIO_Init+0xae>
 8002b30:	4a87      	ldr	r2, [pc, #540]	; (8002d50 <HAL_GPIO_Init+0x280>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d806      	bhi.n	8002b44 <HAL_GPIO_Init+0x74>
 8002b36:	4a87      	ldr	r2, [pc, #540]	; (8002d54 <HAL_GPIO_Init+0x284>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d020      	beq.n	8002b7e <HAL_GPIO_Init+0xae>
 8002b3c:	4a86      	ldr	r2, [pc, #536]	; (8002d58 <HAL_GPIO_Init+0x288>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d01d      	beq.n	8002b7e <HAL_GPIO_Init+0xae>
          break;
 8002b42:	e036      	b.n	8002bb2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b44:	4a85      	ldr	r2, [pc, #532]	; (8002d5c <HAL_GPIO_Init+0x28c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d019      	beq.n	8002b7e <HAL_GPIO_Init+0xae>
 8002b4a:	4a85      	ldr	r2, [pc, #532]	; (8002d60 <HAL_GPIO_Init+0x290>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d016      	beq.n	8002b7e <HAL_GPIO_Init+0xae>
 8002b50:	4a84      	ldr	r2, [pc, #528]	; (8002d64 <HAL_GPIO_Init+0x294>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d013      	beq.n	8002b7e <HAL_GPIO_Init+0xae>
          break;
 8002b56:	e02c      	b.n	8002bb2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	623b      	str	r3, [r7, #32]
          break;
 8002b5e:	e028      	b.n	8002bb2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	3304      	adds	r3, #4
 8002b66:	623b      	str	r3, [r7, #32]
          break;
 8002b68:	e023      	b.n	8002bb2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	3308      	adds	r3, #8
 8002b70:	623b      	str	r3, [r7, #32]
          break;
 8002b72:	e01e      	b.n	8002bb2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	330c      	adds	r3, #12
 8002b7a:	623b      	str	r3, [r7, #32]
          break;
 8002b7c:	e019      	b.n	8002bb2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d102      	bne.n	8002b8c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b86:	2304      	movs	r3, #4
 8002b88:	623b      	str	r3, [r7, #32]
          break;
 8002b8a:	e012      	b.n	8002bb2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d105      	bne.n	8002ba0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b94:	2308      	movs	r3, #8
 8002b96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69fa      	ldr	r2, [r7, #28]
 8002b9c:	611a      	str	r2, [r3, #16]
          break;
 8002b9e:	e008      	b.n	8002bb2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ba0:	2308      	movs	r3, #8
 8002ba2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69fa      	ldr	r2, [r7, #28]
 8002ba8:	615a      	str	r2, [r3, #20]
          break;
 8002baa:	e002      	b.n	8002bb2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bac:	2300      	movs	r3, #0
 8002bae:	623b      	str	r3, [r7, #32]
          break;
 8002bb0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	2bff      	cmp	r3, #255	; 0xff
 8002bb6:	d801      	bhi.n	8002bbc <HAL_GPIO_Init+0xec>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	e001      	b.n	8002bc0 <HAL_GPIO_Init+0xf0>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	2bff      	cmp	r3, #255	; 0xff
 8002bc6:	d802      	bhi.n	8002bce <HAL_GPIO_Init+0xfe>
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	e002      	b.n	8002bd4 <HAL_GPIO_Init+0x104>
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	3b08      	subs	r3, #8
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	210f      	movs	r1, #15
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	fa01 f303 	lsl.w	r3, r1, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	401a      	ands	r2, r3
 8002be6:	6a39      	ldr	r1, [r7, #32]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	fa01 f303 	lsl.w	r3, r1, r3
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 8096 	beq.w	8002d2e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c02:	4b59      	ldr	r3, [pc, #356]	; (8002d68 <HAL_GPIO_Init+0x298>)
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	4a58      	ldr	r2, [pc, #352]	; (8002d68 <HAL_GPIO_Init+0x298>)
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	6193      	str	r3, [r2, #24]
 8002c0e:	4b56      	ldr	r3, [pc, #344]	; (8002d68 <HAL_GPIO_Init+0x298>)
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c1a:	4a54      	ldr	r2, [pc, #336]	; (8002d6c <HAL_GPIO_Init+0x29c>)
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	089b      	lsrs	r3, r3, #2
 8002c20:	3302      	adds	r3, #2
 8002c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c26:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	220f      	movs	r2, #15
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a4b      	ldr	r2, [pc, #300]	; (8002d70 <HAL_GPIO_Init+0x2a0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d013      	beq.n	8002c6e <HAL_GPIO_Init+0x19e>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a4a      	ldr	r2, [pc, #296]	; (8002d74 <HAL_GPIO_Init+0x2a4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00d      	beq.n	8002c6a <HAL_GPIO_Init+0x19a>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a49      	ldr	r2, [pc, #292]	; (8002d78 <HAL_GPIO_Init+0x2a8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d007      	beq.n	8002c66 <HAL_GPIO_Init+0x196>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a48      	ldr	r2, [pc, #288]	; (8002d7c <HAL_GPIO_Init+0x2ac>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d101      	bne.n	8002c62 <HAL_GPIO_Init+0x192>
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e006      	b.n	8002c70 <HAL_GPIO_Init+0x1a0>
 8002c62:	2304      	movs	r3, #4
 8002c64:	e004      	b.n	8002c70 <HAL_GPIO_Init+0x1a0>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e002      	b.n	8002c70 <HAL_GPIO_Init+0x1a0>
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <HAL_GPIO_Init+0x1a0>
 8002c6e:	2300      	movs	r3, #0
 8002c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c72:	f002 0203 	and.w	r2, r2, #3
 8002c76:	0092      	lsls	r2, r2, #2
 8002c78:	4093      	lsls	r3, r2
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c80:	493a      	ldr	r1, [pc, #232]	; (8002d6c <HAL_GPIO_Init+0x29c>)
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	089b      	lsrs	r3, r3, #2
 8002c86:	3302      	adds	r3, #2
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d006      	beq.n	8002ca8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c9a:	4b39      	ldr	r3, [pc, #228]	; (8002d80 <HAL_GPIO_Init+0x2b0>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	4938      	ldr	r1, [pc, #224]	; (8002d80 <HAL_GPIO_Init+0x2b0>)
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	600b      	str	r3, [r1, #0]
 8002ca6:	e006      	b.n	8002cb6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ca8:	4b35      	ldr	r3, [pc, #212]	; (8002d80 <HAL_GPIO_Init+0x2b0>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	4933      	ldr	r1, [pc, #204]	; (8002d80 <HAL_GPIO_Init+0x2b0>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d006      	beq.n	8002cd0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cc2:	4b2f      	ldr	r3, [pc, #188]	; (8002d80 <HAL_GPIO_Init+0x2b0>)
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	492e      	ldr	r1, [pc, #184]	; (8002d80 <HAL_GPIO_Init+0x2b0>)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	604b      	str	r3, [r1, #4]
 8002cce:	e006      	b.n	8002cde <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cd0:	4b2b      	ldr	r3, [pc, #172]	; (8002d80 <HAL_GPIO_Init+0x2b0>)
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	4929      	ldr	r1, [pc, #164]	; (8002d80 <HAL_GPIO_Init+0x2b0>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d006      	beq.n	8002cf8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cea:	4b25      	ldr	r3, [pc, #148]	; (8002d80 <HAL_GPIO_Init+0x2b0>)
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	4924      	ldr	r1, [pc, #144]	; (8002d80 <HAL_GPIO_Init+0x2b0>)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	608b      	str	r3, [r1, #8]
 8002cf6:	e006      	b.n	8002d06 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cf8:	4b21      	ldr	r3, [pc, #132]	; (8002d80 <HAL_GPIO_Init+0x2b0>)
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	491f      	ldr	r1, [pc, #124]	; (8002d80 <HAL_GPIO_Init+0x2b0>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d006      	beq.n	8002d20 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d12:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <HAL_GPIO_Init+0x2b0>)
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	491a      	ldr	r1, [pc, #104]	; (8002d80 <HAL_GPIO_Init+0x2b0>)
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	60cb      	str	r3, [r1, #12]
 8002d1e:	e006      	b.n	8002d2e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d20:	4b17      	ldr	r3, [pc, #92]	; (8002d80 <HAL_GPIO_Init+0x2b0>)
 8002d22:	68da      	ldr	r2, [r3, #12]
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	43db      	mvns	r3, r3
 8002d28:	4915      	ldr	r1, [pc, #84]	; (8002d80 <HAL_GPIO_Init+0x2b0>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	3301      	adds	r3, #1
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f47f aed0 	bne.w	8002ae4 <HAL_GPIO_Init+0x14>
  }
}
 8002d44:	bf00      	nop
 8002d46:	372c      	adds	r7, #44	; 0x2c
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	10210000 	.word	0x10210000
 8002d54:	10110000 	.word	0x10110000
 8002d58:	10120000 	.word	0x10120000
 8002d5c:	10310000 	.word	0x10310000
 8002d60:	10320000 	.word	0x10320000
 8002d64:	10220000 	.word	0x10220000
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	40010000 	.word	0x40010000
 8002d70:	40010800 	.word	0x40010800
 8002d74:	40010c00 	.word	0x40010c00
 8002d78:	40011000 	.word	0x40011000
 8002d7c:	40011400 	.word	0x40011400
 8002d80:	40010400 	.word	0x40010400

08002d84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	887b      	ldrh	r3, [r7, #2]
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	73fb      	strb	r3, [r7, #15]
 8002da0:	e001      	b.n	8002da6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002da2:	2300      	movs	r3, #0
 8002da4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr

08002db2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	807b      	strh	r3, [r7, #2]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dc2:	787b      	ldrb	r3, [r7, #1]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dc8:	887a      	ldrh	r2, [r7, #2]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002dce:	e003      	b.n	8002dd8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dd0:	887b      	ldrh	r3, [r7, #2]
 8002dd2:	041a      	lsls	r2, r3, #16
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	611a      	str	r2, [r3, #16]
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr
	...

08002de4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e10f      	b.n	8003016 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fe fb18 	bl	8001440 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2224      	movs	r2, #36	; 0x24
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0201 	bic.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e28:	f001 fb40 	bl	80044ac <HAL_RCC_GetPCLK1Freq>
 8002e2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	4a7b      	ldr	r2, [pc, #492]	; (8003020 <HAL_I2C_Init+0x23c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d807      	bhi.n	8002e48 <HAL_I2C_Init+0x64>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4a7a      	ldr	r2, [pc, #488]	; (8003024 <HAL_I2C_Init+0x240>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	bf94      	ite	ls
 8002e40:	2301      	movls	r3, #1
 8002e42:	2300      	movhi	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	e006      	b.n	8002e56 <HAL_I2C_Init+0x72>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4a77      	ldr	r2, [pc, #476]	; (8003028 <HAL_I2C_Init+0x244>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	bf94      	ite	ls
 8002e50:	2301      	movls	r3, #1
 8002e52:	2300      	movhi	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e0db      	b.n	8003016 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4a72      	ldr	r2, [pc, #456]	; (800302c <HAL_I2C_Init+0x248>)
 8002e62:	fba2 2303 	umull	r2, r3, r2, r3
 8002e66:	0c9b      	lsrs	r3, r3, #18
 8002e68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	4a64      	ldr	r2, [pc, #400]	; (8003020 <HAL_I2C_Init+0x23c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d802      	bhi.n	8002e98 <HAL_I2C_Init+0xb4>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	3301      	adds	r3, #1
 8002e96:	e009      	b.n	8002eac <HAL_I2C_Init+0xc8>
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ea2:	4a63      	ldr	r2, [pc, #396]	; (8003030 <HAL_I2C_Init+0x24c>)
 8002ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea8:	099b      	lsrs	r3, r3, #6
 8002eaa:	3301      	adds	r3, #1
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6812      	ldr	r2, [r2, #0]
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ebe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	4956      	ldr	r1, [pc, #344]	; (8003020 <HAL_I2C_Init+0x23c>)
 8002ec8:	428b      	cmp	r3, r1
 8002eca:	d80d      	bhi.n	8002ee8 <HAL_I2C_Init+0x104>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1e59      	subs	r1, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eda:	3301      	adds	r3, #1
 8002edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	bf38      	it	cc
 8002ee4:	2304      	movcc	r3, #4
 8002ee6:	e04f      	b.n	8002f88 <HAL_I2C_Init+0x1a4>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d111      	bne.n	8002f14 <HAL_I2C_Init+0x130>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	1e58      	subs	r0, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6859      	ldr	r1, [r3, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	440b      	add	r3, r1
 8002efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f02:	3301      	adds	r3, #1
 8002f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bf0c      	ite	eq
 8002f0c:	2301      	moveq	r3, #1
 8002f0e:	2300      	movne	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	e012      	b.n	8002f3a <HAL_I2C_Init+0x156>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1e58      	subs	r0, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6859      	ldr	r1, [r3, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	0099      	lsls	r1, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_I2C_Init+0x15e>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e022      	b.n	8002f88 <HAL_I2C_Init+0x1a4>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10e      	bne.n	8002f68 <HAL_I2C_Init+0x184>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1e58      	subs	r0, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6859      	ldr	r1, [r3, #4]
 8002f52:	460b      	mov	r3, r1
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	440b      	add	r3, r1
 8002f58:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f66:	e00f      	b.n	8002f88 <HAL_I2C_Init+0x1a4>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	1e58      	subs	r0, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6859      	ldr	r1, [r3, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	0099      	lsls	r1, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f7e:	3301      	adds	r3, #1
 8002f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	6809      	ldr	r1, [r1, #0]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69da      	ldr	r2, [r3, #28]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6911      	ldr	r1, [r2, #16]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68d2      	ldr	r2, [r2, #12]
 8002fc2:	4311      	orrs	r1, r2
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6812      	ldr	r2, [r2, #0]
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695a      	ldr	r2, [r3, #20]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0201 	orr.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	000186a0 	.word	0x000186a0
 8003024:	001e847f 	.word	0x001e847f
 8003028:	003d08ff 	.word	0x003d08ff
 800302c:	431bde83 	.word	0x431bde83
 8003030:	10624dd3 	.word	0x10624dd3

08003034 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af02      	add	r7, sp, #8
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	4608      	mov	r0, r1
 800303e:	4611      	mov	r1, r2
 8003040:	461a      	mov	r2, r3
 8003042:	4603      	mov	r3, r0
 8003044:	817b      	strh	r3, [r7, #10]
 8003046:	460b      	mov	r3, r1
 8003048:	813b      	strh	r3, [r7, #8]
 800304a:	4613      	mov	r3, r2
 800304c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800304e:	f7ff fc2f 	bl	80028b0 <HAL_GetTick>
 8003052:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b20      	cmp	r3, #32
 800305e:	f040 80d9 	bne.w	8003214 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	2319      	movs	r3, #25
 8003068:	2201      	movs	r2, #1
 800306a:	496d      	ldr	r1, [pc, #436]	; (8003220 <HAL_I2C_Mem_Write+0x1ec>)
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 fc6b 	bl	8003948 <I2C_WaitOnFlagUntilTimeout>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003078:	2302      	movs	r3, #2
 800307a:	e0cc      	b.n	8003216 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003082:	2b01      	cmp	r3, #1
 8003084:	d101      	bne.n	800308a <HAL_I2C_Mem_Write+0x56>
 8003086:	2302      	movs	r3, #2
 8003088:	e0c5      	b.n	8003216 <HAL_I2C_Mem_Write+0x1e2>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b01      	cmp	r3, #1
 800309e:	d007      	beq.n	80030b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2221      	movs	r2, #33	; 0x21
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2240      	movs	r2, #64	; 0x40
 80030cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a3a      	ldr	r2, [r7, #32]
 80030da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4a4d      	ldr	r2, [pc, #308]	; (8003224 <HAL_I2C_Mem_Write+0x1f0>)
 80030f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030f2:	88f8      	ldrh	r0, [r7, #6]
 80030f4:	893a      	ldrh	r2, [r7, #8]
 80030f6:	8979      	ldrh	r1, [r7, #10]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	9301      	str	r3, [sp, #4]
 80030fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	4603      	mov	r3, r0
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 fac6 	bl	8003694 <I2C_RequestMemoryWrite>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d052      	beq.n	80031b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e081      	b.n	8003216 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 fcec 	bl	8003af4 <I2C_WaitOnTXEFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00d      	beq.n	800313e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	2b04      	cmp	r3, #4
 8003128:	d107      	bne.n	800313a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003138:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e06b      	b.n	8003216 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	781a      	ldrb	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003164:	b29b      	uxth	r3, r3
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b04      	cmp	r3, #4
 800317a:	d11b      	bne.n	80031b4 <HAL_I2C_Mem_Write+0x180>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003180:	2b00      	cmp	r3, #0
 8003182:	d017      	beq.n	80031b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	781a      	ldrb	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1aa      	bne.n	8003112 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 fcd8 	bl	8003b76 <I2C_WaitOnBTFFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00d      	beq.n	80031e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d107      	bne.n	80031e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e016      	b.n	8003216 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	e000      	b.n	8003216 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003214:	2302      	movs	r3, #2
  }
}
 8003216:	4618      	mov	r0, r3
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	00100002 	.word	0x00100002
 8003224:	ffff0000 	.word	0xffff0000

08003228 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08c      	sub	sp, #48	; 0x30
 800322c:	af02      	add	r7, sp, #8
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	4608      	mov	r0, r1
 8003232:	4611      	mov	r1, r2
 8003234:	461a      	mov	r2, r3
 8003236:	4603      	mov	r3, r0
 8003238:	817b      	strh	r3, [r7, #10]
 800323a:	460b      	mov	r3, r1
 800323c:	813b      	strh	r3, [r7, #8]
 800323e:	4613      	mov	r3, r2
 8003240:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003242:	f7ff fb35 	bl	80028b0 <HAL_GetTick>
 8003246:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b20      	cmp	r3, #32
 8003252:	f040 8218 	bne.w	8003686 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	2319      	movs	r3, #25
 800325c:	2201      	movs	r2, #1
 800325e:	4981      	ldr	r1, [pc, #516]	; (8003464 <HAL_I2C_Mem_Read+0x23c>)
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 fb71 	bl	8003948 <I2C_WaitOnFlagUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800326c:	2302      	movs	r3, #2
 800326e:	e20b      	b.n	8003688 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_I2C_Mem_Read+0x56>
 800327a:	2302      	movs	r3, #2
 800327c:	e204      	b.n	8003688 <HAL_I2C_Mem_Read+0x460>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b01      	cmp	r3, #1
 8003292:	d007      	beq.n	80032a4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0201 	orr.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2222      	movs	r2, #34	; 0x22
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2240      	movs	r2, #64	; 0x40
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80032d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4a61      	ldr	r2, [pc, #388]	; (8003468 <HAL_I2C_Mem_Read+0x240>)
 80032e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032e6:	88f8      	ldrh	r0, [r7, #6]
 80032e8:	893a      	ldrh	r2, [r7, #8]
 80032ea:	8979      	ldrh	r1, [r7, #10]
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	9301      	str	r3, [sp, #4]
 80032f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	4603      	mov	r3, r0
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 fa56 	bl	80037a8 <I2C_RequestMemoryRead>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e1c0      	b.n	8003688 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330a:	2b00      	cmp	r3, #0
 800330c:	d113      	bne.n	8003336 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800330e:	2300      	movs	r3, #0
 8003310:	623b      	str	r3, [r7, #32]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	623b      	str	r3, [r7, #32]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	623b      	str	r3, [r7, #32]
 8003322:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	e194      	b.n	8003660 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333a:	2b01      	cmp	r3, #1
 800333c:	d11d      	bne.n	800337a <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800334c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800334e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003350:	2300      	movs	r3, #0
 8003352:	61fb      	str	r3, [r7, #28]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	61fb      	str	r3, [r7, #28]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	61fb      	str	r3, [r7, #28]
 8003364:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003374:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003376:	b662      	cpsie	i
 8003378:	e172      	b.n	8003660 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337e:	2b02      	cmp	r3, #2
 8003380:	d11d      	bne.n	80033be <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003390:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003392:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003394:	2300      	movs	r3, #0
 8003396:	61bb      	str	r3, [r7, #24]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	61bb      	str	r3, [r7, #24]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	61bb      	str	r3, [r7, #24]
 80033a8:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033ba:	b662      	cpsie	i
 80033bc:	e150      	b.n	8003660 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033cc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	617b      	str	r3, [r7, #20]
 80033e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80033e4:	e13c      	b.n	8003660 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	f200 80f5 	bhi.w	80035da <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d123      	bne.n	8003440 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 fbfb 	bl	8003bf8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e13d      	b.n	8003688 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691a      	ldr	r2, [r3, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003434:	b29b      	uxth	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800343e:	e10f      	b.n	8003660 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003444:	2b02      	cmp	r3, #2
 8003446:	d150      	bne.n	80034ea <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344e:	2200      	movs	r2, #0
 8003450:	4906      	ldr	r1, [pc, #24]	; (800346c <HAL_I2C_Mem_Read+0x244>)
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 fa78 	bl	8003948 <I2C_WaitOnFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d008      	beq.n	8003470 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e112      	b.n	8003688 <HAL_I2C_Mem_Read+0x460>
 8003462:	bf00      	nop
 8003464:	00100002 	.word	0x00100002
 8003468:	ffff0000 	.word	0xffff0000
 800346c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003470:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003480:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80034b4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034e8:	e0ba      	b.n	8003660 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f0:	2200      	movs	r2, #0
 80034f2:	4967      	ldr	r1, [pc, #412]	; (8003690 <HAL_I2C_Mem_Read+0x468>)
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 fa27 	bl	8003948 <I2C_WaitOnFlagUntilTimeout>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0c1      	b.n	8003688 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003512:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003514:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003532:	3b01      	subs	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353e:	b29b      	uxth	r3, r3
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354e:	2200      	movs	r2, #0
 8003550:	494f      	ldr	r1, [pc, #316]	; (8003690 <HAL_I2C_Mem_Read+0x468>)
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f9f8 	bl	8003948 <I2C_WaitOnFlagUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e092      	b.n	8003688 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003570:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	691a      	ldr	r2, [r3, #16]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358e:	3b01      	subs	r3, #1
 8003590:	b29a      	uxth	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359a:	b29b      	uxth	r3, r3
 800359c:	3b01      	subs	r3, #1
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80035a4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035d8:	e042      	b.n	8003660 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 fb0a 	bl	8003bf8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e04c      	b.n	8003688 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360a:	3b01      	subs	r3, #1
 800360c:	b29a      	uxth	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003616:	b29b      	uxth	r3, r3
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	2b04      	cmp	r3, #4
 800362c:	d118      	bne.n	8003660 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364a:	3b01      	subs	r3, #1
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003656:	b29b      	uxth	r3, r3
 8003658:	3b01      	subs	r3, #1
 800365a:	b29a      	uxth	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003664:	2b00      	cmp	r3, #0
 8003666:	f47f aebe 	bne.w	80033e6 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	e000      	b.n	8003688 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8003686:	2302      	movs	r3, #2
  }
}
 8003688:	4618      	mov	r0, r3
 800368a:	3728      	adds	r7, #40	; 0x28
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	00010004 	.word	0x00010004

08003694 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af02      	add	r7, sp, #8
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	4608      	mov	r0, r1
 800369e:	4611      	mov	r1, r2
 80036a0:	461a      	mov	r2, r3
 80036a2:	4603      	mov	r3, r0
 80036a4:	817b      	strh	r3, [r7, #10]
 80036a6:	460b      	mov	r3, r1
 80036a8:	813b      	strh	r3, [r7, #8]
 80036aa:	4613      	mov	r3, r2
 80036ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f93c 	bl	8003948 <I2C_WaitOnFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e05f      	b.n	800379a <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036da:	897b      	ldrh	r3, [r7, #10]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	461a      	mov	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	6a3a      	ldr	r2, [r7, #32]
 80036ee:	492d      	ldr	r1, [pc, #180]	; (80037a4 <I2C_RequestMemoryWrite+0x110>)
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f980 	bl	80039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e04c      	b.n	800379a <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003718:	6a39      	ldr	r1, [r7, #32]
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 f9ea 	bl	8003af4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00d      	beq.n	8003742 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	2b04      	cmp	r3, #4
 800372c:	d107      	bne.n	800373e <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800373c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e02b      	b.n	800379a <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003742:	88fb      	ldrh	r3, [r7, #6]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d105      	bne.n	8003754 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003748:	893b      	ldrh	r3, [r7, #8]
 800374a:	b2da      	uxtb	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	611a      	str	r2, [r3, #16]
 8003752:	e021      	b.n	8003798 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003754:	893b      	ldrh	r3, [r7, #8]
 8003756:	0a1b      	lsrs	r3, r3, #8
 8003758:	b29b      	uxth	r3, r3
 800375a:	b2da      	uxtb	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003764:	6a39      	ldr	r1, [r7, #32]
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f9c4 	bl	8003af4 <I2C_WaitOnTXEFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00d      	beq.n	800378e <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	2b04      	cmp	r3, #4
 8003778:	d107      	bne.n	800378a <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003788:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e005      	b.n	800379a <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800378e:	893b      	ldrh	r3, [r7, #8]
 8003790:	b2da      	uxtb	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	00010002 	.word	0x00010002

080037a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	4608      	mov	r0, r1
 80037b2:	4611      	mov	r1, r2
 80037b4:	461a      	mov	r2, r3
 80037b6:	4603      	mov	r3, r0
 80037b8:	817b      	strh	r3, [r7, #10]
 80037ba:	460b      	mov	r3, r1
 80037bc:	813b      	strh	r3, [r7, #8]
 80037be:	4613      	mov	r3, r2
 80037c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 f8aa 	bl	8003948 <I2C_WaitOnFlagUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e09e      	b.n	800393c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037fe:	897b      	ldrh	r3, [r7, #10]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	461a      	mov	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800380c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	6a3a      	ldr	r2, [r7, #32]
 8003812:	494c      	ldr	r1, [pc, #304]	; (8003944 <I2C_RequestMemoryRead+0x19c>)
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f8ee 	bl	80039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e08b      	b.n	800393c <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800383a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383c:	6a39      	ldr	r1, [r7, #32]
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f958 	bl	8003af4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00d      	beq.n	8003866 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	2b04      	cmp	r3, #4
 8003850:	d107      	bne.n	8003862 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003860:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e06a      	b.n	800393c <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003866:	88fb      	ldrh	r3, [r7, #6]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d105      	bne.n	8003878 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800386c:	893b      	ldrh	r3, [r7, #8]
 800386e:	b2da      	uxtb	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	611a      	str	r2, [r3, #16]
 8003876:	e021      	b.n	80038bc <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003878:	893b      	ldrh	r3, [r7, #8]
 800387a:	0a1b      	lsrs	r3, r3, #8
 800387c:	b29b      	uxth	r3, r3
 800387e:	b2da      	uxtb	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003888:	6a39      	ldr	r1, [r7, #32]
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 f932 	bl	8003af4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00d      	beq.n	80038b2 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	2b04      	cmp	r3, #4
 800389c:	d107      	bne.n	80038ae <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e044      	b.n	800393c <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038b2:	893b      	ldrh	r3, [r7, #8]
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038be:	6a39      	ldr	r1, [r7, #32]
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f917 	bl	8003af4 <I2C_WaitOnTXEFlagUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00d      	beq.n	80038e8 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d107      	bne.n	80038e4 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e029      	b.n	800393c <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	2200      	movs	r2, #0
 8003900:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f81f 	bl	8003948 <I2C_WaitOnFlagUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e013      	b.n	800393c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003914:	897b      	ldrh	r3, [r7, #10]
 8003916:	b2db      	uxtb	r3, r3
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	b2da      	uxtb	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	6a3a      	ldr	r2, [r7, #32]
 8003928:	4906      	ldr	r1, [pc, #24]	; (8003944 <I2C_RequestMemoryRead+0x19c>)
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 f863 	bl	80039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	00010002 	.word	0x00010002

08003948 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	603b      	str	r3, [r7, #0]
 8003954:	4613      	mov	r3, r2
 8003956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003958:	e025      	b.n	80039a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003960:	d021      	beq.n	80039a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003962:	f7fe ffa5 	bl	80028b0 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d302      	bcc.n	8003978 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d116      	bne.n	80039a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2220      	movs	r2, #32
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	f043 0220 	orr.w	r2, r3, #32
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e023      	b.n	80039ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	0c1b      	lsrs	r3, r3, #16
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d10d      	bne.n	80039cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	43da      	mvns	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4013      	ands	r3, r2
 80039bc:	b29b      	uxth	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	bf0c      	ite	eq
 80039c2:	2301      	moveq	r3, #1
 80039c4:	2300      	movne	r3, #0
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	461a      	mov	r2, r3
 80039ca:	e00c      	b.n	80039e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	43da      	mvns	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	4013      	ands	r3, r2
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	bf0c      	ite	eq
 80039de:	2301      	moveq	r3, #1
 80039e0:	2300      	movne	r3, #0
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	461a      	mov	r2, r3
 80039e6:	79fb      	ldrb	r3, [r7, #7]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d0b6      	beq.n	800395a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	607a      	str	r2, [r7, #4]
 8003a02:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a04:	e051      	b.n	8003aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a14:	d123      	bne.n	8003a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a24:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a2e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	f043 0204 	orr.w	r2, r3, #4
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e046      	b.n	8003aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a64:	d021      	beq.n	8003aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a66:	f7fe ff23 	bl	80028b0 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d302      	bcc.n	8003a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d116      	bne.n	8003aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	f043 0220 	orr.w	r2, r3, #32
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e020      	b.n	8003aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	0c1b      	lsrs	r3, r3, #16
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d10c      	bne.n	8003ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	43da      	mvns	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	bf14      	ite	ne
 8003ac6:	2301      	movne	r3, #1
 8003ac8:	2300      	moveq	r3, #0
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	e00b      	b.n	8003ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	43da      	mvns	r2, r3
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	bf14      	ite	ne
 8003ae0:	2301      	movne	r3, #1
 8003ae2:	2300      	moveq	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d18d      	bne.n	8003a06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b00:	e02d      	b.n	8003b5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f8ce 	bl	8003ca4 <I2C_IsAcknowledgeFailed>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e02d      	b.n	8003b6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b18:	d021      	beq.n	8003b5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b1a:	f7fe fec9 	bl	80028b0 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d302      	bcc.n	8003b30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d116      	bne.n	8003b5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	f043 0220 	orr.w	r2, r3, #32
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e007      	b.n	8003b6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b68:	2b80      	cmp	r3, #128	; 0x80
 8003b6a:	d1ca      	bne.n	8003b02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b82:	e02d      	b.n	8003be0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f88d 	bl	8003ca4 <I2C_IsAcknowledgeFailed>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e02d      	b.n	8003bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b9a:	d021      	beq.n	8003be0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9c:	f7fe fe88 	bl	80028b0 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d302      	bcc.n	8003bb2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d116      	bne.n	8003be0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	f043 0220 	orr.w	r2, r3, #32
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e007      	b.n	8003bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d1ca      	bne.n	8003b84 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c04:	e042      	b.n	8003c8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	f003 0310 	and.w	r3, r3, #16
 8003c10:	2b10      	cmp	r3, #16
 8003c12:	d119      	bne.n	8003c48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f06f 0210 	mvn.w	r2, #16
 8003c1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e029      	b.n	8003c9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c48:	f7fe fe32 	bl	80028b0 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d302      	bcc.n	8003c5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d116      	bne.n	8003c8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	f043 0220 	orr.w	r2, r3, #32
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e007      	b.n	8003c9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c96:	2b40      	cmp	r3, #64	; 0x40
 8003c98:	d1b5      	bne.n	8003c06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cba:	d11b      	bne.n	8003cf4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	f043 0204 	orr.w	r2, r3, #4
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr

08003d00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e26c      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 8087 	beq.w	8003e2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d20:	4b92      	ldr	r3, [pc, #584]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 030c 	and.w	r3, r3, #12
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d00c      	beq.n	8003d46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d2c:	4b8f      	ldr	r3, [pc, #572]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 030c 	and.w	r3, r3, #12
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d112      	bne.n	8003d5e <HAL_RCC_OscConfig+0x5e>
 8003d38:	4b8c      	ldr	r3, [pc, #560]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d44:	d10b      	bne.n	8003d5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d46:	4b89      	ldr	r3, [pc, #548]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d06c      	beq.n	8003e2c <HAL_RCC_OscConfig+0x12c>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d168      	bne.n	8003e2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e246      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d66:	d106      	bne.n	8003d76 <HAL_RCC_OscConfig+0x76>
 8003d68:	4b80      	ldr	r3, [pc, #512]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a7f      	ldr	r2, [pc, #508]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	e02e      	b.n	8003dd4 <HAL_RCC_OscConfig+0xd4>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10c      	bne.n	8003d98 <HAL_RCC_OscConfig+0x98>
 8003d7e:	4b7b      	ldr	r3, [pc, #492]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a7a      	ldr	r2, [pc, #488]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	4b78      	ldr	r3, [pc, #480]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a77      	ldr	r2, [pc, #476]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003d90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	e01d      	b.n	8003dd4 <HAL_RCC_OscConfig+0xd4>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCC_OscConfig+0xbc>
 8003da2:	4b72      	ldr	r3, [pc, #456]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a71      	ldr	r2, [pc, #452]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	4b6f      	ldr	r3, [pc, #444]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a6e      	ldr	r2, [pc, #440]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	e00b      	b.n	8003dd4 <HAL_RCC_OscConfig+0xd4>
 8003dbc:	4b6b      	ldr	r3, [pc, #428]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a6a      	ldr	r2, [pc, #424]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	4b68      	ldr	r3, [pc, #416]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a67      	ldr	r2, [pc, #412]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d013      	beq.n	8003e04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ddc:	f7fe fd68 	bl	80028b0 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de4:	f7fe fd64 	bl	80028b0 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	; 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e1fa      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df6:	4b5d      	ldr	r3, [pc, #372]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0f0      	beq.n	8003de4 <HAL_RCC_OscConfig+0xe4>
 8003e02:	e014      	b.n	8003e2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e04:	f7fe fd54 	bl	80028b0 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e0c:	f7fe fd50 	bl	80028b0 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b64      	cmp	r3, #100	; 0x64
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e1e6      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e1e:	4b53      	ldr	r3, [pc, #332]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x10c>
 8003e2a:	e000      	b.n	8003e2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d063      	beq.n	8003f02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e3a:	4b4c      	ldr	r3, [pc, #304]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00b      	beq.n	8003e5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e46:	4b49      	ldr	r3, [pc, #292]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
 8003e4e:	2b08      	cmp	r3, #8
 8003e50:	d11c      	bne.n	8003e8c <HAL_RCC_OscConfig+0x18c>
 8003e52:	4b46      	ldr	r3, [pc, #280]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d116      	bne.n	8003e8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e5e:	4b43      	ldr	r3, [pc, #268]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d005      	beq.n	8003e76 <HAL_RCC_OscConfig+0x176>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d001      	beq.n	8003e76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e1ba      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e76:	4b3d      	ldr	r3, [pc, #244]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	4939      	ldr	r1, [pc, #228]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e8a:	e03a      	b.n	8003f02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d020      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e94:	4b36      	ldr	r3, [pc, #216]	; (8003f70 <HAL_RCC_OscConfig+0x270>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9a:	f7fe fd09 	bl	80028b0 <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ea2:	f7fe fd05 	bl	80028b0 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e19b      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb4:	4b2d      	ldr	r3, [pc, #180]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0f0      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec0:	4b2a      	ldr	r3, [pc, #168]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	4927      	ldr	r1, [pc, #156]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	600b      	str	r3, [r1, #0]
 8003ed4:	e015      	b.n	8003f02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ed6:	4b26      	ldr	r3, [pc, #152]	; (8003f70 <HAL_RCC_OscConfig+0x270>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003edc:	f7fe fce8 	bl	80028b0 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ee4:	f7fe fce4 	bl	80028b0 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e17a      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ef6:	4b1d      	ldr	r3, [pc, #116]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d03a      	beq.n	8003f84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d019      	beq.n	8003f4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f16:	4b17      	ldr	r3, [pc, #92]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003f18:	2201      	movs	r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f1c:	f7fe fcc8 	bl	80028b0 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f24:	f7fe fcc4 	bl	80028b0 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e15a      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f36:	4b0d      	ldr	r3, [pc, #52]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0f0      	beq.n	8003f24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f42:	2001      	movs	r0, #1
 8003f44:	f000 fac6 	bl	80044d4 <RCC_Delay>
 8003f48:	e01c      	b.n	8003f84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f4a:	4b0a      	ldr	r3, [pc, #40]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f50:	f7fe fcae 	bl	80028b0 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f56:	e00f      	b.n	8003f78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f58:	f7fe fcaa 	bl	80028b0 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d908      	bls.n	8003f78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e140      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
 8003f6a:	bf00      	nop
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	42420000 	.word	0x42420000
 8003f74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f78:	4b9e      	ldr	r3, [pc, #632]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1e9      	bne.n	8003f58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 80a6 	beq.w	80040de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f92:	2300      	movs	r3, #0
 8003f94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f96:	4b97      	ldr	r3, [pc, #604]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10d      	bne.n	8003fbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa2:	4b94      	ldr	r3, [pc, #592]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	4a93      	ldr	r2, [pc, #588]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8003fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fac:	61d3      	str	r3, [r2, #28]
 8003fae:	4b91      	ldr	r3, [pc, #580]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fbe:	4b8e      	ldr	r3, [pc, #568]	; (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d118      	bne.n	8003ffc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fca:	4b8b      	ldr	r3, [pc, #556]	; (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a8a      	ldr	r2, [pc, #552]	; (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 8003fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fd6:	f7fe fc6b 	bl	80028b0 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fde:	f7fe fc67 	bl	80028b0 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b64      	cmp	r3, #100	; 0x64
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e0fd      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff0:	4b81      	ldr	r3, [pc, #516]	; (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d106      	bne.n	8004012 <HAL_RCC_OscConfig+0x312>
 8004004:	4b7b      	ldr	r3, [pc, #492]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	4a7a      	ldr	r2, [pc, #488]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	6213      	str	r3, [r2, #32]
 8004010:	e02d      	b.n	800406e <HAL_RCC_OscConfig+0x36e>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10c      	bne.n	8004034 <HAL_RCC_OscConfig+0x334>
 800401a:	4b76      	ldr	r3, [pc, #472]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	4a75      	ldr	r2, [pc, #468]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8004020:	f023 0301 	bic.w	r3, r3, #1
 8004024:	6213      	str	r3, [r2, #32]
 8004026:	4b73      	ldr	r3, [pc, #460]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	4a72      	ldr	r2, [pc, #456]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 800402c:	f023 0304 	bic.w	r3, r3, #4
 8004030:	6213      	str	r3, [r2, #32]
 8004032:	e01c      	b.n	800406e <HAL_RCC_OscConfig+0x36e>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	2b05      	cmp	r3, #5
 800403a:	d10c      	bne.n	8004056 <HAL_RCC_OscConfig+0x356>
 800403c:	4b6d      	ldr	r3, [pc, #436]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	4a6c      	ldr	r2, [pc, #432]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8004042:	f043 0304 	orr.w	r3, r3, #4
 8004046:	6213      	str	r3, [r2, #32]
 8004048:	4b6a      	ldr	r3, [pc, #424]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	4a69      	ldr	r2, [pc, #420]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	6213      	str	r3, [r2, #32]
 8004054:	e00b      	b.n	800406e <HAL_RCC_OscConfig+0x36e>
 8004056:	4b67      	ldr	r3, [pc, #412]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	4a66      	ldr	r2, [pc, #408]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 800405c:	f023 0301 	bic.w	r3, r3, #1
 8004060:	6213      	str	r3, [r2, #32]
 8004062:	4b64      	ldr	r3, [pc, #400]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	4a63      	ldr	r2, [pc, #396]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8004068:	f023 0304 	bic.w	r3, r3, #4
 800406c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d015      	beq.n	80040a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004076:	f7fe fc1b 	bl	80028b0 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407c:	e00a      	b.n	8004094 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800407e:	f7fe fc17 	bl	80028b0 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	f241 3288 	movw	r2, #5000	; 0x1388
 800408c:	4293      	cmp	r3, r2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e0ab      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004094:	4b57      	ldr	r3, [pc, #348]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0ee      	beq.n	800407e <HAL_RCC_OscConfig+0x37e>
 80040a0:	e014      	b.n	80040cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040a2:	f7fe fc05 	bl	80028b0 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a8:	e00a      	b.n	80040c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040aa:	f7fe fc01 	bl	80028b0 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e095      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040c0:	4b4c      	ldr	r3, [pc, #304]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1ee      	bne.n	80040aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040cc:	7dfb      	ldrb	r3, [r7, #23]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d105      	bne.n	80040de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d2:	4b48      	ldr	r3, [pc, #288]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	4a47      	ldr	r2, [pc, #284]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 80040d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 8081 	beq.w	80041ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040e8:	4b42      	ldr	r3, [pc, #264]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f003 030c 	and.w	r3, r3, #12
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d061      	beq.n	80041b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d146      	bne.n	800418a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fc:	4b3f      	ldr	r3, [pc, #252]	; (80041fc <HAL_RCC_OscConfig+0x4fc>)
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004102:	f7fe fbd5 	bl	80028b0 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410a:	f7fe fbd1 	bl	80028b0 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e067      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800411c:	4b35      	ldr	r3, [pc, #212]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1f0      	bne.n	800410a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004130:	d108      	bne.n	8004144 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004132:	4b30      	ldr	r3, [pc, #192]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	492d      	ldr	r1, [pc, #180]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8004140:	4313      	orrs	r3, r2
 8004142:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004144:	4b2b      	ldr	r3, [pc, #172]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a19      	ldr	r1, [r3, #32]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	430b      	orrs	r3, r1
 8004156:	4927      	ldr	r1, [pc, #156]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8004158:	4313      	orrs	r3, r2
 800415a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800415c:	4b27      	ldr	r3, [pc, #156]	; (80041fc <HAL_RCC_OscConfig+0x4fc>)
 800415e:	2201      	movs	r2, #1
 8004160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004162:	f7fe fba5 	bl	80028b0 <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004168:	e008      	b.n	800417c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800416a:	f7fe fba1 	bl	80028b0 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e037      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800417c:	4b1d      	ldr	r3, [pc, #116]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0f0      	beq.n	800416a <HAL_RCC_OscConfig+0x46a>
 8004188:	e02f      	b.n	80041ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800418a:	4b1c      	ldr	r3, [pc, #112]	; (80041fc <HAL_RCC_OscConfig+0x4fc>)
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004190:	f7fe fb8e 	bl	80028b0 <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004198:	f7fe fb8a 	bl	80028b0 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e020      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041aa:	4b12      	ldr	r3, [pc, #72]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1f0      	bne.n	8004198 <HAL_RCC_OscConfig+0x498>
 80041b6:	e018      	b.n	80041ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d101      	bne.n	80041c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e013      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041c4:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d106      	bne.n	80041e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d001      	beq.n	80041ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40021000 	.word	0x40021000
 80041f8:	40007000 	.word	0x40007000
 80041fc:	42420060 	.word	0x42420060

08004200 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0d0      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004214:	4b6a      	ldr	r3, [pc, #424]	; (80043c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d910      	bls.n	8004244 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004222:	4b67      	ldr	r3, [pc, #412]	; (80043c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f023 0207 	bic.w	r2, r3, #7
 800422a:	4965      	ldr	r1, [pc, #404]	; (80043c0 <HAL_RCC_ClockConfig+0x1c0>)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	4313      	orrs	r3, r2
 8004230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004232:	4b63      	ldr	r3, [pc, #396]	; (80043c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d001      	beq.n	8004244 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0b8      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d020      	beq.n	8004292 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d005      	beq.n	8004268 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800425c:	4b59      	ldr	r3, [pc, #356]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	4a58      	ldr	r2, [pc, #352]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004262:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004266:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004274:	4b53      	ldr	r3, [pc, #332]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	4a52      	ldr	r2, [pc, #328]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 800427a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800427e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004280:	4b50      	ldr	r3, [pc, #320]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	494d      	ldr	r1, [pc, #308]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 800428e:	4313      	orrs	r3, r2
 8004290:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d040      	beq.n	8004320 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d107      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a6:	4b47      	ldr	r3, [pc, #284]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d115      	bne.n	80042de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e07f      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d107      	bne.n	80042ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042be:	4b41      	ldr	r3, [pc, #260]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d109      	bne.n	80042de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e073      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ce:	4b3d      	ldr	r3, [pc, #244]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e06b      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042de:	4b39      	ldr	r3, [pc, #228]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f023 0203 	bic.w	r2, r3, #3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	4936      	ldr	r1, [pc, #216]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042f0:	f7fe fade 	bl	80028b0 <HAL_GetTick>
 80042f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f6:	e00a      	b.n	800430e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042f8:	f7fe fada 	bl	80028b0 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	f241 3288 	movw	r2, #5000	; 0x1388
 8004306:	4293      	cmp	r3, r2
 8004308:	d901      	bls.n	800430e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e053      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430e:	4b2d      	ldr	r3, [pc, #180]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f003 020c 	and.w	r2, r3, #12
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	429a      	cmp	r2, r3
 800431e:	d1eb      	bne.n	80042f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004320:	4b27      	ldr	r3, [pc, #156]	; (80043c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d210      	bcs.n	8004350 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800432e:	4b24      	ldr	r3, [pc, #144]	; (80043c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f023 0207 	bic.w	r2, r3, #7
 8004336:	4922      	ldr	r1, [pc, #136]	; (80043c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	4313      	orrs	r3, r2
 800433c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800433e:	4b20      	ldr	r3, [pc, #128]	; (80043c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	429a      	cmp	r2, r3
 800434a:	d001      	beq.n	8004350 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e032      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b00      	cmp	r3, #0
 800435a:	d008      	beq.n	800436e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800435c:	4b19      	ldr	r3, [pc, #100]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	4916      	ldr	r1, [pc, #88]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 800436a:	4313      	orrs	r3, r2
 800436c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b00      	cmp	r3, #0
 8004378:	d009      	beq.n	800438e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800437a:	4b12      	ldr	r3, [pc, #72]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	490e      	ldr	r1, [pc, #56]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 800438a:	4313      	orrs	r3, r2
 800438c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800438e:	f000 f821 	bl	80043d4 <HAL_RCC_GetSysClockFreq>
 8004392:	4601      	mov	r1, r0
 8004394:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	091b      	lsrs	r3, r3, #4
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	4a0a      	ldr	r2, [pc, #40]	; (80043c8 <HAL_RCC_ClockConfig+0x1c8>)
 80043a0:	5cd3      	ldrb	r3, [r2, r3]
 80043a2:	fa21 f303 	lsr.w	r3, r1, r3
 80043a6:	4a09      	ldr	r2, [pc, #36]	; (80043cc <HAL_RCC_ClockConfig+0x1cc>)
 80043a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043aa:	4b09      	ldr	r3, [pc, #36]	; (80043d0 <HAL_RCC_ClockConfig+0x1d0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fe fa3c 	bl	800282c <HAL_InitTick>

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40022000 	.word	0x40022000
 80043c4:	40021000 	.word	0x40021000
 80043c8:	0800e308 	.word	0x0800e308
 80043cc:	20000298 	.word	0x20000298
 80043d0:	200002a4 	.word	0x200002a4

080043d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043d4:	b490      	push	{r4, r7}
 80043d6:	b08a      	sub	sp, #40	; 0x28
 80043d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80043da:	4b2a      	ldr	r3, [pc, #168]	; (8004484 <HAL_RCC_GetSysClockFreq+0xb0>)
 80043dc:	1d3c      	adds	r4, r7, #4
 80043de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80043e4:	4b28      	ldr	r3, [pc, #160]	; (8004488 <HAL_RCC_GetSysClockFreq+0xb4>)
 80043e6:	881b      	ldrh	r3, [r3, #0]
 80043e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	61fb      	str	r3, [r7, #28]
 80043ee:	2300      	movs	r3, #0
 80043f0:	61bb      	str	r3, [r7, #24]
 80043f2:	2300      	movs	r3, #0
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24
 80043f6:	2300      	movs	r3, #0
 80043f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043fe:	4b23      	ldr	r3, [pc, #140]	; (800448c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f003 030c 	and.w	r3, r3, #12
 800440a:	2b04      	cmp	r3, #4
 800440c:	d002      	beq.n	8004414 <HAL_RCC_GetSysClockFreq+0x40>
 800440e:	2b08      	cmp	r3, #8
 8004410:	d003      	beq.n	800441a <HAL_RCC_GetSysClockFreq+0x46>
 8004412:	e02d      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004414:	4b1e      	ldr	r3, [pc, #120]	; (8004490 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004416:	623b      	str	r3, [r7, #32]
      break;
 8004418:	e02d      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	0c9b      	lsrs	r3, r3, #18
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004426:	4413      	add	r3, r2
 8004428:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800442c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d013      	beq.n	8004460 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004438:	4b14      	ldr	r3, [pc, #80]	; (800448c <HAL_RCC_GetSysClockFreq+0xb8>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	0c5b      	lsrs	r3, r3, #17
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004446:	4413      	add	r3, r2
 8004448:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800444c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	4a0f      	ldr	r2, [pc, #60]	; (8004490 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004452:	fb02 f203 	mul.w	r2, r2, r3
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	fbb2 f3f3 	udiv	r3, r2, r3
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
 800445e:	e004      	b.n	800446a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	4a0c      	ldr	r2, [pc, #48]	; (8004494 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004464:	fb02 f303 	mul.w	r3, r2, r3
 8004468:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	623b      	str	r3, [r7, #32]
      break;
 800446e:	e002      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004470:	4b07      	ldr	r3, [pc, #28]	; (8004490 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004472:	623b      	str	r3, [r7, #32]
      break;
 8004474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004476:	6a3b      	ldr	r3, [r7, #32]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3728      	adds	r7, #40	; 0x28
 800447c:	46bd      	mov	sp, r7
 800447e:	bc90      	pop	{r4, r7}
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	08004598 	.word	0x08004598
 8004488:	080045a8 	.word	0x080045a8
 800448c:	40021000 	.word	0x40021000
 8004490:	007a1200 	.word	0x007a1200
 8004494:	003d0900 	.word	0x003d0900

08004498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800449c:	4b02      	ldr	r3, [pc, #8]	; (80044a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800449e:	681b      	ldr	r3, [r3, #0]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr
 80044a8:	20000298 	.word	0x20000298

080044ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044b0:	f7ff fff2 	bl	8004498 <HAL_RCC_GetHCLKFreq>
 80044b4:	4601      	mov	r1, r0
 80044b6:	4b05      	ldr	r3, [pc, #20]	; (80044cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	0a1b      	lsrs	r3, r3, #8
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	4a03      	ldr	r2, [pc, #12]	; (80044d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044c2:	5cd3      	ldrb	r3, [r2, r3]
 80044c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40021000 	.word	0x40021000
 80044d0:	0800e318 	.word	0x0800e318

080044d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80044dc:	4b0a      	ldr	r3, [pc, #40]	; (8004508 <RCC_Delay+0x34>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a0a      	ldr	r2, [pc, #40]	; (800450c <RCC_Delay+0x38>)
 80044e2:	fba2 2303 	umull	r2, r3, r2, r3
 80044e6:	0a5b      	lsrs	r3, r3, #9
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	fb02 f303 	mul.w	r3, r2, r3
 80044ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80044f0:	bf00      	nop
  }
  while (Delay --);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	1e5a      	subs	r2, r3, #1
 80044f6:	60fa      	str	r2, [r7, #12]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1f9      	bne.n	80044f0 <RCC_Delay+0x1c>
}
 80044fc:	bf00      	nop
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	bc80      	pop	{r7}
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	20000298 	.word	0x20000298
 800450c:	10624dd3 	.word	0x10624dd3

08004510 <__libc_init_array>:
 8004510:	b570      	push	{r4, r5, r6, lr}
 8004512:	2500      	movs	r5, #0
 8004514:	4e0c      	ldr	r6, [pc, #48]	; (8004548 <__libc_init_array+0x38>)
 8004516:	4c0d      	ldr	r4, [pc, #52]	; (800454c <__libc_init_array+0x3c>)
 8004518:	1ba4      	subs	r4, r4, r6
 800451a:	10a4      	asrs	r4, r4, #2
 800451c:	42a5      	cmp	r5, r4
 800451e:	d109      	bne.n	8004534 <__libc_init_array+0x24>
 8004520:	f000 f82e 	bl	8004580 <_init>
 8004524:	2500      	movs	r5, #0
 8004526:	4e0a      	ldr	r6, [pc, #40]	; (8004550 <__libc_init_array+0x40>)
 8004528:	4c0a      	ldr	r4, [pc, #40]	; (8004554 <__libc_init_array+0x44>)
 800452a:	1ba4      	subs	r4, r4, r6
 800452c:	10a4      	asrs	r4, r4, #2
 800452e:	42a5      	cmp	r5, r4
 8004530:	d105      	bne.n	800453e <__libc_init_array+0x2e>
 8004532:	bd70      	pop	{r4, r5, r6, pc}
 8004534:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004538:	4798      	blx	r3
 800453a:	3501      	adds	r5, #1
 800453c:	e7ee      	b.n	800451c <__libc_init_array+0xc>
 800453e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004542:	4798      	blx	r3
 8004544:	3501      	adds	r5, #1
 8004546:	e7f2      	b.n	800452e <__libc_init_array+0x1e>
 8004548:	0800eb80 	.word	0x0800eb80
 800454c:	0800eb80 	.word	0x0800eb80
 8004550:	0800eb80 	.word	0x0800eb80
 8004554:	0800eb88 	.word	0x0800eb88

08004558 <memcpy>:
 8004558:	b510      	push	{r4, lr}
 800455a:	1e43      	subs	r3, r0, #1
 800455c:	440a      	add	r2, r1
 800455e:	4291      	cmp	r1, r2
 8004560:	d100      	bne.n	8004564 <memcpy+0xc>
 8004562:	bd10      	pop	{r4, pc}
 8004564:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004568:	f803 4f01 	strb.w	r4, [r3, #1]!
 800456c:	e7f7      	b.n	800455e <memcpy+0x6>

0800456e <memset>:
 800456e:	4603      	mov	r3, r0
 8004570:	4402      	add	r2, r0
 8004572:	4293      	cmp	r3, r2
 8004574:	d100      	bne.n	8004578 <memset+0xa>
 8004576:	4770      	bx	lr
 8004578:	f803 1b01 	strb.w	r1, [r3], #1
 800457c:	e7f9      	b.n	8004572 <memset+0x4>
	...

08004580 <_init>:
 8004580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004582:	bf00      	nop
 8004584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004586:	bc08      	pop	{r3}
 8004588:	469e      	mov	lr, r3
 800458a:	4770      	bx	lr

0800458c <_fini>:
 800458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458e:	bf00      	nop
 8004590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004592:	bc08      	pop	{r3}
 8004594:	469e      	mov	lr, r3
 8004596:	4770      	bx	lr
